#!/bin/sh
:; #-*- mode: nendo; syntax: scheme -*-;;
:; exec /usr/local/bin/nendo $0 $*

(require "benchmark")
(.load   "./benchmark/ruby_benchmark_code.rb")
( load   "./benchmark/nendo_benchmark_code.nnd")


(if (VersionCheck.new.isJRuby)
    (require "jruby-prof")
    (require "ruby-prof"))

;; ------------------ macro --------------------
(define bench-task
  (macro (profile-flag title proc)
    `(begin
       (.puts ,title)
       (.puts Benchmark::CAPTION)
       ,(if profile-flag
            `(let* ((result (RubyProf.profile
                             (&block ()
                               ,proc)))
                    (printer (RubyProf::GraphPrinter.new result)))
               (printer.print STDOUT))
            `(.puts (Benchmark.measure
                     (&block ()
                       ,proc))))
       (.puts ""))))

(define ten-times
  (macro (expr)
    `(begin
       ,expr ,expr ,expr ,expr ,expr
       ,expr ,expr ,expr ,expr ,expr)))

(define hundled-times
  (macro (expr)
    `(begin
       (ten-times ,expr) (ten-times ,expr) (ten-times ,expr) (ten-times ,expr) (ten-times ,expr)
       (ten-times ,expr) (ten-times ,expr) (ten-times ,expr) (ten-times ,expr) (ten-times ,expr))))

;; -------------------- fact --------------------
(bench-task #f
            "fact (ruby version)"
            (printf " => %d\n" (RubyBenchmarkCode.new.fact 100)))

(bench-task #f
            "fact (nendo version)"
            (printf " => %d\n" (fact 100)))


;; -------------------- plus --------------------
(for-each
 (lambda (level)
   (set-optimize-level level)
   (printf " --- optimize level %d ---\n" level)
   (bench-task #f
               "+ 0arg (nendo version)"
               (printf " => %d\n" (hundled-times (plus0))))
   
   (bench-task #f
               "+ 1arg (nendo version)"
               (printf " => %d\n" (hundled-times (plus1))))
   
   (bench-task #f
               "+ 2arg (nendo version)"
               (printf " => %d\n" (hundled-times (plus2))))
   
   (bench-task #f
               "+ 3arg (nendo version)"
               (printf " => %d\n" (hundled-times (plus3)))))
 '(1 2))
(print "--------------------")

;; -------------------- tak --------------------
(bench-task #f
            "tak   (ruby version)"
            (printf " => %d\n" (RubyBenchmarkCode.new.tak  10 5 0)))

(bench-task #f
            "tak2  (ruby version)"
            (printf " => %d\n" (RubyBenchmarkCode.new.tak2 10 5 0)))

(bench-task #f
            "tak3  (ruby version)"
            (printf " => %d\n" (RubyBenchmarkCode.new.tak3 10 5 0)))

(bench-task #f
            "tak   (nendo version)"
            (printf " => %d\n" (tak 10 5 0)))

;; -------------------- higher-order --------------------
(let ([list10000 (range 10000)])

  (bench-task #f
            "for-each  10000 (nendo version)"
            (for-each
             (lambda (x) (+ 1 x))
             list10000))

  (bench-task #f
            "map       10000 (nendo version)"
            (map
             (lambda (x) (+ 1 x))
             list10000))

  (bench-task #f
            "filter    10000 (nendo version)"
            (filter
             (lambda (x) (if (< x 100) x false))
             list10000)))
               
;; ------------- higher-order for vector ----------------

(use nendo.experimental)

(let ([vec10000 (to-arr (range 10000)]])
  (bench-task #f
              "for-each  vector 10000 (nendo version)"
              (for-each
               (lambda (x) (+ 1 x))
               vec10000))

  (bench-task #f
              "map       vector 10000 (nendo version)"
              (map
               (lambda (x) (+ 1 x))
               vec10000))
  
  (bench-task #f
              "filter    vector 10000 (nendo version)"
              (filter
               (lambda (x) (if (< x 100) x false))
               vec10000))
  )

;;[EOF]
