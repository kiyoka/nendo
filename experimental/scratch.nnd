;;-*- mode: nendo; syntax: scheme -*-;;
;; -----------------
(enable-idebug)
(disable-idebug)
(exit)

(debug-print-length)
(debug-print-length 2000)

(define (macroexpand-2 sexp)
  (macroexpand-1
   (macroexpand-1 sexp)))

(define (macroexpand-3 sexp)
  (macroexpand-1
   (macroexpand-1
    (macroexpand-1 sexp))))

(define (macroexpand-4 sexp)
  (macroexpand-1
   (macroexpand-1
    (macroexpand-1
     (macroexpand-1 sexp)))))

(define (macroexpand-5 sexp)
  (macroexpand-1
   (macroexpand-1
    (macroexpand-1
     (macroexpand-1
      (macroexpand-1 sexp))))))


(define-syntax %guard-clause
  (syntax-rules (=> ...)
    ((%guard-clause (var clauses ...))
     (case var
       clauses ...))

(macroexpand-1
 (quote
  (%guard-clause (exc
                  (else (print "ELSE"))))))

(macroexpand-1
 (quote
  (%guard-clause (exc
                  ((exc.is_a? RuntimeError)
                   (print "<<RuntimeError>>"))
                  (else (print "ELSE"))))))
(macroexpand-1
 (quote
  (%guard-clause (exc
                  ((exc.is_a? RuntimeError)
                   (print "<<RuntimeError>>"))
                  (else
                   => (lambda (e)
                        (printf "Type is [%s]\n" e.class)))))))

(define-syntax guard
  (syntax-rules ()
    ((guard var-clauses body ...)
     (%guard
      (%guard-clause
       var-clauses)
      body ...))
    ((guard)
     (error "guard requires (guard (var (clauses-like-cond)) body)"))
    ((guard var)
     (error "guard requires (guard (var (clauses-like-cond)) body)"))
    ((guard var clauses)
     (error "guard requires (guard (var (clauses-like-cond)) body)"))))


;; error syntax
(macroexpand-1
 (quote
  (guard)))

(macroexpand-2
 (quote
  (guard
      (exc
       (else
        (print "other Type")))
    (print "body1"))))

(macroexpand-2
 (quote
  (guard
      (exc
       ((exc.is_a? RuntimeError)
        (print "<<RuntimeError>>"))
       (else
        (print "other Type")))
    (print "body1")
    (print "body2"))))

    

  
 







   
 






