;;-*- mode: nendo; syntax: scheme -*-;;
;; -----------------
(enable-idebug)
(disable-idebug)
(exit)

(debug-print-length)
(debug-print-length 2000)


(define let-syntax let)
(define letrec-syntax let)



(define-syntax set-100
  (syntax-rules ()
    ((_ x)
     (set! x 100))))

(syntax-rules ()
  ((_ x)
   (set! x 100)))


(define a "abc")
(set-100 a)


(define a "abc")
(let-syntax
    ((set-1000
      (syntax-rules ()
        ((_ x)
         (set! x 1000)))))
  (set-1000 a))



(begin
  (%temp-syntax set-1000 (rename1 rename2)
                (syntax-rules ()
                  ((_ x)
                   (set! x 1000))))
  (define (foo arg1)
    (%use-syntax (set-1000)
                 (set-1000 10))))


;; -------------------------------------------------------
;; let-syntax and letrec-syntax transformation
;; for Nendo macro system
(define (a-topleve-func arg1 arg2 ...)
  (let-syntax ((name1 (syntax-rules ...))
               (name2 (syntax-rules ...)))
    ... body1 ...
    (letrec-syntax ((name1 (syntax-rules ... ))
                    (name2 (syntax-rules ... )))
      ... body2 ...)))
;;
;; must be transformed:
;;
(define (a-toplevel-func arg1 arg2 ...)
  (%lexical-define-syntax ((name1 (syntax-rules ...)))
      (%lexical-define-syntax ((name2 (syntax-rules ...)))
          ... body1 ...
          (%lexcal-define-syntax ((name1 (syntax-rules ...))
                                  (name2 (syntax-rules ...)))
             ... body2 ...))))
;;
;; macroExpand in nendo.rb must be transform
;;   #<LispSyntax> is an instance of evaled (syntax-rules ...) expression
;;
(define (a-toplevel-func arg1 arg2 ...)
  (%lexical-define-syntax ((name1 . #<LispSyntax>))
      (%lexical-define-syntax ((name2 . #<LispSyntax>))
          ... body1 ...
          (%lexcal-define-syntax ((name1 . #<LispSyntax>)
                                  (name2 . #<LispSyntax>))
             ... body2 ...))))
;; -------------------------------------------------------




(eq? 'ok (let ()
           (let-syntax ()
             (define internal-def 'ok))
           internal-def))


(eq? 'ok (let ()
           (letrec-syntax ()
             (define internal-def 'ok))
           internal-def))


(define-syntax foo
  (syntax-rules aaa ()
                ((foo ... args aaa)
                 (args aaa ...))))

(foo 3 - 5)

(let-syntax
    ((foo (syntax-rules aaa ()
                        ((foo ... args aaa)
                         (args aaa ...)))))
  (foo 3 - 5))

(test '(5 4 1 2 3)
    (let-syntax
        ((foo (syntax-rules ()
                ((foo args ... penultimate ultimate)
                 (list ultimate penultimate args ...)))))
      (foo 1 2 3 4 5)))



