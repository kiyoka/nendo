;;-*- mode: nendo; syntax: scheme -*-
;;;
;;; yaml-test.nnd - test of yaml.nnd
;;;  
;;;   Copyright (c) 2015  Kiyoka Nishiyama  <kiyoka@sumibi.org>
;;;   
;;;   Redistribution and use in source and binary forms, with or without
;;;   modification, are permitted provided that the following conditions
;;;   are met:
;;;   
;;;   1. Redistributions of source code must retain the above copyright
;;;      notice, this list of conditions and the following disclaimer.
;;;  
;;;   2. Redistributions in binary form must reproduce the above copyright
;;;      notice, this list of conditions and the following disclaimer in the
;;;      documentation and/or other materials provided with the distribution.
;;;  
;;;   3. Neither the name of the authors nor the names of its contributors
;;;      may be used to endorse or promote products derived from this
;;;      software without specific prior written permission.
;;;  
;;;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;;;   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;;;   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;;;   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;;;   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;;;   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
;;;   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;;;   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;;;   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;;;   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;;;   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;;  
;;;  $Id: 
;;;
(use nendo.test)
(use rfc.yaml)

(test-start "yaml")

;;===================================================================

;;-------------------------------------------------------------------
(test-section "yaml parser")

(test* "string (1)"
       '#( "str" )
       (parse-yaml-string "- \"str\""))

(test* "string (2)"
       '#( "Ã" )
       (parse-yaml-string "- \"Ã\""))

(test* "string (3)"
       '#( "Ã" "€" )
       (parse-yaml-string "- \"\\u00c3\"
- \"\\u20ac\" "))

(test* "string (4)"
       '#(nil)
       (parse-yaml-string "- null"))

(test* "string (4)"
       '#(100)
       (parse-yaml-string "- 100"))

(test* "string (5)"
       '#(#t)
       (parse-yaml-string "- true"))

(test* "string (6)"
       '#(#f)
       (parse-yaml-string "- false"))


(test* "simple object (1)"
       #f
       (parse-yaml-string ""))
(test* "simple object (3)"
       '(("a" . 23))
       (parse-yaml-string "a: 23"))
(test* "simple object (4)"
       '(("a" . 23) ("b" . 45))
       (parse-yaml-string "a: 23
b: 45"))

(test* "arrays (1)"
       '#(1 2 3)
       (parse-yaml-string "
- 1
- 2
- 3
"))
(test* "arrays (2)"
       '#(1 #(2 3 4))
       (parse-yaml-string "
- 1
-
 - 2
 - 3
 - 4
"))
(test* "arrays (3)"
       '#(#(4)
          #(#(5) #(6)))
       (parse-yaml-string "
-
 - 4
-
 -
  - 5
 -
  - 6
"))


(define testdata-yaml-string "---
- a: 1
  b: 2
  c:
    c1: 10
    c2: 20
  d:
  - vec1
  - vec2
  - vec3
- 'true': true
  'false': false
  'null': 
")

(define testdata-lisp-object
  '#(
     (("a" . 1)
      ("b" . 2)
      ("c" . (
              ("c1" . 10)
              ("c2" . 20)))
      ("d" . #("vec1" "vec2" "vec3")))
     (("true"  . true)
      ("false" . false)
      ("null"  . nil))))


(test* "array and hash (1)"
       (write-to-string testdata-lisp-object)
       (write-to-string (parse-yaml-string testdata-yaml-string)))


(let1 sio (StringIO.new "
a: 23
b: 45
")
  (test* "write to IO"
         '(("a" . 23) ("b" . 45))
         (parse-yaml sio)))



;;-------------------------------------------------------------------
(test-section "yaml constructor")

(test* "string (1)" "---
- str
"
       (construct-yaml-string '#( "str" )))

(test* "arrays (1)" "---
- 1
- 2
- 3
"
       (construct-yaml-string '#(1 2 3)))
(test* "arrays (2)" "---
- []
- - []
  - []
"
       (construct-yaml-string '#(#() #(#() #()))))

(test* "simple object (1)" "---
a: 23
"
       (construct-yaml-string '(("a" . 23))))
(test* "simple object (2)" "---
a: 23
b: 45
"
       (construct-yaml-string '(("a" . 23) ("b" . 45))))

(test* "array and hash (3)"
       testdata-yaml-string
       (construct-yaml-string testdata-lisp-object))

(let1 sio (StringIO.new)
  (test* "write to IO" "---
a: 23
b: 45
"
         (begin
           (construct-yaml '(("a" . 23) ("b" . 45)) sio)
           (sio.rewind)
           (sio.read))))


;;===================================================================
(test-end)
