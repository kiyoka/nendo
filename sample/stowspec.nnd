;;-*- mode: nendo; syntax: scheme -*-;;

(define archive-file-pattern "([a-zA-Z].*)")
(define stow-home   (File.expand_path "~/stowspec"))
(define stow-target "/usr/local/stow")
(define stow-temp   "/tmp/stowspec")

;; `regex' is a string ( not a regex object )
;; returns ( $0-string  $1-string  $2-string  $3-string ... )
(define (regex-match regex str)
  (let1 matchdata ((. str match) regex)
    (if matchdata
        (matchdata.to_a.to_list)
        nil)))

;; test
;;(regex-match "^[a-z]+$" "abc")
;;(regex-match "^([a-z]+)([0-9]+)$" "abc123")


(define (exec-sh script)
  (let1 tmpfile "/tmp/go.sh"
    (with-open
     tmpfile
     (lambda (f)
       (f.puts script))
     "w")
    (print "---BEGIN---")
    (display script)
    (.system (+ "bash " tmpfile))
    (print "---END---")))


(define (display-help homedir)
  (for-each
   print
   `(
     "Usage:"
     ""
     )))


(define (get-envs)
  (let* ((pwd (Dir.pwd))
         (in-project
          (cond
           ((regex-match (+ "^" stow-home "/" archive-file-pattern "$") pwd)
            => second)
           (else
            nil))))
    `(
      (pwd         . ,pwd)                  ;; pwd
      (home        . ,(ENV.fetch "HOME"))   ;; "/home/xxxx/"
      (stow-home   . ,stow-home)            ;; "/home/xxxx/stowspec"
      (target      . ,stow-target)          ;; "/usr/local/stow"
      (temp        . ,stow-temp)            ;; "/tmp/stowspec"
      (project     . ,in-project)           ;; nil or "aaaa-1.2.3.tar.gz"
      )))


(define (get-placeinfo envs)
  (let1 pwd (assq-ref 'pwd  envs)
    (cond
     ((eq? pwd
           (assq-ref 'home envs))
      `(homedir . ,(assq-ref 'home envs)))
     ((eq? pwd
           (assq-ref 'stow-home envs))
      `(listdir . ,(assq-ref 'stow-home envs)))
     ((assq 'project envs)
      => (lambda (x)
           `(specdir . ,(cdr x))))
     (else
      nil))))
  

(define (gen-script workdir stowhome-path url filename projname spec)
  (let* (
         (projpath (+ stowhome-path "/" projname))
         (fetch (if url
                    (sprintf "wget -O %s/%s %s"      projpath filename url)
                    (sprintf "/bin/cp %s %s"         filename projpath))))
    `(
      (store . ,(string-join
                 (list
                  (sprintf "mkdir -p %s" projpath)
                  fetch
                  (sprintf "cd %s" projpath)
                  "")
                 "\n"))
      (build . ,(string-join
                 (list
                  (sprintf "/bin/rm -rf %s/%s" workdir projname)
                  (sprintf "mkdir -p %s" workdir)
                  (sprintf "/bin/cp -f %s %s" filename workdir)
                  (sprintf "cd %s" workdir)
                  (sprintf "tar zxf %s" filename)
                  (sprintf "cd ./%s"    projname)
                  (assq-ref 'conf       spec)
                  (assq-ref 'make       spec)
                  (assq-ref 'install    spec)
                  "")
                 "\n"))
      (stowspec . ,(string-join
                    (list
                     (sprintf "cd %s" projpath)
                     "stowspec"
                     "")
                    "\n"))
      )))



(define (action-by-place envs)
  (let1 placeinfo (get-placeinfo envs)
    (cond
     ((null? placeinfo)
      (display-help "placeinfo is null"))
     ((eq? 'specdir (car placeinfo))
      (let1 spec (with-open "./specfile"
                            (lambda (f)
                              (read f)))
        (if (not spec)
            (error "./specfile does not exist...")
            (exec-sh
             (assq-ref 'build (gen-script
                               (assq-ref 'temp envs)
                               (assq-ref 'stow-home envs)
                               nil
                               (assq-ref 'arc spec)
                               (assq-ref 'projname spec)
                               spec))))))
     ((eq? 'listdir (car placeinfo))
      (for-each
       print
       (filter
        (lambda (x)
          (when (not (x.match "^[.]"))
            (+ "cd "x)))
        (to-list (Dir.entries (cdr placeinfo))))))
     (else
      (display-help (cdr path))))))


(define (tgz-to-name tgz)
  (cond
   ((regex-match (+ "^.+[/]" archive-file-pattern "(.tar.gz|.tgz|.tar.bz2)$") tgz)
    => second)
   ((regex-match (+ "^"   archive-file-pattern "(.tar.gz|.tgz|.tar.bz2)$") tgz)
    => second)
   (else
    nil)))

;; test
(when true
  (list
   (tgz-to-name "abc-1.2.3.tar.gz")
   (tgz-to-name "abc-1.2.3.tar.bz2")
   (tgz-to-name "abc-1.2.3.tgz")
   (tgz-to-name "file.txt")
   (tgz-to-name "http://ftp.gnu.org/gnu/wget/wget-1.9.tar.gz")
   ))


(define (action-by-arg envs argv)
  (let* ((m1 (regex-match (+ "^http://.+/" archive-file-pattern "$") (car argv)))
         (m2 (regex-match (+ "^" archive-file-pattern "$") (car argv)))
         (url      (if m1 (car m1) nil))
         (filename (if m1 (second m1)
                       (if m2 (car m2) nil)))
         (projname (or (tgz-to-name filename) ""))
         (projpath (+ (assq-ref 'stow-home envs) "/" projname)))
    (if (or url filename)
        (let1 workdir (sprintf "%s/%s" (assq-ref 'temp envs) projname)
          (printf "url      = %s\n" url)
          (printf "filename = %s\n" filename)
          (printf "projname = %s\n" projname)
          (printf "workdir  = %s\n" workdir)
          (let* ((scripts  (gen-script workdir (assq-ref 'stow-home envs) url filename projname '()))
                 (specfile (+ projpath "/specfile")))
            (exec-sh (assq-ref 'store scripts))
            (printf "Info: specfile = %s\n" specfile)
            (printf "cd %s\n" projpath)
            (with-open specfile
                       (lambda (f)
                         (f.puts ";;-*- mode: scheme; syntax: scheme -*-;;")
                         (f.puts "(")
                         (for-each
                          (lambda (x)
                            (f.puts (+ " " (write-to-string x))))
                          `((conf      . ,(sprintf "./configure --prefix=%s/%s " (assq-ref 'target envs) projname))
                            (make      . "make")
                            (install   . "make install")
                            (arc       . ,filename)
                            (url       . ,url)
                                   (projname  . ,projname)))
                         (f.puts ")"))
                       "w")
            (exec-sh (assq-ref 'stowspec scripts))))
        (begin
          (print "Error: please specify url by argument.")
          (exit 1)))))
          
;; test
;;(action-by-arg '("a.tar.gz"))
;;(action-by-arg '("http://www.example.com/a.tar.gz"))

(define (main argv)
  (let1 envs (get-envs)
    (case (length argv)
      ((0)
       (action-by-place envs))
      (else
       (action-by-arg   envs argv)))))
  
(main (cdr ARGV.to_list))
