#!/usr/local/bin/nendo
;;-*- mode: nendo; syntax: scheme -*-;;

(define archive-file-pattern "([a-zA-Z].+)$")

;; Ruby's match conbinator
;; regex is a string data ( not a regex object )
;; call pred procedure with argument like ( $0-string  $1-string  $2-string  $3-string ... )
(define (with-match str regex pred)
  (let1 matchdata ((. str match) regex)
    (if matchdata
        (if pred
            (pred
             (matchdata.to_a.to_list))
            (matchdata.to_a.to_list))
        nil)))

(define (get-placeinfo pwd homedir)
  (let1 specdir (+ homedir "/stowspec")
    (let ((m1 (with-match pwd (+ specdir "$") nil))
          (m2 (with-match pwd (+ specdir "/" archive-file-pattern) nil)))
      (cond
       ((eq? pwd homedir)
        `(homedir ,homedir))
       (m1
        `(listdir ,(car m1)))
       (m2
        `(specdir ,(car m2) ,(cadr m2)))
       (else
        nil)))))
  
;; ( pwd . homedir )
(define (get-curpath)
  (cons
   (Dir.pwd)
   (ENV.fetch "HOME")))

(define (display-help homedir)
  (for-each
   print
   `(
     "Usage:"
     ""
     )))

(define (action-by-place)
  (let1 path (get-curpath)
    (let1 placeinfo (get-placeinfo (car path) (cdr path))
      (cond
       ((eq? 'specdir (car placeinfo))
        (build-action 
       ((eq? 'listdir (car placeinfo))
        (for-each
         print
         (filter
          (lambda (x)
            (when (not (x.match "^[.]"))
              x))
          (to-list (Dir.entries (cadr placeinfo))))))
       (else
        (display-help (cdr path)))))))


(define (build-action cur filename tmppath)
  ;; extract archive
  (let1 command (sprintf "tar zxf %s" filename)
    (.system (p command)))
  ;; check archive
  (let1 command "find . -name configure"
    (.system (p command)))

  ;; create specfile ( if needed )
  ;; configure
  ;; make
  ;; make install
  )

(define (action-by-arg argv)
  (let ((m1 (with-match (car argv) (+ "^http://.+/" archive-file-pattern) nil))
        (m2 (with-match (car argv) archive-file-pattern nil)))
    (let ((path     (get-curpath))
          (url      (if m1 (car m1) nil))
          (filename (if m1 (cadr m1) (car m2))))
      (printf "url      = %s\n" url)
      (printf "filename = %s\n" filename)
      (if url
          (error "Not implemented downloading feature.")
          (build-action (car path) filename "/tmp")))))

;;(action-by-arg '("a.tar.gz"))
;;(action-by-arg '("http://www.example.com/a.tar.gz"))

(define (main argv)
  (if (eq? 0 (length argv))
      (action-by-place)
      (action-by-arg argv)))
  
(main (cdr ARGV.to_list))

