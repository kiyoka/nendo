#!/bin/sh
true; #-*- mode: nendo; syntax: scheme -*-;;
true; exec /usr/local/bin/nendo $0 $*

;;#!/usr/local/bin/gosh
;;(use srfi-1)

(define debug-print-length 200)

(define sample0 0)

(define sample1
  '(define-internal toplevel
     (lambda ()
       (define-internal localfunc1
         (lambda (x) x))
       (define-internal localfunc2
         (lambda (x) x))
       (print (+ 1 2)))))
         

(define sample2
  '(define-internal toplevel
     (lambda ()
       (define-internal localfunc1
         (lambda (x)
           (define-internal localfunc1_1
             (lambda (x) (+ x 1)))
           (define-internal localvar1_2 12)
           (print "NEST x 2")))
       (define-internal localfunc2
         (lambda (x) x))
       (print "NEST x 1"))))

;; -----------------
;; compile: internal-defines to letrec
;; -----------------
(define (compile-to-letrec src)
  (cond
   ((not (list? src))
    src)
   (else
    (let1 body (cddr src)
      #?=body
      (if (not (list? (car body)))
          src
          (let ((defs
                  (filter
                   (lambda (x)
                     (eq? 'define-internal (car x)))
                   body))
                (rest
                 (filter
                  (lambda (x)
                    (not (eq? 'define-internal (car x))))
                  body)))
            (if (< 0 (length defs))
                `(lambda
                     ,(cadr src)
                   (letrec
                       ,(map
                         (lambda (x)
                           (list
                            (cadr x)
                            (compile-to-letrec #?=(caddr x))))
                         defs)
                     ,(car rest)))
                ;; found no `define-internal' form
                src)))))))


(define (find-lambda sexp)
  #?=sexp
  (cond
   ((null? sexp)
    '())
   ((not (pair? sexp))
    sexp)
   ((pair? sexp)
    (if (eq? 'lambda (car sexp))
        (compile-to-letrec sexp)
        (cons
         (find-lambda (car sexp))
         (find-lambda (cdr sexp)))))))


(pretty-print
 (find-lambda sample2))

;; end
