;;-*- mode: nendo; syntax: scheme -*-;;

;; -----------------
(enable-idebug)
(disable-idebug)
(exit)

(define (func x)
  (print x))

(cond
 ((eq? 1 1)
  (print 1))
 (else
  (print 2)))

(define sample0 0)

(define sample1
  '(define-internal toplevel
     (lambda ()
       (define-internal localfunc1
         (lambda (x) x))
       (define-internal localfunc2
         (lambda (x) x)))))
         

(define sample2
  '(define (toplevel)
     (define a 1)
     (define (localfunc (x))
       x)
     (print (localfunc 100))))


;; -----------------
;; compile: internal-defines to letrec
;; -----------------
(define (compile-to-letrec sexp)
  #?=sexp
  )

(define (find-lambda sexp level)
  (cond
   ((null? sexp)
    '())
   ((not (pair? sexp))
    sexp)
   ((pair? sexp)
    (if (eq? 'lambda (car sexp))
        (begin
          #?=sexp
          (if (= 0 level)
              (list
               'lambda
               (cadr sexp)
               (find-lambda (cddr sexp) (+ level 1)))
              (list
               'lambda
               (cadr sexp)
               (compile-to-letrec (cddr sexp))))))
    (cons
     (find-lambda (car sexp) level)
     (find-lambda (cdr sexp) level)))))

(find-lambda sample1 0)

;; -----------------
;; customizing debug-print
;; -----------------
(define string-buffer "")
(define (debug-print-output-func str)
  (set! string-buffer (+ string-buffer str))
  (print string-buffer))

(begin
  #?=1)

