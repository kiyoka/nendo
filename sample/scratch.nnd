;;-*- mode: nendo; syntax: scheme -*-;;

;; -----------------
(enable-idebug)

;; -----------------
;; compile: named let
;; -----------------
(define let
  (macro lst
    (if (symbol? (car lst))
        ;; named let
        `(letrec ((,(first lst)
                   (lambda ,(map
                             (lambda (x)
                               (first x))
                             (second lst))
                     ,(third lst))))
           (,(first lst)
            ,@(map
               (lambda (x)
                 (second x))
               (second lst))))
           
        ;; don't touch
        `(let ,@lst))))

(pretty-print
 (macroexpand
  '
  (let1 total 0
    (let loop ((cnt 10))
      (if (< 0 cnt)
          (begin
            (set! total (+ total cnt))
            (loop (- cnt 1)))))
    total)))

(let label ((a 2)
            (b 3))
  (if (<= 9 (+ a b))
      (* a b)
      (label 4 5)))
  
(apply + (range 11))
(apply + '("a" "b" "c"))
(let1 a (car (range 1))
  a.class)

(let ((a 2)
      (b 4))
  (begin
    (list (+ a b)
          (* a b))))


;; -----------------
;; customizing debug-print
;; -----------------
(define string-buffer "")
(define (debug-print-output-func str)
  (set! string-buffer (+ string-buffer str))
  (print string-buffer))

(begin
  #?=1)

