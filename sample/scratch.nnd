;;-*- mode: nendo; syntax: scheme -*-;;

;; -----------------
(begin
  (enable-idebug)
  (define debug-print-length 120))

(macroexpand '
 (let1 v
     (map
      (lambda (x) x)
      '(1 2 3))
   v))

(macroexpand '
 (cond ((- 10 9) => (lambda (x) (+ "<" (to_s x) ">"))) (else 2)))


(define lambda
  (macro src
    (cond
     ((not (list? (cadr src)))
      `(lambda ,@src))
     (else
      (let1 body (cdr src)
        (if (not (list? (car body)))
            src
            (let ((defs
                    (filter
                     (lambda (x)
                       (eq? 'define (car x)))
                     body))
                  (rest
                   (filter
                    (lambda (x)
                      (not (eq? 'define (car x))))
                    body)))
              (if (< 0 (length defs))
                  `(lambda
                       ,(car src)
                     (letrec
                         ,(map
                           (lambda (x)
                             (list
                              (cadr x)
                              (caddr x)))
                           defs)
                       ,@rest))
                  ;; found no `define-internal' form
                  `(lambda ,@src)))))))))

(macroexpand-1
 '(lambda (x) x))

(pretty-print
 (macroexpand-1
  '(lambda
       (x)
     (define a (lambda (aa) aa))
     (define b (lambda (bb) bb))
     (define c 3)
     (print a)
     (print b))))

(pretty-print
 (macroexpand-1
  '(lambda
       (x)
     (print a)
     (print b))))


  
    
        


;; -----------------
;; customizing debug-print
;; -----------------
(define string-buffer "")
(define (debug-print-output-func str)
  (set! string-buffer (+ string-buffer str))
  (print string-buffer))

(begin
  #?=1)

