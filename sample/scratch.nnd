;;-*- mode: nendo; syntax: scheme -*-;;

;; -----------------
(enable-idebug)
(define debug-print-length 120)

(define lambda-func
  (lambda src
    #?=src
    (cond
     ((not (list? (cadr src)))
      `(lambda ,@src))
     (else
      (let1 body (cdr src)
        #?=body
        (if (not (list? (car body)))
            src
            (let ((defs
                    (filter
                     (lambda (x)
                       (eq? 'define (car x)))
                     body))
                  (rest
                   (filter
                    (lambda (x)
                      (not (eq? 'define (car x))))
                    body)))
              (if (< 0 (length defs))
                  `(lambda
                       ,(car src)
                     (letrec
                         ,(map
                           (lambda (x)
                             (list
                              (cadr x)
                              (caddr x)))
                           defs)
                       ,@rest))
                  ;; found no `define-internal' form
                  `(lambda ,@src)))))))))

(lambda-func
 '(x) 'x)

(pretty-print
 (lambda-func
  '(x)
  '(define a (lambda (aa) aa))
  '(define b (lambda (bb) bb))
  '(define c 3)
  '(print a)
  '(print b)))

(pretty-print
 (lambda-func
  '(x)
  '(print a)
  '(print b)))


  
    
        


;; -----------------
;; customizing debug-print
;; -----------------
(define string-buffer "")
(define (debug-print-output-func str)
  (set! string-buffer (+ string-buffer str))
  (print string-buffer))

(begin
  #?=1)

