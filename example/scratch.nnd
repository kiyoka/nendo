;;-*- mode: nendo; syntax: scheme -*-;;
;; -----------------
(enable-idebug)
(disable-idebug)
(define debug-print-length 256)



(define (exist-tailcall? sexp)
  (cond
   ((not (list? sexp))
    #f)
   (else
    (let1 last (car (last-pair sexp))
      (cond
       ((pair? last)
        (symbol? (car last)))
       (else
        #f))))))

(define (setup-tailcall-mark sexp)
  (if (exist-tailcall? sexp)
      (let* ((r (reverse sexp))
             (last (car r))
             (head (cdr r)))
        (reverse
         (cons
          `(%tailcall ,last)
          head)))
      sexp))

(define (search-tailcall sexp)
  (cond
   ((null? sexp)
    '())
   ((list? sexp)
    (case (car sexp)
      (('quote)
       sexp)
      (('if)
       (setup-tailcall-mark (second sexp))
       (setup-tailcall-mark (third sexp)))
      (('begin)
       `(begin
          ,@(setup-tailcall-mark (cdr sexp))))
      (('lambda)
       `(lambda
            ,(cadr sexp)
          ,@(setup-tailcall-mark (cddr sexp))))
      (else
       sexp)))))


(pretty-print
 (search-tailcall
  '(begin
     1
     2
     (print "abc")
     3)))

(pretty-print
 (search-tailcall
  '(begin
     1
     2
     (print "abc"))))

(search-tailcall
 (macroexpand
  '(begin
     (print "abc")
     1
     2)))

(search-tailcall
 (macroexpand
  '(lambda (x)
     1
     2
     (print "abc"))))

(search-tailcall
 (macroexpand
  '(lambda (x)
     1
     2
     (if #t
         (begin (print "abc"))
         (begin (print "ABC"))))))




