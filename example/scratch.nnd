;;-*- mode: nendo; syntax: scheme -*-;;
;; -----------------
(enable-idebug)
(disable-idebug)
(define debug-print-length 2000)


;; chibi-scheme-0.3
(when #f
  (define er-macro-transformer
    (lambda (f)
      (lambda (expr use-env mac-env)
        ((lambda (rename compare) (f expr rename compare))
         ((lambda (renames)
            (lambda (identifier)
              ((lambda (cell)
                 (if cell
                     (cdr cell)
                     ((lambda (name)
                        (set! renames (cons (cons identifier name) renames))
                        name)
                      (make-syntactic-closure mac-env '() identifier))))
               (assq identifier renames))))
          '())
         (lambda (x y) (identifier=? use-env x use-env y)))))))
  

;; readable code for nendo.
(define er-macro-transformer
  (lambda (f)
    (lambda (expr use-env mac-env)
      
      (define (expander-main rename compare)
        #?="_expander-main"
        (f expr rename compare))
      
      (define (_rename renames)
        (lambda (identifier)
          #?=identifier
          (let ([cell (assq identifier renames)])
            (if cell
                (cdr cell)
                ((lambda (name)
                   (set! renames (cons (cons identifier name) renames))
                   name)
                 (make-syntactic-closure mac-env '() identifier))))))
      
      (define (_compare x y)
        #?="_compare"
        (identifier=? use-env x use-env y))
      
      #?="expander-main"
      (expander-main
       (_rename '())
       _compare))))
  

(define my-and
  (er-macro-transformer
   (lambda (expr rename compare)
     #?="my-and"
     (cond ((null? #?=(cdr expr)))
           ((null? #?=(cddr expr)) (cadr expr))
           (else (list (rename 'if) (cadr expr)
                       (cons (rename 'and) (cddr expr))
                       #f))))))




(define %define-renamed-symbols
  (macro lst
    (define (define-iter _lst)
      (case (length _lst)
        ((0)
         '())
        (else
         (let ([_to   (string->symbol
                       (+ "/nendo/macroenv/" (symbol->string (car _lst))))]
               [_from (car _lst)])
           (cons `(define ,_to ,_from)
                 (define-iter (cdr _lst)))))))
    `(begin
       ,@(define-iter lst)
       (define %macro-env-snapshot
         (list ,@(map
                  (lambda (x)
                    (let ([_to   (second x)]
                          [_from (third  x)])
                      `(list ,(symbol->string _from)
                             ,(symbol->string _to)
                             ,_to)))
                  (define-iter lst)))))))
  
(define define-all-renamed-symbols
  (macro ()
    `(%define-renamed-symbols ,@(global-variables))))


(pretty-print
 (macroexpand
  '(define-all-renamed-symbols)))
 
(define-all-renamed-symbols)


(my-and
 '(my-and 1 2)
 '()
 %macro-env-snapshot)

