;;-*- mode: nendo; syntax: scheme -*-;;
;; -----------------
(enable-idebug)
(disable-idebug)
(define debug-print-length 256)



(define (setup-tailcall-mark sexp)
  (define reserved '(quote begin lambda if let letrec))

  (define (setup-let-args args)
    (map
     (lambda (arg)
       (let ((name (first  arg))
             (body (second arg)))
         (list name
               (setup-tailcall-mark body))))
     args))

  (cond
   ((not (pair? sexp))
    sexp)
   ((null? sexp)
    '())
   ((list? sexp)
    (case (car sexp)
      (('quote)
       sexp)
      (('begin)
       `(begin
          ,@(setup-tailcall-mark (cdr sexp))))
      (('lambda)
       `(lambda
            ,(second sexp)
          ,@(setup-tailcall-mark (cddr sexp))))
      (('if)
       (case (length sexp)
         ((3)
          `(if
            ,(second sexp)
            ,(setup-tailcall-mark (third  sexp))))
         ((4)
          `(if
            ,(second sexp)
            ,(setup-tailcall-mark (third sexp))
            ,(setup-tailcall-mark (fourth sexp))))))
      (('let)
       `(let
            ,(setup-let-args (second sexp))
          ,@(setup-tailcall-mark (cddr sexp))))
      (('letrec)
       `(letrec
            ,(setup-let-args (second sexp))
          ,@(setup-tailcall-mark (cddr sexp))))
      (else
       (let* ((r (reverse sexp))
              (last  (car r))
              (other (cdr r)))
         (if (not (pair? last))
             sexp
             (reverse
              (cons
               (if (memq (car last) reserved)
                   ;; recursive
                   (setup-tailcall-mark last)
                   ;; this is the tailcall!
                   `(%tailcall ,last))
               other)))))))
   (else
    sexp)))


(pretty-print
 (setup-tailcall-mark
  '(begin
     1
     2
     (print "abc")
     3)))

(pretty-print
 (setup-tailcall-mark
  '(begin
     1
     2
     (print "abc"))))

(setup-tailcall-mark
 (macroexpand
  '(begin
     (print "abc")
     1
     2)))

(setup-tailcall-mark
 (macroexpand
  '(lambda '(x)
     1
     2
     (print "abc"))))

(setup-tailcall-mark
 (macroexpand
  '(lambda (x)
     1
     2
     (if #t
         (begin 1 2 (print "abc"))
         (begin 1 2 (print "ABC"))))))


(setup-tailcall-mark
 (macroexpand
  '(define (foo)
     (foo))))

(setup-tailcall-mark
 (macroexpand
  '(let loop ((x 1))
     1
     2
     (loop 100))))

(setup-tailcall-mark
 (macroexpand
  '(cond (false  1) (false  2)))
 )

(setup-tailcall-mark
 (macroexpand
  '(if #f () ()))
 )
