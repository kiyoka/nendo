#!/bin/sh
:; #-*- mode: nendo; syntax: scheme -*-;;
:; exec /usr/local/bin/nendo $0 $*
;; -*- coding: utf-8 -*-
;;
;; 問題の説明:
;;   http://nabetani.sakura.ne.jp/hena/ord7selectchair/
;;   「のんびり座りたい 」 問題
;;   [input]      [output]
;;   1:Aa 	-
;;   2:AB 	AB
;;   2:AaB 	B-
;;   2:AZa 	-Z
;;    .
;;    .
;;    .
;;
;; 実行方法:
;;   gem install nendo
;;   nendo ./seating.nnd
;;
(use srfi-1)
(use nendo.test)

;; 座りたい席の周辺がどれくらい空いているか レベルが高いほどゆったり
(define (get-empty-level left here right)
  (if (not (= "-" here))
      0
      (+
       (if (or
            (= "-" left)
            (= "#" left))
           1
           0)
       (if (= "-" here)
           1
           0)
       (if (or
            (= "-" right)
            (= "#" right))
           1
           0))))

  
;; ３つのリストを生成して隣りをチェックする
;;  ("#" "-" "-" "-" "-")  ; left
;;  ("-" "-" "-" "-")      ; here
;;  ("-" "-" "-" "#")      ; right
(define (get-empty-level-list chair-list)
  (let ([left  (cons "#" chair-list)]
        [right (reverse (cons "#" (reverse (cdr chair-list))))])
    (map
     (lambda (a b c)
       (get-empty-level a b c))
     left
     chair-list
     right)))


(define (sit person seats)
  (let* ([chair-list (to-list (seats.split ""))]
         [empty-level-list (get-empty-level-list chair-list)]
         [max-level (car (reverse (sort empty-level-list)))]
         [result '()])
    (for-each
     (lambda (level chair)
       (if (= level max-level)
           (begin
            (set! max-level -1)
            (push! result person))
           (push! result chair)))
     empty-level-list
     chair-list)
    (string-join (reverse result) "")))


(define (leave person seats)
  (seats.sub person.upcase "-"))


(define (seating input)
  (let* ([lst (to-list (input.split ":"))]
         [chairs (to-i (first lst))]
         [series (second lst)])
    (let ([seats (. (make-vector chairs "-") join)])
      (for-each
       (lambda (person)
         ;;(printf "info: %s %s\n" person seats)
         (set! seats 
               (if (person.match #/[a-z]/)
                   (leave person seats)
                   (sit   person seats))))
       (series.split ""))
      seats)))


    
;;===================================================================
(test-start "seating")

(test* "get-empty-level 1"  3
       (get-empty-level "-" "-" "-"))
(test* "get-empty-level 2"  2
       (get-empty-level "A" "-" "-"))
(test* "get-empty-level 3"  1
       (get-empty-level "A" "-" "B"))
(test* "get-empty-level 4"  0
       (get-empty-level "A" "B" "C"))
(test* "get-empty-level 5"  3
       (get-empty-level "#" "-" "-"))
(test* "get-empty-level 6"  3
       (get-empty-level "#" "-" "#"))
(test* "get-empty-level 7"  0
       (get-empty-level "-" "D" "-"))

(test* "get-empty-level-list 1" '(3 3 3)
       (get-empty-level-list '("-" "-" "-")))
(test* "get-empty-level-list 2" '(3 3 3 3)
       (get-empty-level-list '("-" "-" "-" "-")))
(test* "get-empty-level-list 3" '(0 2 3 3)
       (get-empty-level-list '("A" "-" "-" "-")))
(test* "get-empty-level-list 4" '(0 1 0)
       (get-empty-level-list '("A" "-" "B")))
(test* "get-empty-level-list 5" '(0 0 0)
       (get-empty-level-list '("A" "B" "C")))

(test* "sit 1" "A--"
       (sit "A" "---"))
(test* "sit 2" "A-B"
       (sit "B" "A--"))
(test* "sit 3" "ACB"
       (sit "C" "A-B"))
(test* "sit 4" "ABC-Z-DEF"
       (sit "Z" "ABC---DEF"))

(test* "leave 1" "-"
       (leave "a" "A"))
(test* "leave 2" "A--"
       (leave "b" "AB-"))
(test* "leave 3" "-BC"
       (leave "a" "ABC"))
(test* "leave 4" "A-C"
       (leave "b" "ABC"))
(test* "leave 5" "AB-"
       (leave "c" "ABC"))

(test* "input 1:A"  "A"
       (seating "1:A"))
(test* "input 2:AB"  "AB"
       (seating "2:AB"))
(test* "input 2:AaB"  "B-"
       (seating "2:AaB"))
(test* "input 2:AZa" "-Z"
       (seating "2:AZa"))
(test* "input 2:AZz"  "A-"
       (seating "2:AZz"))
(test* "input 3:ABC"  "ACB"
       (seating "3:ABC"))
(test* "input 3:ABCa"  "-CB"
       (seating "3:ABCa"))
(test* "input 4:ABCD"  "ADBC"
       (seating "4:ABCD"))
(test* "input 4:ABCbBD"  "ABDC"
       (seating "4:ABCbBD"))
(test* "input 4:ABCDabcA"  "-D-A"
       (seating "4:ABCDabcA"))
(test* "input 5:NEXUS"  "NUESX"
       (seating "5:NEXUS"))
(test* "input 5:ZYQMyqY"  "ZM-Y-"
       (seating "5:ZYQMyqY"))
(test* "input 5:ABCDbdXYc"  "AYX--"
       (seating "5:ABCDbdXYc"))
(test* "input 6:FUTSAL"  "FAULTS"
       (seating "6:FUTSAL"))
(test* "input 6:ABCDEbcBC"  "AECB-D"
       (seating "6:ABCDEbcBC"))
(test* "input 7:FMTOWNS"  "FWMNTSO"
       (seating "7:FMTOWNS"))
(test* "input 7:ABCDEFGabcdfXYZ"  "YE-X-GZ"
       (seating "7:ABCDEFGabcdfXYZ"))
(test* "input 10:ABCDEFGHIJ"  "AGBHCIDJEF"
       (seating "10:ABCDEFGHIJ"))

(test-end)
