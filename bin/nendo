#!/usr/local/bin/ruby
# -*- encoding: utf-8 -*-
#
# nendo  -  "interpretter main program"
#  
#   Copyright (c) 2009-2010  Kiyoka Nishiyama  <kiyoka@sumibi.org>
#   
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions
#   are met:
#   
#   1. Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#  
#   2. Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#  
#   3. Neither the name of the authors nor the names of its contributors
#      may be used to endorse or promote products derived from this
#      software without specific prior written permission.
#  
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#  
#  $Id: 
#
require 'nendo'
require 'getoptlong'
#require 'profile'

def userOptionEater
  i = 0
  while ( i < ARGV.length )
    case ARGV[i]
    when '-h'
      i += 1
    when '-q'
      i += 1
    when '-c'
      i += 1
    when '-l'
      i += 2
    when /^[^-]/
      break
    else
      break
    end
  end
  userOptions = ARGV.clone[i..ARGV.length]
  userOptions.length.times { |x|
    ARGV.pop
  }
  return userOptions
end

def main
  loadInit  = true
  compile   = false
  conflict = 0
  core = Nendo.new()

  userOptions = userOptionEater
  opts = GetoptLong.new(
                        [ '-h', GetoptLong::NO_ARGUMENT ],
                        [ '-q', GetoptLong::NO_ARGUMENT ],
                        [ '-c', GetoptLong::NO_ARGUMENT ],
                        [ '-l', GetoptLong::REQUIRED_ARGUMENT ]
                        ).each { |opt, arg|
    case opt
    when '-h'
      puts <<-EOF
      
      nendo [OPTION] [script-file]

      -h:
        show help

      -q:
        Does not read the default initialization file.

      -l file:
        load nendo script files. ( can specify n times like   -l a.nnd -l b.nnd  )

      -c:
        compile nendo script file. (and initialization file was loaded)

      EOF
      exit 0
    when '-q'
      loadInit = false
      conflict += 1
    when '-c'
      loadInit = true
      compile  = true
      conflict += 1
    when '-l'
      core.load( arg )
      STDERR.printf( "loaded file [%s]\n", arg )
    end
  }

  if  2 <= conflict 
    STDERR.puts( "Error: Can't specify both -q and -c ...\n" ) 
    exit( 1 )
  end
  
  if loadInit
    core.loadInitFile
  end
  if 0 < userOptions.length
    fn = userOptions[0]
    if compile
      # compile script file.
      core.clean_compiled_code( )
      core.load( fn )
      core.replStr( sprintf( '(print-compiled-code "%s")', fn ))
    else
      # start script file.
      core.setArgv( userOptions[1..userOptions.length] )
      core.load( fn )
      core.replStr( "(if (and (global-defined? 'main) (procedure? main)) (main *argv*) #f)" )
    end
  else
    core.repl
  end
end

main
