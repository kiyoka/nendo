#
#    This file is nendo's compiled library file. 
#    generated  "nendo -c src" command. 
# 

trampCall( 
  begin
      def self._xcons_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_xcons', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_xcons'] = self.method( :_xcons_METHOD )
    @_xcons = 
    trampCall(
          Proc.new { |_d,_a| 
              begin
                embedBacktraceInfo( "./lib/srfi-1.nnd", 18 ); 
                  delayCall( '_cons',  'cons',
                      begin
                        if @global_lisp_binding.has_key?('_cons') then
                          trampCall(@_cons)
                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:18"] + __e.backtrace ) ; raise __e
                      end                    ,
                  [
                        begin
                            trampCall(_a)
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:18"] + __e.backtrace ) ; raise __e
                        end                      ,
                        begin
                            trampCall(_d)
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:18"] + __e.backtrace ) ; raise __e
                        end
                  ]
                               )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._make_MIMARKlist_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_make_MIMARKlist', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_make_MIMARKlist'] = self.method( :_make_MIMARKlist_METHOD )
    @_make_MIMARKlist = 
    trampCall(
          Proc.new { |_len,*__rest__| _maybe_MIMARKelt = __rest__[0] ;  
              begin
              end
              begin
                ___lambda = lambda { |_elt| 
                    begin
                      ___lambda = lambda { |___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30201| 
                          ___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30201                           = 
                            Proc.new { |_i,_ans| 
                                if ( 
                                  begin
                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 36 ); 
                                      __LTMARK_EQMARK(
                                          begin
                                              trampCall(_i)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:36"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                        0
                                      )
                                  end
                                 ) then
                                    begin
                                        begin
                                            trampCall(_ans)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:36"] + __e.backtrace ) ; raise __e
                                        end
                                    end
                                else
                                    begin
                                        begin
                                          embedBacktraceInfo( "", 1 ); 
                                            delayCall( '___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30201',  '__gensym__d2f54e498a1042043dafdae0618b15c325a30372_30201',
                                                begin
                                                    trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30201)
                                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 34 ); 
                                                      __MIMARK_ARGS2(
                                                          begin
                                                              trampCall(_i)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:36"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                        1
                                                      )
                                                  end                                                ,
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 35 ); 
                                                      _cons(
                                                          begin
                                                              trampCall(_elt)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:35"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          begin
                                                              trampCall(_ans)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:36"] + __e.backtrace ) ; raise __e
                                                          end
                                                      )
                                                  end
                                            ]
                                                         )
                                        end
                                    end
                                end
                            }
                          begin
                            embedBacktraceInfo( "", 1 ); 
                              delayCall( '___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30201',  '__gensym__d2f54e498a1042043dafdae0618b15c325a30372_30201',
                                  begin
                                      trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30201)
                                    rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                  end                                ,
                              [
                                    begin
                                        trampCall(_len)
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:34"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                  Cell.new()
                              ]
                                           )
                          end
                      } ; ___lambda.call(
                      nil
                                 )
                    end
                } ; ___lambda.call(
                      if ( 
                        begin
                          embedBacktraceInfo( "./lib/srfi-1.nnd", 31 ); 
                            _null_QUMARK(
                                begin
                                    trampCall(_maybe_MIMARKelt)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:33"] + __e.backtrace ) ; raise __e
                                end
                            )
                        end
                       ) then
                          begin
                            false
                          end
                      else
                          if ( 
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 31 ); 
                                _null_QUMARK(
                                    begin
                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 31 ); 
                                        _cdr(
                                            begin
                                                trampCall(_maybe_MIMARKelt)
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:33"] + __e.backtrace ) ; raise __e
                                            end
                                        )
                                    end
                                )
                            end
                           ) then
                              begin
                                  begin
                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 31 ); 
                                      delayCall( '_car',  'car',
                                          begin
                                            if @global_lisp_binding.has_key?('_car') then
                                              trampCall(@_car)
                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:31"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                      [
                                            begin
                                                trampCall(_maybe_MIMARKelt)
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:33"] + __e.backtrace ) ; raise __e
                                            end
                                      ]
                                                   )
                                  end
                              end
                          else
                              if ( 
                              true
                               ) then
                                  begin
                                      begin raise RuntimeError, 
                                        "Too many arguments to MAKE-LIST" ' ' + 
                                        _write_MIMARKto_MIMARKstring(
                                          begin
                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 35 ); 
                                              _cons(
                                                  begin
                                                      trampCall(_len)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:34"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  begin
                                                      trampCall(_maybe_MIMARKelt)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:33"] + __e.backtrace ) ; raise __e
                                                  end
                                              )
                                          end
                                        )
                                      rescue => __e 
                                        __e.set_backtrace( ["./lib/srfi-1.nnd:32"] + __e.backtrace )
                                        raise __e
                                      end 
                                  end
                              else
                                  Cell.new()
                              end
                          end
                      end
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._list_MIMARKtabulate_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_list_MIMARKtabulate', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_list_MIMARKtabulate'] = self.method( :_list_MIMARKtabulate_METHOD )
    @_list_MIMARKtabulate = 
    trampCall(
          Proc.new { |_len,_proc| 
              begin
              end
              begin
              end
              begin
                ___lambda = lambda { |___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30202| 
                    ___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30202                     = 
                      Proc.new { |_i,_ans| 
                          if ( 
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 49 ); 
                                __LTMARK(
                                    begin
                                        trampCall(_i)
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:49"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                  0
                                )
                            end
                           ) then
                              begin
                                  begin
                                      trampCall(_ans)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:49"] + __e.backtrace ) ; raise __e
                                  end
                              end
                          else
                              begin
                                  begin
                                    embedBacktraceInfo( "", 1 ); 
                                      delayCall( '___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30202',  '__gensym__d2f54e498a1042043dafdae0618b15c325a30372_30202',
                                          begin
                                              trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30202)
                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                      [
                                            begin
                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 47 ); 
                                                __MIMARK_ARGS2(
                                                    begin
                                                        trampCall(_i)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:49"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                  1
                                                )
                                            end                                          ,
                                            begin
                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 48 ); 
                                                _cons(
                                                    begin
                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 48 ); 
                                                        trampCall( callProcedure(  '_proc',  'proc',
                                                            begin
                                                                trampCall(_proc)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:48"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                        [
                                                              begin
                                                                  trampCall(_i)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:49"] + __e.backtrace ) ; raise __e
                                                              end
                                                        ]
                                                                     ))
                                                    end                                                  ,
                                                    begin
                                                        trampCall(_ans)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:49"] + __e.backtrace ) ; raise __e
                                                    end
                                                )
                                            end
                                      ]
                                                   )
                                  end
                              end
                          end
                      }
                    begin
                      embedBacktraceInfo( "", 1 ); 
                        delayCall( '___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30202',  '__gensym__d2f54e498a1042043dafdae0618b15c325a30372_30202',
                            begin
                                trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30202)
                              rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 47 ); 
                                  __MIMARK_ARGS2(
                                      begin
                                          trampCall(_len)
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:47"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                    1
                                  )
                              end                            ,
                            Cell.new()
                        ]
                                     )
                    end
                } ; ___lambda.call(
                nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._cons_ASMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_cons_ASMARK', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_cons_ASMARK'] = self.method( :_cons_ASMARK_METHOD )
    @_cons_ASMARK = 
    trampCall(
          Proc.new { |_first,*__rest__| _rest = __rest__[0] ;  
              begin
                ___lambda = lambda { |_recur| 
                    _recur                     = 
                      Proc.new { |_x,_rest| 
                          if ( 
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 58 ); 
                                _pair_QUMARK(
                                    begin
                                        trampCall(_rest)
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:59"] + __e.backtrace ) ; raise __e
                                    end
                                )
                            end
                           ) then
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 59 ); 
                                  delayCall( '_cons',  'cons',
                                      begin
                                        if @global_lisp_binding.has_key?('_cons') then
                                          trampCall(@_cons)
                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:59"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        begin
                                            trampCall(_x)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:60"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 59 ); 
                                            trampCall( callProcedure(  '_recur',  'recur',
                                                begin
                                                    trampCall(_recur)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:59"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 59 ); 
                                                      _car(
                                                          begin
                                                              trampCall(_rest)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:59"] + __e.backtrace ) ; raise __e
                                                          end
                                                      )
                                                  end                                                ,
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 59 ); 
                                                      _cdr(
                                                          begin
                                                              trampCall(_rest)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:59"] + __e.backtrace ) ; raise __e
                                                          end
                                                      )
                                                  end
                                            ]
                                                         ))
                                        end
                                  ]
                                               )
                              end
                          else
                              begin
                                  trampCall(_x)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:60"] + __e.backtrace ) ; raise __e
                              end
                          end
                      }
                    begin
                      embedBacktraceInfo( "./lib/srfi-1.nnd", 59 ); 
                        delayCall( '_recur',  'recur',
                            begin
                                trampCall(_recur)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:59"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              begin
                                  trampCall(_first)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:57"] + __e.backtrace ) ; raise __e
                              end                            ,
                              begin
                                  trampCall(_rest)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:59"] + __e.backtrace ) ; raise __e
                              end
                        ]
                                     )
                    end
                } ; ___lambda.call(
                nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._list_MIMARKcopy_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_list_MIMARKcopy', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_list_MIMARKcopy'] = self.method( :_list_MIMARKcopy_METHOD )
    @_list_MIMARKcopy = 
    trampCall(
          Proc.new { |_lis| 
              begin
                ___lambda = lambda { |_recur| 
                    _recur                     = 
                      Proc.new { |_lis| 
                          if ( 
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 66 ); 
                                _pair_QUMARK(
                                    begin
                                        trampCall(_lis)
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:68"] + __e.backtrace ) ; raise __e
                                    end
                                )
                            end
                           ) then
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 67 ); 
                                  delayCall( '_cons',  'cons',
                                      begin
                                        if @global_lisp_binding.has_key?('_cons') then
                                          trampCall(@_cons)
                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:67"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 67 ); 
                                            _car(
                                                begin
                                                    trampCall(_lis)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:68"] + __e.backtrace ) ; raise __e
                                                end
                                            )
                                        end                                      ,
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 67 ); 
                                            trampCall( callProcedure(  '_recur',  'recur',
                                                begin
                                                    trampCall(_recur)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:67"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 67 ); 
                                                      _cdr(
                                                          begin
                                                              trampCall(_lis)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:68"] + __e.backtrace ) ; raise __e
                                                          end
                                                      )
                                                  end
                                            ]
                                                         ))
                                        end
                                  ]
                                               )
                              end
                          else
                              begin
                                  trampCall(_lis)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:68"] + __e.backtrace ) ; raise __e
                              end
                          end
                      }
                    begin
                      embedBacktraceInfo( "./lib/srfi-1.nnd", 67 ); 
                        delayCall( '_recur',  'recur',
                            begin
                                trampCall(_recur)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:67"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              begin
                                  trampCall(_lis)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:68"] + __e.backtrace ) ; raise __e
                              end
                        ]
                                     )
                    end
                } ; ___lambda.call(
                nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._iota_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_iota', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_iota'] = self.method( :_iota_METHOD )
    @_iota = 
    trampCall(
          Proc.new { |_count,*__rest__| _args = __rest__[0] ;  
              if ( 
                begin
                  embedBacktraceInfo( "./lib/srfi-1.nnd", 73 ); 
                    __LTMARK(
                        begin
                            trampCall(_count)
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:82"] + __e.backtrace ) ; raise __e
                        end                      ,
                      0
                    )
                end
               ) then
                  begin raise RuntimeError, 
                    "Negative step count" ' ' + 
                    _write_MIMARKto_MIMARKstring(
                      begin
                        if @global_lisp_binding.has_key?('_iota') then
                          trampCall(@_iota)
                        else raise NameError.new( "Error: undefined variable _iota", "_iota" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:73"] + __e.backtrace ) ; raise __e
                      end
                    )
                  rescue => __e 
                    __e.set_backtrace( ["./lib/srfi-1.nnd:73"] + __e.backtrace )
                    raise __e
                  end 
              end
              begin
                ___lambda = lambda { |_start,_step| 
                    begin
                    end
                    begin
                    end
                    begin
                      ___lambda = lambda { |_last_MIMARKval| 
                          begin
                            ___lambda = lambda { |___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30203| 
                                ___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30203                                 = 
                                  Proc.new { |_count,_val,_ans| 
                                      if ( 
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 82 ); 
                                            __LTMARK_EQMARK(
                                                begin
                                                    trampCall(_count)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:82"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                              0
                                            )
                                        end
                                       ) then
                                          begin
                                              begin
                                                  trampCall(_ans)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:82"] + __e.backtrace ) ; raise __e
                                              end
                                          end
                                      else
                                          begin
                                              begin
                                                embedBacktraceInfo( "", 1 ); 
                                                  delayCall( '___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30203',  '__gensym__d2f54e498a1042043dafdae0618b15c325a30372_30203',
                                                      begin
                                                          trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30203)
                                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                  [
                                                        begin
                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 80 ); 
                                                            __MIMARK_ARGS2(
                                                                begin
                                                                    trampCall(_count)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:82"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                              1
                                                            )
                                                        end                                                      ,
                                                        begin
                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 80 ); 
                                                            __MIMARK_ARGS2(
                                                                begin
                                                                    trampCall(_val)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:81"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                begin
                                                                    trampCall(_step)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:80"] + __e.backtrace ) ; raise __e
                                                                end
                                                            )
                                                        end                                                      ,
                                                        begin
                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 81 ); 
                                                            _cons(
                                                                begin
                                                                    trampCall(_val)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:81"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                begin
                                                                    trampCall(_ans)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:82"] + __e.backtrace ) ; raise __e
                                                                end
                                                            )
                                                        end
                                                  ]
                                                               )
                                              end
                                          end
                                      end
                                  }
                                begin
                                  embedBacktraceInfo( "", 1 ); 
                                    delayCall( '___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30203',  '__gensym__d2f54e498a1042043dafdae0618b15c325a30372_30203',
                                        begin
                                            trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30203)
                                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                    [
                                          begin
                                              trampCall(_count)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:82"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          begin
                                              trampCall(_last_MIMARKval)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:80"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                        Cell.new()
                                    ]
                                                 )
                                end
                            } ; ___lambda.call(
                            nil
                                       )
                          end
                      } ; ___lambda.call(
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 78 ); 
                                __PLMARK_ARGS2(
                                    begin
                                        trampCall(_start)
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:78"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    begin
                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 78 ); 
                                        __ASMARK_ARGS2(
                                            begin
                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 80 ); 
                                                __MIMARK_ARGS2(
                                                    begin
                                                        trampCall(_count)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:82"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                  1
                                                )
                                            end                                          ,
                                            begin
                                                trampCall(_step)
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:80"] + __e.backtrace ) ; raise __e
                                            end
                                        )
                                    end
                                )
                            end
                                 )
                    end
                } ; ___lambda.call(
                      if ( 
                        begin
                          embedBacktraceInfo( "./lib/srfi-1.nnd", 75 ); 
                            _pair_QUMARK(
                                begin
                                    trampCall(_args)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:75"] + __e.backtrace ) ; raise __e
                                end
                            )
                        end
                       ) then
                          begin
                            embedBacktraceInfo( "./lib/srfi-1.nnd", 74 ); 
                              delayCall( '_car',  'car',
                                  begin
                                    if @global_lisp_binding.has_key?('_car') then
                                      trampCall(@_car)
                                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:74"] + __e.backtrace ) ; raise __e
                                  end                                ,
                              [
                                    begin
                                        trampCall(_args)
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:75"] + __e.backtrace ) ; raise __e
                                    end
                              ]
                                           )
                          end
                      else
                        0
                      end                    ,
                      if ( 
                        if ( 
                          begin
                            embedBacktraceInfo( "./lib/srfi-1.nnd", 1409 ); 
                              _not(
                                  begin
                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1321 ); 
                                      _eq_QUMARK(
                                        false                                        ,
                                          begin
                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 75 ); 
                                              _pair_QUMARK(
                                                  begin
                                                      trampCall(_args)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:75"] + __e.backtrace ) ; raise __e
                                                  end
                                              )
                                          end
                                      )
                                  end
                              )
                          end
                         ) then
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 75 ); 
                                _pair_QUMARK(
                                    begin
                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 75 ); 
                                        _cdr(
                                            begin
                                                trampCall(_args)
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:75"] + __e.backtrace ) ; raise __e
                                            end
                                        )
                                    end
                                )
                            end
                        else
                          false
                        end
                       ) then
                          begin
                            embedBacktraceInfo( "./lib/srfi-1.nnd", 75 ); 
                              delayCall( '_cadr',  'cadr',
                                  begin
                                    if @global_lisp_binding.has_key?('_cadr') then
                                      trampCall(@_cadr)
                                    else raise NameError.new( "Error: undefined variable _cadr", "_cadr" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:75"] + __e.backtrace ) ; raise __e
                                  end                                ,
                              [
                                    begin
                                        trampCall(_args)
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:75"] + __e.backtrace ) ; raise __e
                                    end
                              ]
                                           )
                          end
                      else
                        1
                      end
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._circular_MIMARKlist_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_circular_MIMARKlist', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_circular_MIMARKlist'] = self.method( :_circular_MIMARKlist_METHOD )
    @_circular_MIMARKlist = 
    trampCall(
          Proc.new { |_val1,*__rest__| _vals = __rest__[0] ;  
              begin
                ___lambda = lambda { |_ans| 
                    begin
                      embedBacktraceInfo( "./lib/srfi-1.nnd", 133 ); 
                        _set_MIMARKcdr_EXMARK(
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 133 ); 
                                trampCall( self._last_MIMARKpair_METHOD(  'last-pair',
                                    begin
                                      if @global_lisp_binding.has_key?('_last_MIMARKpair') then
                                        trampCall(@_last_MIMARKpair)
                                      else raise NameError.new( "Error: undefined variable _last_MIMARKpair", "_last_MIMARKpair" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:133"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                [
                                      begin
                                          trampCall(_ans)
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:134"] + __e.backtrace ) ; raise __e
                                      end
                                ]
                                             ))
                            end                          ,
                            begin
                                trampCall(_ans)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:134"] + __e.backtrace ) ; raise __e
                            end
                        )
                    end
                    begin
                        trampCall(_ans)
                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:134"] + __e.backtrace ) ; raise __e
                    end
                } ; ___lambda.call(
                      begin
                        embedBacktraceInfo( "./lib/srfi-1.nnd", 132 ); 
                          _cons(
                              begin
                                  trampCall(_val1)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:132"] + __e.backtrace ) ; raise __e
                              end                            ,
                              begin
                                  trampCall(_vals)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:132"] + __e.backtrace ) ; raise __e
                              end
                          )
                      end
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._proper_MIMARKlist_QUMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_proper_MIMARKlist_QUMARK', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_proper_MIMARKlist_QUMARK'] = self.method( :_proper_MIMARKlist_QUMARK_METHOD )
    @_proper_MIMARKlist_QUMARK = 
    trampCall(
          Proc.new { |_x| 
              begin
                ___lambda = lambda { |_lp| 
                    _lp                     = 
                      Proc.new { |_x,_lag| 
                          if ( 
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 145 ); 
                                _pair_QUMARK(
                                    begin
                                        trampCall(_x)
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:150"] + __e.backtrace ) ; raise __e
                                    end
                                )
                            end
                           ) then
                              begin
                                ___lambda = lambda { |_x| 
                                    if ( 
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 145 ); 
                                          _pair_QUMARK(
                                              begin
                                                  trampCall(_x)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:150"] + __e.backtrace ) ; raise __e
                                              end
                                          )
                                      end
                                     ) then
                                        begin
                                          ___lambda = lambda { |_x,_lag| 
                                              if ( 
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 148 ); 
                                                    _not(
                                                        begin
                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 148 ); 
                                                            _eq_QUMARK(
                                                              false                                                              ,
                                                                begin
                                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 148 ); 
                                                                    _not(
                                                                        begin
                                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 148 ); 
                                                                            _eq_QUMARK(
                                                                                begin
                                                                                    trampCall(_x)
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:150"] + __e.backtrace ) ; raise __e
                                                                                end                                                                              ,
                                                                                begin
                                                                                    trampCall(_lag)
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:148"] + __e.backtrace ) ; raise __e
                                                                                end
                                                                            )
                                                                        end
                                                                    )
                                                                end
                                                            )
                                                        end
                                                    )
                                                end
                                               ) then
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 148 ); 
                                                      delayCall( '_lp',  'lp',
                                                          begin
                                                              trampCall(_lp)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:148"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                      [
                                                            begin
                                                                trampCall(_x)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:150"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            begin
                                                                trampCall(_lag)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:148"] + __e.backtrace ) ; raise __e
                                                            end
                                                      ]
                                                                   )
                                                  end
                                              else
                                                false
                                              end
                                          } ; ___lambda.call(
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 147 ); 
                                                    _cdr(
                                                        begin
                                                            trampCall(_x)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:150"] + __e.backtrace ) ; raise __e
                                                        end
                                                    )
                                                end                                              ,
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 147 ); 
                                                    _cdr(
                                                        begin
                                                            trampCall(_lag)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:148"] + __e.backtrace ) ; raise __e
                                                        end
                                                    )
                                                end
                                                     )
                                        end
                                    else
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 150 ); 
                                            delayCall( '_null_QUMARK',  'null?',
                                                begin
                                                  if @global_lisp_binding.has_key?('_null_QUMARK') then
                                                    trampCall(@_null_QUMARK)
                                                  else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:150"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                  begin
                                                      trampCall(_x)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:150"] + __e.backtrace ) ; raise __e
                                                  end
                                            ]
                                                         )
                                        end
                                    end
                                } ; ___lambda.call(
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 147 ); 
                                          _cdr(
                                              begin
                                                  trampCall(_x)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:150"] + __e.backtrace ) ; raise __e
                                              end
                                          )
                                      end
                                           )
                              end
                          else
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 150 ); 
                                  delayCall( '_null_QUMARK',  'null?',
                                      begin
                                        if @global_lisp_binding.has_key?('_null_QUMARK') then
                                          trampCall(@_null_QUMARK)
                                        else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:150"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        begin
                                            trampCall(_x)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:150"] + __e.backtrace ) ; raise __e
                                        end
                                  ]
                                               )
                              end
                          end
                      }
                    begin
                      embedBacktraceInfo( "./lib/srfi-1.nnd", 148 ); 
                        delayCall( '_lp',  'lp',
                            begin
                                trampCall(_lp)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:148"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              begin
                                  trampCall(_x)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:150"] + __e.backtrace ) ; raise __e
                              end                            ,
                              begin
                                  trampCall(_x)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:150"] + __e.backtrace ) ; raise __e
                              end
                        ]
                                     )
                    end
                } ; ___lambda.call(
                nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._dotted_MIMARKlist_QUMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_dotted_MIMARKlist_QUMARK', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_dotted_MIMARKlist_QUMARK'] = self.method( :_dotted_MIMARKlist_QUMARK_METHOD )
    @_dotted_MIMARKlist_QUMARK = 
    trampCall(
          Proc.new { |_x| 
              begin
                ___lambda = lambda { |_lp| 
                    _lp                     = 
                      Proc.new { |_x,_lag| 
                          if ( 
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 163 ); 
                                _pair_QUMARK(
                                    begin
                                        trampCall(_x)
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:168"] + __e.backtrace ) ; raise __e
                                    end
                                )
                            end
                           ) then
                              begin
                                ___lambda = lambda { |_x| 
                                    if ( 
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 163 ); 
                                          _pair_QUMARK(
                                              begin
                                                  trampCall(_x)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:168"] + __e.backtrace ) ; raise __e
                                              end
                                          )
                                      end
                                     ) then
                                        begin
                                          ___lambda = lambda { |_x,_lag| 
                                              if ( 
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 168 ); 
                                                    _not(
                                                        begin
                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 166 ); 
                                                            _eq_QUMARK(
                                                              false                                                              ,
                                                                begin
                                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 168 ); 
                                                                    _not(
                                                                        begin
                                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 166 ); 
                                                                            _eq_QUMARK(
                                                                                begin
                                                                                    trampCall(_x)
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:168"] + __e.backtrace ) ; raise __e
                                                                                end                                                                              ,
                                                                                begin
                                                                                    trampCall(_lag)
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:166"] + __e.backtrace ) ; raise __e
                                                                                end
                                                                            )
                                                                        end
                                                                    )
                                                                end
                                                            )
                                                        end
                                                    )
                                                end
                                               ) then
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 166 ); 
                                                      delayCall( '_lp',  'lp',
                                                          begin
                                                              trampCall(_lp)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:166"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                      [
                                                            begin
                                                                trampCall(_x)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:168"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            begin
                                                                trampCall(_lag)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:166"] + __e.backtrace ) ; raise __e
                                                            end
                                                      ]
                                                                   )
                                                  end
                                              else
                                                false
                                              end
                                          } ; ___lambda.call(
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 165 ); 
                                                    _cdr(
                                                        begin
                                                            trampCall(_x)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:168"] + __e.backtrace ) ; raise __e
                                                        end
                                                    )
                                                end                                              ,
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 165 ); 
                                                    _cdr(
                                                        begin
                                                            trampCall(_lag)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:166"] + __e.backtrace ) ; raise __e
                                                        end
                                                    )
                                                end
                                                     )
                                        end
                                    else
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 168 ); 
                                            delayCall( '_not',  'not',
                                                begin
                                                  if @global_lisp_binding.has_key?('_not') then
                                                    trampCall(@_not)
                                                  else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:168"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 168 ); 
                                                      _null_QUMARK(
                                                          begin
                                                              trampCall(_x)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:168"] + __e.backtrace ) ; raise __e
                                                          end
                                                      )
                                                  end
                                            ]
                                                         )
                                        end
                                    end
                                } ; ___lambda.call(
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 165 ); 
                                          _cdr(
                                              begin
                                                  trampCall(_x)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:168"] + __e.backtrace ) ; raise __e
                                              end
                                          )
                                      end
                                           )
                              end
                          else
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 168 ); 
                                  delayCall( '_not',  'not',
                                      begin
                                        if @global_lisp_binding.has_key?('_not') then
                                          trampCall(@_not)
                                        else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:168"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 168 ); 
                                            _null_QUMARK(
                                                begin
                                                    trampCall(_x)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:168"] + __e.backtrace ) ; raise __e
                                                end
                                            )
                                        end
                                  ]
                                               )
                              end
                          end
                      }
                    begin
                      embedBacktraceInfo( "./lib/srfi-1.nnd", 166 ); 
                        delayCall( '_lp',  'lp',
                            begin
                                trampCall(_lp)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:166"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              begin
                                  trampCall(_x)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:168"] + __e.backtrace ) ; raise __e
                              end                            ,
                              begin
                                  trampCall(_x)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:168"] + __e.backtrace ) ; raise __e
                              end
                        ]
                                     )
                    end
                } ; ___lambda.call(
                nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._circular_MIMARKlist_QUMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_circular_MIMARKlist_QUMARK', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_circular_MIMARKlist_QUMARK'] = self.method( :_circular_MIMARKlist_QUMARK_METHOD )
    @_circular_MIMARKlist_QUMARK = 
    trampCall(
          Proc.new { |_x| 
              begin
                ___lambda = lambda { |_lp| 
                    _lp                     = 
                      Proc.new { |_x,_lag| 
                          if ( 
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 168 ); 
                                _not(
                                    begin
                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 177 ); 
                                        _eq_QUMARK(
                                          false                                          ,
                                            begin
                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 174 ); 
                                                _pair_QUMARK(
                                                    begin
                                                        trampCall(_x)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:177"] + __e.backtrace ) ; raise __e
                                                    end
                                                )
                                            end
                                        )
                                    end
                                )
                            end
                           ) then
                              begin
                                ___lambda = lambda { |_x| 
                                    if ( 
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 168 ); 
                                          _not(
                                              begin
                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 177 ); 
                                                  _eq_QUMARK(
                                                    false                                                    ,
                                                      begin
                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 174 ); 
                                                          _pair_QUMARK(
                                                              begin
                                                                  trampCall(_x)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:177"] + __e.backtrace ) ; raise __e
                                                              end
                                                          )
                                                      end
                                                  )
                                              end
                                          )
                                      end
                                     ) then
                                        begin
                                          ___lambda = lambda { |_x,_lag| 
                                              begin
                                                ___lambda = lambda { |___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30204| 
                                                    if ( 
                                                      begin
                                                          trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30204)
                                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                      end
                                                     ) then
                                                        begin
                                                            trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30204)
                                                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                        end
                                                    else
                                                        begin
                                                          ___lambda = lambda { |___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30205| 
                                                              if ( 
                                                                begin
                                                                    trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30205)
                                                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                end
                                                               ) then
                                                                  begin
                                                                      trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30205)
                                                                    rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                  end
                                                              else
                                                                false
                                                              end
                                                          } ; ___lambda.call(
                                                                begin
                                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 177 ); 
                                                                    trampCall( callProcedure(  '_lp',  'lp',
                                                                        begin
                                                                            trampCall(_lp)
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:177"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                    [
                                                                          begin
                                                                              trampCall(_x)
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:177"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                          begin
                                                                              trampCall(_lag)
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:177"] + __e.backtrace ) ; raise __e
                                                                          end
                                                                    ]
                                                                                 ))
                                                                end
                                                                     )
                                                        end
                                                    end
                                                } ; ___lambda.call(
                                                      begin
                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 177 ); 
                                                          _eq_QUMARK(
                                                              begin
                                                                  trampCall(_x)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:177"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              begin
                                                                  trampCall(_lag)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:177"] + __e.backtrace ) ; raise __e
                                                              end
                                                          )
                                                      end
                                                           )
                                              end
                                          } ; ___lambda.call(
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 176 ); 
                                                    _cdr(
                                                        begin
                                                            trampCall(_x)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:177"] + __e.backtrace ) ; raise __e
                                                        end
                                                    )
                                                end                                              ,
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 176 ); 
                                                    _cdr(
                                                        begin
                                                            trampCall(_lag)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:177"] + __e.backtrace ) ; raise __e
                                                        end
                                                    )
                                                end
                                                     )
                                        end
                                    else
                                      false
                                    end
                                } ; ___lambda.call(
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 176 ); 
                                          _cdr(
                                              begin
                                                  trampCall(_x)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:177"] + __e.backtrace ) ; raise __e
                                              end
                                          )
                                      end
                                           )
                              end
                          else
                            false
                          end
                      }
                    begin
                      embedBacktraceInfo( "./lib/srfi-1.nnd", 177 ); 
                        delayCall( '_lp',  'lp',
                            begin
                                trampCall(_lp)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:177"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              begin
                                  trampCall(_x)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:177"] + __e.backtrace ) ; raise __e
                              end                            ,
                              begin
                                  trampCall(_x)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:177"] + __e.backtrace ) ; raise __e
                              end
                        ]
                                     )
                    end
                } ; ___lambda.call(
                nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._list_QUMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_list_QUMARK', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_list_QUMARK'] = self.method( :_list_QUMARK_METHOD )
    @_list_QUMARK = 
    trampCall(
          Proc.new { |_x| 
              if ( 
                begin
                  embedBacktraceInfo( "./lib/srfi-1.nnd", 180 ); 
                    trampCall( self._circular_MIMARKlist_QUMARK_METHOD(  'circular-list?',
                        begin
                          if @global_lisp_binding.has_key?('_circular_MIMARKlist_QUMARK') then
                            trampCall(@_circular_MIMARKlist_QUMARK)
                          else raise NameError.new( "Error: undefined variable _circular_MIMARKlist_QUMARK", "_circular_MIMARKlist_QUMARK" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:180"] + __e.backtrace ) ; raise __e
                        end                      ,
                    [
                          begin
                              trampCall(_x)
                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:182"] + __e.backtrace ) ; raise __e
                          end
                    ]
                                 ))
                end
               ) then
                false
              else
                  begin
                    embedBacktraceInfo( "./lib/srfi-1.nnd", 182 ); 
                      delayCall( '_proper_MIMARKlist_QUMARK',  'proper-list?',
                          begin
                            if @global_lisp_binding.has_key?('_proper_MIMARKlist_QUMARK') then
                              trampCall(@_proper_MIMARKlist_QUMARK)
                            else raise NameError.new( "Error: undefined variable _proper_MIMARKlist_QUMARK", "_proper_MIMARKlist_QUMARK" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:182"] + __e.backtrace ) ; raise __e
                          end                        ,
                      [
                            begin
                                trampCall(_x)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:182"] + __e.backtrace ) ; raise __e
                            end
                      ]
                                   )
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._not_MIMARKpair_QUMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_not_MIMARKpair_QUMARK', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_not_MIMARKpair_QUMARK'] = self.method( :_not_MIMARKpair_QUMARK_METHOD )
    @_not_MIMARKpair_QUMARK = 
    trampCall(
          Proc.new { |_x| 
              begin
                embedBacktraceInfo( "./lib/srfi-1.nnd", 184 ); 
                  delayCall( '_not',  'not',
                      begin
                        if @global_lisp_binding.has_key?('_not') then
                          trampCall(@_not)
                        else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:184"] + __e.backtrace ) ; raise __e
                      end                    ,
                  [
                        begin
                          embedBacktraceInfo( "./lib/srfi-1.nnd", 184 ); 
                            _pair_QUMARK(
                                begin
                                    trampCall(_x)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:184"] + __e.backtrace ) ; raise __e
                                end
                            )
                        end
                  ]
                               )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._null_MIMARKlist_QUMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_null_MIMARKlist_QUMARK', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_null_MIMARKlist_QUMARK'] = self.method( :_null_MIMARKlist_QUMARK_METHOD )
    @_null_MIMARKlist_QUMARK = 
    trampCall(
          Proc.new { |_l| 
              if ( 
                begin
                  embedBacktraceInfo( "./lib/srfi-1.nnd", 190 ); 
                    _pair_QUMARK(
                        begin
                            trampCall(_l)
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:192"] + __e.backtrace ) ; raise __e
                        end
                    )
                end
               ) then
                  begin
                    false
                  end
              else
                  if ( 
                    begin
                      embedBacktraceInfo( "./lib/srfi-1.nnd", 191 ); 
                        _null_QUMARK(
                            begin
                                trampCall(_l)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:192"] + __e.backtrace ) ; raise __e
                            end
                        )
                    end
                   ) then
                      begin
                        true
                      end
                  else
                      if ( 
                      true
                       ) then
                          begin
                              begin raise RuntimeError, 
                                "null-list?: argument out of domain" ' ' + 
                                _write_MIMARKto_MIMARKstring(
                                  begin
                                      trampCall(_l)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:192"] + __e.backtrace ) ; raise __e
                                  end
                                )
                              rescue => __e 
                                __e.set_backtrace( ["./lib/srfi-1.nnd:192"] + __e.backtrace )
                                raise __e
                              end 
                          end
                      else
                          Cell.new()
                      end
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._list_EQMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_list_EQMARK', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_list_EQMARK'] = self.method( :_list_EQMARK_METHOD )
    @_list_EQMARK = 
    trampCall(
          Proc.new { |__EQMARK,*__rest__| _lists = __rest__[0] ;  
              begin
                ___lambda = lambda { |___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30209| 
                    if ( 
                      begin
                          trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30209)
                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                      end
                     ) then
                        begin
                            trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30209)
                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                        end
                    else
                        begin
                          ___lambda = lambda { |___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30210| 
                              if ( 
                                begin
                                    trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30210)
                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                end
                               ) then
                                  begin
                                      trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30210)
                                    rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                  end
                              else
                                false
                              end
                          } ; ___lambda.call(
                                begin
                                  ___lambda = lambda { |_lp1| 
                                      _lp1                                       = 
                                        Proc.new { |_list_MIMARKa,_others| 
                                            begin
                                              ___lambda = lambda { |___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30211| 
                                                  if ( 
                                                    begin
                                                        trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30211)
                                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                    end
                                                   ) then
                                                      begin
                                                          trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30211)
                                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                      end
                                                  else
                                                      begin
                                                        ___lambda = lambda { |___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30212| 
                                                            if ( 
                                                              begin
                                                                  trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30212)
                                                                rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                              end
                                                             ) then
                                                                begin
                                                                    trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30212)
                                                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                end
                                                            else
                                                              false
                                                            end
                                                        } ; ___lambda.call(
                                                              begin
                                                                ___lambda = lambda { |_list_MIMARKb,_others| 
                                                                    if ( 
                                                                      begin
                                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 202 ); 
                                                                          _eq_QUMARK(
                                                                              begin
                                                                                  trampCall(_list_MIMARKa)
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:210"] + __e.backtrace ) ; raise __e
                                                                              end                                                                            ,
                                                                              begin
                                                                                  trampCall(_list_MIMARKb)
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:207"] + __e.backtrace ) ; raise __e
                                                                              end
                                                                          )
                                                                      end
                                                                     ) then
                                                                        begin
                                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 207 ); 
                                                                            delayCall( '_lp1',  'lp1',
                                                                                begin
                                                                                    trampCall(_lp1)
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:207"] + __e.backtrace ) ; raise __e
                                                                                end                                                                              ,
                                                                            [
                                                                                  begin
                                                                                      trampCall(_list_MIMARKb)
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:207"] + __e.backtrace ) ; raise __e
                                                                                  end                                                                                ,
                                                                                  begin
                                                                                      trampCall(_others)
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:207"] + __e.backtrace ) ; raise __e
                                                                                  end
                                                                            ]
                                                                                         )
                                                                        end
                                                                    else
                                                                        begin
                                                                          ___lambda = lambda { |_lp2| 
                                                                              _lp2                                                                               = 
                                                                                Proc.new { |_list_MIMARKa,_list_MIMARKc| 
                                                                                    if ( 
                                                                                      begin
                                                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 208 ); 
                                                                                          trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                                                                                              begin
                                                                                                if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                                                                                  trampCall(@_null_MIMARKlist_QUMARK)
                                                                                                else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:208"] + __e.backtrace ) ; raise __e
                                                                                              end                                                                                            ,
                                                                                          [
                                                                                                begin
                                                                                                    trampCall(_list_MIMARKa)
                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:210"] + __e.backtrace ) ; raise __e
                                                                                                end
                                                                                          ]
                                                                                                       ))
                                                                                      end
                                                                                     ) then
                                                                                        if ( 
                                                                                          begin
                                                                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 208 ); 
                                                                                              _not(
                                                                                                  begin
                                                                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 202 ); 
                                                                                                      _eq_QUMARK(
                                                                                                        false                                                                                                        ,
                                                                                                          begin
                                                                                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 208 ); 
                                                                                                              trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                                                                                                                  begin
                                                                                                                    if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                                                                                                      trampCall(@_null_MIMARKlist_QUMARK)
                                                                                                                    else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:208"] + __e.backtrace ) ; raise __e
                                                                                                                  end                                                                                                                ,
                                                                                                              [
                                                                                                                    begin
                                                                                                                        trampCall(_list_MIMARKc)
                                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:210"] + __e.backtrace ) ; raise __e
                                                                                                                    end
                                                                                                              ]
                                                                                                                           ))
                                                                                                          end
                                                                                                      )
                                                                                                  end
                                                                                              )
                                                                                          end
                                                                                         ) then
                                                                                            begin
                                                                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 207 ); 
                                                                                                delayCall( '_lp1',  'lp1',
                                                                                                    begin
                                                                                                        trampCall(_lp1)
                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:207"] + __e.backtrace ) ; raise __e
                                                                                                    end                                                                                                  ,
                                                                                                [
                                                                                                      begin
                                                                                                          trampCall(_list_MIMARKb)
                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:207"] + __e.backtrace ) ; raise __e
                                                                                                      end                                                                                                    ,
                                                                                                      begin
                                                                                                          trampCall(_others)
                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:207"] + __e.backtrace ) ; raise __e
                                                                                                      end
                                                                                                ]
                                                                                                             )
                                                                                            end
                                                                                        else
                                                                                          false
                                                                                        end
                                                                                    else
                                                                                        if ( 
                                                                                          begin
                                                                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 208 ); 
                                                                                              _not(
                                                                                                  begin
                                                                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 202 ); 
                                                                                                      _eq_QUMARK(
                                                                                                        false                                                                                                        ,
                                                                                                          begin
                                                                                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 208 ); 
                                                                                                              _not(
                                                                                                                  begin
                                                                                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 208 ); 
                                                                                                                      trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                                                                                                                          begin
                                                                                                                            if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                                                                                                              trampCall(@_null_MIMARKlist_QUMARK)
                                                                                                                            else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:208"] + __e.backtrace ) ; raise __e
                                                                                                                          end                                                                                                                        ,
                                                                                                                      [
                                                                                                                            begin
                                                                                                                                trampCall(_list_MIMARKc)
                                                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:210"] + __e.backtrace ) ; raise __e
                                                                                                                            end
                                                                                                                      ]
                                                                                                                                   ))
                                                                                                                  end
                                                                                                              )
                                                                                                          end
                                                                                                      )
                                                                                                  end
                                                                                              )
                                                                                          end
                                                                                         ) then
                                                                                            if ( 
                                                                                              begin
                                                                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 208 ); 
                                                                                                  _not(
                                                                                                      begin
                                                                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 202 ); 
                                                                                                          _eq_QUMARK(
                                                                                                            false                                                                                                            ,
                                                                                                              begin
                                                                                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 209 ); 
                                                                                                                  trampCall( callProcedure(  '__EQMARK',  '=',
                                                                                                                      begin
                                                                                                                          trampCall(__EQMARK)
                                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:209"] + __e.backtrace ) ; raise __e
                                                                                                                      end                                                                                                                    ,
                                                                                                                  [
                                                                                                                        begin
                                                                                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 209 ); 
                                                                                                                            _car(
                                                                                                                                begin
                                                                                                                                    trampCall(_list_MIMARKa)
                                                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:210"] + __e.backtrace ) ; raise __e
                                                                                                                                end
                                                                                                                            )
                                                                                                                        end                                                                                                                      ,
                                                                                                                        begin
                                                                                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 209 ); 
                                                                                                                            _car(
                                                                                                                                begin
                                                                                                                                    trampCall(_list_MIMARKc)
                                                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:210"] + __e.backtrace ) ; raise __e
                                                                                                                                end
                                                                                                                            )
                                                                                                                        end
                                                                                                                  ]
                                                                                                                               ))
                                                                                                              end
                                                                                                          )
                                                                                                      end
                                                                                                  )
                                                                                              end
                                                                                             ) then
                                                                                                begin
                                                                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 210 ); 
                                                                                                    delayCall( '_lp2',  'lp2',
                                                                                                        begin
                                                                                                            trampCall(_lp2)
                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:210"] + __e.backtrace ) ; raise __e
                                                                                                        end                                                                                                      ,
                                                                                                    [
                                                                                                          begin
                                                                                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 210 ); 
                                                                                                              _cdr(
                                                                                                                  begin
                                                                                                                      trampCall(_list_MIMARKa)
                                                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:210"] + __e.backtrace ) ; raise __e
                                                                                                                  end
                                                                                                              )
                                                                                                          end                                                                                                        ,
                                                                                                          begin
                                                                                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 210 ); 
                                                                                                              _cdr(
                                                                                                                  begin
                                                                                                                      trampCall(_list_MIMARKc)
                                                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:210"] + __e.backtrace ) ; raise __e
                                                                                                                  end
                                                                                                              )
                                                                                                          end
                                                                                                    ]
                                                                                                                 )
                                                                                                end
                                                                                            else
                                                                                              false
                                                                                            end
                                                                                        else
                                                                                          false
                                                                                        end
                                                                                    end
                                                                                }
                                                                              begin
                                                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 210 ); 
                                                                                  delayCall( '_lp2',  'lp2',
                                                                                      begin
                                                                                          trampCall(_lp2)
                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:210"] + __e.backtrace ) ; raise __e
                                                                                      end                                                                                    ,
                                                                                  [
                                                                                        begin
                                                                                            trampCall(_list_MIMARKa)
                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:210"] + __e.backtrace ) ; raise __e
                                                                                        end                                                                                      ,
                                                                                        begin
                                                                                            trampCall(_list_MIMARKb)
                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:207"] + __e.backtrace ) ; raise __e
                                                                                        end
                                                                                  ]
                                                                                               )
                                                                              end
                                                                          } ; ___lambda.call(
                                                                          nil
                                                                                     )
                                                                        end
                                                                    end
                                                                } ; ___lambda.call(
                                                                      begin
                                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 209 ); 
                                                                          _car(
                                                                              begin
                                                                                  trampCall(_others)
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:207"] + __e.backtrace ) ; raise __e
                                                                              end
                                                                          )
                                                                      end                                                                    ,
                                                                      begin
                                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 210 ); 
                                                                          _cdr(
                                                                              begin
                                                                                  trampCall(_others)
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:207"] + __e.backtrace ) ; raise __e
                                                                              end
                                                                          )
                                                                      end
                                                                           )
                                                              end
                                                                   )
                                                      end
                                                  end
                                              } ; ___lambda.call(
                                                    begin
                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 199 ); 
                                                        _null_QUMARK(
                                                            begin
                                                                trampCall(_others)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:207"] + __e.backtrace ) ; raise __e
                                                            end
                                                        )
                                                    end
                                                         )
                                            end
                                        }
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 207 ); 
                                          delayCall( '_lp1',  'lp1',
                                              begin
                                                  trampCall(_lp1)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:207"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                          [
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 209 ); 
                                                    _car(
                                                        begin
                                                            trampCall(_lists)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:198"] + __e.backtrace ) ; raise __e
                                                        end
                                                    )
                                                end                                              ,
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 210 ); 
                                                    _cdr(
                                                        begin
                                                            trampCall(_lists)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:198"] + __e.backtrace ) ; raise __e
                                                        end
                                                    )
                                                end
                                          ]
                                                       )
                                      end
                                  } ; ___lambda.call(
                                  nil
                                             )
                                end
                                     )
                        end
                    end
                } ; ___lambda.call(
                      begin
                        embedBacktraceInfo( "./lib/srfi-1.nnd", 199 ); 
                          _null_QUMARK(
                              begin
                                  trampCall(_lists)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:198"] + __e.backtrace ) ; raise __e
                              end
                          )
                      end
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._length_PLMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_length_PLMARK', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_length_PLMARK'] = self.method( :_length_PLMARK_METHOD )
    @_length_PLMARK = 
    trampCall(
          Proc.new { |_x| 
              begin
                ___lambda = lambda { |_lp| 
                    _lp                     = 
                      Proc.new { |_x,_lag,_len| 
                          if ( 
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 226 ); 
                                _pair_QUMARK(
                                    begin
                                        trampCall(_x)
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:230"] + __e.backtrace ) ; raise __e
                                    end
                                )
                            end
                           ) then
                              begin
                                ___lambda = lambda { |_x,_len| 
                                    if ( 
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 226 ); 
                                          _pair_QUMARK(
                                              begin
                                                  trampCall(_x)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:230"] + __e.backtrace ) ; raise __e
                                              end
                                          )
                                      end
                                     ) then
                                        begin
                                          ___lambda = lambda { |_x,_lag,_len| 
                                              if ( 
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 230 ); 
                                                    _not(
                                                        begin
                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 230 ); 
                                                            _eq_QUMARK(
                                                              false                                                              ,
                                                                begin
                                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 230 ); 
                                                                    _not(
                                                                        begin
                                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 230 ); 
                                                                            _eq_QUMARK(
                                                                                begin
                                                                                    trampCall(_x)
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:230"] + __e.backtrace ) ; raise __e
                                                                                end                                                                              ,
                                                                                begin
                                                                                    trampCall(_lag)
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:230"] + __e.backtrace ) ; raise __e
                                                                                end
                                                                            )
                                                                        end
                                                                    )
                                                                end
                                                            )
                                                        end
                                                    )
                                                end
                                               ) then
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 230 ); 
                                                      delayCall( '_lp',  'lp',
                                                          begin
                                                              trampCall(_lp)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:230"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                      [
                                                            begin
                                                                trampCall(_x)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:230"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            begin
                                                                trampCall(_lag)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:230"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            begin
                                                                trampCall(_len)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:232"] + __e.backtrace ) ; raise __e
                                                            end
                                                      ]
                                                                   )
                                                  end
                                              else
                                                false
                                              end
                                          } ; ___lambda.call(
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 228 ); 
                                                    _cdr(
                                                        begin
                                                            trampCall(_x)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:230"] + __e.backtrace ) ; raise __e
                                                        end
                                                    )
                                                end                                              ,
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 228 ); 
                                                    _cdr(
                                                        begin
                                                            trampCall(_lag)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:230"] + __e.backtrace ) ; raise __e
                                                        end
                                                    )
                                                end                                              ,
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 229 ); 
                                                    __PLMARK_ARGS2(
                                                        begin
                                                            trampCall(_len)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:232"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                      1
                                                    )
                                                end
                                                     )
                                        end
                                    else
                                        begin
                                            trampCall(_len)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:232"] + __e.backtrace ) ; raise __e
                                        end
                                    end
                                } ; ___lambda.call(
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 228 ); 
                                          _cdr(
                                              begin
                                                  trampCall(_x)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:230"] + __e.backtrace ) ; raise __e
                                              end
                                          )
                                      end                                    ,
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 229 ); 
                                          __PLMARK_ARGS2(
                                              begin
                                                  trampCall(_len)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:232"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                            1
                                          )
                                      end
                                           )
                              end
                          else
                              begin
                                  trampCall(_len)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:232"] + __e.backtrace ) ; raise __e
                              end
                          end
                      }
                    begin
                      embedBacktraceInfo( "./lib/srfi-1.nnd", 230 ); 
                        delayCall( '_lp',  'lp',
                            begin
                                trampCall(_lp)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:230"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              begin
                                  trampCall(_x)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:230"] + __e.backtrace ) ; raise __e
                              end                            ,
                              begin
                                  trampCall(_x)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:230"] + __e.backtrace ) ; raise __e
                              end                            ,
                            0
                        ]
                                     )
                    end
                } ; ___lambda.call(
                nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._zip_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_zip', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_zip'] = self.method( :_zip_METHOD )
    @_zip = 
    trampCall(
          Proc.new { |_list1,*__rest__| _more_MIMARKlists = __rest__[0] ;  
              begin
                embedBacktraceInfo( "./lib/srfi-1.nnd", 234 ); 
                  delayCall( '_apply',  'apply',
                      begin
                        if @global_lisp_binding.has_key?('_apply') then
                          trampCall(@_apply)
                        else raise NameError.new( "Error: undefined variable _apply", "_apply" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:234"] + __e.backtrace ) ; raise __e
                      end                    ,
                  [
                        begin
                          if @global_lisp_binding.has_key?('_map') then
                            trampCall(@_map)
                          else raise NameError.new( "Error: undefined variable _map", "_map" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:234"] + __e.backtrace ) ; raise __e
                        end                      ,
                        begin
                          if @global_lisp_binding.has_key?('_list') then
                            trampCall(@_list)
                          else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:234"] + __e.backtrace ) ; raise __e
                        end                      ,
                        begin
                            trampCall(_list1)
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:234"] + __e.backtrace ) ; raise __e
                        end                      ,
                        begin
                            trampCall(_more_MIMARKlists)
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:234"] + __e.backtrace ) ; raise __e
                        end
                  ]
                               )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._first_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_first', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_first'] = self.method( :_first_METHOD )
    @_first = 
    trampCall(
          begin
            if @global_lisp_binding.has_key?('_car') then
              trampCall(@_car)
            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:273"] + __e.backtrace ) ; raise __e
          end
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._second_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_second', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_second'] = self.method( :_second_METHOD )
    @_second = 
    trampCall(
          begin
            if @global_lisp_binding.has_key?('_cadr') then
              trampCall(@_cadr)
            else raise NameError.new( "Error: undefined variable _cadr", "_cadr" ) end
            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:274"] + __e.backtrace ) ; raise __e
          end
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._third_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_third', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_third'] = self.method( :_third_METHOD )
    @_third = 
    trampCall(
          begin
            if @global_lisp_binding.has_key?('_caddr') then
              trampCall(@_caddr)
            else raise NameError.new( "Error: undefined variable _caddr", "_caddr" ) end
            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:275"] + __e.backtrace ) ; raise __e
          end
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._fourth_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_fourth', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_fourth'] = self.method( :_fourth_METHOD )
    @_fourth = 
    trampCall(
          begin
            if @global_lisp_binding.has_key?('_cadddr') then
              trampCall(@_cadddr)
            else raise NameError.new( "Error: undefined variable _cadddr", "_cadddr" ) end
            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:276"] + __e.backtrace ) ; raise __e
          end
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._fifth_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_fifth', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_fifth'] = self.method( :_fifth_METHOD )
    @_fifth = 
    trampCall(
          Proc.new { |_x| 
              begin
                embedBacktraceInfo( "./lib/srfi-1.nnd", 277 ); 
                  delayCall( '_car',  'car',
                      begin
                        if @global_lisp_binding.has_key?('_car') then
                          trampCall(@_car)
                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:277"] + __e.backtrace ) ; raise __e
                      end                    ,
                  [
                        begin
                          embedBacktraceInfo( "./lib/srfi-1.nnd", 277 ); 
                            trampCall( self._cddddr_METHOD(  'cddddr',
                                begin
                                  if @global_lisp_binding.has_key?('_cddddr') then
                                    trampCall(@_cddddr)
                                  else raise NameError.new( "Error: undefined variable _cddddr", "_cddddr" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:277"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                  begin
                                      trampCall(_x)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:277"] + __e.backtrace ) ; raise __e
                                  end
                            ]
                                         ))
                        end
                  ]
                               )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._sixth_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_sixth', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_sixth'] = self.method( :_sixth_METHOD )
    @_sixth = 
    trampCall(
          Proc.new { |_x| 
              begin
                embedBacktraceInfo( "./lib/srfi-1.nnd", 278 ); 
                  delayCall( '_cadr',  'cadr',
                      begin
                        if @global_lisp_binding.has_key?('_cadr') then
                          trampCall(@_cadr)
                        else raise NameError.new( "Error: undefined variable _cadr", "_cadr" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:278"] + __e.backtrace ) ; raise __e
                      end                    ,
                  [
                        begin
                          embedBacktraceInfo( "./lib/srfi-1.nnd", 278 ); 
                            trampCall( self._cddddr_METHOD(  'cddddr',
                                begin
                                  if @global_lisp_binding.has_key?('_cddddr') then
                                    trampCall(@_cddddr)
                                  else raise NameError.new( "Error: undefined variable _cddddr", "_cddddr" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:278"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                  begin
                                      trampCall(_x)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:278"] + __e.backtrace ) ; raise __e
                                  end
                            ]
                                         ))
                        end
                  ]
                               )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._seventh_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_seventh', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_seventh'] = self.method( :_seventh_METHOD )
    @_seventh = 
    trampCall(
          Proc.new { |_x| 
              begin
                embedBacktraceInfo( "./lib/srfi-1.nnd", 279 ); 
                  delayCall( '_caddr',  'caddr',
                      begin
                        if @global_lisp_binding.has_key?('_caddr') then
                          trampCall(@_caddr)
                        else raise NameError.new( "Error: undefined variable _caddr", "_caddr" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:279"] + __e.backtrace ) ; raise __e
                      end                    ,
                  [
                        begin
                          embedBacktraceInfo( "./lib/srfi-1.nnd", 279 ); 
                            trampCall( self._cddddr_METHOD(  'cddddr',
                                begin
                                  if @global_lisp_binding.has_key?('_cddddr') then
                                    trampCall(@_cddddr)
                                  else raise NameError.new( "Error: undefined variable _cddddr", "_cddddr" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:279"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                  begin
                                      trampCall(_x)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:279"] + __e.backtrace ) ; raise __e
                                  end
                            ]
                                         ))
                        end
                  ]
                               )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._eighth_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_eighth', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_eighth'] = self.method( :_eighth_METHOD )
    @_eighth = 
    trampCall(
          Proc.new { |_x| 
              begin
                embedBacktraceInfo( "./lib/srfi-1.nnd", 280 ); 
                  delayCall( '_cadddr',  'cadddr',
                      begin
                        if @global_lisp_binding.has_key?('_cadddr') then
                          trampCall(@_cadddr)
                        else raise NameError.new( "Error: undefined variable _cadddr", "_cadddr" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:280"] + __e.backtrace ) ; raise __e
                      end                    ,
                  [
                        begin
                          embedBacktraceInfo( "./lib/srfi-1.nnd", 280 ); 
                            trampCall( self._cddddr_METHOD(  'cddddr',
                                begin
                                  if @global_lisp_binding.has_key?('_cddddr') then
                                    trampCall(@_cddddr)
                                  else raise NameError.new( "Error: undefined variable _cddddr", "_cddddr" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:280"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                  begin
                                      trampCall(_x)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:280"] + __e.backtrace ) ; raise __e
                                  end
                            ]
                                         ))
                        end
                  ]
                               )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._ninth_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_ninth', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_ninth'] = self.method( :_ninth_METHOD )
    @_ninth = 
    trampCall(
          Proc.new { |_x| 
              begin
                embedBacktraceInfo( "./lib/srfi-1.nnd", 281 ); 
                  delayCall( '_car',  'car',
                      begin
                        if @global_lisp_binding.has_key?('_car') then
                          trampCall(@_car)
                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:281"] + __e.backtrace ) ; raise __e
                      end                    ,
                  [
                        begin
                          embedBacktraceInfo( "./lib/srfi-1.nnd", 281 ); 
                            trampCall( self._cddddr_METHOD(  'cddddr',
                                begin
                                  if @global_lisp_binding.has_key?('_cddddr') then
                                    trampCall(@_cddddr)
                                  else raise NameError.new( "Error: undefined variable _cddddr", "_cddddr" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:281"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                  begin
                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 281 ); 
                                      trampCall( self._cddddr_METHOD(  'cddddr',
                                          begin
                                            if @global_lisp_binding.has_key?('_cddddr') then
                                              trampCall(@_cddddr)
                                            else raise NameError.new( "Error: undefined variable _cddddr", "_cddddr" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:281"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                      [
                                            begin
                                                trampCall(_x)
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:281"] + __e.backtrace ) ; raise __e
                                            end
                                      ]
                                                   ))
                                  end
                            ]
                                         ))
                        end
                  ]
                               )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._tenth_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_tenth', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_tenth'] = self.method( :_tenth_METHOD )
    @_tenth = 
    trampCall(
          Proc.new { |_x| 
              begin
                embedBacktraceInfo( "./lib/srfi-1.nnd", 282 ); 
                  delayCall( '_cadr',  'cadr',
                      begin
                        if @global_lisp_binding.has_key?('_cadr') then
                          trampCall(@_cadr)
                        else raise NameError.new( "Error: undefined variable _cadr", "_cadr" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:282"] + __e.backtrace ) ; raise __e
                      end                    ,
                  [
                        begin
                          embedBacktraceInfo( "./lib/srfi-1.nnd", 282 ); 
                            trampCall( self._cddddr_METHOD(  'cddddr',
                                begin
                                  if @global_lisp_binding.has_key?('_cddddr') then
                                    trampCall(@_cddddr)
                                  else raise NameError.new( "Error: undefined variable _cddddr", "_cddddr" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:282"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                  begin
                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 282 ); 
                                      trampCall( self._cddddr_METHOD(  'cddddr',
                                          begin
                                            if @global_lisp_binding.has_key?('_cddddr') then
                                              trampCall(@_cddddr)
                                            else raise NameError.new( "Error: undefined variable _cddddr", "_cddddr" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:282"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                      [
                                            begin
                                                trampCall(_x)
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:282"] + __e.backtrace ) ; raise __e
                                            end
                                      ]
                                                   ))
                                  end
                            ]
                                         ))
                        end
                  ]
                               )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._car_PLMARKcdr_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_car_PLMARKcdr', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_car_PLMARKcdr'] = self.method( :_car_PLMARKcdr_METHOD )
    @_car_PLMARKcdr = 
    trampCall(
          Proc.new { |_pair| 
              begin
                embedBacktraceInfo( "./lib/srfi-1.nnd", 284 ); 
                  delayCall( '_values',  'values',
                      begin
                        if @global_lisp_binding.has_key?('_values') then
                          trampCall(@_values)
                        else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:284"] + __e.backtrace ) ; raise __e
                      end                    ,
                  [
                        begin
                          embedBacktraceInfo( "./lib/srfi-1.nnd", 284 ); 
                            _car(
                                begin
                                    trampCall(_pair)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:284"] + __e.backtrace ) ; raise __e
                                end
                            )
                        end                      ,
                        begin
                          embedBacktraceInfo( "./lib/srfi-1.nnd", 284 ); 
                            _cdr(
                                begin
                                    trampCall(_pair)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:284"] + __e.backtrace ) ; raise __e
                                end
                            )
                        end
                  ]
                               )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._take_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_take', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_take'] = self.method( :_take_METHOD )
    @_take = 
    trampCall(
          Proc.new { |_lis,_k| 
              begin
              end
              begin
                ___lambda = lambda { |_recur| 
                    _recur                     = 
                      Proc.new { |_lis,_k| 
                          if ( 
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 291 ); 
                                trampCall( self._zero_QUMARK_METHOD(  'zero?',
                                    begin
                                      if @global_lisp_binding.has_key?('_zero_QUMARK') then
                                        trampCall(@_zero_QUMARK)
                                      else raise NameError.new( "Error: undefined variable _zero_QUMARK", "_zero_QUMARK" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:291"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                [
                                      begin
                                          trampCall(_k)
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:293"] + __e.backtrace ) ; raise __e
                                      end
                                ]
                                             ))
                            end
                           ) then
                            Cell.new()
                          else
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 292 ); 
                                  delayCall( '_cons',  'cons',
                                      begin
                                        if @global_lisp_binding.has_key?('_cons') then
                                          trampCall(@_cons)
                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:292"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 292 ); 
                                            _car(
                                                begin
                                                    trampCall(_lis)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:293"] + __e.backtrace ) ; raise __e
                                                end
                                            )
                                        end                                      ,
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 293 ); 
                                            trampCall( callProcedure(  '_recur',  'recur',
                                                begin
                                                    trampCall(_recur)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:293"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 293 ); 
                                                      _cdr(
                                                          begin
                                                              trampCall(_lis)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:293"] + __e.backtrace ) ; raise __e
                                                          end
                                                      )
                                                  end                                                ,
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 293 ); 
                                                      __MIMARK_ARGS2(
                                                          begin
                                                              trampCall(_k)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:293"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                        1
                                                      )
                                                  end
                                            ]
                                                         ))
                                        end
                                  ]
                                               )
                              end
                          end
                      }
                    begin
                      embedBacktraceInfo( "./lib/srfi-1.nnd", 293 ); 
                        delayCall( '_recur',  'recur',
                            begin
                                trampCall(_recur)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:293"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              begin
                                  trampCall(_lis)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:293"] + __e.backtrace ) ; raise __e
                              end                            ,
                              begin
                                  trampCall(_k)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:293"] + __e.backtrace ) ; raise __e
                              end
                        ]
                                     )
                    end
                } ; ___lambda.call(
                nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._drop_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_drop', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_drop'] = self.method( :_drop_METHOD )
    @_drop = 
    trampCall(
          Proc.new { |_lis,_k| 
              begin
              end
              begin
                ___lambda = lambda { |_iter| 
                    _iter                     = 
                      Proc.new { |_lis,_k| 
                          if ( 
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 298 ); 
                                trampCall( self._zero_QUMARK_METHOD(  'zero?',
                                    begin
                                      if @global_lisp_binding.has_key?('_zero_QUMARK') then
                                        trampCall(@_zero_QUMARK)
                                      else raise NameError.new( "Error: undefined variable _zero_QUMARK", "_zero_QUMARK" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:298"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                [
                                      begin
                                          trampCall(_k)
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:298"] + __e.backtrace ) ; raise __e
                                      end
                                ]
                                             ))
                            end
                           ) then
                              begin
                                  trampCall(_lis)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:298"] + __e.backtrace ) ; raise __e
                              end
                          else
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 298 ); 
                                  delayCall( '_iter',  'iter',
                                      begin
                                          trampCall(_iter)
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:298"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 298 ); 
                                            _cdr(
                                                begin
                                                    trampCall(_lis)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:298"] + __e.backtrace ) ; raise __e
                                                end
                                            )
                                        end                                      ,
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 298 ); 
                                            __MIMARK_ARGS2(
                                                begin
                                                    trampCall(_k)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:298"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                              1
                                            )
                                        end
                                  ]
                                               )
                              end
                          end
                      }
                    begin
                      embedBacktraceInfo( "./lib/srfi-1.nnd", 298 ); 
                        delayCall( '_iter',  'iter',
                            begin
                                trampCall(_iter)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:298"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              begin
                                  trampCall(_lis)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:298"] + __e.backtrace ) ; raise __e
                              end                            ,
                              begin
                                  trampCall(_k)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:298"] + __e.backtrace ) ; raise __e
                              end
                        ]
                                     )
                    end
                } ; ___lambda.call(
                nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._take_EXMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_take_EXMARK', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_take_EXMARK'] = self.method( :_take_EXMARK_METHOD )
    @_take_EXMARK = 
    trampCall(
          Proc.new { |_lis,_k| 
              begin
              end
              if ( 
                begin
                  embedBacktraceInfo( "./lib/srfi-1.nnd", 302 ); 
                    trampCall( self._zero_QUMARK_METHOD(  'zero?',
                        begin
                          if @global_lisp_binding.has_key?('_zero_QUMARK') then
                            trampCall(@_zero_QUMARK)
                          else raise NameError.new( "Error: undefined variable _zero_QUMARK", "_zero_QUMARK" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:302"] + __e.backtrace ) ; raise __e
                        end                      ,
                    [
                          begin
                              trampCall(_k)
                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:303"] + __e.backtrace ) ; raise __e
                          end
                    ]
                                 ))
                end
               ) then
                Cell.new()
              else
                  begin
                      begin
                        embedBacktraceInfo( "./lib/srfi-1.nnd", 303 ); 
                          _set_MIMARKcdr_EXMARK(
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 303 ); 
                                  trampCall( self._drop_METHOD(  'drop',
                                      begin
                                        if @global_lisp_binding.has_key?('_drop') then
                                          trampCall(@_drop)
                                        else raise NameError.new( "Error: undefined variable _drop", "_drop" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:303"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        begin
                                            trampCall(_lis)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:304"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 303 ); 
                                            __MIMARK_ARGS2(
                                                begin
                                                    trampCall(_k)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:303"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                              1
                                            )
                                        end
                                  ]
                                               ))
                              end                            ,
                            Cell.new()
                          )
                      end
                      begin
                          trampCall(_lis)
                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:304"] + __e.backtrace ) ; raise __e
                      end
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._take_MIMARKright_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_take_MIMARKright', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_take_MIMARKright'] = self.method( :_take_MIMARKright_METHOD )
    @_take_MIMARKright = 
    trampCall(
          Proc.new { |_lis,_k| 
              begin
              end
              begin
                ___lambda = lambda { |_lp| 
                    _lp                     = 
                      Proc.new { |_lag,_lead| 
                          if ( 
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 313 ); 
                                _pair_QUMARK(
                                    begin
                                        trampCall(_lead)
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:314"] + __e.backtrace ) ; raise __e
                                    end
                                )
                            end
                           ) then
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 314 ); 
                                  delayCall( '_lp',  'lp',
                                      begin
                                          trampCall(_lp)
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:314"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 314 ); 
                                            _cdr(
                                                begin
                                                    trampCall(_lag)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:315"] + __e.backtrace ) ; raise __e
                                                end
                                            )
                                        end                                      ,
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 314 ); 
                                            _cdr(
                                                begin
                                                    trampCall(_lead)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:314"] + __e.backtrace ) ; raise __e
                                                end
                                            )
                                        end
                                  ]
                                               )
                              end
                          else
                              begin
                                  trampCall(_lag)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:315"] + __e.backtrace ) ; raise __e
                              end
                          end
                      }
                    begin
                      embedBacktraceInfo( "./lib/srfi-1.nnd", 314 ); 
                        delayCall( '_lp',  'lp',
                            begin
                                trampCall(_lp)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:314"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              begin
                                  trampCall(_lis)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:312"] + __e.backtrace ) ; raise __e
                              end                            ,
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 312 ); 
                                  trampCall( self._drop_METHOD(  'drop',
                                      begin
                                        if @global_lisp_binding.has_key?('_drop') then
                                          trampCall(@_drop)
                                        else raise NameError.new( "Error: undefined variable _drop", "_drop" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:312"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        begin
                                            trampCall(_lis)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:312"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        begin
                                            trampCall(_k)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:312"] + __e.backtrace ) ; raise __e
                                        end
                                  ]
                                               ))
                              end
                        ]
                                     )
                    end
                } ; ___lambda.call(
                nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._drop_MIMARKright_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_drop_MIMARKright', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_drop_MIMARKright'] = self.method( :_drop_MIMARKright_METHOD )
    @_drop_MIMARKright = 
    trampCall(
          Proc.new { |_lis,_k| 
              begin
              end
              begin
                ___lambda = lambda { |_recur| 
                    _recur                     = 
                      Proc.new { |_lag,_lead| 
                          if ( 
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 320 ); 
                                _pair_QUMARK(
                                    begin
                                        trampCall(_lead)
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:321"] + __e.backtrace ) ; raise __e
                                    end
                                )
                            end
                           ) then
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 321 ); 
                                  delayCall( '_cons',  'cons',
                                      begin
                                        if @global_lisp_binding.has_key?('_cons') then
                                          trampCall(@_cons)
                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:321"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 321 ); 
                                            _car(
                                                begin
                                                    trampCall(_lag)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:321"] + __e.backtrace ) ; raise __e
                                                end
                                            )
                                        end                                      ,
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 321 ); 
                                            trampCall( callProcedure(  '_recur',  'recur',
                                                begin
                                                    trampCall(_recur)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:321"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 321 ); 
                                                      _cdr(
                                                          begin
                                                              trampCall(_lag)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:321"] + __e.backtrace ) ; raise __e
                                                          end
                                                      )
                                                  end                                                ,
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 321 ); 
                                                      _cdr(
                                                          begin
                                                              trampCall(_lead)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:321"] + __e.backtrace ) ; raise __e
                                                          end
                                                      )
                                                  end
                                            ]
                                                         ))
                                        end
                                  ]
                                               )
                              end
                          else
                            Cell.new()
                          end
                      }
                    begin
                      embedBacktraceInfo( "./lib/srfi-1.nnd", 321 ); 
                        delayCall( '_recur',  'recur',
                            begin
                                trampCall(_recur)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:321"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              begin
                                  trampCall(_lis)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:319"] + __e.backtrace ) ; raise __e
                              end                            ,
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 319 ); 
                                  trampCall( self._drop_METHOD(  'drop',
                                      begin
                                        if @global_lisp_binding.has_key?('_drop') then
                                          trampCall(@_drop)
                                        else raise NameError.new( "Error: undefined variable _drop", "_drop" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:319"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        begin
                                            trampCall(_lis)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:319"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        begin
                                            trampCall(_k)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:319"] + __e.backtrace ) ; raise __e
                                        end
                                  ]
                                               ))
                              end
                        ]
                                     )
                    end
                } ; ___lambda.call(
                nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._drop_MIMARKright_EXMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_drop_MIMARKright_EXMARK', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_drop_MIMARKright_EXMARK'] = self.method( :_drop_MIMARKright_EXMARK_METHOD )
    @_drop_MIMARKright_EXMARK = 
    trampCall(
          Proc.new { |_lis,_k| 
              begin
              end
              begin
                ___lambda = lambda { |_lead| 
                    if ( 
                      begin
                        embedBacktraceInfo( "./lib/srfi-1.nnd", 332 ); 
                          _pair_QUMARK(
                              begin
                                  trampCall(_lead)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:333"] + __e.backtrace ) ; raise __e
                              end
                          )
                      end
                     ) then
                        begin
                          ___lambda = lambda { |_lp| 
                              _lp                               = 
                                Proc.new { |_lag,_lead| 
                                    if ( 
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 332 ); 
                                          _pair_QUMARK(
                                              begin
                                                  trampCall(_lead)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:333"] + __e.backtrace ) ; raise __e
                                              end
                                          )
                                      end
                                     ) then
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 333 ); 
                                            delayCall( '_lp',  'lp',
                                                begin
                                                    trampCall(_lp)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:333"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 333 ); 
                                                      _cdr(
                                                          begin
                                                              trampCall(_lag)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:334"] + __e.backtrace ) ; raise __e
                                                          end
                                                      )
                                                  end                                                ,
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 333 ); 
                                                      _cdr(
                                                          begin
                                                              trampCall(_lead)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:333"] + __e.backtrace ) ; raise __e
                                                          end
                                                      )
                                                  end
                                            ]
                                                         )
                                        end
                                    else
                                        begin
                                            begin
                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 334 ); 
                                                _set_MIMARKcdr_EXMARK(
                                                    begin
                                                        trampCall(_lag)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:334"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                  Cell.new()
                                                )
                                            end
                                            begin
                                                trampCall(_lis)
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:335"] + __e.backtrace ) ; raise __e
                                            end
                                        end
                                    end
                                }
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 333 ); 
                                  delayCall( '_lp',  'lp',
                                      begin
                                          trampCall(_lp)
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:333"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        begin
                                            trampCall(_lis)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:335"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 333 ); 
                                            _cdr(
                                                begin
                                                    trampCall(_lead)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:333"] + __e.backtrace ) ; raise __e
                                                end
                                            )
                                        end
                                  ]
                                               )
                              end
                          } ; ___lambda.call(
                          nil
                                     )
                        end
                    else
                      Cell.new()
                    end
                } ; ___lambda.call(
                      begin
                        embedBacktraceInfo( "./lib/srfi-1.nnd", 328 ); 
                          trampCall( self._drop_METHOD(  'drop',
                              begin
                                if @global_lisp_binding.has_key?('_drop') then
                                  trampCall(@_drop)
                                else raise NameError.new( "Error: undefined variable _drop", "_drop" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:328"] + __e.backtrace ) ; raise __e
                              end                            ,
                          [
                                begin
                                    trampCall(_lis)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:335"] + __e.backtrace ) ; raise __e
                                end                              ,
                                begin
                                    trampCall(_k)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:328"] + __e.backtrace ) ; raise __e
                                end
                          ]
                                       ))
                      end
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._split_MIMARKat_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_split_MIMARKat', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_split_MIMARKat'] = self.method( :_split_MIMARKat_METHOD )
    @_split_MIMARKat = 
    trampCall(
          Proc.new { |_x,_k| 
              begin
              end
              begin
                ___lambda = lambda { |_recur| 
                    _recur                     = 
                      Proc.new { |_lis,_k| 
                          if ( 
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 386 ); 
                                trampCall( self._zero_QUMARK_METHOD(  'zero?',
                                    begin
                                      if @global_lisp_binding.has_key?('_zero_QUMARK') then
                                        trampCall(@_zero_QUMARK)
                                      else raise NameError.new( "Error: undefined variable _zero_QUMARK", "_zero_QUMARK" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:386"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                [
                                      begin
                                          trampCall(_k)
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:387"] + __e.backtrace ) ; raise __e
                                      end
                                ]
                                             ))
                            end
                           ) then
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 388 ); 
                                  delayCall( '_values',  'values',
                                      begin
                                        if @global_lisp_binding.has_key?('_values') then
                                          trampCall(@_values)
                                        else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:388"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                      Cell.new()                                      ,
                                        begin
                                            trampCall(_lis)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:388"] + __e.backtrace ) ; raise __e
                                        end
                                  ]
                                               )
                              end
                          else
                              begin
                                embedBacktraceInfo( "", 1 ); 
                                  delayCall( '_call_MIMARKwith_MIMARKvalues',  'call-with-values',
                                      begin
                                        if @global_lisp_binding.has_key?('_call_MIMARKwith_MIMARKvalues') then
                                          trampCall(@_call_MIMARKwith_MIMARKvalues)
                                        else raise NameError.new( "Error: undefined variable _call_MIMARKwith_MIMARKvalues", "_call_MIMARKwith_MIMARKvalues" ) end
                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        Proc.new { || 
                                            begin
                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 387 ); 
                                                trampCall( callProcedure(  '_recur',  'recur',
                                                    begin
                                                        trampCall(_recur)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:387"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                [
                                                      begin
                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 387 ); 
                                                          _cdr(
                                                              begin
                                                                  trampCall(_lis)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:388"] + __e.backtrace ) ; raise __e
                                                              end
                                                          )
                                                      end                                                    ,
                                                      begin
                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 387 ); 
                                                          __MIMARK_ARGS2(
                                                              begin
                                                                  trampCall(_k)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:387"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                            1
                                                          )
                                                      end
                                                ]
                                                             ))
                                            end
                                        }                                      ,
                                        Proc.new { |_prefix,_suffix| 
                                            begin
                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 388 ); 
                                                trampCall( self._values_METHOD(  'values',
                                                    begin
                                                      if @global_lisp_binding.has_key?('_values') then
                                                        trampCall(@_values)
                                                      else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:388"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                [
                                                      begin
                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 388 ); 
                                                          _cons(
                                                              begin
                                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 388 ); 
                                                                  _car(
                                                                      begin
                                                                          trampCall(_lis)
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:388"] + __e.backtrace ) ; raise __e
                                                                      end
                                                                  )
                                                              end                                                            ,
                                                              begin
                                                                  trampCall(_prefix)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:388"] + __e.backtrace ) ; raise __e
                                                              end
                                                          )
                                                      end                                                    ,
                                                      begin
                                                          trampCall(_suffix)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:388"] + __e.backtrace ) ; raise __e
                                                      end
                                                ]
                                                             ))
                                            end
                                        }
                                  ]
                                               )
                              end
                          end
                      }
                    begin
                      embedBacktraceInfo( "./lib/srfi-1.nnd", 387 ); 
                        delayCall( '_recur',  'recur',
                            begin
                                trampCall(_recur)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:387"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              begin
                                  trampCall(_x)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:385"] + __e.backtrace ) ; raise __e
                              end                            ,
                              begin
                                  trampCall(_k)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:387"] + __e.backtrace ) ; raise __e
                              end
                        ]
                                     )
                    end
                } ; ___lambda.call(
                nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._split_MIMARKat_EXMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_split_MIMARKat_EXMARK', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_split_MIMARKat_EXMARK'] = self.method( :_split_MIMARKat_EXMARK_METHOD )
    @_split_MIMARKat_EXMARK = 
    trampCall(
          Proc.new { |_x,_k| 
              begin
              end
              if ( 
                begin
                  embedBacktraceInfo( "./lib/srfi-1.nnd", 392 ); 
                    trampCall( self._zero_QUMARK_METHOD(  'zero?',
                        begin
                          if @global_lisp_binding.has_key?('_zero_QUMARK') then
                            trampCall(@_zero_QUMARK)
                          else raise NameError.new( "Error: undefined variable _zero_QUMARK", "_zero_QUMARK" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:392"] + __e.backtrace ) ; raise __e
                        end                      ,
                    [
                          begin
                              trampCall(_k)
                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:393"] + __e.backtrace ) ; raise __e
                          end
                    ]
                                 ))
                end
               ) then
                  begin
                    embedBacktraceInfo( "./lib/srfi-1.nnd", 396 ); 
                      delayCall( '_values',  'values',
                          begin
                            if @global_lisp_binding.has_key?('_values') then
                              trampCall(@_values)
                            else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:396"] + __e.backtrace ) ; raise __e
                          end                        ,
                      [
                          Cell.new()                          ,
                            begin
                                trampCall(_x)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:396"] + __e.backtrace ) ; raise __e
                            end
                      ]
                                   )
                  end
              else
                  begin
                    ___lambda = lambda { |_prev| 
                        begin
                          ___lambda = lambda { |_suffix| 
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 395 ); 
                                  _set_MIMARKcdr_EXMARK(
                                      begin
                                          trampCall(_prev)
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:395"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                    Cell.new()
                                  )
                              end
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 396 ); 
                                  delayCall( '_values',  'values',
                                      begin
                                        if @global_lisp_binding.has_key?('_values') then
                                          trampCall(@_values)
                                        else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:396"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        begin
                                            trampCall(_x)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:396"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        begin
                                            trampCall(_suffix)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:396"] + __e.backtrace ) ; raise __e
                                        end
                                  ]
                                               )
                              end
                          } ; ___lambda.call(
                                begin
                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 394 ); 
                                    _cdr(
                                        begin
                                            trampCall(_prev)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:395"] + __e.backtrace ) ; raise __e
                                        end
                                    )
                                end
                                     )
                        end
                    } ; ___lambda.call(
                          begin
                            embedBacktraceInfo( "./lib/srfi-1.nnd", 393 ); 
                              trampCall( self._drop_METHOD(  'drop',
                                  begin
                                    if @global_lisp_binding.has_key?('_drop') then
                                      trampCall(@_drop)
                                    else raise NameError.new( "Error: undefined variable _drop", "_drop" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:393"] + __e.backtrace ) ; raise __e
                                  end                                ,
                              [
                                    begin
                                        trampCall(_x)
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:396"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    begin
                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 393 ); 
                                        __MIMARK_ARGS2(
                                            begin
                                                trampCall(_k)
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:393"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                          1
                                        )
                                    end
                              ]
                                           ))
                          end
                               )
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._last_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_last', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_last'] = self.method( :_last_METHOD )
    @_last = 
    trampCall(
          Proc.new { |_lis| 
              begin
                embedBacktraceInfo( "./lib/srfi-1.nnd", 399 ); 
                  delayCall( '_car',  'car',
                      begin
                        if @global_lisp_binding.has_key?('_car') then
                          trampCall(@_car)
                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:399"] + __e.backtrace ) ; raise __e
                      end                    ,
                  [
                        begin
                          embedBacktraceInfo( "./lib/srfi-1.nnd", 399 ); 
                            trampCall( self._last_MIMARKpair_METHOD(  'last-pair',
                                begin
                                  if @global_lisp_binding.has_key?('_last_MIMARKpair') then
                                    trampCall(@_last_MIMARKpair)
                                  else raise NameError.new( "Error: undefined variable _last_MIMARKpair", "_last_MIMARKpair" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:399"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                  begin
                                      trampCall(_lis)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:399"] + __e.backtrace ) ; raise __e
                                  end
                            ]
                                         ))
                        end
                  ]
                               )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._last_MIMARKpair_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_last_MIMARKpair', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_last_MIMARKpair'] = self.method( :_last_MIMARKpair_METHOD )
    @_last_MIMARKpair = 
    trampCall(
          Proc.new { |_lis| 
              begin
              end
              begin
                ___lambda = lambda { |_lp| 
                    _lp                     = 
                      Proc.new { |_lis| 
                          begin
                            ___lambda = lambda { |_tail| 
                                if ( 
                                  begin
                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 405 ); 
                                      _pair_QUMARK(
                                          begin
                                              trampCall(_tail)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:405"] + __e.backtrace ) ; raise __e
                                          end
                                      )
                                  end
                                 ) then
                                    begin
                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 405 ); 
                                        delayCall( '_lp',  'lp',
                                            begin
                                                trampCall(_lp)
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:405"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                        [
                                              begin
                                                  trampCall(_tail)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:405"] + __e.backtrace ) ; raise __e
                                              end
                                        ]
                                                     )
                                    end
                                else
                                    begin
                                        trampCall(_lis)
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:405"] + __e.backtrace ) ; raise __e
                                    end
                                end
                            } ; ___lambda.call(
                                  begin
                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 404 ); 
                                      _cdr(
                                          begin
                                              trampCall(_lis)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:405"] + __e.backtrace ) ; raise __e
                                          end
                                      )
                                  end
                                       )
                          end
                      }
                    begin
                      embedBacktraceInfo( "./lib/srfi-1.nnd", 405 ); 
                        delayCall( '_lp',  'lp',
                            begin
                                trampCall(_lp)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:405"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              begin
                                  trampCall(_lis)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:405"] + __e.backtrace ) ; raise __e
                              end
                        ]
                                     )
                    end
                } ; ___lambda.call(
                nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._unzip1_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_unzip1', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_unzip1'] = self.method( :_unzip1_METHOD )
    @_unzip1 = 
    trampCall(
          Proc.new { |_lis| 
              begin
                embedBacktraceInfo( "./lib/srfi-1.nnd", 411 ); 
                  delayCall( '_map',  'map',
                      begin
                        if @global_lisp_binding.has_key?('_map') then
                          trampCall(@_map)
                        else raise NameError.new( "Error: undefined variable _map", "_map" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:411"] + __e.backtrace ) ; raise __e
                      end                    ,
                  [
                        begin
                          if @global_lisp_binding.has_key?('_car') then
                            trampCall(@_car)
                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:411"] + __e.backtrace ) ; raise __e
                        end                      ,
                        begin
                            trampCall(_lis)
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:411"] + __e.backtrace ) ; raise __e
                        end
                  ]
                               )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._unzip2_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_unzip2', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_unzip2'] = self.method( :_unzip2_METHOD )
    @_unzip2 = 
    trampCall(
          Proc.new { |_lis| 
              begin
                ___lambda = lambda { |_recur| 
                    _recur                     = 
                      Proc.new { |_lis| 
                          if ( 
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 415 ); 
                                trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                                    begin
                                      if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                        trampCall(@_null_MIMARKlist_QUMARK)
                                      else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:415"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                [
                                      begin
                                          trampCall(_lis)
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:417"] + __e.backtrace ) ; raise __e
                                      end
                                ]
                                             ))
                            end
                           ) then
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 418 ); 
                                  delayCall( '_values',  'values',
                                      begin
                                        if @global_lisp_binding.has_key?('_values') then
                                          trampCall(@_values)
                                        else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:418"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        begin
                                            trampCall(_lis)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:417"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        begin
                                            trampCall(_lis)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:417"] + __e.backtrace ) ; raise __e
                                        end
                                  ]
                                               )
                              end
                          else
                              begin
                                ___lambda = lambda { |_elt| 
                                    begin
                                      embedBacktraceInfo( "", 1 ); 
                                        delayCall( '_call_MIMARKwith_MIMARKvalues',  'call-with-values',
                                            begin
                                              if @global_lisp_binding.has_key?('_call_MIMARKwith_MIMARKvalues') then
                                                trampCall(@_call_MIMARKwith_MIMARKvalues)
                                              else raise NameError.new( "Error: undefined variable _call_MIMARKwith_MIMARKvalues", "_call_MIMARKwith_MIMARKvalues" ) end
                                              rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                        [
                                              Proc.new { || 
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 417 ); 
                                                      trampCall( callProcedure(  '_recur',  'recur',
                                                          begin
                                                              trampCall(_recur)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:417"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                      [
                                                            begin
                                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 417 ); 
                                                                _cdr(
                                                                    begin
                                                                        trampCall(_lis)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:417"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                )
                                                            end
                                                      ]
                                                                   ))
                                                  end
                                              }                                            ,
                                              Proc.new { |_a,_b| 
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 418 ); 
                                                      trampCall( self._values_METHOD(  'values',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_values') then
                                                              trampCall(@_values)
                                                            else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:418"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                      [
                                                            begin
                                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 419 ); 
                                                                _cons(
                                                                    begin
                                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 418 ); 
                                                                        _car(
                                                                            begin
                                                                                trampCall(_elt)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:419"] + __e.backtrace ) ; raise __e
                                                                            end
                                                                        )
                                                                    end                                                                  ,
                                                                    begin
                                                                        trampCall(_a)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:418"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                )
                                                            end                                                          ,
                                                            begin
                                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 419 ); 
                                                                _cons(
                                                                    begin
                                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 419 ); 
                                                                        trampCall( self._cadr_METHOD(  'cadr',
                                                                            begin
                                                                              if @global_lisp_binding.has_key?('_cadr') then
                                                                                trampCall(@_cadr)
                                                                              else raise NameError.new( "Error: undefined variable _cadr", "_cadr" ) end
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:419"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                        [
                                                                              begin
                                                                                  trampCall(_elt)
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:419"] + __e.backtrace ) ; raise __e
                                                                              end
                                                                        ]
                                                                                     ))
                                                                    end                                                                  ,
                                                                    begin
                                                                        trampCall(_b)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:419"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                )
                                                            end
                                                      ]
                                                                   ))
                                                  end
                                              }
                                        ]
                                                     )
                                    end
                                } ; ___lambda.call(
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 418 ); 
                                          _car(
                                              begin
                                                  trampCall(_lis)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:417"] + __e.backtrace ) ; raise __e
                                              end
                                          )
                                      end
                                           )
                              end
                          end
                      }
                    begin
                      embedBacktraceInfo( "./lib/srfi-1.nnd", 417 ); 
                        delayCall( '_recur',  'recur',
                            begin
                                trampCall(_recur)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:417"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              begin
                                  trampCall(_lis)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:417"] + __e.backtrace ) ; raise __e
                              end
                        ]
                                     )
                    end
                } ; ___lambda.call(
                nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._unzip3_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_unzip3', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_unzip3'] = self.method( :_unzip3_METHOD )
    @_unzip3 = 
    trampCall(
          Proc.new { |_lis| 
              begin
                ___lambda = lambda { |_recur| 
                    _recur                     = 
                      Proc.new { |_lis| 
                          if ( 
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 423 ); 
                                trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                                    begin
                                      if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                        trampCall(@_null_MIMARKlist_QUMARK)
                                      else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:423"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                [
                                      begin
                                          trampCall(_lis)
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:425"] + __e.backtrace ) ; raise __e
                                      end
                                ]
                                             ))
                            end
                           ) then
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 426 ); 
                                  delayCall( '_values',  'values',
                                      begin
                                        if @global_lisp_binding.has_key?('_values') then
                                          trampCall(@_values)
                                        else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:426"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        begin
                                            trampCall(_lis)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:425"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        begin
                                            trampCall(_lis)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:425"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        begin
                                            trampCall(_lis)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:425"] + __e.backtrace ) ; raise __e
                                        end
                                  ]
                                               )
                              end
                          else
                              begin
                                ___lambda = lambda { |_elt| 
                                    begin
                                      embedBacktraceInfo( "", 1 ); 
                                        delayCall( '_call_MIMARKwith_MIMARKvalues',  'call-with-values',
                                            begin
                                              if @global_lisp_binding.has_key?('_call_MIMARKwith_MIMARKvalues') then
                                                trampCall(@_call_MIMARKwith_MIMARKvalues)
                                              else raise NameError.new( "Error: undefined variable _call_MIMARKwith_MIMARKvalues", "_call_MIMARKwith_MIMARKvalues" ) end
                                              rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                        [
                                              Proc.new { || 
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 425 ); 
                                                      trampCall( callProcedure(  '_recur',  'recur',
                                                          begin
                                                              trampCall(_recur)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:425"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                      [
                                                            begin
                                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 425 ); 
                                                                _cdr(
                                                                    begin
                                                                        trampCall(_lis)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:425"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                )
                                                            end
                                                      ]
                                                                   ))
                                                  end
                                              }                                            ,
                                              Proc.new { |_a,_b,_c| 
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 426 ); 
                                                      trampCall( self._values_METHOD(  'values',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_values') then
                                                              trampCall(@_values)
                                                            else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:426"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                      [
                                                            begin
                                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 428 ); 
                                                                _cons(
                                                                    begin
                                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 426 ); 
                                                                        _car(
                                                                            begin
                                                                                trampCall(_elt)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:428"] + __e.backtrace ) ; raise __e
                                                                            end
                                                                        )
                                                                    end                                                                  ,
                                                                    begin
                                                                        trampCall(_a)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:426"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                )
                                                            end                                                          ,
                                                            begin
                                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 428 ); 
                                                                _cons(
                                                                    begin
                                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 427 ); 
                                                                        trampCall( self._cadr_METHOD(  'cadr',
                                                                            begin
                                                                              if @global_lisp_binding.has_key?('_cadr') then
                                                                                trampCall(@_cadr)
                                                                              else raise NameError.new( "Error: undefined variable _cadr", "_cadr" ) end
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:427"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                        [
                                                                              begin
                                                                                  trampCall(_elt)
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:428"] + __e.backtrace ) ; raise __e
                                                                              end
                                                                        ]
                                                                                     ))
                                                                    end                                                                  ,
                                                                    begin
                                                                        trampCall(_b)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:427"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                )
                                                            end                                                          ,
                                                            begin
                                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 428 ); 
                                                                _cons(
                                                                    begin
                                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 428 ); 
                                                                        trampCall( self._caddr_METHOD(  'caddr',
                                                                            begin
                                                                              if @global_lisp_binding.has_key?('_caddr') then
                                                                                trampCall(@_caddr)
                                                                              else raise NameError.new( "Error: undefined variable _caddr", "_caddr" ) end
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:428"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                        [
                                                                              begin
                                                                                  trampCall(_elt)
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:428"] + __e.backtrace ) ; raise __e
                                                                              end
                                                                        ]
                                                                                     ))
                                                                    end                                                                  ,
                                                                    begin
                                                                        trampCall(_c)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:428"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                )
                                                            end
                                                      ]
                                                                   ))
                                                  end
                                              }
                                        ]
                                                     )
                                    end
                                } ; ___lambda.call(
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 426 ); 
                                          _car(
                                              begin
                                                  trampCall(_lis)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:425"] + __e.backtrace ) ; raise __e
                                              end
                                          )
                                      end
                                           )
                              end
                          end
                      }
                    begin
                      embedBacktraceInfo( "./lib/srfi-1.nnd", 425 ); 
                        delayCall( '_recur',  'recur',
                            begin
                                trampCall(_recur)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:425"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              begin
                                  trampCall(_lis)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:425"] + __e.backtrace ) ; raise __e
                              end
                        ]
                                     )
                    end
                } ; ___lambda.call(
                nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._unzip4_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_unzip4', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_unzip4'] = self.method( :_unzip4_METHOD )
    @_unzip4 = 
    trampCall(
          Proc.new { |_lis| 
              begin
                ___lambda = lambda { |_recur| 
                    _recur                     = 
                      Proc.new { |_lis| 
                          if ( 
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 432 ); 
                                trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                                    begin
                                      if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                        trampCall(@_null_MIMARKlist_QUMARK)
                                      else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:432"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                [
                                      begin
                                          trampCall(_lis)
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:434"] + __e.backtrace ) ; raise __e
                                      end
                                ]
                                             ))
                            end
                           ) then
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 435 ); 
                                  delayCall( '_values',  'values',
                                      begin
                                        if @global_lisp_binding.has_key?('_values') then
                                          trampCall(@_values)
                                        else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:435"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        begin
                                            trampCall(_lis)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:434"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        begin
                                            trampCall(_lis)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:434"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        begin
                                            trampCall(_lis)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:434"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        begin
                                            trampCall(_lis)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:434"] + __e.backtrace ) ; raise __e
                                        end
                                  ]
                                               )
                              end
                          else
                              begin
                                ___lambda = lambda { |_elt| 
                                    begin
                                      embedBacktraceInfo( "", 1 ); 
                                        delayCall( '_call_MIMARKwith_MIMARKvalues',  'call-with-values',
                                            begin
                                              if @global_lisp_binding.has_key?('_call_MIMARKwith_MIMARKvalues') then
                                                trampCall(@_call_MIMARKwith_MIMARKvalues)
                                              else raise NameError.new( "Error: undefined variable _call_MIMARKwith_MIMARKvalues", "_call_MIMARKwith_MIMARKvalues" ) end
                                              rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                        [
                                              Proc.new { || 
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 434 ); 
                                                      trampCall( callProcedure(  '_recur',  'recur',
                                                          begin
                                                              trampCall(_recur)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:434"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                      [
                                                            begin
                                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 434 ); 
                                                                _cdr(
                                                                    begin
                                                                        trampCall(_lis)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:434"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                )
                                                            end
                                                      ]
                                                                   ))
                                                  end
                                              }                                            ,
                                              Proc.new { |_a,_b,_c,_d| 
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 435 ); 
                                                      trampCall( self._values_METHOD(  'values',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_values') then
                                                              trampCall(@_values)
                                                            else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:435"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                      [
                                                            begin
                                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 438 ); 
                                                                _cons(
                                                                    begin
                                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 435 ); 
                                                                        _car(
                                                                            begin
                                                                                trampCall(_elt)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:438"] + __e.backtrace ) ; raise __e
                                                                            end
                                                                        )
                                                                    end                                                                  ,
                                                                    begin
                                                                        trampCall(_a)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:435"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                )
                                                            end                                                          ,
                                                            begin
                                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 438 ); 
                                                                _cons(
                                                                    begin
                                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 436 ); 
                                                                        trampCall( self._cadr_METHOD(  'cadr',
                                                                            begin
                                                                              if @global_lisp_binding.has_key?('_cadr') then
                                                                                trampCall(@_cadr)
                                                                              else raise NameError.new( "Error: undefined variable _cadr", "_cadr" ) end
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:436"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                        [
                                                                              begin
                                                                                  trampCall(_elt)
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:438"] + __e.backtrace ) ; raise __e
                                                                              end
                                                                        ]
                                                                                     ))
                                                                    end                                                                  ,
                                                                    begin
                                                                        trampCall(_b)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:436"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                )
                                                            end                                                          ,
                                                            begin
                                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 438 ); 
                                                                _cons(
                                                                    begin
                                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 437 ); 
                                                                        trampCall( self._caddr_METHOD(  'caddr',
                                                                            begin
                                                                              if @global_lisp_binding.has_key?('_caddr') then
                                                                                trampCall(@_caddr)
                                                                              else raise NameError.new( "Error: undefined variable _caddr", "_caddr" ) end
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:437"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                        [
                                                                              begin
                                                                                  trampCall(_elt)
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:438"] + __e.backtrace ) ; raise __e
                                                                              end
                                                                        ]
                                                                                     ))
                                                                    end                                                                  ,
                                                                    begin
                                                                        trampCall(_c)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:437"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                )
                                                            end                                                          ,
                                                            begin
                                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 438 ); 
                                                                _cons(
                                                                    begin
                                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 438 ); 
                                                                        trampCall( self._cadddr_METHOD(  'cadddr',
                                                                            begin
                                                                              if @global_lisp_binding.has_key?('_cadddr') then
                                                                                trampCall(@_cadddr)
                                                                              else raise NameError.new( "Error: undefined variable _cadddr", "_cadddr" ) end
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:438"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                        [
                                                                              begin
                                                                                  trampCall(_elt)
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:438"] + __e.backtrace ) ; raise __e
                                                                              end
                                                                        ]
                                                                                     ))
                                                                    end                                                                  ,
                                                                    begin
                                                                        trampCall(_d)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:438"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                )
                                                            end
                                                      ]
                                                                   ))
                                                  end
                                              }
                                        ]
                                                     )
                                    end
                                } ; ___lambda.call(
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 435 ); 
                                          _car(
                                              begin
                                                  trampCall(_lis)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:434"] + __e.backtrace ) ; raise __e
                                              end
                                          )
                                      end
                                           )
                              end
                          end
                      }
                    begin
                      embedBacktraceInfo( "./lib/srfi-1.nnd", 434 ); 
                        delayCall( '_recur',  'recur',
                            begin
                                trampCall(_recur)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:434"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              begin
                                  trampCall(_lis)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:434"] + __e.backtrace ) ; raise __e
                              end
                        ]
                                     )
                    end
                } ; ___lambda.call(
                nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._unzip5_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_unzip5', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_unzip5'] = self.method( :_unzip5_METHOD )
    @_unzip5 = 
    trampCall(
          Proc.new { |_lis| 
              begin
                ___lambda = lambda { |_recur| 
                    _recur                     = 
                      Proc.new { |_lis| 
                          if ( 
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 442 ); 
                                trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                                    begin
                                      if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                        trampCall(@_null_MIMARKlist_QUMARK)
                                      else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:442"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                [
                                      begin
                                          trampCall(_lis)
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:444"] + __e.backtrace ) ; raise __e
                                      end
                                ]
                                             ))
                            end
                           ) then
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 445 ); 
                                  delayCall( '_values',  'values',
                                      begin
                                        if @global_lisp_binding.has_key?('_values') then
                                          trampCall(@_values)
                                        else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:445"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        begin
                                            trampCall(_lis)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:444"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        begin
                                            trampCall(_lis)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:444"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        begin
                                            trampCall(_lis)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:444"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        begin
                                            trampCall(_lis)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:444"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        begin
                                            trampCall(_lis)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:444"] + __e.backtrace ) ; raise __e
                                        end
                                  ]
                                               )
                              end
                          else
                              begin
                                ___lambda = lambda { |_elt| 
                                    begin
                                      embedBacktraceInfo( "", 1 ); 
                                        delayCall( '_call_MIMARKwith_MIMARKvalues',  'call-with-values',
                                            begin
                                              if @global_lisp_binding.has_key?('_call_MIMARKwith_MIMARKvalues') then
                                                trampCall(@_call_MIMARKwith_MIMARKvalues)
                                              else raise NameError.new( "Error: undefined variable _call_MIMARKwith_MIMARKvalues", "_call_MIMARKwith_MIMARKvalues" ) end
                                              rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                        [
                                              Proc.new { || 
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 444 ); 
                                                      trampCall( callProcedure(  '_recur',  'recur',
                                                          begin
                                                              trampCall(_recur)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:444"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                      [
                                                            begin
                                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 444 ); 
                                                                _cdr(
                                                                    begin
                                                                        trampCall(_lis)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:444"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                )
                                                            end
                                                      ]
                                                                   ))
                                                  end
                                              }                                            ,
                                              Proc.new { |_a,_b,_c,_d,_e| 
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 445 ); 
                                                      trampCall( self._values_METHOD(  'values',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_values') then
                                                              trampCall(@_values)
                                                            else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:445"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                      [
                                                            begin
                                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 449 ); 
                                                                _cons(
                                                                    begin
                                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 449 ); 
                                                                        _car(
                                                                            begin
                                                                                trampCall(_elt)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:449"] + __e.backtrace ) ; raise __e
                                                                            end
                                                                        )
                                                                    end                                                                  ,
                                                                    begin
                                                                        trampCall(_a)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:445"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                )
                                                            end                                                          ,
                                                            begin
                                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 449 ); 
                                                                _cons(
                                                                    begin
                                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 446 ); 
                                                                        trampCall( self._cadr_METHOD(  'cadr',
                                                                            begin
                                                                              if @global_lisp_binding.has_key?('_cadr') then
                                                                                trampCall(@_cadr)
                                                                              else raise NameError.new( "Error: undefined variable _cadr", "_cadr" ) end
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:446"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                        [
                                                                              begin
                                                                                  trampCall(_elt)
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:449"] + __e.backtrace ) ; raise __e
                                                                              end
                                                                        ]
                                                                                     ))
                                                                    end                                                                  ,
                                                                    begin
                                                                        trampCall(_b)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:446"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                )
                                                            end                                                          ,
                                                            begin
                                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 449 ); 
                                                                _cons(
                                                                    begin
                                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 447 ); 
                                                                        trampCall( self._caddr_METHOD(  'caddr',
                                                                            begin
                                                                              if @global_lisp_binding.has_key?('_caddr') then
                                                                                trampCall(@_caddr)
                                                                              else raise NameError.new( "Error: undefined variable _caddr", "_caddr" ) end
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:447"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                        [
                                                                              begin
                                                                                  trampCall(_elt)
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:449"] + __e.backtrace ) ; raise __e
                                                                              end
                                                                        ]
                                                                                     ))
                                                                    end                                                                  ,
                                                                    begin
                                                                        trampCall(_c)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:447"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                )
                                                            end                                                          ,
                                                            begin
                                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 449 ); 
                                                                _cons(
                                                                    begin
                                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 448 ); 
                                                                        trampCall( self._cadddr_METHOD(  'cadddr',
                                                                            begin
                                                                              if @global_lisp_binding.has_key?('_cadddr') then
                                                                                trampCall(@_cadddr)
                                                                              else raise NameError.new( "Error: undefined variable _cadddr", "_cadddr" ) end
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:448"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                        [
                                                                              begin
                                                                                  trampCall(_elt)
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:449"] + __e.backtrace ) ; raise __e
                                                                              end
                                                                        ]
                                                                                     ))
                                                                    end                                                                  ,
                                                                    begin
                                                                        trampCall(_d)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:448"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                )
                                                            end                                                          ,
                                                            begin
                                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 449 ); 
                                                                _cons(
                                                                    begin
                                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 449 ); 
                                                                        _car(
                                                                            begin
                                                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 449 ); 
                                                                                trampCall( self._cddddr_METHOD(  'cddddr',
                                                                                    begin
                                                                                      if @global_lisp_binding.has_key?('_cddddr') then
                                                                                        trampCall(@_cddddr)
                                                                                      else raise NameError.new( "Error: undefined variable _cddddr", "_cddddr" ) end
                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:449"] + __e.backtrace ) ; raise __e
                                                                                    end                                                                                  ,
                                                                                [
                                                                                      begin
                                                                                          trampCall(_elt)
                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:449"] + __e.backtrace ) ; raise __e
                                                                                      end
                                                                                ]
                                                                                             ))
                                                                            end
                                                                        )
                                                                    end                                                                  ,
                                                                    begin
                                                                        trampCall(_e)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:449"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                )
                                                            end
                                                      ]
                                                                   ))
                                                  end
                                              }
                                        ]
                                                     )
                                    end
                                } ; ___lambda.call(
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 449 ); 
                                          _car(
                                              begin
                                                  trampCall(_lis)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:444"] + __e.backtrace ) ; raise __e
                                              end
                                          )
                                      end
                                           )
                              end
                          end
                      }
                    begin
                      embedBacktraceInfo( "./lib/srfi-1.nnd", 444 ); 
                        delayCall( '_recur',  'recur',
                            begin
                                trampCall(_recur)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:444"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              begin
                                  trampCall(_lis)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:444"] + __e.backtrace ) ; raise __e
                              end
                        ]
                                     )
                    end
                } ; ___lambda.call(
                nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._append_EXMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_append_EXMARK', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_append_EXMARK'] = self.method( :_append_EXMARK_METHOD )
    @_append_EXMARK = 
    trampCall(
          Proc.new { |*__rest__| _lists = __rest__[0] ;  
              begin
                ___lambda = lambda { |_lp| 
                    _lp                     = 
                      Proc.new { |_lists,_prev| 
                          if ( 
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 461 ); 
                                _not(
                                    begin
                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 470 ); 
                                        _pair_QUMARK(
                                            begin
                                                trampCall(_lists)
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:460"] + __e.backtrace ) ; raise __e
                                            end
                                        )
                                    end
                                )
                            end
                           ) then
                              begin
                                  trampCall(_prev)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:458"] + __e.backtrace ) ; raise __e
                              end
                          else
                              begin
                                ___lambda = lambda { |_first,_rest| 
                                    if ( 
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 461 ); 
                                          _not(
                                              begin
                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 470 ); 
                                                  _pair_QUMARK(
                                                      begin
                                                          trampCall(_first)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:472"] + __e.backtrace ) ; raise __e
                                                      end
                                                  )
                                              end
                                          )
                                      end
                                     ) then
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 461 ); 
                                            delayCall( '_lp',  'lp',
                                                begin
                                                    trampCall(_lp)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:461"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                  begin
                                                      trampCall(_rest)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:471"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  begin
                                                      trampCall(_first)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:472"] + __e.backtrace ) ; raise __e
                                                  end
                                            ]
                                                         )
                                        end
                                    else
                                        begin
                                          ___lambda = lambda { |_lp2| 
                                              _lp2                                               = 
                                                Proc.new { |_tail_MIMARKcons,_rest| 
                                                    if ( 
                                                      begin
                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 470 ); 
                                                          _pair_QUMARK(
                                                              begin
                                                                  trampCall(_rest)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:471"] + __e.backtrace ) ; raise __e
                                                              end
                                                          )
                                                      end
                                                     ) then
                                                        begin
                                                          ___lambda = lambda { |_next,_rest| 
                                                              begin
                                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 469 ); 
                                                                  _set_MIMARKcdr_EXMARK(
                                                                      begin
                                                                          trampCall(_tail_MIMARKcons)
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:470"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                      begin
                                                                          trampCall(_next)
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:470"] + __e.backtrace ) ; raise __e
                                                                      end
                                                                  )
                                                              end
                                                              begin
                                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 470 ); 
                                                                  delayCall( '_lp2',  'lp2',
                                                                      begin
                                                                          trampCall(_lp2)
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:470"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                  [
                                                                        if ( 
                                                                          begin
                                                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 470 ); 
                                                                              _pair_QUMARK(
                                                                                  begin
                                                                                      trampCall(_next)
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:470"] + __e.backtrace ) ; raise __e
                                                                                  end
                                                                              )
                                                                          end
                                                                         ) then
                                                                            begin
                                                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 470 ); 
                                                                                trampCall( self._last_MIMARKpair_METHOD(  'last-pair',
                                                                                    begin
                                                                                      if @global_lisp_binding.has_key?('_last_MIMARKpair') then
                                                                                        trampCall(@_last_MIMARKpair)
                                                                                      else raise NameError.new( "Error: undefined variable _last_MIMARKpair", "_last_MIMARKpair" ) end
                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:470"] + __e.backtrace ) ; raise __e
                                                                                    end                                                                                  ,
                                                                                [
                                                                                      begin
                                                                                          trampCall(_next)
                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:470"] + __e.backtrace ) ; raise __e
                                                                                      end
                                                                                ]
                                                                                             ))
                                                                            end
                                                                        else
                                                                            begin
                                                                                trampCall(_tail_MIMARKcons)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:470"] + __e.backtrace ) ; raise __e
                                                                            end
                                                                        end                                                                      ,
                                                                        begin
                                                                            trampCall(_rest)
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:471"] + __e.backtrace ) ; raise __e
                                                                        end
                                                                  ]
                                                                               )
                                                              end
                                                          } ; ___lambda.call(
                                                                begin
                                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 467 ); 
                                                                    _car(
                                                                        begin
                                                                            trampCall(_rest)
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:471"] + __e.backtrace ) ; raise __e
                                                                        end
                                                                    )
                                                                end                                                              ,
                                                                begin
                                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 468 ); 
                                                                    _cdr(
                                                                        begin
                                                                            trampCall(_rest)
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:471"] + __e.backtrace ) ; raise __e
                                                                        end
                                                                    )
                                                                end
                                                                     )
                                                        end
                                                    else
                                                        begin
                                                            trampCall(_first)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:472"] + __e.backtrace ) ; raise __e
                                                        end
                                                    end
                                                }
                                              begin
                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 470 ); 
                                                  delayCall( '_lp2',  'lp2',
                                                      begin
                                                          trampCall(_lp2)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:470"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                  [
                                                        begin
                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 470 ); 
                                                            trampCall( self._last_MIMARKpair_METHOD(  'last-pair',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_last_MIMARKpair') then
                                                                    trampCall(@_last_MIMARKpair)
                                                                  else raise NameError.new( "Error: undefined variable _last_MIMARKpair", "_last_MIMARKpair" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:470"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                            [
                                                                  begin
                                                                      trampCall(_first)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:472"] + __e.backtrace ) ; raise __e
                                                                  end
                                                            ]
                                                                         ))
                                                        end                                                      ,
                                                        begin
                                                            trampCall(_rest)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:471"] + __e.backtrace ) ; raise __e
                                                        end
                                                  ]
                                                               )
                                              end
                                          } ; ___lambda.call(
                                          nil
                                                     )
                                        end
                                    end
                                } ; ___lambda.call(
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 467 ); 
                                          _car(
                                              begin
                                                  trampCall(_lists)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:460"] + __e.backtrace ) ; raise __e
                                              end
                                          )
                                      end                                    ,
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 468 ); 
                                          _cdr(
                                              begin
                                                  trampCall(_lists)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:460"] + __e.backtrace ) ; raise __e
                                              end
                                          )
                                      end
                                           )
                              end
                          end
                      }
                    begin
                      embedBacktraceInfo( "./lib/srfi-1.nnd", 461 ); 
                        delayCall( '_lp',  'lp',
                            begin
                                trampCall(_lp)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:461"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              begin
                                  trampCall(_lists)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:460"] + __e.backtrace ) ; raise __e
                              end                            ,
                            Cell.new()
                        ]
                                     )
                    end
                } ; ___lambda.call(
                nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._append_MIMARKreverse_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_append_MIMARKreverse', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_append_MIMARKreverse'] = self.method( :_append_MIMARKreverse_METHOD )
    @_append_MIMARKreverse = 
    trampCall(
          Proc.new { |_rev_MIMARKhead,_tail| 
              begin
                ___lambda = lambda { |_lp| 
                    _lp                     = 
                      Proc.new { |_rev_MIMARKhead,_tail| 
                          if ( 
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 495 ); 
                                trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                                    begin
                                      if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                        trampCall(@_null_MIMARKlist_QUMARK)
                                      else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:495"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                [
                                      begin
                                          trampCall(_rev_MIMARKhead)
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:496"] + __e.backtrace ) ; raise __e
                                      end
                                ]
                                             ))
                            end
                           ) then
                              begin
                                  trampCall(_tail)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:496"] + __e.backtrace ) ; raise __e
                              end
                          else
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 496 ); 
                                  delayCall( '_lp',  'lp',
                                      begin
                                          trampCall(_lp)
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:496"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 496 ); 
                                            _cdr(
                                                begin
                                                    trampCall(_rev_MIMARKhead)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:496"] + __e.backtrace ) ; raise __e
                                                end
                                            )
                                        end                                      ,
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 496 ); 
                                            _cons(
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 496 ); 
                                                    _car(
                                                        begin
                                                            trampCall(_rev_MIMARKhead)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:496"] + __e.backtrace ) ; raise __e
                                                        end
                                                    )
                                                end                                              ,
                                                begin
                                                    trampCall(_tail)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:496"] + __e.backtrace ) ; raise __e
                                                end
                                            )
                                        end
                                  ]
                                               )
                              end
                          end
                      }
                    begin
                      embedBacktraceInfo( "./lib/srfi-1.nnd", 496 ); 
                        delayCall( '_lp',  'lp',
                            begin
                                trampCall(_lp)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:496"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              begin
                                  trampCall(_rev_MIMARKhead)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:496"] + __e.backtrace ) ; raise __e
                              end                            ,
                              begin
                                  trampCall(_tail)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:496"] + __e.backtrace ) ; raise __e
                              end
                        ]
                                     )
                    end
                } ; ___lambda.call(
                nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._append_MIMARKreverse_EXMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_append_MIMARKreverse_EXMARK', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_append_MIMARKreverse_EXMARK'] = self.method( :_append_MIMARKreverse_EXMARK_METHOD )
    @_append_MIMARKreverse_EXMARK = 
    trampCall(
          Proc.new { |_rev_MIMARKhead,_tail| 
              begin
                ___lambda = lambda { |_lp| 
                    _lp                     = 
                      Proc.new { |_rev_MIMARKhead,_tail| 
                          if ( 
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 500 ); 
                                trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                                    begin
                                      if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                        trampCall(@_null_MIMARKlist_QUMARK)
                                      else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:500"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                [
                                      begin
                                          trampCall(_rev_MIMARKhead)
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:503"] + __e.backtrace ) ; raise __e
                                      end
                                ]
                                             ))
                            end
                           ) then
                              begin
                                  trampCall(_tail)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:502"] + __e.backtrace ) ; raise __e
                              end
                          else
                              begin
                                ___lambda = lambda { |_next_MIMARKrev| 
                                    begin
                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 502 ); 
                                        _set_MIMARKcdr_EXMARK(
                                            begin
                                                trampCall(_rev_MIMARKhead)
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:503"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            begin
                                                trampCall(_tail)
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:502"] + __e.backtrace ) ; raise __e
                                            end
                                        )
                                    end
                                    begin
                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 503 ); 
                                        delayCall( '_lp',  'lp',
                                            begin
                                                trampCall(_lp)
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:503"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                        [
                                              begin
                                                  trampCall(_next_MIMARKrev)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:503"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              begin
                                                  trampCall(_rev_MIMARKhead)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:503"] + __e.backtrace ) ; raise __e
                                              end
                                        ]
                                                     )
                                    end
                                } ; ___lambda.call(
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 501 ); 
                                          _cdr(
                                              begin
                                                  trampCall(_rev_MIMARKhead)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:503"] + __e.backtrace ) ; raise __e
                                              end
                                          )
                                      end
                                           )
                              end
                          end
                      }
                    begin
                      embedBacktraceInfo( "./lib/srfi-1.nnd", 503 ); 
                        delayCall( '_lp',  'lp',
                            begin
                                trampCall(_lp)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:503"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              begin
                                  trampCall(_rev_MIMARKhead)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:503"] + __e.backtrace ) ; raise __e
                              end                            ,
                              begin
                                  trampCall(_tail)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:502"] + __e.backtrace ) ; raise __e
                              end
                        ]
                                     )
                    end
                } ; ___lambda.call(
                nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._concatenate_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_concatenate', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_concatenate'] = self.method( :_concatenate_METHOD )
    @_concatenate = 
    trampCall(
          Proc.new { |_lists| 
              begin
                embedBacktraceInfo( "./lib/srfi-1.nnd", 506 ); 
                  delayCall( '_reduce_MIMARKright',  'reduce-right',
                      begin
                        if @global_lisp_binding.has_key?('_reduce_MIMARKright') then
                          trampCall(@_reduce_MIMARKright)
                        else raise NameError.new( "Error: undefined variable _reduce_MIMARKright", "_reduce_MIMARKright" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:506"] + __e.backtrace ) ; raise __e
                      end                    ,
                  [
                        begin
                          if @global_lisp_binding.has_key?('_append') then
                            trampCall(@_append)
                          else raise NameError.new( "Error: undefined variable _append", "_append" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:506"] + __e.backtrace ) ; raise __e
                        end                      ,
                      Cell.new()                      ,
                        begin
                            trampCall(_lists)
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:506"] + __e.backtrace ) ; raise __e
                        end
                  ]
                               )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._concatenate_EXMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_concatenate_EXMARK', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_concatenate_EXMARK'] = self.method( :_concatenate_EXMARK_METHOD )
    @_concatenate_EXMARK = 
    trampCall(
          Proc.new { |_lists| 
              begin
                embedBacktraceInfo( "./lib/srfi-1.nnd", 507 ); 
                  delayCall( '_reduce_MIMARKright',  'reduce-right',
                      begin
                        if @global_lisp_binding.has_key?('_reduce_MIMARKright') then
                          trampCall(@_reduce_MIMARKright)
                        else raise NameError.new( "Error: undefined variable _reduce_MIMARKright", "_reduce_MIMARKright" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:507"] + __e.backtrace ) ; raise __e
                      end                    ,
                  [
                        begin
                          if @global_lisp_binding.has_key?('_append_EXMARK') then
                            trampCall(@_append_EXMARK)
                          else raise NameError.new( "Error: undefined variable _append_EXMARK", "_append_EXMARK" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:507"] + __e.backtrace ) ; raise __e
                        end                      ,
                      Cell.new()                      ,
                        begin
                            trampCall(_lists)
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:507"] + __e.backtrace ) ; raise __e
                        end
                  ]
                               )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self.__PAMARKcdrs_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '__PAMARKcdrs', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['__PAMARKcdrs'] = self.method( :__PAMARKcdrs_METHOD )
    @__PAMARKcdrs = 
    trampCall(
          Proc.new { |_lists| 
              begin
                ___lambda = lambda { |_abort| 
                    if ( 
                      begin
                          trampCall(_abort)
                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:534"] + __e.backtrace ) ; raise __e
                      end
                     ) then
                      Cell.new()
                    else
                        begin
                          ___lambda = lambda { |_recur| 
                              _recur                               = 
                                Proc.new { |_lists| 
                                    if ( 
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 537 ); 
                                          _pair_QUMARK(
                                              begin
                                                  trampCall(_lists)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:541"] + __e.backtrace ) ; raise __e
                                              end
                                          )
                                      end
                                     ) then
                                        begin
                                          ___lambda = lambda { |_lis| 
                                              if ( 
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 539 ); 
                                                    trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                                                        begin
                                                          if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                                            trampCall(@_null_MIMARKlist_QUMARK)
                                                          else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:539"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                    [
                                                          begin
                                                              trampCall(_lis)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:541"] + __e.backtrace ) ; raise __e
                                                          end
                                                    ]
                                                                 ))
                                                end
                                               ) then
                                                Cell.new()
                                              else
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 541 ); 
                                                      delayCall( '_cons',  'cons',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_cons') then
                                                              trampCall(@_cons)
                                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:541"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                      [
                                                            begin
                                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 541 ); 
                                                                _cdr(
                                                                    begin
                                                                        trampCall(_lis)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:541"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                )
                                                            end                                                          ,
                                                            begin
                                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 541 ); 
                                                                trampCall( callProcedure(  '_recur',  'recur',
                                                                    begin
                                                                        trampCall(_recur)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:541"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                [
                                                                      begin
                                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 541 ); 
                                                                          _cdr(
                                                                              begin
                                                                                  trampCall(_lists)
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:541"] + __e.backtrace ) ; raise __e
                                                                              end
                                                                          )
                                                                      end
                                                                ]
                                                                             ))
                                                            end
                                                      ]
                                                                   )
                                                  end
                                              end
                                          } ; ___lambda.call(
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 538 ); 
                                                    _car(
                                                        begin
                                                            trampCall(_lists)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:541"] + __e.backtrace ) ; raise __e
                                                        end
                                                    )
                                                end
                                                     )
                                        end
                                    else
                                      Cell.new()
                                    end
                                }
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 541 ); 
                                  delayCall( '_recur',  'recur',
                                      begin
                                          trampCall(_recur)
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:541"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        begin
                                            trampCall(_lists)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:541"] + __e.backtrace ) ; raise __e
                                        end
                                  ]
                                               )
                              end
                          } ; ___lambda.call(
                          nil
                                     )
                        end
                    end
                } ; ___lambda.call(
                      begin
                        embedBacktraceInfo( "./lib/srfi-1.nnd", 530 ); 
                          trampCall( self._find_METHOD(  'find',
                              begin
                                if @global_lisp_binding.has_key?('_find') then
                                  trampCall(@_find)
                                else raise NameError.new( "Error: undefined variable _find", "_find" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:530"] + __e.backtrace ) ; raise __e
                              end                            ,
                          [
                                Proc.new { |_lis| 
                                    begin
                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 539 ); 
                                        trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                                            begin
                                              if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                                trampCall(@_null_MIMARKlist_QUMARK)
                                              else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:539"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                        [
                                              begin
                                                  trampCall(_lis)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:541"] + __e.backtrace ) ; raise __e
                                              end
                                        ]
                                                     ))
                                    end
                                }                              ,
                                begin
                                    trampCall(_lists)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:541"] + __e.backtrace ) ; raise __e
                                end
                          ]
                                       ))
                      end
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self.__PAMARKcars_PLMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '__PAMARKcars_PLMARK', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['__PAMARKcars_PLMARK'] = self.method( :__PAMARKcars_PLMARK_METHOD )
    @__PAMARKcars_PLMARK = 
    trampCall(
          Proc.new { |_lists,_last_MIMARKelt| 
              begin
                ___lambda = lambda { |_recur| 
                    _recur                     = 
                      Proc.new { |_lists| 
                          if ( 
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 546 ); 
                                _pair_QUMARK(
                                    begin
                                        trampCall(_lists)
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:546"] + __e.backtrace ) ; raise __e
                                    end
                                )
                            end
                           ) then
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 546 ); 
                                  delayCall( '_cons',  'cons',
                                      begin
                                        if @global_lisp_binding.has_key?('_cons') then
                                          trampCall(@_cons)
                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:546"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 546 ); 
                                            trampCall( self._caar_METHOD(  'caar',
                                                begin
                                                  if @global_lisp_binding.has_key?('_caar') then
                                                    trampCall(@_caar)
                                                  else raise NameError.new( "Error: undefined variable _caar", "_caar" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:546"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                  begin
                                                      trampCall(_lists)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:546"] + __e.backtrace ) ; raise __e
                                                  end
                                            ]
                                                         ))
                                        end                                      ,
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 546 ); 
                                            trampCall( callProcedure(  '_recur',  'recur',
                                                begin
                                                    trampCall(_recur)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:546"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 546 ); 
                                                      _cdr(
                                                          begin
                                                              trampCall(_lists)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:546"] + __e.backtrace ) ; raise __e
                                                          end
                                                      )
                                                  end
                                            ]
                                                         ))
                                        end
                                  ]
                                               )
                              end
                          else
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 546 ); 
                                  delayCall( '_list',  'list',
                                      begin
                                        if @global_lisp_binding.has_key?('_list') then
                                          trampCall(@_list)
                                        else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:546"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        begin
                                            trampCall(_last_MIMARKelt)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:546"] + __e.backtrace ) ; raise __e
                                        end
                                  ]
                                               )
                              end
                          end
                      }
                    begin
                      embedBacktraceInfo( "./lib/srfi-1.nnd", 546 ); 
                        delayCall( '_recur',  'recur',
                            begin
                                trampCall(_recur)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:546"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              begin
                                  trampCall(_lists)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:546"] + __e.backtrace ) ; raise __e
                              end
                        ]
                                     )
                    end
                } ; ___lambda.call(
                nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self.__PAMARKcars_PLMARKcdrs_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '__PAMARKcars_PLMARKcdrs', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['__PAMARKcars_PLMARKcdrs'] = self.method( :__PAMARKcars_PLMARKcdrs_METHOD )
    @__PAMARKcars_PLMARKcdrs = 
    trampCall(
          Proc.new { |_lists| 
              begin
                ___lambda = lambda { |_abort| 
                    if ( 
                      begin
                          trampCall(_abort)
                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:557"] + __e.backtrace ) ; raise __e
                      end
                     ) then
                        begin
                          embedBacktraceInfo( "./lib/srfi-1.nnd", 567 ); 
                            delayCall( '_values',  'values',
                                begin
                                  if @global_lisp_binding.has_key?('_values') then
                                    trampCall(@_values)
                                  else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:567"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                Cell.new()                                ,
                                Cell.new()
                            ]
                                         )
                        end
                    else
                        begin
                          ___lambda = lambda { |_recur| 
                              _recur                               = 
                                Proc.new { |_lists| 
                                    if ( 
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 560 ); 
                                          _pair_QUMARK(
                                              begin
                                                  trampCall(_lists)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:561"] + __e.backtrace ) ; raise __e
                                              end
                                          )
                                      end
                                     ) then
                                        begin
                                          embedBacktraceInfo( "", 1 ); 
                                            delayCall( '_call_MIMARKwith_MIMARKvalues',  'call-with-values',
                                                begin
                                                  if @global_lisp_binding.has_key?('_call_MIMARKwith_MIMARKvalues') then
                                                    trampCall(@_call_MIMARKwith_MIMARKvalues)
                                                  else raise NameError.new( "Error: undefined variable _call_MIMARKwith_MIMARKvalues", "_call_MIMARKwith_MIMARKvalues" ) end
                                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                  Proc.new { || 
                                                      begin
                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 564 ); 
                                                          trampCall( self._car_PLMARKcdr_METHOD(  'car+cdr',
                                                              begin
                                                                if @global_lisp_binding.has_key?('_car_PLMARKcdr') then
                                                                  trampCall(@_car_PLMARKcdr)
                                                                else raise NameError.new( "Error: undefined variable _car_PLMARKcdr", "_car_PLMARKcdr" ) end
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:564"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                          [
                                                                begin
                                                                    trampCall(_lists)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:561"] + __e.backtrace ) ; raise __e
                                                                end
                                                          ]
                                                                       ))
                                                      end
                                                  }                                                ,
                                                  Proc.new { |_list,_other_MIMARKlists| 
                                                      if ( 
                                                        begin
                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 562 ); 
                                                            trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                                                    trampCall(@_null_MIMARKlist_QUMARK)
                                                                  else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:562"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                            [
                                                                  begin
                                                                      trampCall(_list)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:564"] + __e.backtrace ) ; raise __e
                                                                  end
                                                            ]
                                                                         ))
                                                        end
                                                       ) then
                                                          begin
                                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 567 ); 
                                                              trampCall( self._values_METHOD(  'values',
                                                                  begin
                                                                    if @global_lisp_binding.has_key?('_values') then
                                                                      trampCall(@_values)
                                                                    else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:567"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                              [
                                                                  Cell.new()                                                                  ,
                                                                  Cell.new()
                                                              ]
                                                                           ))
                                                          end
                                                      else
                                                          begin
                                                            embedBacktraceInfo( "", 1 ); 
                                                              trampCall( self._call_MIMARKwith_MIMARKvalues_METHOD(  'call-with-values',
                                                                  begin
                                                                    if @global_lisp_binding.has_key?('_call_MIMARKwith_MIMARKvalues') then
                                                                      trampCall(@_call_MIMARKwith_MIMARKvalues)
                                                                    else raise NameError.new( "Error: undefined variable _call_MIMARKwith_MIMARKvalues", "_call_MIMARKwith_MIMARKvalues" ) end
                                                                    rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                              [
                                                                    Proc.new { || 
                                                                        begin
                                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 564 ); 
                                                                            trampCall( self._car_PLMARKcdr_METHOD(  'car+cdr',
                                                                                begin
                                                                                  if @global_lisp_binding.has_key?('_car_PLMARKcdr') then
                                                                                    trampCall(@_car_PLMARKcdr)
                                                                                  else raise NameError.new( "Error: undefined variable _car_PLMARKcdr", "_car_PLMARKcdr" ) end
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:564"] + __e.backtrace ) ; raise __e
                                                                                end                                                                              ,
                                                                            [
                                                                                  begin
                                                                                      trampCall(_list)
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:564"] + __e.backtrace ) ; raise __e
                                                                                  end
                                                                            ]
                                                                                         ))
                                                                        end
                                                                    }                                                                  ,
                                                                    Proc.new { |_a,_d| 
                                                                        begin
                                                                          embedBacktraceInfo( "", 1 ); 
                                                                            trampCall( self._call_MIMARKwith_MIMARKvalues_METHOD(  'call-with-values',
                                                                                begin
                                                                                  if @global_lisp_binding.has_key?('_call_MIMARKwith_MIMARKvalues') then
                                                                                    trampCall(@_call_MIMARKwith_MIMARKvalues)
                                                                                  else raise NameError.new( "Error: undefined variable _call_MIMARKwith_MIMARKvalues", "_call_MIMARKwith_MIMARKvalues" ) end
                                                                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                end                                                                              ,
                                                                            [
                                                                                  Proc.new { || 
                                                                                      begin
                                                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 565 ); 
                                                                                          trampCall( callProcedure(  '_recur',  'recur',
                                                                                              begin
                                                                                                  trampCall(_recur)
                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:565"] + __e.backtrace ) ; raise __e
                                                                                              end                                                                                            ,
                                                                                          [
                                                                                                begin
                                                                                                    trampCall(_other_MIMARKlists)
                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:565"] + __e.backtrace ) ; raise __e
                                                                                                end
                                                                                          ]
                                                                                                       ))
                                                                                      end
                                                                                  }                                                                                ,
                                                                                  Proc.new { |_cars,_cdrs| 
                                                                                      begin
                                                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 567 ); 
                                                                                          trampCall( self._values_METHOD(  'values',
                                                                                              begin
                                                                                                if @global_lisp_binding.has_key?('_values') then
                                                                                                  trampCall(@_values)
                                                                                                else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:567"] + __e.backtrace ) ; raise __e
                                                                                              end                                                                                            ,
                                                                                          [
                                                                                                begin
                                                                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 566 ); 
                                                                                                    _cons(
                                                                                                        begin
                                                                                                            trampCall(_a)
                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:566"] + __e.backtrace ) ; raise __e
                                                                                                        end                                                                                                      ,
                                                                                                        begin
                                                                                                            trampCall(_cars)
                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:566"] + __e.backtrace ) ; raise __e
                                                                                                        end
                                                                                                    )
                                                                                                end                                                                                              ,
                                                                                                begin
                                                                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 566 ); 
                                                                                                    _cons(
                                                                                                        begin
                                                                                                            trampCall(_d)
                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:566"] + __e.backtrace ) ; raise __e
                                                                                                        end                                                                                                      ,
                                                                                                        begin
                                                                                                            trampCall(_cdrs)
                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:566"] + __e.backtrace ) ; raise __e
                                                                                                        end
                                                                                                    )
                                                                                                end
                                                                                          ]
                                                                                                       ))
                                                                                      end
                                                                                  }
                                                                            ]
                                                                                         ))
                                                                        end
                                                                    }
                                                              ]
                                                                           ))
                                                          end
                                                      end
                                                  }
                                            ]
                                                         )
                                        end
                                    else
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 567 ); 
                                            delayCall( '_values',  'values',
                                                begin
                                                  if @global_lisp_binding.has_key?('_values') then
                                                    trampCall(@_values)
                                                  else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:567"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                Cell.new()                                                ,
                                                Cell.new()
                                            ]
                                                         )
                                        end
                                    end
                                }
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 565 ); 
                                  delayCall( '_recur',  'recur',
                                      begin
                                          trampCall(_recur)
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:565"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        begin
                                            trampCall(_lists)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:561"] + __e.backtrace ) ; raise __e
                                        end
                                  ]
                                               )
                              end
                          } ; ___lambda.call(
                          nil
                                     )
                        end
                    end
                } ; ___lambda.call(
                      begin
                        embedBacktraceInfo( "./lib/srfi-1.nnd", 553 ); 
                          trampCall( self._find_METHOD(  'find',
                              begin
                                if @global_lisp_binding.has_key?('_find') then
                                  trampCall(@_find)
                                else raise NameError.new( "Error: undefined variable _find", "_find" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:553"] + __e.backtrace ) ; raise __e
                              end                            ,
                          [
                                Proc.new { |_lis| 
                                    begin
                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 562 ); 
                                        trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                                            begin
                                              if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                                trampCall(@_null_MIMARKlist_QUMARK)
                                              else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:562"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                        [
                                              begin
                                                  trampCall(_lis)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:555"] + __e.backtrace ) ; raise __e
                                              end
                                        ]
                                                     ))
                                    end
                                }                              ,
                                begin
                                    trampCall(_lists)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:561"] + __e.backtrace ) ; raise __e
                                end
                          ]
                                       ))
                      end
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self.__PAMARKcars_PLMARKcdrs_PLMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '__PAMARKcars_PLMARKcdrs_PLMARK', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['__PAMARKcars_PLMARKcdrs_PLMARK'] = self.method( :__PAMARKcars_PLMARKcdrs_PLMARK_METHOD )
    @__PAMARKcars_PLMARKcdrs_PLMARK = 
    trampCall(
          Proc.new { |_lists,_cars_MIMARKfinal| 
              begin
                ___lambda = lambda { |_abort| 
                    if ( 
                      begin
                          trampCall(_abort)
                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:576"] + __e.backtrace ) ; raise __e
                      end
                     ) then
                        begin
                          embedBacktraceInfo( "./lib/srfi-1.nnd", 586 ); 
                            delayCall( '_values',  'values',
                                begin
                                  if @global_lisp_binding.has_key?('_values') then
                                    trampCall(@_values)
                                  else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:586"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                Cell.new()                                ,
                                Cell.new()
                            ]
                                         )
                        end
                    else
                        begin
                          ___lambda = lambda { |_recur| 
                              _recur                               = 
                                Proc.new { |_lists| 
                                    if ( 
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 579 ); 
                                          _pair_QUMARK(
                                              begin
                                                  trampCall(_lists)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:580"] + __e.backtrace ) ; raise __e
                                              end
                                          )
                                      end
                                     ) then
                                        begin
                                          embedBacktraceInfo( "", 1 ); 
                                            delayCall( '_call_MIMARKwith_MIMARKvalues',  'call-with-values',
                                                begin
                                                  if @global_lisp_binding.has_key?('_call_MIMARKwith_MIMARKvalues') then
                                                    trampCall(@_call_MIMARKwith_MIMARKvalues)
                                                  else raise NameError.new( "Error: undefined variable _call_MIMARKwith_MIMARKvalues", "_call_MIMARKwith_MIMARKvalues" ) end
                                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                  Proc.new { || 
                                                      begin
                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 583 ); 
                                                          trampCall( self._car_PLMARKcdr_METHOD(  'car+cdr',
                                                              begin
                                                                if @global_lisp_binding.has_key?('_car_PLMARKcdr') then
                                                                  trampCall(@_car_PLMARKcdr)
                                                                else raise NameError.new( "Error: undefined variable _car_PLMARKcdr", "_car_PLMARKcdr" ) end
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:583"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                          [
                                                                begin
                                                                    trampCall(_lists)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:580"] + __e.backtrace ) ; raise __e
                                                                end
                                                          ]
                                                                       ))
                                                      end
                                                  }                                                ,
                                                  Proc.new { |_list,_other_MIMARKlists| 
                                                      if ( 
                                                        begin
                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 581 ); 
                                                            trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                                                    trampCall(@_null_MIMARKlist_QUMARK)
                                                                  else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:581"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                            [
                                                                  begin
                                                                      trampCall(_list)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:586"] + __e.backtrace ) ; raise __e
                                                                  end
                                                            ]
                                                                         ))
                                                        end
                                                       ) then
                                                          begin
                                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 586 ); 
                                                              trampCall( self._values_METHOD(  'values',
                                                                  begin
                                                                    if @global_lisp_binding.has_key?('_values') then
                                                                      trampCall(@_values)
                                                                    else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:586"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                              [
                                                                  Cell.new()                                                                  ,
                                                                  Cell.new()
                                                              ]
                                                                           ))
                                                          end
                                                      else
                                                          begin
                                                            embedBacktraceInfo( "", 1 ); 
                                                              trampCall( self._call_MIMARKwith_MIMARKvalues_METHOD(  'call-with-values',
                                                                  begin
                                                                    if @global_lisp_binding.has_key?('_call_MIMARKwith_MIMARKvalues') then
                                                                      trampCall(@_call_MIMARKwith_MIMARKvalues)
                                                                    else raise NameError.new( "Error: undefined variable _call_MIMARKwith_MIMARKvalues", "_call_MIMARKwith_MIMARKvalues" ) end
                                                                    rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                              [
                                                                    Proc.new { || 
                                                                        begin
                                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 583 ); 
                                                                            trampCall( self._car_PLMARKcdr_METHOD(  'car+cdr',
                                                                                begin
                                                                                  if @global_lisp_binding.has_key?('_car_PLMARKcdr') then
                                                                                    trampCall(@_car_PLMARKcdr)
                                                                                  else raise NameError.new( "Error: undefined variable _car_PLMARKcdr", "_car_PLMARKcdr" ) end
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:583"] + __e.backtrace ) ; raise __e
                                                                                end                                                                              ,
                                                                            [
                                                                                  begin
                                                                                      trampCall(_list)
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:586"] + __e.backtrace ) ; raise __e
                                                                                  end
                                                                            ]
                                                                                         ))
                                                                        end
                                                                    }                                                                  ,
                                                                    Proc.new { |_a,_d| 
                                                                        begin
                                                                          embedBacktraceInfo( "", 1 ); 
                                                                            trampCall( self._call_MIMARKwith_MIMARKvalues_METHOD(  'call-with-values',
                                                                                begin
                                                                                  if @global_lisp_binding.has_key?('_call_MIMARKwith_MIMARKvalues') then
                                                                                    trampCall(@_call_MIMARKwith_MIMARKvalues)
                                                                                  else raise NameError.new( "Error: undefined variable _call_MIMARKwith_MIMARKvalues", "_call_MIMARKwith_MIMARKvalues" ) end
                                                                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                end                                                                              ,
                                                                            [
                                                                                  Proc.new { || 
                                                                                      begin
                                                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 584 ); 
                                                                                          trampCall( callProcedure(  '_recur',  'recur',
                                                                                              begin
                                                                                                  trampCall(_recur)
                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:584"] + __e.backtrace ) ; raise __e
                                                                                              end                                                                                            ,
                                                                                          [
                                                                                                begin
                                                                                                    trampCall(_other_MIMARKlists)
                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:584"] + __e.backtrace ) ; raise __e
                                                                                                end
                                                                                          ]
                                                                                                       ))
                                                                                      end
                                                                                  }                                                                                ,
                                                                                  Proc.new { |_cars,_cdrs| 
                                                                                      begin
                                                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 586 ); 
                                                                                          trampCall( self._values_METHOD(  'values',
                                                                                              begin
                                                                                                if @global_lisp_binding.has_key?('_values') then
                                                                                                  trampCall(@_values)
                                                                                                else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:586"] + __e.backtrace ) ; raise __e
                                                                                              end                                                                                            ,
                                                                                          [
                                                                                                begin
                                                                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 585 ); 
                                                                                                    _cons(
                                                                                                        begin
                                                                                                            trampCall(_a)
                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:585"] + __e.backtrace ) ; raise __e
                                                                                                        end                                                                                                      ,
                                                                                                        begin
                                                                                                            trampCall(_cars)
                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:585"] + __e.backtrace ) ; raise __e
                                                                                                        end
                                                                                                    )
                                                                                                end                                                                                              ,
                                                                                                begin
                                                                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 585 ); 
                                                                                                    _cons(
                                                                                                        begin
                                                                                                            trampCall(_d)
                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:585"] + __e.backtrace ) ; raise __e
                                                                                                        end                                                                                                      ,
                                                                                                        begin
                                                                                                            trampCall(_cdrs)
                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:585"] + __e.backtrace ) ; raise __e
                                                                                                        end
                                                                                                    )
                                                                                                end
                                                                                          ]
                                                                                                       ))
                                                                                      end
                                                                                  }
                                                                            ]
                                                                                         ))
                                                                        end
                                                                    }
                                                              ]
                                                                           ))
                                                          end
                                                      end
                                                  }
                                            ]
                                                         )
                                        end
                                    else
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 586 ); 
                                            delayCall( '_values',  'values',
                                                begin
                                                  if @global_lisp_binding.has_key?('_values') then
                                                    trampCall(@_values)
                                                  else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:586"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 586 ); 
                                                      trampCall( self._list_METHOD(  'list',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_list') then
                                                              trampCall(@_list)
                                                            else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:586"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                      [
                                                            begin
                                                                trampCall(_cars_MIMARKfinal)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:586"] + __e.backtrace ) ; raise __e
                                                            end
                                                      ]
                                                                   ))
                                                  end                                                ,
                                                Cell.new()
                                            ]
                                                         )
                                        end
                                    end
                                }
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 584 ); 
                                  delayCall( '_recur',  'recur',
                                      begin
                                          trampCall(_recur)
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:584"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        begin
                                            trampCall(_lists)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:580"] + __e.backtrace ) ; raise __e
                                        end
                                  ]
                                               )
                              end
                          } ; ___lambda.call(
                          nil
                                     )
                        end
                    end
                } ; ___lambda.call(
                      begin
                        embedBacktraceInfo( "./lib/srfi-1.nnd", 572 ); 
                          trampCall( self._find_METHOD(  'find',
                              begin
                                if @global_lisp_binding.has_key?('_find') then
                                  trampCall(@_find)
                                else raise NameError.new( "Error: undefined variable _find", "_find" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:572"] + __e.backtrace ) ; raise __e
                              end                            ,
                          [
                                Proc.new { |_lis| 
                                    begin
                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 581 ); 
                                        trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                                            begin
                                              if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                                trampCall(@_null_MIMARKlist_QUMARK)
                                              else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:581"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                        [
                                              begin
                                                  trampCall(_lis)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:574"] + __e.backtrace ) ; raise __e
                                              end
                                        ]
                                                     ))
                                    end
                                }                              ,
                                begin
                                    trampCall(_lists)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:580"] + __e.backtrace ) ; raise __e
                                end
                          ]
                                       ))
                      end
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self.__PAMARKcars_PLMARKcdrs_SLMARKno_MIMARKtest_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '__PAMARKcars_PLMARKcdrs_SLMARKno_MIMARKtest', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['__PAMARKcars_PLMARKcdrs_SLMARKno_MIMARKtest'] = self.method( :__PAMARKcars_PLMARKcdrs_SLMARKno_MIMARKtest_METHOD )
    @__PAMARKcars_PLMARKcdrs_SLMARKno_MIMARKtest = 
    trampCall(
          Proc.new { |_lists| 
              begin
                ___lambda = lambda { |_recur| 
                    _recur                     = 
                      Proc.new { |_lists| 
                          if ( 
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 592 ); 
                                _pair_QUMARK(
                                    begin
                                        trampCall(_lists)
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:593"] + __e.backtrace ) ; raise __e
                                    end
                                )
                            end
                           ) then
                              begin
                                embedBacktraceInfo( "", 1 ); 
                                  delayCall( '_call_MIMARKwith_MIMARKvalues',  'call-with-values',
                                      begin
                                        if @global_lisp_binding.has_key?('_call_MIMARKwith_MIMARKvalues') then
                                          trampCall(@_call_MIMARKwith_MIMARKvalues)
                                        else raise NameError.new( "Error: undefined variable _call_MIMARKwith_MIMARKvalues", "_call_MIMARKwith_MIMARKvalues" ) end
                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        Proc.new { || 
                                            begin
                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 594 ); 
                                                trampCall( self._car_PLMARKcdr_METHOD(  'car+cdr',
                                                    begin
                                                      if @global_lisp_binding.has_key?('_car_PLMARKcdr') then
                                                        trampCall(@_car_PLMARKcdr)
                                                      else raise NameError.new( "Error: undefined variable _car_PLMARKcdr", "_car_PLMARKcdr" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:594"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                [
                                                      begin
                                                          trampCall(_lists)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:593"] + __e.backtrace ) ; raise __e
                                                      end
                                                ]
                                                             ))
                                            end
                                        }                                      ,
                                        Proc.new { |_list,_other_MIMARKlists| 
                                            begin
                                              embedBacktraceInfo( "", 1 ); 
                                                trampCall( self._call_MIMARKwith_MIMARKvalues_METHOD(  'call-with-values',
                                                    begin
                                                      if @global_lisp_binding.has_key?('_call_MIMARKwith_MIMARKvalues') then
                                                        trampCall(@_call_MIMARKwith_MIMARKvalues)
                                                      else raise NameError.new( "Error: undefined variable _call_MIMARKwith_MIMARKvalues", "_call_MIMARKwith_MIMARKvalues" ) end
                                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                [
                                                      Proc.new { || 
                                                          begin
                                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 594 ); 
                                                              trampCall( self._car_PLMARKcdr_METHOD(  'car+cdr',
                                                                  begin
                                                                    if @global_lisp_binding.has_key?('_car_PLMARKcdr') then
                                                                      trampCall(@_car_PLMARKcdr)
                                                                    else raise NameError.new( "Error: undefined variable _car_PLMARKcdr", "_car_PLMARKcdr" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:594"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                              [
                                                                    begin
                                                                        trampCall(_list)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:594"] + __e.backtrace ) ; raise __e
                                                                    end
                                                              ]
                                                                           ))
                                                          end
                                                      }                                                    ,
                                                      Proc.new { |_a,_d| 
                                                          begin
                                                            embedBacktraceInfo( "", 1 ); 
                                                              trampCall( self._call_MIMARKwith_MIMARKvalues_METHOD(  'call-with-values',
                                                                  begin
                                                                    if @global_lisp_binding.has_key?('_call_MIMARKwith_MIMARKvalues') then
                                                                      trampCall(@_call_MIMARKwith_MIMARKvalues)
                                                                    else raise NameError.new( "Error: undefined variable _call_MIMARKwith_MIMARKvalues", "_call_MIMARKwith_MIMARKvalues" ) end
                                                                    rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                              [
                                                                    Proc.new { || 
                                                                        begin
                                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 595 ); 
                                                                            trampCall( callProcedure(  '_recur',  'recur',
                                                                                begin
                                                                                    trampCall(_recur)
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:595"] + __e.backtrace ) ; raise __e
                                                                                end                                                                              ,
                                                                            [
                                                                                  begin
                                                                                      trampCall(_other_MIMARKlists)
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:595"] + __e.backtrace ) ; raise __e
                                                                                  end
                                                                            ]
                                                                                         ))
                                                                        end
                                                                    }                                                                  ,
                                                                    Proc.new { |_cars,_cdrs| 
                                                                        begin
                                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 597 ); 
                                                                            trampCall( self._values_METHOD(  'values',
                                                                                begin
                                                                                  if @global_lisp_binding.has_key?('_values') then
                                                                                    trampCall(@_values)
                                                                                  else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:597"] + __e.backtrace ) ; raise __e
                                                                                end                                                                              ,
                                                                            [
                                                                                  begin
                                                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 596 ); 
                                                                                      _cons(
                                                                                          begin
                                                                                              trampCall(_a)
                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:596"] + __e.backtrace ) ; raise __e
                                                                                          end                                                                                        ,
                                                                                          begin
                                                                                              trampCall(_cars)
                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:596"] + __e.backtrace ) ; raise __e
                                                                                          end
                                                                                      )
                                                                                  end                                                                                ,
                                                                                  begin
                                                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 596 ); 
                                                                                      _cons(
                                                                                          begin
                                                                                              trampCall(_d)
                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:596"] + __e.backtrace ) ; raise __e
                                                                                          end                                                                                        ,
                                                                                          begin
                                                                                              trampCall(_cdrs)
                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:596"] + __e.backtrace ) ; raise __e
                                                                                          end
                                                                                      )
                                                                                  end
                                                                            ]
                                                                                         ))
                                                                        end
                                                                    }
                                                              ]
                                                                           ))
                                                          end
                                                      }
                                                ]
                                                             ))
                                            end
                                        }
                                  ]
                                               )
                              end
                          else
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 597 ); 
                                  delayCall( '_values',  'values',
                                      begin
                                        if @global_lisp_binding.has_key?('_values') then
                                          trampCall(@_values)
                                        else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:597"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                      Cell.new()                                      ,
                                      Cell.new()
                                  ]
                                               )
                              end
                          end
                      }
                    begin
                      embedBacktraceInfo( "./lib/srfi-1.nnd", 595 ); 
                        delayCall( '_recur',  'recur',
                            begin
                                trampCall(_recur)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:595"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              begin
                                  trampCall(_lists)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:593"] + __e.backtrace ) ; raise __e
                              end
                        ]
                                     )
                    end
                } ; ___lambda.call(
                nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._count_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_count', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_count'] = self.method( :_count_METHOD )
    @_count = 
    trampCall(
          Proc.new { |_pred,_list1,*__rest__| _lists = __rest__[0] ;  
              begin
              end
              if ( 
                begin
                  embedBacktraceInfo( "./lib/srfi-1.nnd", 604 ); 
                    _pair_QUMARK(
                        begin
                            trampCall(_lists)
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:609"] + __e.backtrace ) ; raise __e
                        end
                    )
                end
               ) then
                  begin
                    ___lambda = lambda { |_lp| 
                        _lp                         = 
                          Proc.new { |_list1,_lists,_i| 
                              if ( 
                                begin
                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 616 ); 
                                    trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                                        begin
                                          if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                            trampCall(@_null_MIMARKlist_QUMARK)
                                          else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:616"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                    [
                                          begin
                                              trampCall(_list1)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:615"] + __e.backtrace ) ; raise __e
                                          end
                                    ]
                                                 ))
                                end
                               ) then
                                  begin
                                      trampCall(_i)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:617"] + __e.backtrace ) ; raise __e
                                  end
                              else
                                  begin
                                    embedBacktraceInfo( "", 1 ); 
                                      delayCall( '_call_MIMARKwith_MIMARKvalues',  'call-with-values',
                                          begin
                                            if @global_lisp_binding.has_key?('_call_MIMARKwith_MIMARKvalues') then
                                              trampCall(@_call_MIMARKwith_MIMARKvalues)
                                            else raise NameError.new( "Error: undefined variable _call_MIMARKwith_MIMARKvalues", "_call_MIMARKwith_MIMARKvalues" ) end
                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                      [
                                            Proc.new { || 
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 609 ); 
                                                    trampCall( self.__PAMARKcars_PLMARKcdrs_METHOD(  '%cars+cdrs',
                                                        begin
                                                          if @global_lisp_binding.has_key?('__PAMARKcars_PLMARKcdrs') then
                                                            trampCall(@__PAMARKcars_PLMARKcdrs)
                                                          else raise NameError.new( "Error: undefined variable __PAMARKcars_PLMARKcdrs", "__PAMARKcars_PLMARKcdrs" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:609"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                    [
                                                          begin
                                                              trampCall(_lists)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:609"] + __e.backtrace ) ; raise __e
                                                          end
                                                    ]
                                                                 ))
                                                end
                                            }                                          ,
                                            Proc.new { |_as,_ds| 
                                                if ( 
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 610 ); 
                                                      _null_QUMARK(
                                                          begin
                                                              trampCall(_as)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:612"] + __e.backtrace ) ; raise __e
                                                          end
                                                      )
                                                  end
                                                 ) then
                                                    begin
                                                        trampCall(_i)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:617"] + __e.backtrace ) ; raise __e
                                                    end
                                                else
                                                    begin
                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 617 ); 
                                                        trampCall( callProcedure(  '_lp',  'lp',
                                                            begin
                                                                trampCall(_lp)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:617"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                        [
                                                              begin
                                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 617 ); 
                                                                  _cdr(
                                                                      begin
                                                                          trampCall(_list1)
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:615"] + __e.backtrace ) ; raise __e
                                                                      end
                                                                  )
                                                              end                                                            ,
                                                              begin
                                                                  trampCall(_ds)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:611"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              if ( 
                                                                begin
                                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 612 ); 
                                                                    trampCall( self._apply_METHOD(  'apply',
                                                                        begin
                                                                          if @global_lisp_binding.has_key?('_apply') then
                                                                            trampCall(@_apply)
                                                                          else raise NameError.new( "Error: undefined variable _apply", "_apply" ) end
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:612"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                    [
                                                                          begin
                                                                              trampCall(_pred)
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:617"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                          begin
                                                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 617 ); 
                                                                              _car(
                                                                                  begin
                                                                                      trampCall(_list1)
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:615"] + __e.backtrace ) ; raise __e
                                                                                  end
                                                                              )
                                                                          end                                                                        ,
                                                                          begin
                                                                              trampCall(_as)
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:612"] + __e.backtrace ) ; raise __e
                                                                          end
                                                                    ]
                                                                                 ))
                                                                end
                                                               ) then
                                                                  begin
                                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 617 ); 
                                                                      __PLMARK_ARGS2(
                                                                          begin
                                                                              trampCall(_i)
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:617"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                        1
                                                                      )
                                                                  end
                                                              else
                                                                  begin
                                                                      trampCall(_i)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:617"] + __e.backtrace ) ; raise __e
                                                                  end
                                                              end
                                                        ]
                                                                     ))
                                                    end
                                                end
                                            }
                                      ]
                                                   )
                                  end
                              end
                          }
                        begin
                          embedBacktraceInfo( "./lib/srfi-1.nnd", 617 ); 
                            delayCall( '_lp',  'lp',
                                begin
                                    trampCall(_lp)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:617"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                  begin
                                      trampCall(_list1)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:615"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  begin
                                      trampCall(_lists)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:609"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                0
                            ]
                                         )
                        end
                    } ; ___lambda.call(
                    nil
                               )
                  end
              else
                  begin
                    ___lambda = lambda { |_lp| 
                        _lp                         = 
                          Proc.new { |_lis,_i| 
                              if ( 
                                begin
                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 616 ); 
                                    trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                                        begin
                                          if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                            trampCall(@_null_MIMARKlist_QUMARK)
                                          else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:616"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                    [
                                          begin
                                              trampCall(_lis)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:617"] + __e.backtrace ) ; raise __e
                                          end
                                    ]
                                                 ))
                                end
                               ) then
                                  begin
                                      trampCall(_i)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:617"] + __e.backtrace ) ; raise __e
                                  end
                              else
                                  begin
                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 617 ); 
                                      delayCall( '_lp',  'lp',
                                          begin
                                              trampCall(_lp)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:617"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                      [
                                            begin
                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 617 ); 
                                                _cdr(
                                                    begin
                                                        trampCall(_lis)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:617"] + __e.backtrace ) ; raise __e
                                                    end
                                                )
                                            end                                          ,
                                            if ( 
                                              begin
                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 617 ); 
                                                  trampCall( callProcedure(  '_pred',  'pred',
                                                      begin
                                                          trampCall(_pred)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:617"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                  [
                                                        begin
                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 617 ); 
                                                            _car(
                                                                begin
                                                                    trampCall(_lis)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:617"] + __e.backtrace ) ; raise __e
                                                                end
                                                            )
                                                        end
                                                  ]
                                                               ))
                                              end
                                             ) then
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 617 ); 
                                                    __PLMARK_ARGS2(
                                                        begin
                                                            trampCall(_i)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:617"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                      1
                                                    )
                                                end
                                            else
                                                begin
                                                    trampCall(_i)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:617"] + __e.backtrace ) ; raise __e
                                                end
                                            end
                                      ]
                                                   )
                                  end
                              end
                          }
                        begin
                          embedBacktraceInfo( "./lib/srfi-1.nnd", 617 ); 
                            delayCall( '_lp',  'lp',
                                begin
                                    trampCall(_lp)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:617"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                  begin
                                      trampCall(_list1)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:615"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                0
                            ]
                                         )
                        end
                    } ; ___lambda.call(
                    nil
                               )
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._unfold_MIMARKright_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_unfold_MIMARKright', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_unfold_MIMARKright'] = self.method( :_unfold_MIMARKright_METHOD )
    @_unfold_MIMARKright = 
    trampCall(
          Proc.new { |_p,_f,_g,_seed,*__rest__| _maybe_MIMARKtail = __rest__[0] ;  
              begin
              end
              begin
              end
              begin
              end
              begin
                ___lambda = lambda { |_lp| 
                    _lp                     = 
                      Proc.new { |_seed,_ans| 
                          if ( 
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 628 ); 
                                trampCall( callProcedure(  '_p',  'p',
                                    begin
                                        trampCall(_p)
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:628"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                [
                                      begin
                                          trampCall(_seed)
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:630"] + __e.backtrace ) ; raise __e
                                      end
                                ]
                                             ))
                            end
                           ) then
                              begin
                                  trampCall(_ans)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:630"] + __e.backtrace ) ; raise __e
                              end
                          else
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 629 ); 
                                  delayCall( '_lp',  'lp',
                                      begin
                                          trampCall(_lp)
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:629"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 629 ); 
                                            trampCall( callProcedure(  '_g',  'g',
                                                begin
                                                    trampCall(_g)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:629"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                  begin
                                                      trampCall(_seed)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:630"] + __e.backtrace ) ; raise __e
                                                  end
                                            ]
                                                         ))
                                        end                                      ,
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 630 ); 
                                            _cons(
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 630 ); 
                                                    trampCall( callProcedure(  '_f',  'f',
                                                        begin
                                                            trampCall(_f)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:630"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                    [
                                                          begin
                                                              trampCall(_seed)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:630"] + __e.backtrace ) ; raise __e
                                                          end
                                                    ]
                                                                 ))
                                                end                                              ,
                                                begin
                                                    trampCall(_ans)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:630"] + __e.backtrace ) ; raise __e
                                                end
                                            )
                                        end
                                  ]
                                               )
                              end
                          end
                      }
                    begin
                      embedBacktraceInfo( "./lib/srfi-1.nnd", 629 ); 
                        delayCall( '_lp',  'lp',
                            begin
                                trampCall(_lp)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:629"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              begin
                                  trampCall(_seed)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:630"] + __e.backtrace ) ; raise __e
                              end                            ,
                              begin
                                ___lambda = lambda { |___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30213| 
                                    if ( 
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 610 ); 
                                          _null_QUMARK(
                                              begin
                                                  trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30213)
                                                rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                              end
                                          )
                                      end
                                     ) then
                                      Cell.new()
                                    else
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 617 ); 
                                            _car(
                                                begin
                                                    trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30213)
                                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                end
                                            )
                                        end
                                    end
                                } ; ___lambda.call(
                                      begin
                                          trampCall(_maybe_MIMARKtail)
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:627"] + __e.backtrace ) ; raise __e
                                      end
                                           )
                              end
                        ]
                                     )
                    end
                } ; ___lambda.call(
                nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._unfold_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_unfold', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_unfold'] = self.method( :_unfold_METHOD )
    @_unfold = 
    trampCall(
          Proc.new { |_p,_f,_g,_seed,*__rest__| _maybe_MIMARKtail_MIMARKgen = __rest__[0] ;  
              begin
              end
              begin
              end
              begin
              end
              if ( 
                begin
                  embedBacktraceInfo( "./lib/srfi-1.nnd", 640 ); 
                    _pair_QUMARK(
                        begin
                            trampCall(_maybe_MIMARKtail_MIMARKgen)
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:641"] + __e.backtrace ) ; raise __e
                        end
                    )
                end
               ) then
                  begin
                    ___lambda = lambda { |_tail_MIMARKgen| 
                        if ( 
                          begin
                            embedBacktraceInfo( "./lib/srfi-1.nnd", 640 ); 
                              _pair_QUMARK(
                                  begin
                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 640 ); 
                                      _cdr(
                                          begin
                                              trampCall(_maybe_MIMARKtail_MIMARKgen)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:641"] + __e.backtrace ) ; raise __e
                                          end
                                      )
                                  end
                              )
                          end
                         ) then
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 641 ); 
                                delayCall( '_apply',  'apply',
                                    begin
                                      if @global_lisp_binding.has_key?('_apply') then
                                        trampCall(@_apply)
                                      else raise NameError.new( "Error: undefined variable _apply", "_apply" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:641"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                [
                                      begin
                                        if @global_lisp_binding.has_key?('_error') then
                                          trampCall(@_error)
                                        else raise NameError.new( "Error: undefined variable _error", "_error" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:641"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                    "Too many arguments"                                    ,
                                      begin
                                        if @global_lisp_binding.has_key?('_unfold') then
                                          trampCall(@_unfold)
                                        else raise NameError.new( "Error: undefined variable _unfold", "_unfold" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:641"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      begin
                                          trampCall(_p)
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:648"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      begin
                                          trampCall(_f)
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:649"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      begin
                                          trampCall(_g)
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:649"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      begin
                                          trampCall(_seed)
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:649"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      begin
                                          trampCall(_maybe_MIMARKtail_MIMARKgen)
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:641"] + __e.backtrace ) ; raise __e
                                      end
                                ]
                                             )
                            end
                        else
                            begin
                              ___lambda = lambda { |_recur| 
                                  _recur                                   = 
                                    Proc.new { |_seed| 
                                        if ( 
                                          begin
                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 648 ); 
                                              trampCall( callProcedure(  '_p',  'p',
                                                  begin
                                                      trampCall(_p)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:648"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                              [
                                                    begin
                                                        trampCall(_seed)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:649"] + __e.backtrace ) ; raise __e
                                                    end
                                              ]
                                                           ))
                                          end
                                         ) then
                                            begin
                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 644 ); 
                                                delayCall( '_tail_MIMARKgen',  'tail-gen',
                                                    begin
                                                        trampCall(_tail_MIMARKgen)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:644"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                [
                                                      begin
                                                          trampCall(_seed)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:649"] + __e.backtrace ) ; raise __e
                                                      end
                                                ]
                                                             )
                                            end
                                        else
                                            begin
                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 649 ); 
                                                delayCall( '_cons',  'cons',
                                                    begin
                                                      if @global_lisp_binding.has_key?('_cons') then
                                                        trampCall(@_cons)
                                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:649"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                [
                                                      begin
                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 649 ); 
                                                          trampCall( callProcedure(  '_f',  'f',
                                                              begin
                                                                  trampCall(_f)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:649"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                          [
                                                                begin
                                                                    trampCall(_seed)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:649"] + __e.backtrace ) ; raise __e
                                                                end
                                                          ]
                                                                       ))
                                                      end                                                    ,
                                                      begin
                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 649 ); 
                                                          trampCall( callProcedure(  '_recur',  'recur',
                                                              begin
                                                                  trampCall(_recur)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:649"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                          [
                                                                begin
                                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 649 ); 
                                                                    trampCall( callProcedure(  '_g',  'g',
                                                                        begin
                                                                            trampCall(_g)
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:649"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                    [
                                                                          begin
                                                                              trampCall(_seed)
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:649"] + __e.backtrace ) ; raise __e
                                                                          end
                                                                    ]
                                                                                 ))
                                                                end
                                                          ]
                                                                       ))
                                                      end
                                                ]
                                                             )
                                            end
                                        end
                                    }
                                  begin
                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 649 ); 
                                      delayCall( '_recur',  'recur',
                                          begin
                                              trampCall(_recur)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:649"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                      [
                                            begin
                                                trampCall(_seed)
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:649"] + __e.backtrace ) ; raise __e
                                            end
                                      ]
                                                   )
                                  end
                              } ; ___lambda.call(
                              nil
                                         )
                            end
                        end
                    } ; ___lambda.call(
                          begin
                            embedBacktraceInfo( "./lib/srfi-1.nnd", 639 ); 
                              _car(
                                  begin
                                      trampCall(_maybe_MIMARKtail_MIMARKgen)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:641"] + __e.backtrace ) ; raise __e
                                  end
                              )
                          end
                               )
                  end
              else
                  begin
                    ___lambda = lambda { |_recur| 
                        _recur                         = 
                          Proc.new { |_seed| 
                              if ( 
                                begin
                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 648 ); 
                                    trampCall( callProcedure(  '_p',  'p',
                                        begin
                                            trampCall(_p)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:648"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                    [
                                          begin
                                              trampCall(_seed)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:649"] + __e.backtrace ) ; raise __e
                                          end
                                    ]
                                                 ))
                                end
                               ) then
                                Cell.new()
                              else
                                  begin
                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 649 ); 
                                      delayCall( '_cons',  'cons',
                                          begin
                                            if @global_lisp_binding.has_key?('_cons') then
                                              trampCall(@_cons)
                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:649"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                      [
                                            begin
                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 649 ); 
                                                trampCall( callProcedure(  '_f',  'f',
                                                    begin
                                                        trampCall(_f)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:649"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                [
                                                      begin
                                                          trampCall(_seed)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:649"] + __e.backtrace ) ; raise __e
                                                      end
                                                ]
                                                             ))
                                            end                                          ,
                                            begin
                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 649 ); 
                                                trampCall( callProcedure(  '_recur',  'recur',
                                                    begin
                                                        trampCall(_recur)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:649"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                [
                                                      begin
                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 649 ); 
                                                          trampCall( callProcedure(  '_g',  'g',
                                                              begin
                                                                  trampCall(_g)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:649"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                          [
                                                                begin
                                                                    trampCall(_seed)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:649"] + __e.backtrace ) ; raise __e
                                                                end
                                                          ]
                                                                       ))
                                                      end
                                                ]
                                                             ))
                                            end
                                      ]
                                                   )
                                  end
                              end
                          }
                        begin
                          embedBacktraceInfo( "./lib/srfi-1.nnd", 649 ); 
                            delayCall( '_recur',  'recur',
                                begin
                                    trampCall(_recur)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:649"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                  begin
                                      trampCall(_seed)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:649"] + __e.backtrace ) ; raise __e
                                  end
                            ]
                                         )
                        end
                    } ; ___lambda.call(
                    nil
                               )
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._fold_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_fold', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_fold'] = self.method( :_fold_METHOD )
    @_fold = 
    trampCall(
          Proc.new { |_kons,_knil,_lis1,*__rest__| _lists = __rest__[0] ;  
              begin
              end
              if ( 
                begin
                  embedBacktraceInfo( "./lib/srfi-1.nnd", 654 ); 
                    _pair_QUMARK(
                        begin
                            trampCall(_lists)
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:656"] + __e.backtrace ) ; raise __e
                        end
                    )
                end
               ) then
                  begin
                    ___lambda = lambda { |_lp| 
                        _lp                         = 
                          Proc.new { |_lists,_ans| 
                              begin
                                embedBacktraceInfo( "", 1 ); 
                                  delayCall( '_call_MIMARKwith_MIMARKvalues',  'call-with-values',
                                      begin
                                        if @global_lisp_binding.has_key?('_call_MIMARKwith_MIMARKvalues') then
                                          trampCall(@_call_MIMARKwith_MIMARKvalues)
                                        else raise NameError.new( "Error: undefined variable _call_MIMARKwith_MIMARKvalues", "_call_MIMARKwith_MIMARKvalues" ) end
                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        Proc.new { || 
                                            begin
                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 656 ); 
                                                trampCall( self.__PAMARKcars_PLMARKcdrs_PLMARK_METHOD(  '%cars+cdrs+',
                                                    begin
                                                      if @global_lisp_binding.has_key?('__PAMARKcars_PLMARKcdrs_PLMARK') then
                                                        trampCall(@__PAMARKcars_PLMARKcdrs_PLMARK)
                                                      else raise NameError.new( "Error: undefined variable __PAMARKcars_PLMARKcdrs_PLMARK", "__PAMARKcars_PLMARKcdrs_PLMARK" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:656"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                [
                                                      begin
                                                          trampCall(_lists)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:656"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      begin
                                                          trampCall(_ans)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:662"] + __e.backtrace ) ; raise __e
                                                      end
                                                ]
                                                             ))
                                            end
                                        }                                      ,
                                        Proc.new { |_cars_PLMARKans,_cdrs| 
                                            if ( 
                                              begin
                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 657 ); 
                                                  _null_QUMARK(
                                                      begin
                                                          trampCall(_cars_PLMARKans)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:658"] + __e.backtrace ) ; raise __e
                                                      end
                                                  )
                                              end
                                             ) then
                                                begin
                                                    trampCall(_ans)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:662"] + __e.backtrace ) ; raise __e
                                                end
                                            else
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 662 ); 
                                                    trampCall( callProcedure(  '_lp',  'lp',
                                                        begin
                                                            trampCall(_lp)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:662"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                    [
                                                          begin
                                                              trampCall(_cdrs)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:658"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          begin
                                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 658 ); 
                                                              trampCall( self._apply_METHOD(  'apply',
                                                                  begin
                                                                    if @global_lisp_binding.has_key?('_apply') then
                                                                      trampCall(@_apply)
                                                                    else raise NameError.new( "Error: undefined variable _apply", "_apply" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:658"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                              [
                                                                    begin
                                                                        trampCall(_kons)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:662"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                    begin
                                                                        trampCall(_cars_PLMARKans)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:658"] + __e.backtrace ) ; raise __e
                                                                    end
                                                              ]
                                                                           ))
                                                          end
                                                    ]
                                                                 ))
                                                end
                                            end
                                        }
                                  ]
                                               )
                              end
                          }
                        begin
                          embedBacktraceInfo( "./lib/srfi-1.nnd", 662 ); 
                            delayCall( '_lp',  'lp',
                                begin
                                    trampCall(_lp)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:662"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                  begin
                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 655 ); 
                                      _cons(
                                          begin
                                              trampCall(_lis1)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:660"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          begin
                                              trampCall(_lists)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:656"] + __e.backtrace ) ; raise __e
                                          end
                                      )
                                  end                                ,
                                  begin
                                      trampCall(_knil)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:660"] + __e.backtrace ) ; raise __e
                                  end
                            ]
                                         )
                        end
                    } ; ___lambda.call(
                    nil
                               )
                  end
              else
                  begin
                    ___lambda = lambda { |_lp| 
                        _lp                         = 
                          Proc.new { |_lis,_ans| 
                              if ( 
                                begin
                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 661 ); 
                                    trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                                        begin
                                          if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                            trampCall(@_null_MIMARKlist_QUMARK)
                                          else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:661"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                    [
                                          begin
                                              trampCall(_lis)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:662"] + __e.backtrace ) ; raise __e
                                          end
                                    ]
                                                 ))
                                end
                               ) then
                                  begin
                                      trampCall(_ans)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:662"] + __e.backtrace ) ; raise __e
                                  end
                              else
                                  begin
                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 662 ); 
                                      delayCall( '_lp',  'lp',
                                          begin
                                              trampCall(_lp)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:662"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                      [
                                            begin
                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 662 ); 
                                                _cdr(
                                                    begin
                                                        trampCall(_lis)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:662"] + __e.backtrace ) ; raise __e
                                                    end
                                                )
                                            end                                          ,
                                            begin
                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 662 ); 
                                                trampCall( callProcedure(  '_kons',  'kons',
                                                    begin
                                                        trampCall(_kons)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:662"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                [
                                                      begin
                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 662 ); 
                                                          _car(
                                                              begin
                                                                  trampCall(_lis)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:662"] + __e.backtrace ) ; raise __e
                                                              end
                                                          )
                                                      end                                                    ,
                                                      begin
                                                          trampCall(_ans)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:662"] + __e.backtrace ) ; raise __e
                                                      end
                                                ]
                                                             ))
                                            end
                                      ]
                                                   )
                                  end
                              end
                          }
                        begin
                          embedBacktraceInfo( "./lib/srfi-1.nnd", 662 ); 
                            delayCall( '_lp',  'lp',
                                begin
                                    trampCall(_lp)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:662"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                  begin
                                      trampCall(_lis1)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:660"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  begin
                                      trampCall(_knil)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:660"] + __e.backtrace ) ; raise __e
                                  end
                            ]
                                         )
                        end
                    } ; ___lambda.call(
                    nil
                               )
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._fold_MIMARKright_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_fold_MIMARKright', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_fold_MIMARKright'] = self.method( :_fold_MIMARKright_METHOD )
    @_fold_MIMARKright = 
    trampCall(
          Proc.new { |_kons,_knil,_lis1,*__rest__| _lists = __rest__[0] ;  
              begin
              end
              if ( 
                begin
                  embedBacktraceInfo( "./lib/srfi-1.nnd", 667 ); 
                    _pair_QUMARK(
                        begin
                            trampCall(_lists)
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:671"] + __e.backtrace ) ; raise __e
                        end
                    )
                end
               ) then
                  begin
                    ___lambda = lambda { |_recur| 
                        _recur                         = 
                          Proc.new { |_lists| 
                              begin
                                ___lambda = lambda { |_cdrs| 
                                    if ( 
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 670 ); 
                                          _null_QUMARK(
                                              begin
                                                  trampCall(_cdrs)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:671"] + __e.backtrace ) ; raise __e
                                              end
                                          )
                                      end
                                     ) then
                                        begin
                                            trampCall(_knil)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:674"] + __e.backtrace ) ; raise __e
                                        end
                                    else
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 671 ); 
                                            delayCall( '_apply',  'apply',
                                                begin
                                                  if @global_lisp_binding.has_key?('_apply') then
                                                    trampCall(@_apply)
                                                  else raise NameError.new( "Error: undefined variable _apply", "_apply" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:671"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                  begin
                                                      trampCall(_kons)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:676"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 671 ); 
                                                      trampCall( self.__PAMARKcars_PLMARK_METHOD(  '%cars+',
                                                          begin
                                                            if @global_lisp_binding.has_key?('__PAMARKcars_PLMARK') then
                                                              trampCall(@__PAMARKcars_PLMARK)
                                                            else raise NameError.new( "Error: undefined variable __PAMARKcars_PLMARK", "__PAMARKcars_PLMARK" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:671"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                      [
                                                            begin
                                                                trampCall(_lists)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:671"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            begin
                                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 676 ); 
                                                                trampCall( callProcedure(  '_recur',  'recur',
                                                                    begin
                                                                        trampCall(_recur)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:676"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                [
                                                                      begin
                                                                          trampCall(_cdrs)
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:671"] + __e.backtrace ) ; raise __e
                                                                      end
                                                                ]
                                                                             ))
                                                            end
                                                      ]
                                                                   ))
                                                  end
                                            ]
                                                         )
                                        end
                                    end
                                } ; ___lambda.call(
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 669 ); 
                                          trampCall( self.__PAMARKcdrs_METHOD(  '%cdrs',
                                              begin
                                                if @global_lisp_binding.has_key?('__PAMARKcdrs') then
                                                  trampCall(@__PAMARKcdrs)
                                                else raise NameError.new( "Error: undefined variable __PAMARKcdrs", "__PAMARKcdrs" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:669"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                          [
                                                begin
                                                    trampCall(_lists)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:671"] + __e.backtrace ) ; raise __e
                                                end
                                          ]
                                                       ))
                                      end
                                           )
                              end
                          }
                        begin
                          embedBacktraceInfo( "./lib/srfi-1.nnd", 676 ); 
                            delayCall( '_recur',  'recur',
                                begin
                                    trampCall(_recur)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:676"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                  begin
                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 668 ); 
                                      _cons(
                                          begin
                                              trampCall(_lis1)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:673"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          begin
                                              trampCall(_lists)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:671"] + __e.backtrace ) ; raise __e
                                          end
                                      )
                                  end
                            ]
                                         )
                        end
                    } ; ___lambda.call(
                    nil
                               )
                  end
              else
                  begin
                    ___lambda = lambda { |_recur| 
                        _recur                         = 
                          Proc.new { |_lis| 
                              if ( 
                                begin
                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 674 ); 
                                    trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                                        begin
                                          if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                            trampCall(@_null_MIMARKlist_QUMARK)
                                          else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:674"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                    [
                                          begin
                                              trampCall(_lis)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:676"] + __e.backtrace ) ; raise __e
                                          end
                                    ]
                                                 ))
                                end
                               ) then
                                  begin
                                      trampCall(_knil)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:674"] + __e.backtrace ) ; raise __e
                                  end
                              else
                                  begin
                                    ___lambda = lambda { |_head| 
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 676 ); 
                                            delayCall( '_kons',  'kons',
                                                begin
                                                    trampCall(_kons)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:676"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                  begin
                                                      trampCall(_head)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:676"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 676 ); 
                                                      trampCall( callProcedure(  '_recur',  'recur',
                                                          begin
                                                              trampCall(_recur)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:676"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                      [
                                                            begin
                                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 676 ); 
                                                                _cdr(
                                                                    begin
                                                                        trampCall(_lis)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:676"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                )
                                                            end
                                                      ]
                                                                   ))
                                                  end
                                            ]
                                                         )
                                        end
                                    } ; ___lambda.call(
                                          begin
                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 675 ); 
                                              _car(
                                                  begin
                                                      trampCall(_lis)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:676"] + __e.backtrace ) ; raise __e
                                                  end
                                              )
                                          end
                                               )
                                  end
                              end
                          }
                        begin
                          embedBacktraceInfo( "./lib/srfi-1.nnd", 676 ); 
                            delayCall( '_recur',  'recur',
                                begin
                                    trampCall(_recur)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:676"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                  begin
                                      trampCall(_lis1)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:673"] + __e.backtrace ) ; raise __e
                                  end
                            ]
                                         )
                        end
                    } ; ___lambda.call(
                    nil
                               )
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._pair_MIMARKfold_MIMARKright_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_pair_MIMARKfold_MIMARKright', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_pair_MIMARKfold_MIMARKright'] = self.method( :_pair_MIMARKfold_MIMARKright_METHOD )
    @_pair_MIMARKfold_MIMARKright = 
    trampCall(
          Proc.new { |_f,_zero,_lis1,*__rest__| _lists = __rest__[0] ;  
              begin
              end
              if ( 
                begin
                  embedBacktraceInfo( "./lib/srfi-1.nnd", 681 ); 
                    _pair_QUMARK(
                        begin
                            trampCall(_lists)
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:685"] + __e.backtrace ) ; raise __e
                        end
                    )
                end
               ) then
                  begin
                    ___lambda = lambda { |_recur| 
                        _recur                         = 
                          Proc.new { |_lists| 
                              begin
                                ___lambda = lambda { |_cdrs| 
                                    if ( 
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 684 ); 
                                          _null_QUMARK(
                                              begin
                                                  trampCall(_cdrs)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:685"] + __e.backtrace ) ; raise __e
                                              end
                                          )
                                      end
                                     ) then
                                        begin
                                            trampCall(_zero)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:688"] + __e.backtrace ) ; raise __e
                                        end
                                    else
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 685 ); 
                                            delayCall( '_apply',  'apply',
                                                begin
                                                  if @global_lisp_binding.has_key?('_apply') then
                                                    trampCall(@_apply)
                                                  else raise NameError.new( "Error: undefined variable _apply", "_apply" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:685"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                  begin
                                                      trampCall(_f)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:688"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 685 ); 
                                                      trampCall( self._append_EXMARK_METHOD(  'append!',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_append_EXMARK') then
                                                              trampCall(@_append_EXMARK)
                                                            else raise NameError.new( "Error: undefined variable _append_EXMARK", "_append_EXMARK" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:685"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                      [
                                                            begin
                                                                trampCall(_lists)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:685"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            begin
                                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 685 ); 
                                                                trampCall( self._list_METHOD(  'list',
                                                                    begin
                                                                      if @global_lisp_binding.has_key?('_list') then
                                                                        trampCall(@_list)
                                                                      else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:685"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                [
                                                                      begin
                                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 688 ); 
                                                                          trampCall( callProcedure(  '_recur',  'recur',
                                                                              begin
                                                                                  trampCall(_recur)
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:688"] + __e.backtrace ) ; raise __e
                                                                              end                                                                            ,
                                                                          [
                                                                                begin
                                                                                    trampCall(_cdrs)
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:685"] + __e.backtrace ) ; raise __e
                                                                                end
                                                                          ]
                                                                                       ))
                                                                      end
                                                                ]
                                                                             ))
                                                            end
                                                      ]
                                                                   ))
                                                  end
                                            ]
                                                         )
                                        end
                                    end
                                } ; ___lambda.call(
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 683 ); 
                                          trampCall( self.__PAMARKcdrs_METHOD(  '%cdrs',
                                              begin
                                                if @global_lisp_binding.has_key?('__PAMARKcdrs') then
                                                  trampCall(@__PAMARKcdrs)
                                                else raise NameError.new( "Error: undefined variable __PAMARKcdrs", "__PAMARKcdrs" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:683"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                          [
                                                begin
                                                    trampCall(_lists)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:685"] + __e.backtrace ) ; raise __e
                                                end
                                          ]
                                                       ))
                                      end
                                           )
                              end
                          }
                        begin
                          embedBacktraceInfo( "./lib/srfi-1.nnd", 688 ); 
                            delayCall( '_recur',  'recur',
                                begin
                                    trampCall(_recur)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:688"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                  begin
                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 682 ); 
                                      _cons(
                                          begin
                                              trampCall(_lis1)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:687"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          begin
                                              trampCall(_lists)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:685"] + __e.backtrace ) ; raise __e
                                          end
                                      )
                                  end
                            ]
                                         )
                        end
                    } ; ___lambda.call(
                    nil
                               )
                  end
              else
                  begin
                    ___lambda = lambda { |_recur| 
                        _recur                         = 
                          Proc.new { |_lis| 
                              if ( 
                                begin
                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 688 ); 
                                    trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                                        begin
                                          if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                            trampCall(@_null_MIMARKlist_QUMARK)
                                          else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:688"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                    [
                                          begin
                                              trampCall(_lis)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:688"] + __e.backtrace ) ; raise __e
                                          end
                                    ]
                                                 ))
                                end
                               ) then
                                  begin
                                      trampCall(_zero)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:688"] + __e.backtrace ) ; raise __e
                                  end
                              else
                                  begin
                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 688 ); 
                                      delayCall( '_f',  'f',
                                          begin
                                              trampCall(_f)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:688"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                      [
                                            begin
                                                trampCall(_lis)
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:688"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            begin
                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 688 ); 
                                                trampCall( callProcedure(  '_recur',  'recur',
                                                    begin
                                                        trampCall(_recur)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:688"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                [
                                                      begin
                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 688 ); 
                                                          _cdr(
                                                              begin
                                                                  trampCall(_lis)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:688"] + __e.backtrace ) ; raise __e
                                                              end
                                                          )
                                                      end
                                                ]
                                                             ))
                                            end
                                      ]
                                                   )
                                  end
                              end
                          }
                        begin
                          embedBacktraceInfo( "./lib/srfi-1.nnd", 688 ); 
                            delayCall( '_recur',  'recur',
                                begin
                                    trampCall(_recur)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:688"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                  begin
                                      trampCall(_lis1)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:687"] + __e.backtrace ) ; raise __e
                                  end
                            ]
                                         )
                        end
                    } ; ___lambda.call(
                    nil
                               )
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._pair_MIMARKfold_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_pair_MIMARKfold', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_pair_MIMARKfold'] = self.method( :_pair_MIMARKfold_METHOD )
    @_pair_MIMARKfold = 
    trampCall(
          Proc.new { |_f,_zero,_lis1,*__rest__| _lists = __rest__[0] ;  
              begin
              end
              if ( 
                begin
                  embedBacktraceInfo( "./lib/srfi-1.nnd", 692 ); 
                    _pair_QUMARK(
                        begin
                            trampCall(_lists)
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:696"] + __e.backtrace ) ; raise __e
                        end
                    )
                end
               ) then
                  begin
                    ___lambda = lambda { |_lp| 
                        _lp                         = 
                          Proc.new { |_lists,_ans| 
                              begin
                                ___lambda = lambda { |_tails| 
                                    if ( 
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 695 ); 
                                          _null_QUMARK(
                                              begin
                                                  trampCall(_tails)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:696"] + __e.backtrace ) ; raise __e
                                              end
                                          )
                                      end
                                     ) then
                                        begin
                                            trampCall(_ans)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:701"] + __e.backtrace ) ; raise __e
                                        end
                                    else
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 701 ); 
                                            delayCall( '_lp',  'lp',
                                                begin
                                                    trampCall(_lp)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:701"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                  begin
                                                      trampCall(_tails)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:696"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 696 ); 
                                                      trampCall( self._apply_METHOD(  'apply',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_apply') then
                                                              trampCall(@_apply)
                                                            else raise NameError.new( "Error: undefined variable _apply", "_apply" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:696"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                      [
                                                            begin
                                                                trampCall(_f)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:701"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            begin
                                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 696 ); 
                                                                trampCall( self._append_EXMARK_METHOD(  'append!',
                                                                    begin
                                                                      if @global_lisp_binding.has_key?('_append_EXMARK') then
                                                                        trampCall(@_append_EXMARK)
                                                                      else raise NameError.new( "Error: undefined variable _append_EXMARK", "_append_EXMARK" ) end
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:696"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                [
                                                                      begin
                                                                          trampCall(_lists)
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:696"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                      begin
                                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 696 ); 
                                                                          trampCall( self._list_METHOD(  'list',
                                                                              begin
                                                                                if @global_lisp_binding.has_key?('_list') then
                                                                                  trampCall(@_list)
                                                                                else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:696"] + __e.backtrace ) ; raise __e
                                                                              end                                                                            ,
                                                                          [
                                                                                begin
                                                                                    trampCall(_ans)
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:701"] + __e.backtrace ) ; raise __e
                                                                                end
                                                                          ]
                                                                                       ))
                                                                      end
                                                                ]
                                                                             ))
                                                            end
                                                      ]
                                                                   ))
                                                  end
                                            ]
                                                         )
                                        end
                                    end
                                } ; ___lambda.call(
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 694 ); 
                                          trampCall( self.__PAMARKcdrs_METHOD(  '%cdrs',
                                              begin
                                                if @global_lisp_binding.has_key?('__PAMARKcdrs') then
                                                  trampCall(@__PAMARKcdrs)
                                                else raise NameError.new( "Error: undefined variable __PAMARKcdrs", "__PAMARKcdrs" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:694"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                          [
                                                begin
                                                    trampCall(_lists)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:696"] + __e.backtrace ) ; raise __e
                                                end
                                          ]
                                                       ))
                                      end
                                           )
                              end
                          }
                        begin
                          embedBacktraceInfo( "./lib/srfi-1.nnd", 701 ); 
                            delayCall( '_lp',  'lp',
                                begin
                                    trampCall(_lp)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:701"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                  begin
                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 693 ); 
                                      _cons(
                                          begin
                                              trampCall(_lis1)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:698"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          begin
                                              trampCall(_lists)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:696"] + __e.backtrace ) ; raise __e
                                          end
                                      )
                                  end                                ,
                                  begin
                                      trampCall(_zero)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:698"] + __e.backtrace ) ; raise __e
                                  end
                            ]
                                         )
                        end
                    } ; ___lambda.call(
                    nil
                               )
                  end
              else
                  begin
                    ___lambda = lambda { |_lp| 
                        _lp                         = 
                          Proc.new { |_lis,_ans| 
                              if ( 
                                begin
                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 699 ); 
                                    trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                                        begin
                                          if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                            trampCall(@_null_MIMARKlist_QUMARK)
                                          else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:699"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                    [
                                          begin
                                              trampCall(_lis)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:701"] + __e.backtrace ) ; raise __e
                                          end
                                    ]
                                                 ))
                                end
                               ) then
                                  begin
                                      trampCall(_ans)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:701"] + __e.backtrace ) ; raise __e
                                  end
                              else
                                  begin
                                    ___lambda = lambda { |_tail| 
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 701 ); 
                                            delayCall( '_lp',  'lp',
                                                begin
                                                    trampCall(_lp)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:701"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                  begin
                                                      trampCall(_tail)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:701"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 701 ); 
                                                      trampCall( callProcedure(  '_f',  'f',
                                                          begin
                                                              trampCall(_f)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:701"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                      [
                                                            begin
                                                                trampCall(_lis)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:701"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            begin
                                                                trampCall(_ans)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:701"] + __e.backtrace ) ; raise __e
                                                            end
                                                      ]
                                                                   ))
                                                  end
                                            ]
                                                         )
                                        end
                                    } ; ___lambda.call(
                                          begin
                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 700 ); 
                                              _cdr(
                                                  begin
                                                      trampCall(_lis)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:701"] + __e.backtrace ) ; raise __e
                                                  end
                                              )
                                          end
                                               )
                                  end
                              end
                          }
                        begin
                          embedBacktraceInfo( "./lib/srfi-1.nnd", 701 ); 
                            delayCall( '_lp',  'lp',
                                begin
                                    trampCall(_lp)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:701"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                  begin
                                      trampCall(_lis1)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:698"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  begin
                                      trampCall(_zero)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:698"] + __e.backtrace ) ; raise __e
                                  end
                            ]
                                         )
                        end
                    } ; ___lambda.call(
                    nil
                               )
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._reduce_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_reduce', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_reduce'] = self.method( :_reduce_METHOD )
    @_reduce = 
    trampCall(
          Proc.new { |_f,_ridentity,_lis| 
              begin
              end
              if ( 
                begin
                  embedBacktraceInfo( "./lib/srfi-1.nnd", 709 ); 
                    trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                        begin
                          if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                            trampCall(@_null_MIMARKlist_QUMARK)
                          else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:709"] + __e.backtrace ) ; raise __e
                        end                      ,
                    [
                          begin
                              trampCall(_lis)
                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:710"] + __e.backtrace ) ; raise __e
                          end
                    ]
                                 ))
                end
               ) then
                  begin
                      trampCall(_ridentity)
                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:709"] + __e.backtrace ) ; raise __e
                  end
              else
                  begin
                    embedBacktraceInfo( "./lib/srfi-1.nnd", 710 ); 
                      delayCall( '_fold',  'fold',
                          begin
                            if @global_lisp_binding.has_key?('_fold') then
                              trampCall(@_fold)
                            else raise NameError.new( "Error: undefined variable _fold", "_fold" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:710"] + __e.backtrace ) ; raise __e
                          end                        ,
                      [
                            begin
                                trampCall(_f)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:710"] + __e.backtrace ) ; raise __e
                            end                          ,
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 710 ); 
                                _car(
                                    begin
                                        trampCall(_lis)
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:710"] + __e.backtrace ) ; raise __e
                                    end
                                )
                            end                          ,
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 710 ); 
                                _cdr(
                                    begin
                                        trampCall(_lis)
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:710"] + __e.backtrace ) ; raise __e
                                    end
                                )
                            end
                      ]
                                   )
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._reduce_MIMARKright_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_reduce_MIMARKright', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_reduce_MIMARKright'] = self.method( :_reduce_MIMARKright_METHOD )
    @_reduce_MIMARKright = 
    trampCall(
          Proc.new { |_f,_ridentity,_lis| 
              begin
              end
              if ( 
                begin
                  embedBacktraceInfo( "./lib/srfi-1.nnd", 714 ); 
                    trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                        begin
                          if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                            trampCall(@_null_MIMARKlist_QUMARK)
                          else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:714"] + __e.backtrace ) ; raise __e
                        end                      ,
                    [
                          begin
                              trampCall(_lis)
                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:717"] + __e.backtrace ) ; raise __e
                          end
                    ]
                                 ))
                end
               ) then
                  begin
                      trampCall(_ridentity)
                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:714"] + __e.backtrace ) ; raise __e
                  end
              else
                  begin
                    ___lambda = lambda { |_recur| 
                        _recur                         = 
                          Proc.new { |_head,_lis| 
                              if ( 
                                begin
                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 716 ); 
                                    _pair_QUMARK(
                                        begin
                                            trampCall(_lis)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:717"] + __e.backtrace ) ; raise __e
                                        end
                                    )
                                end
                               ) then
                                  begin
                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 717 ); 
                                      delayCall( '_f',  'f',
                                          begin
                                              trampCall(_f)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:717"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                      [
                                            begin
                                                trampCall(_head)
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:718"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            begin
                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 717 ); 
                                                trampCall( callProcedure(  '_recur',  'recur',
                                                    begin
                                                        trampCall(_recur)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:717"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                [
                                                      begin
                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 717 ); 
                                                          _car(
                                                              begin
                                                                  trampCall(_lis)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:717"] + __e.backtrace ) ; raise __e
                                                              end
                                                          )
                                                      end                                                    ,
                                                      begin
                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 717 ); 
                                                          _cdr(
                                                              begin
                                                                  trampCall(_lis)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:717"] + __e.backtrace ) ; raise __e
                                                              end
                                                          )
                                                      end
                                                ]
                                                             ))
                                            end
                                      ]
                                                   )
                                  end
                              else
                                  begin
                                      trampCall(_head)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:718"] + __e.backtrace ) ; raise __e
                                  end
                              end
                          }
                        begin
                          embedBacktraceInfo( "./lib/srfi-1.nnd", 717 ); 
                            delayCall( '_recur',  'recur',
                                begin
                                    trampCall(_recur)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:717"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                  begin
                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 717 ); 
                                      _car(
                                          begin
                                              trampCall(_lis)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:717"] + __e.backtrace ) ; raise __e
                                          end
                                      )
                                  end                                ,
                                  begin
                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 717 ); 
                                      _cdr(
                                          begin
                                              trampCall(_lis)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:717"] + __e.backtrace ) ; raise __e
                                          end
                                      )
                                  end
                            ]
                                         )
                        end
                    } ; ___lambda.call(
                    nil
                               )
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._append_MIMARKmap_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_append_MIMARKmap', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_append_MIMARKmap'] = self.method( :_append_MIMARKmap_METHOD )
    @_append_MIMARKmap = 
    trampCall(
          Proc.new { |_f,_lis1,*__rest__| _lists = __rest__[0] ;  
              begin
                embedBacktraceInfo( "./lib/srfi-1.nnd", 726 ); 
                  delayCall( '_really_MIMARKappend_MIMARKmap',  'really-append-map',
                      begin
                        if @global_lisp_binding.has_key?('_really_MIMARKappend_MIMARKmap') then
                          trampCall(@_really_MIMARKappend_MIMARKmap)
                        else raise NameError.new( "Error: undefined variable _really_MIMARKappend_MIMARKmap", "_really_MIMARKappend_MIMARKmap" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:726"] + __e.backtrace ) ; raise __e
                      end                    ,
                  [
                        begin
                          if @global_lisp_binding.has_key?('_append_MIMARKmap') then
                            trampCall(@_append_MIMARKmap)
                          else raise NameError.new( "Error: undefined variable _append_MIMARKmap", "_append_MIMARKmap" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:726"] + __e.backtrace ) ; raise __e
                        end                      ,
                        begin
                          if @global_lisp_binding.has_key?('_append') then
                            trampCall(@_append)
                          else raise NameError.new( "Error: undefined variable _append", "_append" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:726"] + __e.backtrace ) ; raise __e
                        end                      ,
                        begin
                            trampCall(_f)
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:726"] + __e.backtrace ) ; raise __e
                        end                      ,
                        begin
                            trampCall(_lis1)
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:726"] + __e.backtrace ) ; raise __e
                        end                      ,
                        begin
                            trampCall(_lists)
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:726"] + __e.backtrace ) ; raise __e
                        end
                  ]
                               )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._append_MIMARKmap_EXMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_append_MIMARKmap_EXMARK', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_append_MIMARKmap_EXMARK'] = self.method( :_append_MIMARKmap_EXMARK_METHOD )
    @_append_MIMARKmap_EXMARK = 
    trampCall(
          Proc.new { |_f,_lis1,*__rest__| _lists = __rest__[0] ;  
              begin
                embedBacktraceInfo( "./lib/srfi-1.nnd", 728 ); 
                  delayCall( '_really_MIMARKappend_MIMARKmap',  'really-append-map',
                      begin
                        if @global_lisp_binding.has_key?('_really_MIMARKappend_MIMARKmap') then
                          trampCall(@_really_MIMARKappend_MIMARKmap)
                        else raise NameError.new( "Error: undefined variable _really_MIMARKappend_MIMARKmap", "_really_MIMARKappend_MIMARKmap" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:728"] + __e.backtrace ) ; raise __e
                      end                    ,
                  [
                        begin
                          if @global_lisp_binding.has_key?('_append_MIMARKmap_EXMARK') then
                            trampCall(@_append_MIMARKmap_EXMARK)
                          else raise NameError.new( "Error: undefined variable _append_MIMARKmap_EXMARK", "_append_MIMARKmap_EXMARK" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:728"] + __e.backtrace ) ; raise __e
                        end                      ,
                        begin
                          if @global_lisp_binding.has_key?('_append_EXMARK') then
                            trampCall(@_append_EXMARK)
                          else raise NameError.new( "Error: undefined variable _append_EXMARK", "_append_EXMARK" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:728"] + __e.backtrace ) ; raise __e
                        end                      ,
                        begin
                            trampCall(_f)
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:728"] + __e.backtrace ) ; raise __e
                        end                      ,
                        begin
                            trampCall(_lis1)
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:728"] + __e.backtrace ) ; raise __e
                        end                      ,
                        begin
                            trampCall(_lists)
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:728"] + __e.backtrace ) ; raise __e
                        end
                  ]
                               )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._really_MIMARKappend_MIMARKmap_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_really_MIMARKappend_MIMARKmap', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_really_MIMARKappend_MIMARKmap'] = self.method( :_really_MIMARKappend_MIMARKmap_METHOD )
    @_really_MIMARKappend_MIMARKmap = 
    trampCall(
          Proc.new { |_who,_appender,_f,_lis1,_lists| 
              begin
              end
              if ( 
                begin
                  embedBacktraceInfo( "./lib/srfi-1.nnd", 732 ); 
                    _pair_QUMARK(
                        begin
                            trampCall(_lists)
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:733"] + __e.backtrace ) ; raise __e
                        end
                    )
                end
               ) then
                  begin
                    embedBacktraceInfo( "", 1 ); 
                      delayCall( '_call_MIMARKwith_MIMARKvalues',  'call-with-values',
                          begin
                            if @global_lisp_binding.has_key?('_call_MIMARKwith_MIMARKvalues') then
                              trampCall(@_call_MIMARKwith_MIMARKvalues)
                            else raise NameError.new( "Error: undefined variable _call_MIMARKwith_MIMARKvalues", "_call_MIMARKwith_MIMARKvalues" ) end
                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                          end                        ,
                      [
                            Proc.new { || 
                                begin
                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 737 ); 
                                    trampCall( self.__PAMARKcars_PLMARKcdrs_METHOD(  '%cars+cdrs',
                                        begin
                                          if @global_lisp_binding.has_key?('__PAMARKcars_PLMARKcdrs') then
                                            trampCall(@__PAMARKcars_PLMARKcdrs)
                                          else raise NameError.new( "Error: undefined variable __PAMARKcars_PLMARKcdrs", "__PAMARKcars_PLMARKcdrs" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:737"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                    [
                                          begin
                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 733 ); 
                                              _cons(
                                                  begin
                                                      trampCall(_lis1)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:743"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  begin
                                                      trampCall(_lists)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:733"] + __e.backtrace ) ; raise __e
                                                  end
                                              )
                                          end
                                    ]
                                                 ))
                                end
                            }                          ,
                            Proc.new { |_cars,_cdrs| 
                                if ( 
                                  begin
                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 738 ); 
                                      _null_QUMARK(
                                          begin
                                              trampCall(_cars)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:736"] + __e.backtrace ) ; raise __e
                                          end
                                      )
                                  end
                                 ) then
                                  Cell.new()
                                else
                                    begin
                                      ___lambda = lambda { |_recur| 
                                          _recur                                           = 
                                            Proc.new { |_cars,_cdrs| 
                                                begin
                                                  ___lambda = lambda { |_vals| 
                                                      begin
                                                        embedBacktraceInfo( "", 1 ); 
                                                          trampCall( self._call_MIMARKwith_MIMARKvalues_METHOD(  'call-with-values',
                                                              begin
                                                                if @global_lisp_binding.has_key?('_call_MIMARKwith_MIMARKvalues') then
                                                                  trampCall(@_call_MIMARKwith_MIMARKvalues)
                                                                else raise NameError.new( "Error: undefined variable _call_MIMARKwith_MIMARKvalues", "_call_MIMARKwith_MIMARKvalues" ) end
                                                                rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                          [
                                                                Proc.new { || 
                                                                    begin
                                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 737 ); 
                                                                        trampCall( self.__PAMARKcars_PLMARKcdrs_METHOD(  '%cars+cdrs',
                                                                            begin
                                                                              if @global_lisp_binding.has_key?('__PAMARKcars_PLMARKcdrs') then
                                                                                trampCall(@__PAMARKcars_PLMARKcdrs)
                                                                              else raise NameError.new( "Error: undefined variable __PAMARKcars_PLMARKcdrs", "__PAMARKcars_PLMARKcdrs" ) end
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:737"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                        [
                                                                              begin
                                                                                  trampCall(_cdrs)
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:737"] + __e.backtrace ) ; raise __e
                                                                              end
                                                                        ]
                                                                                     ))
                                                                    end
                                                                }                                                              ,
                                                                Proc.new { |_cars2,_cdrs2| 
                                                                    if ( 
                                                                      begin
                                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 738 ); 
                                                                          _null_QUMARK(
                                                                              begin
                                                                                  trampCall(_cars2)
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:739"] + __e.backtrace ) ; raise __e
                                                                              end
                                                                          )
                                                                      end
                                                                     ) then
                                                                        begin
                                                                            trampCall(_vals)
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:746"] + __e.backtrace ) ; raise __e
                                                                        end
                                                                    else
                                                                        begin
                                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 746 ); 
                                                                            trampCall( callProcedure(  '_appender',  'appender',
                                                                                begin
                                                                                    trampCall(_appender)
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:746"] + __e.backtrace ) ; raise __e
                                                                                end                                                                              ,
                                                                            [
                                                                                  begin
                                                                                      trampCall(_vals)
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:746"] + __e.backtrace ) ; raise __e
                                                                                  end                                                                                ,
                                                                                  begin
                                                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 746 ); 
                                                                                      trampCall( callProcedure(  '_recur',  'recur',
                                                                                          begin
                                                                                              trampCall(_recur)
                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:746"] + __e.backtrace ) ; raise __e
                                                                                          end                                                                                        ,
                                                                                      [
                                                                                            begin
                                                                                                trampCall(_cars2)
                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:739"] + __e.backtrace ) ; raise __e
                                                                                            end                                                                                          ,
                                                                                            begin
                                                                                                trampCall(_cdrs2)
                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:739"] + __e.backtrace ) ; raise __e
                                                                                            end
                                                                                      ]
                                                                                                   ))
                                                                                  end
                                                                            ]
                                                                                         ))
                                                                        end
                                                                    end
                                                                }
                                                          ]
                                                                       ))
                                                      end
                                                  } ; ___lambda.call(
                                                        begin
                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 736 ); 
                                                            trampCall( self._apply_METHOD(  'apply',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_apply') then
                                                                    trampCall(@_apply)
                                                                  else raise NameError.new( "Error: undefined variable _apply", "_apply" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:736"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                            [
                                                                  begin
                                                                      trampCall(_f)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:744"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  begin
                                                                      trampCall(_cars)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:736"] + __e.backtrace ) ; raise __e
                                                                  end
                                                            ]
                                                                         ))
                                                        end
                                                             )
                                                end
                                            }
                                          begin
                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 746 ); 
                                              trampCall( callProcedure(  '_recur',  'recur',
                                                  begin
                                                      trampCall(_recur)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:746"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                              [
                                                    begin
                                                        trampCall(_cars)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:736"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    begin
                                                        trampCall(_cdrs)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:737"] + __e.backtrace ) ; raise __e
                                                    end
                                              ]
                                                           ))
                                          end
                                      } ; ___lambda.call(
                                      nil
                                                 )
                                    end
                                end
                            }
                      ]
                                   )
                  end
              else
                  if ( 
                    begin
                      embedBacktraceInfo( "./lib/srfi-1.nnd", 745 ); 
                        trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                            begin
                              if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                trampCall(@_null_MIMARKlist_QUMARK)
                              else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:745"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              begin
                                  trampCall(_lis1)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:743"] + __e.backtrace ) ; raise __e
                              end
                        ]
                                     ))
                    end
                   ) then
                    Cell.new()
                  else
                      begin
                        ___lambda = lambda { |_recur| 
                            _recur                             = 
                              Proc.new { |_elt,_rest| 
                                  begin
                                    ___lambda = lambda { |_vals| 
                                        if ( 
                                          begin
                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 745 ); 
                                              trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                                                  begin
                                                    if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                                      trampCall(@_null_MIMARKlist_QUMARK)
                                                    else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:745"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                              [
                                                    begin
                                                        trampCall(_rest)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:746"] + __e.backtrace ) ; raise __e
                                                    end
                                              ]
                                                           ))
                                          end
                                         ) then
                                            begin
                                                trampCall(_vals)
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:746"] + __e.backtrace ) ; raise __e
                                            end
                                        else
                                            begin
                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 746 ); 
                                                delayCall( '_appender',  'appender',
                                                    begin
                                                        trampCall(_appender)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:746"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                [
                                                      begin
                                                          trampCall(_vals)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:746"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      begin
                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 746 ); 
                                                          trampCall( callProcedure(  '_recur',  'recur',
                                                              begin
                                                                  trampCall(_recur)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:746"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                          [
                                                                begin
                                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 746 ); 
                                                                    _car(
                                                                        begin
                                                                            trampCall(_rest)
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:746"] + __e.backtrace ) ; raise __e
                                                                        end
                                                                    )
                                                                end                                                              ,
                                                                begin
                                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 746 ); 
                                                                    _cdr(
                                                                        begin
                                                                            trampCall(_rest)
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:746"] + __e.backtrace ) ; raise __e
                                                                        end
                                                                    )
                                                                end
                                                          ]
                                                                       ))
                                                      end
                                                ]
                                                             )
                                            end
                                        end
                                    } ; ___lambda.call(
                                          begin
                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 744 ); 
                                              trampCall( callProcedure(  '_f',  'f',
                                                  begin
                                                      trampCall(_f)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:744"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                              [
                                                    begin
                                                        trampCall(_elt)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:744"] + __e.backtrace ) ; raise __e
                                                    end
                                              ]
                                                           ))
                                          end
                                               )
                                  end
                              }
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 746 ); 
                                delayCall( '_recur',  'recur',
                                    begin
                                        trampCall(_recur)
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:746"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                [
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 746 ); 
                                          _car(
                                              begin
                                                  trampCall(_lis1)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:743"] + __e.backtrace ) ; raise __e
                                              end
                                          )
                                      end                                    ,
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 746 ); 
                                          _cdr(
                                              begin
                                                  trampCall(_lis1)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:743"] + __e.backtrace ) ; raise __e
                                              end
                                          )
                                      end
                                ]
                                             )
                            end
                        } ; ___lambda.call(
                        nil
                                   )
                      end
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._pair_MIMARKfor_MIMARKeach_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_pair_MIMARKfor_MIMARKeach', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_pair_MIMARKfor_MIMARKeach'] = self.method( :_pair_MIMARKfor_MIMARKeach_METHOD )
    @_pair_MIMARKfor_MIMARKeach = 
    trampCall(
          Proc.new { |_proc,_lis1,*__rest__| _lists = __rest__[0] ;  
              begin
              end
              if ( 
                begin
                  embedBacktraceInfo( "./lib/srfi-1.nnd", 755 ); 
                    _pair_QUMARK(
                        begin
                            trampCall(_lists)
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:756"] + __e.backtrace ) ; raise __e
                        end
                    )
                end
               ) then
                  begin
                    ___lambda = lambda { |_lp| 
                        _lp                         = 
                          Proc.new { |_lists| 
                              begin
                                ___lambda = lambda { |_tails| 
                                    if ( 
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 755 ); 
                                          _pair_QUMARK(
                                              begin
                                                  trampCall(_tails)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:757"] + __e.backtrace ) ; raise __e
                                              end
                                          )
                                      end
                                     ) then
                                        begin
                                            begin
                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 756 ); 
                                                trampCall( self._apply_METHOD(  'apply',
                                                    begin
                                                      if @global_lisp_binding.has_key?('_apply') then
                                                        trampCall(@_apply)
                                                      else raise NameError.new( "Error: undefined variable _apply", "_apply" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:756"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                [
                                                      begin
                                                          trampCall(_proc)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:763"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      begin
                                                          trampCall(_lists)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:756"] + __e.backtrace ) ; raise __e
                                                      end
                                                ]
                                                             ))
                                            end
                                            begin
                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 764 ); 
                                                delayCall( '_lp',  'lp',
                                                    begin
                                                        trampCall(_lp)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:764"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                [
                                                      begin
                                                          trampCall(_tails)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:757"] + __e.backtrace ) ; raise __e
                                                      end
                                                ]
                                                             )
                                            end
                                        end
                                    end
                                } ; ___lambda.call(
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 754 ); 
                                          trampCall( self.__PAMARKcdrs_METHOD(  '%cdrs',
                                              begin
                                                if @global_lisp_binding.has_key?('__PAMARKcdrs') then
                                                  trampCall(@__PAMARKcdrs)
                                                else raise NameError.new( "Error: undefined variable __PAMARKcdrs", "__PAMARKcdrs" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:754"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                          [
                                                begin
                                                    trampCall(_lists)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:756"] + __e.backtrace ) ; raise __e
                                                end
                                          ]
                                                       ))
                                      end
                                           )
                              end
                          }
                        begin
                          embedBacktraceInfo( "./lib/srfi-1.nnd", 764 ); 
                            delayCall( '_lp',  'lp',
                                begin
                                    trampCall(_lp)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:764"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                  begin
                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 753 ); 
                                      _cons(
                                          begin
                                              trampCall(_lis1)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:760"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          begin
                                              trampCall(_lists)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:756"] + __e.backtrace ) ; raise __e
                                          end
                                      )
                                  end
                            ]
                                         )
                        end
                    } ; ___lambda.call(
                    nil
                               )
                  end
              else
                  begin
                    ___lambda = lambda { |_lp| 
                        _lp                         = 
                          Proc.new { |_lis| 
                              if ( 
                                begin
                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 761 ); 
                                    _not(
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 761 ); 
                                            trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                                                begin
                                                  if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                                    trampCall(@_null_MIMARKlist_QUMARK)
                                                  else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:761"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                  begin
                                                      trampCall(_lis)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:763"] + __e.backtrace ) ; raise __e
                                                  end
                                            ]
                                                         ))
                                        end
                                    )
                                end
                               ) then
                                  begin
                                    ___lambda = lambda { |_tail| 
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 763 ); 
                                            trampCall( callProcedure(  '_proc',  'proc',
                                                begin
                                                    trampCall(_proc)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:763"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                  begin
                                                      trampCall(_lis)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:763"] + __e.backtrace ) ; raise __e
                                                  end
                                            ]
                                                         ))
                                        end
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 764 ); 
                                            delayCall( '_lp',  'lp',
                                                begin
                                                    trampCall(_lp)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:764"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                  begin
                                                      trampCall(_tail)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:764"] + __e.backtrace ) ; raise __e
                                                  end
                                            ]
                                                         )
                                        end
                                    } ; ___lambda.call(
                                          begin
                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 762 ); 
                                              _cdr(
                                                  begin
                                                      trampCall(_lis)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:763"] + __e.backtrace ) ; raise __e
                                                  end
                                              )
                                          end
                                               )
                                  end
                              end
                          }
                        begin
                          embedBacktraceInfo( "./lib/srfi-1.nnd", 764 ); 
                            delayCall( '_lp',  'lp',
                                begin
                                    trampCall(_lp)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:764"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                  begin
                                      trampCall(_lis1)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:760"] + __e.backtrace ) ; raise __e
                                  end
                            ]
                                         )
                        end
                    } ; ___lambda.call(
                    nil
                               )
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._map_EXMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_map_EXMARK', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_map_EXMARK'] = self.method( :_map_EXMARK_METHOD )
    @_map_EXMARK = 
    trampCall(
          Proc.new { |_f,_lis1,*__rest__| _lists = __rest__[0] ;  
              begin
              end
              if ( 
                begin
                  embedBacktraceInfo( "./lib/srfi-1.nnd", 769 ); 
                    _pair_QUMARK(
                        begin
                            trampCall(_lists)
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:772"] + __e.backtrace ) ; raise __e
                        end
                    )
                end
               ) then
                  begin
                    ___lambda = lambda { |_lp| 
                        _lp                         = 
                          Proc.new { |_lis1,_lists| 
                              if ( 
                                begin
                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 771 ); 
                                    _not(
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 771 ); 
                                            trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                                                begin
                                                  if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                                    trampCall(@_null_MIMARKlist_QUMARK)
                                                  else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:771"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                  begin
                                                      trampCall(_lis1)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:778"] + __e.backtrace ) ; raise __e
                                                  end
                                            ]
                                                         ))
                                        end
                                    )
                                end
                               ) then
                                  begin
                                    embedBacktraceInfo( "", 1 ); 
                                      trampCall( self._call_MIMARKwith_MIMARKvalues_METHOD(  'call-with-values',
                                          begin
                                            if @global_lisp_binding.has_key?('_call_MIMARKwith_MIMARKvalues') then
                                              trampCall(@_call_MIMARKwith_MIMARKvalues)
                                            else raise NameError.new( "Error: undefined variable _call_MIMARKwith_MIMARKvalues", "_call_MIMARKwith_MIMARKvalues" ) end
                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                      [
                                            Proc.new { || 
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 772 ); 
                                                    trampCall( self.__PAMARKcars_PLMARKcdrs_SLMARKno_MIMARKtest_METHOD(  '%cars+cdrs/no-test',
                                                        begin
                                                          if @global_lisp_binding.has_key?('__PAMARKcars_PLMARKcdrs_SLMARKno_MIMARKtest') then
                                                            trampCall(@__PAMARKcars_PLMARKcdrs_SLMARKno_MIMARKtest)
                                                          else raise NameError.new( "Error: undefined variable __PAMARKcars_PLMARKcdrs_SLMARKno_MIMARKtest", "__PAMARKcars_PLMARKcdrs_SLMARKno_MIMARKtest" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:772"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                    [
                                                          begin
                                                              trampCall(_lists)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:772"] + __e.backtrace ) ; raise __e
                                                          end
                                                    ]
                                                                 ))
                                                end
                                            }                                          ,
                                            Proc.new { |_heads,_tails| 
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 777 ); 
                                                    _set_MIMARKcar_EXMARK(
                                                        begin
                                                            trampCall(_lis1)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:778"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        begin
                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 773 ); 
                                                            trampCall( self._apply_METHOD(  'apply',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_apply') then
                                                                    trampCall(@_apply)
                                                                  else raise NameError.new( "Error: undefined variable _apply", "_apply" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:773"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                            [
                                                                  begin
                                                                      trampCall(_f)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:777"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  begin
                                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 777 ); 
                                                                      _car(
                                                                          begin
                                                                              trampCall(_lis1)
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:778"] + __e.backtrace ) ; raise __e
                                                                          end
                                                                      )
                                                                  end                                                                ,
                                                                  begin
                                                                      trampCall(_heads)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:773"] + __e.backtrace ) ; raise __e
                                                                  end
                                                            ]
                                                                         ))
                                                        end
                                                    )
                                                end
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 774 ); 
                                                    trampCall( callProcedure(  '_lp',  'lp',
                                                        begin
                                                            trampCall(_lp)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:774"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                    [
                                                          begin
                                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 774 ); 
                                                              _cdr(
                                                                  begin
                                                                      trampCall(_lis1)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:778"] + __e.backtrace ) ; raise __e
                                                                  end
                                                              )
                                                          end                                                        ,
                                                          begin
                                                              trampCall(_tails)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:774"] + __e.backtrace ) ; raise __e
                                                          end
                                                    ]
                                                                 ))
                                                end
                                            }
                                      ]
                                                   ))
                                  end
                              end
                          }
                        begin
                          embedBacktraceInfo( "./lib/srfi-1.nnd", 774 ); 
                            trampCall( callProcedure(  '_lp',  'lp',
                                begin
                                    trampCall(_lp)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:774"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                  begin
                                      trampCall(_lis1)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:778"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  begin
                                      trampCall(_lists)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:772"] + __e.backtrace ) ; raise __e
                                  end
                            ]
                                         ))
                        end
                    } ; ___lambda.call(
                    nil
                               )
                  end
              else
                  begin
                    embedBacktraceInfo( "./lib/srfi-1.nnd", 777 ); 
                      trampCall( self._pair_MIMARKfor_MIMARKeach_METHOD(  'pair-for-each',
                          begin
                            if @global_lisp_binding.has_key?('_pair_MIMARKfor_MIMARKeach') then
                              trampCall(@_pair_MIMARKfor_MIMARKeach)
                            else raise NameError.new( "Error: undefined variable _pair_MIMARKfor_MIMARKeach", "_pair_MIMARKfor_MIMARKeach" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:777"] + __e.backtrace ) ; raise __e
                          end                        ,
                      [
                            Proc.new { |_pair| 
                                begin
                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 777 ); 
                                    _set_MIMARKcar_EXMARK(
                                        begin
                                            trampCall(_pair)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:777"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 777 ); 
                                            trampCall( callProcedure(  '_f',  'f',
                                                begin
                                                    trampCall(_f)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:777"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 777 ); 
                                                      _car(
                                                          begin
                                                              trampCall(_pair)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:777"] + __e.backtrace ) ; raise __e
                                                          end
                                                      )
                                                  end
                                            ]
                                                         ))
                                        end
                                    )
                                end
                            }                          ,
                            begin
                                trampCall(_lis1)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:778"] + __e.backtrace ) ; raise __e
                            end
                      ]
                                   ))
                  end
              end
              begin
                  trampCall(_lis1)
                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:778"] + __e.backtrace ) ; raise __e
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._filter_MIMARKmap_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_filter_MIMARKmap', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_filter_MIMARKmap'] = self.method( :_filter_MIMARKmap_METHOD )
    @_filter_MIMARKmap = 
    trampCall(
          Proc.new { |_f,_lis1,*__rest__| _lists = __rest__[0] ;  
              begin
              end
              if ( 
                begin
                  embedBacktraceInfo( "./lib/srfi-1.nnd", 787 ); 
                    _pair_QUMARK(
                        begin
                            trampCall(_lists)
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:786"] + __e.backtrace ) ; raise __e
                        end
                    )
                end
               ) then
                  begin
                    ___lambda = lambda { |_recur| 
                        _recur                         = 
                          Proc.new { |_lists| 
                              begin
                                embedBacktraceInfo( "", 1 ); 
                                  delayCall( '_call_MIMARKwith_MIMARKvalues',  'call-with-values',
                                      begin
                                        if @global_lisp_binding.has_key?('_call_MIMARKwith_MIMARKvalues') then
                                          trampCall(@_call_MIMARKwith_MIMARKvalues)
                                        else raise NameError.new( "Error: undefined variable _call_MIMARKwith_MIMARKvalues", "_call_MIMARKwith_MIMARKvalues" ) end
                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        Proc.new { || 
                                            begin
                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 786 ); 
                                                trampCall( self.__PAMARKcars_PLMARKcdrs_METHOD(  '%cars+cdrs',
                                                    begin
                                                      if @global_lisp_binding.has_key?('__PAMARKcars_PLMARKcdrs') then
                                                        trampCall(@__PAMARKcars_PLMARKcdrs)
                                                      else raise NameError.new( "Error: undefined variable __PAMARKcars_PLMARKcdrs", "__PAMARKcars_PLMARKcdrs" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:786"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                [
                                                      begin
                                                          trampCall(_lists)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:786"] + __e.backtrace ) ; raise __e
                                                      end
                                                ]
                                                             ))
                                            end
                                        }                                      ,
                                        Proc.new { |_cars,_cdrs| 
                                            if ( 
                                              begin
                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 787 ); 
                                                  _pair_QUMARK(
                                                      begin
                                                          trampCall(_cars)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:788"] + __e.backtrace ) ; raise __e
                                                      end
                                                  )
                                              end
                                             ) then
                                                if ( 
                                                  begin
                                                      def self.___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30215_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30215', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
                                                      @global_lisp_binding['___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30215'] = self.method( :___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30215_METHOD )
                                                    @___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30215 = 
                                                    trampCall(
                                                          begin
                                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 788 ); 
                                                              trampCall( self._apply_METHOD(  'apply',
                                                                  begin
                                                                    if @global_lisp_binding.has_key?('_apply') then
                                                                      trampCall(@_apply)
                                                                    else raise NameError.new( "Error: undefined variable _apply", "_apply" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:788"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                              [
                                                                    begin
                                                                        trampCall(_f)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:793"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                    begin
                                                                        trampCall(_cars)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:788"] + __e.backtrace ) ; raise __e
                                                                    end
                                                              ]
                                                                           ))
                                                          end
                                                    )
                                                  end
                                                 ) then
                                                    trampCall( callProcedure( nil, 'anonymouse', 
                                                        Proc.new { |_x| 
                                                            begin
                                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 788 ); 
                                                                _cons(
                                                                    begin
                                                                        trampCall(_x)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:788"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                    begin
                                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 789 ); 
                                                                        trampCall( callProcedure(  '_recur',  'recur',
                                                                            begin
                                                                                trampCall(_recur)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:789"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                        [
                                                                              begin
                                                                                  trampCall(_cdrs)
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:789"] + __e.backtrace ) ; raise __e
                                                                              end
                                                                        ]
                                                                                     ))
                                                                    end
                                                                )
                                                            end
                                                        }                                                      ,
                                                    [
                                                          begin
                                                            if @global_lisp_binding.has_key?('___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30215') then
                                                              trampCall(@___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30215)
                                                            else raise NameError.new( "Error: undefined variable ___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30215", "___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30215" ) end
                                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                          end
                                                    ]
                                                              ))
                                                else
                                                    if ( 
                                                    true
                                                     ) then
                                                        begin
                                                            begin
                                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 789 ); 
                                                                trampCall( callProcedure(  '_recur',  'recur',
                                                                    begin
                                                                        trampCall(_recur)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:789"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                [
                                                                      begin
                                                                          trampCall(_cdrs)
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:789"] + __e.backtrace ) ; raise __e
                                                                      end
                                                                ]
                                                                             ))
                                                            end
                                                        end
                                                    else
                                                        Cell.new()
                                                    end
                                                end
                                            else
                                              Cell.new()
                                            end
                                        }
                                  ]
                                               )
                              end
                          }
                        begin
                          embedBacktraceInfo( "./lib/srfi-1.nnd", 789 ); 
                            delayCall( '_recur',  'recur',
                                begin
                                    trampCall(_recur)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:789"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                  begin
                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 788 ); 
                                      _cons(
                                          begin
                                              trampCall(_lis1)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:793"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          begin
                                              trampCall(_lists)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:786"] + __e.backtrace ) ; raise __e
                                          end
                                      )
                                  end
                            ]
                                         )
                        end
                    } ; ___lambda.call(
                    nil
                               )
                  end
              else
                  begin
                    embedBacktraceInfo( "./lib/srfi-1.nnd", 793 ); 
                      delayCall( '__PAMARKfilter_MIMARKmap',  '%filter-map',
                          begin
                            if @global_lisp_binding.has_key?('__PAMARKfilter_MIMARKmap') then
                              trampCall(@__PAMARKfilter_MIMARKmap)
                            else raise NameError.new( "Error: undefined variable __PAMARKfilter_MIMARKmap", "__PAMARKfilter_MIMARKmap" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:793"] + __e.backtrace ) ; raise __e
                          end                        ,
                      [
                            begin
                                trampCall(_f)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:793"] + __e.backtrace ) ; raise __e
                            end                          ,
                            begin
                                trampCall(_lis1)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:793"] + __e.backtrace ) ; raise __e
                            end
                      ]
                                   )
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._map_MIMARKin_MIMARKorder_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_map_MIMARKin_MIMARKorder', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_map_MIMARKin_MIMARKorder'] = self.method( :_map_MIMARKin_MIMARKorder_METHOD )
    @_map_MIMARKin_MIMARKorder = 
    trampCall(
          Proc.new { |_f,_lis1,*__rest__| _lists = __rest__[0] ;  
              begin
              end
              if ( 
                begin
                  embedBacktraceInfo( "./lib/srfi-1.nnd", 804 ); 
                    _pair_QUMARK(
                        begin
                            trampCall(_lists)
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:803"] + __e.backtrace ) ; raise __e
                        end
                    )
                end
               ) then
                  begin
                    ___lambda = lambda { |_recur| 
                        _recur                         = 
                          Proc.new { |_lists| 
                              begin
                                embedBacktraceInfo( "", 1 ); 
                                  delayCall( '_call_MIMARKwith_MIMARKvalues',  'call-with-values',
                                      begin
                                        if @global_lisp_binding.has_key?('_call_MIMARKwith_MIMARKvalues') then
                                          trampCall(@_call_MIMARKwith_MIMARKvalues)
                                        else raise NameError.new( "Error: undefined variable _call_MIMARKwith_MIMARKvalues", "_call_MIMARKwith_MIMARKvalues" ) end
                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        Proc.new { || 
                                            begin
                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 803 ); 
                                                trampCall( self.__PAMARKcars_PLMARKcdrs_METHOD(  '%cars+cdrs',
                                                    begin
                                                      if @global_lisp_binding.has_key?('__PAMARKcars_PLMARKcdrs') then
                                                        trampCall(@__PAMARKcars_PLMARKcdrs)
                                                      else raise NameError.new( "Error: undefined variable __PAMARKcars_PLMARKcdrs", "__PAMARKcars_PLMARKcdrs" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:803"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                [
                                                      begin
                                                          trampCall(_lists)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:803"] + __e.backtrace ) ; raise __e
                                                      end
                                                ]
                                                             ))
                                            end
                                        }                                      ,
                                        Proc.new { |_cars,_cdrs| 
                                            if ( 
                                              begin
                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 804 ); 
                                                  _pair_QUMARK(
                                                      begin
                                                          trampCall(_cars)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:805"] + __e.backtrace ) ; raise __e
                                                      end
                                                  )
                                              end
                                             ) then
                                                begin
                                                  ___lambda = lambda { |_x| 
                                                      begin
                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 806 ); 
                                                          _cons(
                                                              begin
                                                                  trampCall(_x)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:806"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              begin
                                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 806 ); 
                                                                  trampCall( callProcedure(  '_recur',  'recur',
                                                                      begin
                                                                          trampCall(_recur)
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:806"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                  [
                                                                        begin
                                                                            trampCall(_cdrs)
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:806"] + __e.backtrace ) ; raise __e
                                                                        end
                                                                  ]
                                                                               ))
                                                              end
                                                          )
                                                      end
                                                  } ; ___lambda.call(
                                                        begin
                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 805 ); 
                                                            trampCall( self._apply_METHOD(  'apply',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_apply') then
                                                                    trampCall(@_apply)
                                                                  else raise NameError.new( "Error: undefined variable _apply", "_apply" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:805"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                            [
                                                                  begin
                                                                      trampCall(_f)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:810"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  begin
                                                                      trampCall(_cars)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:805"] + __e.backtrace ) ; raise __e
                                                                  end
                                                            ]
                                                                         ))
                                                        end
                                                             )
                                                end
                                            else
                                              Cell.new()
                                            end
                                        }
                                  ]
                                               )
                              end
                          }
                        begin
                          embedBacktraceInfo( "./lib/srfi-1.nnd", 806 ); 
                            delayCall( '_recur',  'recur',
                                begin
                                    trampCall(_recur)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:806"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                  begin
                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 806 ); 
                                      _cons(
                                          begin
                                              trampCall(_lis1)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:810"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          begin
                                              trampCall(_lists)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:803"] + __e.backtrace ) ; raise __e
                                          end
                                      )
                                  end
                            ]
                                         )
                        end
                    } ; ___lambda.call(
                    nil
                               )
                  end
              else
                  begin
                    embedBacktraceInfo( "./lib/srfi-1.nnd", 810 ); 
                      delayCall( '__PAMARKmap',  '%map',
                          begin
                            if @global_lisp_binding.has_key?('__PAMARKmap') then
                              trampCall(@__PAMARKmap)
                            else raise NameError.new( "Error: undefined variable __PAMARKmap", "__PAMARKmap" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:810"] + __e.backtrace ) ; raise __e
                          end                        ,
                      [
                            begin
                                trampCall(_f)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:810"] + __e.backtrace ) ; raise __e
                            end                          ,
                            begin
                                trampCall(_lis1)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:810"] + __e.backtrace ) ; raise __e
                            end
                      ]
                                   )
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._map_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_map', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_map'] = self.method( :_map_METHOD )
    @_map = 
    trampCall(
          begin
            if @global_lisp_binding.has_key?('_map_MIMARKin_MIMARKorder') then
              trampCall(@_map_MIMARKin_MIMARKorder)
            else raise NameError.new( "Error: undefined variable _map_MIMARKin_MIMARKorder", "_map_MIMARKin_MIMARKorder" ) end
            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:813"] + __e.backtrace ) ; raise __e
          end
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._for_MIMARKeach_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_for_MIMARKeach', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_for_MIMARKeach'] = self.method( :_for_MIMARKeach_METHOD )
    @_for_MIMARKeach = 
    trampCall(
          begin
            if @global_lisp_binding.has_key?('_map_MIMARKin_MIMARKorder') then
              trampCall(@_map_MIMARKin_MIMARKorder)
            else raise NameError.new( "Error: undefined variable _map_MIMARKin_MIMARKorder", "_map_MIMARKin_MIMARKorder" ) end
            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:814"] + __e.backtrace ) ; raise __e
          end
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._filter_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_filter', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_filter'] = self.method( :_filter_METHOD )
    @_filter = 
    trampCall(
          begin
            if @global_lisp_binding.has_key?('__PAMARKfilter') then
              trampCall(@__PAMARKfilter)
            else raise NameError.new( "Error: undefined variable __PAMARKfilter", "__PAMARKfilter" ) end
            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:836"] + __e.backtrace ) ; raise __e
          end
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._filter_EXMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_filter_EXMARK', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_filter_EXMARK'] = self.method( :_filter_EXMARK_METHOD )
    @_filter_EXMARK = 
    trampCall(
          Proc.new { |_pred,_lis| 
              begin
              end
              begin
                ___lambda = lambda { |_lp| 
                    _lp                     = 
                      Proc.new { |_ans| 
                          if ( 
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 882 ); 
                                trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                                    begin
                                      if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                        trampCall(@_null_MIMARKlist_QUMARK)
                                      else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:882"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                [
                                      begin
                                          trampCall(_ans)
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:908"] + __e.backtrace ) ; raise __e
                                      end
                                ]
                                             ))
                            end
                           ) then
                              begin
                                  begin
                                      trampCall(_ans)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:908"] + __e.backtrace ) ; raise __e
                                  end
                              end
                          else
                              if ( 
                                begin
                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 883 ); 
                                    _not(
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 902 ); 
                                            trampCall( callProcedure(  '_pred',  'pred',
                                                begin
                                                    trampCall(_pred)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:902"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 902 ); 
                                                      _car(
                                                          begin
                                                              trampCall(_ans)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:908"] + __e.backtrace ) ; raise __e
                                                          end
                                                      )
                                                  end
                                            ]
                                                         ))
                                        end
                                    )
                                end
                               ) then
                                  begin
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 905 ); 
                                          delayCall( '_lp',  'lp',
                                              begin
                                                  trampCall(_lp)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:905"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                          [
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 907 ); 
                                                    _cdr(
                                                        begin
                                                            trampCall(_ans)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:908"] + __e.backtrace ) ; raise __e
                                                        end
                                                    )
                                                end
                                          ]
                                                       )
                                      end
                                  end
                              else
                                  if ( 
                                  true
                                   ) then
                                      begin
                                          begin
                                            ___lambda = lambda { |_scan_MIMARKin,_scan_MIMARKout| 
                                                _scan_MIMARKin                                                 = 
                                                  Proc.new { |_prev,_lis| 
                                                      if ( 
                                                        begin
                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 901 ); 
                                                            _pair_QUMARK(
                                                                begin
                                                                    trampCall(_lis)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:906"] + __e.backtrace ) ; raise __e
                                                                end
                                                            )
                                                        end
                                                       ) then
                                                          if ( 
                                                            begin
                                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 902 ); 
                                                                trampCall( callProcedure(  '_pred',  'pred',
                                                                    begin
                                                                        trampCall(_pred)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:902"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                [
                                                                      begin
                                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 902 ); 
                                                                          _car(
                                                                              begin
                                                                                  trampCall(_lis)
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:906"] + __e.backtrace ) ; raise __e
                                                                              end
                                                                          )
                                                                      end
                                                                ]
                                                                             ))
                                                            end
                                                           ) then
                                                              begin
                                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 907 ); 
                                                                  delayCall( '_scan_MIMARKin',  'scan-in',
                                                                      begin
                                                                          trampCall(_scan_MIMARKin)
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:907"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                  [
                                                                        begin
                                                                            trampCall(_lis)
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:906"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                        begin
                                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 907 ); 
                                                                            _cdr(
                                                                                begin
                                                                                    trampCall(_lis)
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:906"] + __e.backtrace ) ; raise __e
                                                                                end
                                                                            )
                                                                        end
                                                                  ]
                                                                               )
                                                              end
                                                          else
                                                              begin
                                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 899 ); 
                                                                  delayCall( '_scan_MIMARKout',  'scan-out',
                                                                      begin
                                                                          trampCall(_scan_MIMARKout)
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:899"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                  [
                                                                        begin
                                                                            trampCall(_prev)
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:906"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                        begin
                                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 907 ); 
                                                                            _cdr(
                                                                                begin
                                                                                    trampCall(_lis)
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:906"] + __e.backtrace ) ; raise __e
                                                                                end
                                                                            )
                                                                        end
                                                                  ]
                                                                               )
                                                              end
                                                          end
                                                      end
                                                  }
                                                _scan_MIMARKout                                                 = 
                                                  Proc.new { |_prev,_lis| 
                                                      begin
                                                        ___lambda = lambda { |_lp| 
                                                            _lp                                                             = 
                                                              Proc.new { |_lis| 
                                                                  if ( 
                                                                    begin
                                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 901 ); 
                                                                        _pair_QUMARK(
                                                                            begin
                                                                                trampCall(_lis)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:906"] + __e.backtrace ) ; raise __e
                                                                            end
                                                                        )
                                                                    end
                                                                   ) then
                                                                      if ( 
                                                                        begin
                                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 902 ); 
                                                                            trampCall( callProcedure(  '_pred',  'pred',
                                                                                begin
                                                                                    trampCall(_pred)
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:902"] + __e.backtrace ) ; raise __e
                                                                                end                                                                              ,
                                                                            [
                                                                                  begin
                                                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 902 ); 
                                                                                      _car(
                                                                                          begin
                                                                                              trampCall(_lis)
                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:906"] + __e.backtrace ) ; raise __e
                                                                                          end
                                                                                      )
                                                                                  end
                                                                            ]
                                                                                         ))
                                                                        end
                                                                       ) then
                                                                          begin
                                                                              begin
                                                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 906 ); 
                                                                                  _set_MIMARKcdr_EXMARK(
                                                                                      begin
                                                                                          trampCall(_prev)
                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:906"] + __e.backtrace ) ; raise __e
                                                                                      end                                                                                    ,
                                                                                      begin
                                                                                          trampCall(_lis)
                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:906"] + __e.backtrace ) ; raise __e
                                                                                      end
                                                                                  )
                                                                              end
                                                                              begin
                                                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 907 ); 
                                                                                  delayCall( '_scan_MIMARKin',  'scan-in',
                                                                                      begin
                                                                                          trampCall(_scan_MIMARKin)
                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:907"] + __e.backtrace ) ; raise __e
                                                                                      end                                                                                    ,
                                                                                  [
                                                                                        begin
                                                                                            trampCall(_lis)
                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:906"] + __e.backtrace ) ; raise __e
                                                                                        end                                                                                      ,
                                                                                        begin
                                                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 907 ); 
                                                                                            _cdr(
                                                                                                begin
                                                                                                    trampCall(_lis)
                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:906"] + __e.backtrace ) ; raise __e
                                                                                                end
                                                                                            )
                                                                                        end
                                                                                  ]
                                                                                               )
                                                                              end
                                                                          end
                                                                      else
                                                                          begin
                                                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 905 ); 
                                                                              delayCall( '_lp',  'lp',
                                                                                  begin
                                                                                      trampCall(_lp)
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:905"] + __e.backtrace ) ; raise __e
                                                                                  end                                                                                ,
                                                                              [
                                                                                    begin
                                                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 907 ); 
                                                                                        _cdr(
                                                                                            begin
                                                                                                trampCall(_lis)
                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:906"] + __e.backtrace ) ; raise __e
                                                                                            end
                                                                                        )
                                                                                    end
                                                                              ]
                                                                                           )
                                                                          end
                                                                      end
                                                                  else
                                                                      begin
                                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 906 ); 
                                                                          delayCall( '_set_MIMARKcdr_EXMARK',  'set-cdr!',
                                                                              begin
                                                                                if @global_lisp_binding.has_key?('_set_MIMARKcdr_EXMARK') then
                                                                                  trampCall(@_set_MIMARKcdr_EXMARK)
                                                                                else raise NameError.new( "Error: undefined variable _set_MIMARKcdr_EXMARK", "_set_MIMARKcdr_EXMARK" ) end
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:906"] + __e.backtrace ) ; raise __e
                                                                              end                                                                            ,
                                                                          [
                                                                                begin
                                                                                    trampCall(_prev)
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:906"] + __e.backtrace ) ; raise __e
                                                                                end                                                                              ,
                                                                                begin
                                                                                    trampCall(_lis)
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:906"] + __e.backtrace ) ; raise __e
                                                                                end
                                                                          ]
                                                                                       )
                                                                      end
                                                                  end
                                                              }
                                                            begin
                                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 905 ); 
                                                                delayCall( '_lp',  'lp',
                                                                    begin
                                                                        trampCall(_lp)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:905"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                [
                                                                      begin
                                                                          trampCall(_lis)
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:906"] + __e.backtrace ) ; raise __e
                                                                      end
                                                                ]
                                                                             )
                                                            end
                                                        } ; ___lambda.call(
                                                        nil
                                                                   )
                                                      end
                                                  }
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 907 ); 
                                                    trampCall( callProcedure(  '_scan_MIMARKin',  'scan-in',
                                                        begin
                                                            trampCall(_scan_MIMARKin)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:907"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                    [
                                                          begin
                                                              trampCall(_ans)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:908"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          begin
                                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 907 ); 
                                                              _cdr(
                                                                  begin
                                                                      trampCall(_ans)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:908"] + __e.backtrace ) ; raise __e
                                                                  end
                                                              )
                                                          end
                                                    ]
                                                                 ))
                                                end
                                                begin
                                                    trampCall(_ans)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:908"] + __e.backtrace ) ; raise __e
                                                end
                                            } ; ___lambda.call(
                                            nil,nil
                                                       )
                                          end
                                      end
                                  else
                                      Cell.new()
                                  end
                              end
                          end
                      }
                    begin
                      embedBacktraceInfo( "./lib/srfi-1.nnd", 905 ); 
                        delayCall( '_lp',  'lp',
                            begin
                                trampCall(_lp)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:905"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              begin
                                  trampCall(_lis)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:906"] + __e.backtrace ) ; raise __e
                              end
                        ]
                                     )
                    end
                } ; ___lambda.call(
                nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._partition_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_partition', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_partition'] = self.method( :_partition_METHOD )
    @_partition = 
    trampCall(
          Proc.new { |_pred,_lis| 
              begin
              end
              begin
                ___lambda = lambda { |_recur| 
                    _recur                     = 
                      Proc.new { |_lis| 
                          if ( 
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 918 ); 
                                trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                                    begin
                                      if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                        trampCall(@_null_MIMARKlist_QUMARK)
                                      else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:918"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                [
                                      begin
                                          trampCall(_lis)
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:924"] + __e.backtrace ) ; raise __e
                                      end
                                ]
                                             ))
                            end
                           ) then
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 924 ); 
                                  delayCall( '_values',  'values',
                                      begin
                                        if @global_lisp_binding.has_key?('_values') then
                                          trampCall(@_values)
                                        else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:924"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        begin
                                            trampCall(_lis)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:924"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        begin
                                            trampCall(_lis)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:924"] + __e.backtrace ) ; raise __e
                                        end
                                  ]
                                               )
                              end
                          else
                              begin
                                ___lambda = lambda { |_elt,_tail| 
                                    begin
                                      embedBacktraceInfo( "", 1 ); 
                                        delayCall( '_call_MIMARKwith_MIMARKvalues',  'call-with-values',
                                            begin
                                              if @global_lisp_binding.has_key?('_call_MIMARKwith_MIMARKvalues') then
                                                trampCall(@_call_MIMARKwith_MIMARKvalues)
                                              else raise NameError.new( "Error: undefined variable _call_MIMARKwith_MIMARKvalues", "_call_MIMARKwith_MIMARKvalues" ) end
                                              rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                        [
                                              Proc.new { || 
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 921 ); 
                                                      trampCall( callProcedure(  '_recur',  'recur',
                                                          begin
                                                              trampCall(_recur)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:921"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                      [
                                                            begin
                                                                trampCall(_tail)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:921"] + __e.backtrace ) ; raise __e
                                                            end
                                                      ]
                                                                   ))
                                                  end
                                              }                                            ,
                                              Proc.new { |_in,_out| 
                                                  if ( 
                                                    begin
                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 922 ); 
                                                        trampCall( callProcedure(  '_pred',  'pred',
                                                            begin
                                                                trampCall(_pred)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:922"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                        [
                                                              begin
                                                                  trampCall(_elt)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:924"] + __e.backtrace ) ; raise __e
                                                              end
                                                        ]
                                                                     ))
                                                    end
                                                   ) then
                                                      begin
                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 924 ); 
                                                          trampCall( self._values_METHOD(  'values',
                                                              begin
                                                                if @global_lisp_binding.has_key?('_values') then
                                                                  trampCall(@_values)
                                                                else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:924"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                          [
                                                                if ( 
                                                                  begin
                                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 924 ); 
                                                                      _pair_QUMARK(
                                                                          begin
                                                                              trampCall(_out)
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:924"] + __e.backtrace ) ; raise __e
                                                                          end
                                                                      )
                                                                  end
                                                                 ) then
                                                                    begin
                                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 924 ); 
                                                                        _cons(
                                                                            begin
                                                                                trampCall(_elt)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:924"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                            begin
                                                                                trampCall(_in)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:924"] + __e.backtrace ) ; raise __e
                                                                            end
                                                                        )
                                                                    end
                                                                else
                                                                    begin
                                                                        trampCall(_lis)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:924"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                end                                                              ,
                                                                begin
                                                                    trampCall(_out)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:924"] + __e.backtrace ) ; raise __e
                                                                end
                                                          ]
                                                                       ))
                                                      end
                                                  else
                                                      begin
                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 924 ); 
                                                          trampCall( self._values_METHOD(  'values',
                                                              begin
                                                                if @global_lisp_binding.has_key?('_values') then
                                                                  trampCall(@_values)
                                                                else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:924"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                          [
                                                                begin
                                                                    trampCall(_in)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:924"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                if ( 
                                                                  begin
                                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 924 ); 
                                                                      _pair_QUMARK(
                                                                          begin
                                                                              trampCall(_in)
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:924"] + __e.backtrace ) ; raise __e
                                                                          end
                                                                      )
                                                                  end
                                                                 ) then
                                                                    begin
                                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 924 ); 
                                                                        _cons(
                                                                            begin
                                                                                trampCall(_elt)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:924"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                            begin
                                                                                trampCall(_out)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:924"] + __e.backtrace ) ; raise __e
                                                                            end
                                                                        )
                                                                    end
                                                                else
                                                                    begin
                                                                        trampCall(_lis)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:924"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                end
                                                          ]
                                                                       ))
                                                      end
                                                  end
                                              }
                                        ]
                                                     )
                                    end
                                } ; ___lambda.call(
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 919 ); 
                                          _car(
                                              begin
                                                  trampCall(_lis)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:924"] + __e.backtrace ) ; raise __e
                                              end
                                          )
                                      end                                    ,
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 920 ); 
                                          _cdr(
                                              begin
                                                  trampCall(_lis)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:924"] + __e.backtrace ) ; raise __e
                                              end
                                          )
                                      end
                                           )
                              end
                          end
                      }
                    begin
                      embedBacktraceInfo( "./lib/srfi-1.nnd", 921 ); 
                        delayCall( '_recur',  'recur',
                            begin
                                trampCall(_recur)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:921"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              begin
                                  trampCall(_lis)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:924"] + __e.backtrace ) ; raise __e
                              end
                        ]
                                     )
                    end
                } ; ___lambda.call(
                nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._partition_EXMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_partition_EXMARK', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_partition_EXMARK'] = self.method( :_partition_EXMARK_METHOD )
    @_partition_EXMARK = 
    trampCall(
          Proc.new { |_pred,_lis| 
              begin
              end
              if ( 
                begin
                  embedBacktraceInfo( "./lib/srfi-1.nnd", 951 ); 
                    trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                        begin
                          if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                            trampCall(@_null_MIMARKlist_QUMARK)
                          else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:951"] + __e.backtrace ) ; raise __e
                        end                      ,
                    [
                          begin
                              trampCall(_lis)
                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:989"] + __e.backtrace ) ; raise __e
                          end
                    ]
                                 ))
                end
               ) then
                  begin
                    embedBacktraceInfo( "./lib/srfi-1.nnd", 989 ); 
                      delayCall( '_values',  'values',
                          begin
                            if @global_lisp_binding.has_key?('_values') then
                              trampCall(@_values)
                            else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:989"] + __e.backtrace ) ; raise __e
                          end                        ,
                      [
                            begin
                                trampCall(_lis)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:989"] + __e.backtrace ) ; raise __e
                            end                          ,
                            begin
                                trampCall(_lis)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:989"] + __e.backtrace ) ; raise __e
                            end
                      ]
                                   )
                  end
              else
                  begin
                    ___lambda = lambda { |_scan_MIMARKin,_scan_MIMARKout| 
                        _scan_MIMARKin                         = 
                          Proc.new { |_in_MIMARKprev,_out_MIMARKprev,_lis| 
                              begin
                                ___lambda = lambda { |_lp| 
                                    _lp                                     = 
                                      Proc.new { |_in_MIMARKprev,_lis| 
                                          if ( 
                                            begin
                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 986 ); 
                                                _pair_QUMARK(
                                                    begin
                                                        trampCall(_lis)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:989"] + __e.backtrace ) ; raise __e
                                                    end
                                                )
                                            end
                                           ) then
                                              if ( 
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 987 ); 
                                                    trampCall( callProcedure(  '_pred',  'pred',
                                                        begin
                                                            trampCall(_pred)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:987"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                    [
                                                          begin
                                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 987 ); 
                                                              _car(
                                                                  begin
                                                                      trampCall(_lis)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:989"] + __e.backtrace ) ; raise __e
                                                                  end
                                                              )
                                                          end
                                                    ]
                                                                 ))
                                                end
                                               ) then
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 990 ); 
                                                      delayCall( '_lp',  'lp',
                                                          begin
                                                              trampCall(_lp)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:990"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                      [
                                                            begin
                                                                trampCall(_lis)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:989"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            begin
                                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 990 ); 
                                                                _cdr(
                                                                    begin
                                                                        trampCall(_lis)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:989"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                )
                                                            end
                                                      ]
                                                                   )
                                                  end
                                              else
                                                  begin
                                                      begin
                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 973 ); 
                                                          _set_MIMARKcdr_EXMARK(
                                                              begin
                                                                  trampCall(_out_MIMARKprev)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:971"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              begin
                                                                  trampCall(_lis)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:989"] + __e.backtrace ) ; raise __e
                                                              end
                                                          )
                                                      end
                                                      begin
                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 981 ); 
                                                          delayCall( '_scan_MIMARKout',  'scan-out',
                                                              begin
                                                                  trampCall(_scan_MIMARKout)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:981"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                          [
                                                                begin
                                                                    trampCall(_in_MIMARKprev)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:973"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                begin
                                                                    trampCall(_lis)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:989"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                begin
                                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 990 ); 
                                                                    _cdr(
                                                                        begin
                                                                            trampCall(_lis)
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:989"] + __e.backtrace ) ; raise __e
                                                                        end
                                                                    )
                                                                end
                                                          ]
                                                                       )
                                                      end
                                                  end
                                              end
                                          else
                                              begin
                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 973 ); 
                                                  delayCall( '_set_MIMARKcdr_EXMARK',  'set-cdr!',
                                                      begin
                                                        if @global_lisp_binding.has_key?('_set_MIMARKcdr_EXMARK') then
                                                          trampCall(@_set_MIMARKcdr_EXMARK)
                                                        else raise NameError.new( "Error: undefined variable _set_MIMARKcdr_EXMARK", "_set_MIMARKcdr_EXMARK" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:973"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                  [
                                                        begin
                                                            trampCall(_out_MIMARKprev)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:971"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        begin
                                                            trampCall(_lis)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:989"] + __e.backtrace ) ; raise __e
                                                        end
                                                  ]
                                                               )
                                              end
                                          end
                                      }
                                    begin
                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 990 ); 
                                        delayCall( '_lp',  'lp',
                                            begin
                                                trampCall(_lp)
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:990"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                        [
                                              begin
                                                  trampCall(_in_MIMARKprev)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:973"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              begin
                                                  trampCall(_lis)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:989"] + __e.backtrace ) ; raise __e
                                              end
                                        ]
                                                     )
                                    end
                                } ; ___lambda.call(
                                nil
                                           )
                              end
                          }
                        _scan_MIMARKout                         = 
                          Proc.new { |_in_MIMARKprev,_out_MIMARKprev,_lis| 
                              begin
                                ___lambda = lambda { |_lp| 
                                    _lp                                     = 
                                      Proc.new { |_out_MIMARKprev,_lis| 
                                          if ( 
                                            begin
                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 986 ); 
                                                _pair_QUMARK(
                                                    begin
                                                        trampCall(_lis)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:989"] + __e.backtrace ) ; raise __e
                                                    end
                                                )
                                            end
                                           ) then
                                              if ( 
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 987 ); 
                                                    trampCall( callProcedure(  '_pred',  'pred',
                                                        begin
                                                            trampCall(_pred)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:987"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                    [
                                                          begin
                                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 987 ); 
                                                              _car(
                                                                  begin
                                                                      trampCall(_lis)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:989"] + __e.backtrace ) ; raise __e
                                                                  end
                                                              )
                                                          end
                                                    ]
                                                                 ))
                                                end
                                               ) then
                                                  begin
                                                      begin
                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 973 ); 
                                                          _set_MIMARKcdr_EXMARK(
                                                              begin
                                                                  trampCall(_in_MIMARKprev)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:973"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              begin
                                                                  trampCall(_lis)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:989"] + __e.backtrace ) ; raise __e
                                                              end
                                                          )
                                                      end
                                                      begin
                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 988 ); 
                                                          delayCall( '_scan_MIMARKin',  'scan-in',
                                                              begin
                                                                  trampCall(_scan_MIMARKin)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:988"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                          [
                                                                begin
                                                                    trampCall(_lis)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:989"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                begin
                                                                    trampCall(_out_MIMARKprev)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:971"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                begin
                                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 990 ); 
                                                                    _cdr(
                                                                        begin
                                                                            trampCall(_lis)
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:989"] + __e.backtrace ) ; raise __e
                                                                        end
                                                                    )
                                                                end
                                                          ]
                                                                       )
                                                      end
                                                  end
                                              else
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 990 ); 
                                                      delayCall( '_lp',  'lp',
                                                          begin
                                                              trampCall(_lp)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:990"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                      [
                                                            begin
                                                                trampCall(_lis)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:989"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            begin
                                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 990 ); 
                                                                _cdr(
                                                                    begin
                                                                        trampCall(_lis)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:989"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                )
                                                            end
                                                      ]
                                                                   )
                                                  end
                                              end
                                          else
                                              begin
                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 973 ); 
                                                  delayCall( '_set_MIMARKcdr_EXMARK',  'set-cdr!',
                                                      begin
                                                        if @global_lisp_binding.has_key?('_set_MIMARKcdr_EXMARK') then
                                                          trampCall(@_set_MIMARKcdr_EXMARK)
                                                        else raise NameError.new( "Error: undefined variable _set_MIMARKcdr_EXMARK", "_set_MIMARKcdr_EXMARK" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:973"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                  [
                                                        begin
                                                            trampCall(_in_MIMARKprev)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:973"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        begin
                                                            trampCall(_lis)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:989"] + __e.backtrace ) ; raise __e
                                                        end
                                                  ]
                                                               )
                                              end
                                          end
                                      }
                                    begin
                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 990 ); 
                                        delayCall( '_lp',  'lp',
                                            begin
                                                trampCall(_lp)
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:990"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                        [
                                              begin
                                                  trampCall(_out_MIMARKprev)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:971"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              begin
                                                  trampCall(_lis)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:989"] + __e.backtrace ) ; raise __e
                                              end
                                        ]
                                                     )
                                    end
                                } ; ___lambda.call(
                                nil
                                           )
                              end
                          }
                        if ( 
                          begin
                            embedBacktraceInfo( "./lib/srfi-1.nnd", 987 ); 
                              trampCall( callProcedure(  '_pred',  'pred',
                                  begin
                                      trampCall(_pred)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:987"] + __e.backtrace ) ; raise __e
                                  end                                ,
                              [
                                    begin
                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 987 ); 
                                        _car(
                                            begin
                                                trampCall(_lis)
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:989"] + __e.backtrace ) ; raise __e
                                            end
                                        )
                                    end
                              ]
                                           ))
                          end
                         ) then
                            begin
                              ___lambda = lambda { |_lp| 
                                  _lp                                   = 
                                    Proc.new { |_prev_MIMARKl,_l| 
                                        if ( 
                                          begin
                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 986 ); 
                                              _not(
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 986 ); 
                                                      _pair_QUMARK(
                                                          begin
                                                              trampCall(_l)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:990"] + __e.backtrace ) ; raise __e
                                                          end
                                                      )
                                                  end
                                              )
                                          end
                                         ) then
                                            begin
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 989 ); 
                                                    delayCall( '_values',  'values',
                                                        begin
                                                          if @global_lisp_binding.has_key?('_values') then
                                                            trampCall(@_values)
                                                          else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:989"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                    [
                                                          begin
                                                              trampCall(_lis)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:989"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          begin
                                                              trampCall(_l)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:990"] + __e.backtrace ) ; raise __e
                                                          end
                                                    ]
                                                                 )
                                                end
                                            end
                                        else
                                            if ( 
                                              begin
                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 987 ); 
                                                  trampCall( callProcedure(  '_pred',  'pred',
                                                      begin
                                                          trampCall(_pred)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:987"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                  [
                                                        begin
                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 987 ); 
                                                            _car(
                                                                begin
                                                                    trampCall(_l)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:990"] + __e.backtrace ) ; raise __e
                                                                end
                                                            )
                                                        end
                                                  ]
                                                               ))
                                              end
                                             ) then
                                                begin
                                                    begin
                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 990 ); 
                                                        delayCall( '_lp',  'lp',
                                                            begin
                                                                trampCall(_lp)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:990"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                        [
                                                              begin
                                                                  trampCall(_l)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:990"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              begin
                                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 990 ); 
                                                                  _cdr(
                                                                      begin
                                                                          trampCall(_l)
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:990"] + __e.backtrace ) ; raise __e
                                                                      end
                                                                  )
                                                              end
                                                        ]
                                                                     )
                                                    end
                                                end
                                            else
                                                if ( 
                                                true
                                                 ) then
                                                    begin
                                                        begin
                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 981 ); 
                                                            trampCall( callProcedure(  '_scan_MIMARKout',  'scan-out',
                                                                begin
                                                                    trampCall(_scan_MIMARKout)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:981"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                            [
                                                                  begin
                                                                      trampCall(_prev_MIMARKl)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:988"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  begin
                                                                      trampCall(_l)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:990"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  begin
                                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 990 ); 
                                                                      _cdr(
                                                                          begin
                                                                              trampCall(_l)
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:990"] + __e.backtrace ) ; raise __e
                                                                          end
                                                                      )
                                                                  end
                                                            ]
                                                                         ))
                                                        end
                                                        begin
                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 989 ); 
                                                            delayCall( '_values',  'values',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_values') then
                                                                    trampCall(@_values)
                                                                  else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:989"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                            [
                                                                  begin
                                                                      trampCall(_lis)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:989"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  begin
                                                                      trampCall(_l)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:990"] + __e.backtrace ) ; raise __e
                                                                  end
                                                            ]
                                                                         )
                                                        end
                                                    end
                                                else
                                                    Cell.new()
                                                end
                                            end
                                        end
                                    }
                                  begin
                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 990 ); 
                                      delayCall( '_lp',  'lp',
                                          begin
                                              trampCall(_lp)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:990"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                      [
                                            begin
                                                trampCall(_lis)
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:989"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            begin
                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 990 ); 
                                                _cdr(
                                                    begin
                                                        trampCall(_lis)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:989"] + __e.backtrace ) ; raise __e
                                                    end
                                                )
                                            end
                                      ]
                                                   )
                                  end
                              } ; ___lambda.call(
                              nil
                                         )
                            end
                        else
                            begin
                              ___lambda = lambda { |_lp| 
                                  _lp                                   = 
                                    Proc.new { |_prev_MIMARKl,_l| 
                                        if ( 
                                          begin
                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 986 ); 
                                              _not(
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 986 ); 
                                                      _pair_QUMARK(
                                                          begin
                                                              trampCall(_l)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:990"] + __e.backtrace ) ; raise __e
                                                          end
                                                      )
                                                  end
                                              )
                                          end
                                         ) then
                                            begin
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 989 ); 
                                                    delayCall( '_values',  'values',
                                                        begin
                                                          if @global_lisp_binding.has_key?('_values') then
                                                            trampCall(@_values)
                                                          else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:989"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                    [
                                                          begin
                                                              trampCall(_l)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:990"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          begin
                                                              trampCall(_lis)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:989"] + __e.backtrace ) ; raise __e
                                                          end
                                                    ]
                                                                 )
                                                end
                                            end
                                        else
                                            if ( 
                                              begin
                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 987 ); 
                                                  trampCall( callProcedure(  '_pred',  'pred',
                                                      begin
                                                          trampCall(_pred)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:987"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                  [
                                                        begin
                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 987 ); 
                                                            _car(
                                                                begin
                                                                    trampCall(_l)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:990"] + __e.backtrace ) ; raise __e
                                                                end
                                                            )
                                                        end
                                                  ]
                                                               ))
                                              end
                                             ) then
                                                begin
                                                    begin
                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 988 ); 
                                                        trampCall( callProcedure(  '_scan_MIMARKin',  'scan-in',
                                                            begin
                                                                trampCall(_scan_MIMARKin)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:988"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                        [
                                                              begin
                                                                  trampCall(_l)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:990"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              begin
                                                                  trampCall(_prev_MIMARKl)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:988"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              begin
                                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 990 ); 
                                                                  _cdr(
                                                                      begin
                                                                          trampCall(_l)
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:990"] + __e.backtrace ) ; raise __e
                                                                      end
                                                                  )
                                                              end
                                                        ]
                                                                     ))
                                                    end
                                                    begin
                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 989 ); 
                                                        delayCall( '_values',  'values',
                                                            begin
                                                              if @global_lisp_binding.has_key?('_values') then
                                                                trampCall(@_values)
                                                              else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:989"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                        [
                                                              begin
                                                                  trampCall(_l)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:990"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              begin
                                                                  trampCall(_lis)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:989"] + __e.backtrace ) ; raise __e
                                                              end
                                                        ]
                                                                     )
                                                    end
                                                end
                                            else
                                                if ( 
                                                true
                                                 ) then
                                                    begin
                                                        begin
                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 990 ); 
                                                            delayCall( '_lp',  'lp',
                                                                begin
                                                                    trampCall(_lp)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:990"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                            [
                                                                  begin
                                                                      trampCall(_l)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:990"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  begin
                                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 990 ); 
                                                                      _cdr(
                                                                          begin
                                                                              trampCall(_l)
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:990"] + __e.backtrace ) ; raise __e
                                                                          end
                                                                      )
                                                                  end
                                                            ]
                                                                         )
                                                        end
                                                    end
                                                else
                                                    Cell.new()
                                                end
                                            end
                                        end
                                    }
                                  begin
                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 990 ); 
                                      delayCall( '_lp',  'lp',
                                          begin
                                              trampCall(_lp)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:990"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                      [
                                            begin
                                                trampCall(_lis)
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:989"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            begin
                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 990 ); 
                                                _cdr(
                                                    begin
                                                        trampCall(_lis)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:989"] + __e.backtrace ) ; raise __e
                                                    end
                                                )
                                            end
                                      ]
                                                   )
                                  end
                              } ; ___lambda.call(
                              nil
                                         )
                            end
                        end
                    } ; ___lambda.call(
                    nil,nil
                               )
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._remove_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_remove', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_remove'] = self.method( :_remove_METHOD )
    @_remove = 
    trampCall(
          Proc.new { |_pred,_l| 
              begin
                embedBacktraceInfo( "./lib/srfi-1.nnd", 994 ); 
                  delayCall( '_filter',  'filter',
                      begin
                        if @global_lisp_binding.has_key?('_filter') then
                          trampCall(@_filter)
                        else raise NameError.new( "Error: undefined variable _filter", "_filter" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:994"] + __e.backtrace ) ; raise __e
                      end                    ,
                  [
                        Proc.new { |_x| 
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 994 ); 
                                _not(
                                    begin
                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 994 ); 
                                        trampCall( callProcedure(  '_pred',  'pred',
                                            begin
                                                trampCall(_pred)
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:994"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                        [
                                              begin
                                                  trampCall(_x)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:994"] + __e.backtrace ) ; raise __e
                                              end
                                        ]
                                                     ))
                                    end
                                )
                            end
                        }                      ,
                        begin
                            trampCall(_l)
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:994"] + __e.backtrace ) ; raise __e
                        end
                  ]
                               )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._remove_EXMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_remove_EXMARK', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_remove_EXMARK'] = self.method( :_remove_EXMARK_METHOD )
    @_remove_EXMARK = 
    trampCall(
          Proc.new { |_pred,_l| 
              begin
                embedBacktraceInfo( "./lib/srfi-1.nnd", 995 ); 
                  delayCall( '_filter_EXMARK',  'filter!',
                      begin
                        if @global_lisp_binding.has_key?('_filter_EXMARK') then
                          trampCall(@_filter_EXMARK)
                        else raise NameError.new( "Error: undefined variable _filter_EXMARK", "_filter_EXMARK" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:995"] + __e.backtrace ) ; raise __e
                      end                    ,
                  [
                        Proc.new { |_x| 
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 995 ); 
                                _not(
                                    begin
                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 995 ); 
                                        trampCall( callProcedure(  '_pred',  'pred',
                                            begin
                                                trampCall(_pred)
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:995"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                        [
                                              begin
                                                  trampCall(_x)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:995"] + __e.backtrace ) ; raise __e
                                              end
                                        ]
                                                     ))
                                    end
                                )
                            end
                        }                      ,
                        begin
                            trampCall(_l)
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:995"] + __e.backtrace ) ; raise __e
                        end
                  ]
                               )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._delete_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_delete', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_delete'] = self.method( :_delete_METHOD )
    @_delete = 
    trampCall(
          Proc.new { |_x,_lis,*__rest__| _maybe_MIMARK_EQMARK = __rest__[0] ;  
              begin
                ___lambda = lambda { |__EQMARK| 
                    begin
                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1018 ); 
                        delayCall( '_filter',  'filter',
                            begin
                              if @global_lisp_binding.has_key?('_filter') then
                                trampCall(@_filter)
                              else raise NameError.new( "Error: undefined variable _filter", "_filter" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1018"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              Proc.new { |_y| 
                                  begin
                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1018 ); 
                                      _not(
                                          begin
                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 1018 ); 
                                              trampCall( callProcedure(  '__EQMARK',  '=',
                                                  begin
                                                      trampCall(__EQMARK)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1018"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                              [
                                                    begin
                                                        trampCall(_x)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1018"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    begin
                                                        trampCall(_y)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1018"] + __e.backtrace ) ; raise __e
                                                    end
                                              ]
                                                           ))
                                          end
                                      )
                                  end
                              }                            ,
                              begin
                                  trampCall(_lis)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1018"] + __e.backtrace ) ; raise __e
                              end
                        ]
                                     )
                    end
                } ; ___lambda.call(
                      begin
                        ___lambda = lambda { |___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30225| 
                            if ( 
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 738 ); 
                                  _null_QUMARK(
                                      begin
                                          trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30225)
                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                      end
                                  )
                              end
                             ) then
                                begin
                                  if @global_lisp_binding.has_key?('_equal_QUMARK') then
                                    trampCall(@_equal_QUMARK)
                                  else raise NameError.new( "Error: undefined variable _equal_QUMARK", "_equal_QUMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1017"] + __e.backtrace ) ; raise __e
                                end
                            else
                                begin
                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 987 ); 
                                    delayCall( '_car',  'car',
                                        begin
                                          if @global_lisp_binding.has_key?('_car') then
                                            trampCall(@_car)
                                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:987"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                    [
                                          begin
                                              trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30225)
                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                          end
                                    ]
                                                 )
                                end
                            end
                        } ; ___lambda.call(
                              begin
                                  trampCall(_maybe_MIMARK_EQMARK)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1017"] + __e.backtrace ) ; raise __e
                              end
                                   )
                      end
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._delete_EXMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_delete_EXMARK', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_delete_EXMARK'] = self.method( :_delete_EXMARK_METHOD )
    @_delete_EXMARK = 
    trampCall(
          Proc.new { |_x,_lis,*__rest__| _maybe_MIMARK_EQMARK = __rest__[0] ;  
              begin
                ___lambda = lambda { |__EQMARK| 
                    begin
                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1022 ); 
                        delayCall( '_filter_EXMARK',  'filter!',
                            begin
                              if @global_lisp_binding.has_key?('_filter_EXMARK') then
                                trampCall(@_filter_EXMARK)
                              else raise NameError.new( "Error: undefined variable _filter_EXMARK", "_filter_EXMARK" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1022"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              Proc.new { |_y| 
                                  begin
                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1022 ); 
                                      _not(
                                          begin
                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 1022 ); 
                                              trampCall( callProcedure(  '__EQMARK',  '=',
                                                  begin
                                                      trampCall(__EQMARK)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1022"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                              [
                                                    begin
                                                        trampCall(_x)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1022"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    begin
                                                        trampCall(_y)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1022"] + __e.backtrace ) ; raise __e
                                                    end
                                              ]
                                                           ))
                                          end
                                      )
                                  end
                              }                            ,
                              begin
                                  trampCall(_lis)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1022"] + __e.backtrace ) ; raise __e
                              end
                        ]
                                     )
                    end
                } ; ___lambda.call(
                      begin
                        ___lambda = lambda { |___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30226| 
                            if ( 
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 738 ); 
                                  _null_QUMARK(
                                      begin
                                          trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30226)
                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                      end
                                  )
                              end
                             ) then
                                begin
                                  if @global_lisp_binding.has_key?('_equal_QUMARK') then
                                    trampCall(@_equal_QUMARK)
                                  else raise NameError.new( "Error: undefined variable _equal_QUMARK", "_equal_QUMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1021"] + __e.backtrace ) ; raise __e
                                end
                            else
                                begin
                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 987 ); 
                                    delayCall( '_car',  'car',
                                        begin
                                          if @global_lisp_binding.has_key?('_car') then
                                            trampCall(@_car)
                                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:987"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                    [
                                          begin
                                              trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30226)
                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                          end
                                    ]
                                                 )
                                end
                            end
                        } ; ___lambda.call(
                              begin
                                  trampCall(_maybe_MIMARK_EQMARK)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1021"] + __e.backtrace ) ; raise __e
                              end
                                   )
                      end
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._member_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_member', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_member'] = self.method( :_member_METHOD )
    @_member = 
    trampCall(
          Proc.new { |_x,_lis,*__rest__| _maybe_MIMARK_EQMARK = __rest__[0] ;  
              begin
                ___lambda = lambda { |__EQMARK| 
                    begin
                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1027 ); 
                        delayCall( '_find_MIMARKtail',  'find-tail',
                            begin
                              if @global_lisp_binding.has_key?('_find_MIMARKtail') then
                                trampCall(@_find_MIMARKtail)
                              else raise NameError.new( "Error: undefined variable _find_MIMARKtail", "_find_MIMARKtail" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1027"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              Proc.new { |_y| 
                                  begin
                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1027 ); 
                                      trampCall( callProcedure(  '__EQMARK',  '=',
                                          begin
                                              trampCall(__EQMARK)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1027"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                      [
                                            begin
                                                trampCall(_x)
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1027"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            begin
                                                trampCall(_y)
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1027"] + __e.backtrace ) ; raise __e
                                            end
                                      ]
                                                   ))
                                  end
                              }                            ,
                              begin
                                  trampCall(_lis)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1027"] + __e.backtrace ) ; raise __e
                              end
                        ]
                                     )
                    end
                } ; ___lambda.call(
                      begin
                        ___lambda = lambda { |___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30227| 
                            if ( 
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 738 ); 
                                  _null_QUMARK(
                                      begin
                                          trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30227)
                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                      end
                                  )
                              end
                             ) then
                                begin
                                  if @global_lisp_binding.has_key?('_equal_QUMARK') then
                                    trampCall(@_equal_QUMARK)
                                  else raise NameError.new( "Error: undefined variable _equal_QUMARK", "_equal_QUMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1026"] + __e.backtrace ) ; raise __e
                                end
                            else
                                begin
                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 987 ); 
                                    delayCall( '_car',  'car',
                                        begin
                                          if @global_lisp_binding.has_key?('_car') then
                                            trampCall(@_car)
                                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:987"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                    [
                                          begin
                                              trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30227)
                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                          end
                                    ]
                                                 )
                                end
                            end
                        } ; ___lambda.call(
                              begin
                                  trampCall(_maybe_MIMARK_EQMARK)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1026"] + __e.backtrace ) ; raise __e
                              end
                                   )
                      end
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._delete_MIMARKduplicates_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_delete_MIMARKduplicates', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_delete_MIMARKduplicates'] = self.method( :_delete_MIMARKduplicates_METHOD )
    @_delete_MIMARKduplicates = 
    trampCall(
          Proc.new { |_lis,*__rest__| _maybe_MIMARK_EQMARK = __rest__[0] ;  
              begin
                ___lambda = lambda { |_elt_EQMARK| 
                    begin
                    end
                    begin
                      ___lambda = lambda { |_recur| 
                          _recur                           = 
                            Proc.new { |_lis| 
                                if ( 
                                  begin
                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1049 ); 
                                      trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                                          begin
                                            if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                              trampCall(@_null_MIMARKlist_QUMARK)
                                            else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1049"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                      [
                                            begin
                                                trampCall(_lis)
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1053"] + __e.backtrace ) ; raise __e
                                            end
                                      ]
                                                   ))
                                  end
                                 ) then
                                    begin
                                        trampCall(_lis)
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1053"] + __e.backtrace ) ; raise __e
                                    end
                                else
                                    begin
                                      ___lambda = lambda { |_x| 
                                          begin
                                            ___lambda = lambda { |_tail| 
                                                begin
                                                  ___lambda = lambda { |_new_MIMARKtail| 
                                                      if ( 
                                                        begin
                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 1053 ); 
                                                            _eq_QUMARK(
                                                                begin
                                                                    trampCall(_tail)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1053"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                begin
                                                                    trampCall(_new_MIMARKtail)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1053"] + __e.backtrace ) ; raise __e
                                                                end
                                                            )
                                                        end
                                                       ) then
                                                          begin
                                                              trampCall(_lis)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1053"] + __e.backtrace ) ; raise __e
                                                          end
                                                      else
                                                          begin
                                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 1053 ); 
                                                              delayCall( '_cons',  'cons',
                                                                  begin
                                                                    if @global_lisp_binding.has_key?('_cons') then
                                                                      trampCall(@_cons)
                                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1053"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                              [
                                                                    begin
                                                                        trampCall(_x)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1053"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                    begin
                                                                        trampCall(_new_MIMARKtail)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1053"] + __e.backtrace ) ; raise __e
                                                                    end
                                                              ]
                                                                           )
                                                          end
                                                      end
                                                  } ; ___lambda.call(
                                                        begin
                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 1052 ); 
                                                            trampCall( callProcedure(  '_recur',  'recur',
                                                                begin
                                                                    trampCall(_recur)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1052"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                            [
                                                                  begin
                                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1052 ); 
                                                                      trampCall( self._delete_METHOD(  'delete',
                                                                          begin
                                                                            if @global_lisp_binding.has_key?('_delete') then
                                                                              trampCall(@_delete)
                                                                            else raise NameError.new( "Error: undefined variable _delete", "_delete" ) end
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1052"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                      [
                                                                            begin
                                                                                trampCall(_x)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1053"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                            begin
                                                                                trampCall(_tail)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1053"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                            begin
                                                                                trampCall(_elt_EQMARK)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1052"] + __e.backtrace ) ; raise __e
                                                                            end
                                                                      ]
                                                                                   ))
                                                                  end
                                                            ]
                                                                         ))
                                                        end
                                                             )
                                                end
                                            } ; ___lambda.call(
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1051 ); 
                                                      _cdr(
                                                          begin
                                                              trampCall(_lis)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1053"] + __e.backtrace ) ; raise __e
                                                          end
                                                      )
                                                  end
                                                       )
                                          end
                                      } ; ___lambda.call(
                                            begin
                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 1050 ); 
                                                _car(
                                                    begin
                                                        trampCall(_lis)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1053"] + __e.backtrace ) ; raise __e
                                                    end
                                                )
                                            end
                                                 )
                                    end
                                end
                            }
                          begin
                            embedBacktraceInfo( "./lib/srfi-1.nnd", 1052 ); 
                              delayCall( '_recur',  'recur',
                                  begin
                                      trampCall(_recur)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1052"] + __e.backtrace ) ; raise __e
                                  end                                ,
                              [
                                    begin
                                        trampCall(_lis)
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1053"] + __e.backtrace ) ; raise __e
                                    end
                              ]
                                           )
                          end
                      } ; ___lambda.call(
                      nil
                                 )
                    end
                } ; ___lambda.call(
                      begin
                        ___lambda = lambda { |___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30228| 
                            if ( 
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 738 ); 
                                  _null_QUMARK(
                                      begin
                                          trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30228)
                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                      end
                                  )
                              end
                             ) then
                                begin
                                  if @global_lisp_binding.has_key?('_equal_QUMARK') then
                                    trampCall(@_equal_QUMARK)
                                  else raise NameError.new( "Error: undefined variable _equal_QUMARK", "_equal_QUMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1046"] + __e.backtrace ) ; raise __e
                                end
                            else
                                begin
                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 1050 ); 
                                    delayCall( '_car',  'car',
                                        begin
                                          if @global_lisp_binding.has_key?('_car') then
                                            trampCall(@_car)
                                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1050"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                    [
                                          begin
                                              trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30228)
                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                          end
                                    ]
                                                 )
                                end
                            end
                        } ; ___lambda.call(
                              begin
                                  trampCall(_maybe_MIMARK_EQMARK)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1046"] + __e.backtrace ) ; raise __e
                              end
                                   )
                      end
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._delete_MIMARKduplicates_EXMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_delete_MIMARKduplicates_EXMARK', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_delete_MIMARKduplicates_EXMARK'] = self.method( :_delete_MIMARKduplicates_EXMARK_METHOD )
    @_delete_MIMARKduplicates_EXMARK = 
    trampCall(
          Proc.new { |_lis,*__rest__| _maybe_MIMARK_EQMARK = __rest__[0] ;  
              begin
                ___lambda = lambda { |_elt_EQMARK| 
                    begin
                    end
                    begin
                      ___lambda = lambda { |_recur| 
                          _recur                           = 
                            Proc.new { |_lis| 
                                if ( 
                                  begin
                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1059 ); 
                                      trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                                          begin
                                            if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                              trampCall(@_null_MIMARKlist_QUMARK)
                                            else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1059"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                      [
                                            begin
                                                trampCall(_lis)
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1068"] + __e.backtrace ) ; raise __e
                                            end
                                      ]
                                                   ))
                                  end
                                 ) then
                                    begin
                                        trampCall(_lis)
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1068"] + __e.backtrace ) ; raise __e
                                    end
                                else
                                    begin
                                      ___lambda = lambda { |_x| 
                                          begin
                                            ___lambda = lambda { |_tail| 
                                                begin
                                                  ___lambda = lambda { |_new_MIMARKtail| 
                                                      if ( 
                                                        begin
                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 1063 ); 
                                                            _eq_QUMARK(
                                                                begin
                                                                    trampCall(_tail)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1063"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                begin
                                                                    trampCall(_new_MIMARKtail)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1067"] + __e.backtrace ) ; raise __e
                                                                end
                                                            )
                                                        end
                                                       ) then
                                                          begin
                                                              trampCall(_lis)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1068"] + __e.backtrace ) ; raise __e
                                                          end
                                                      else
                                                          begin
                                                              begin
                                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 1066 ); 
                                                                  _set_MIMARKcar_EXMARK(
                                                                      begin
                                                                          trampCall(_lis)
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1068"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                      begin
                                                                          trampCall(_x)
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1066"] + __e.backtrace ) ; raise __e
                                                                      end
                                                                  )
                                                              end
                                                              begin
                                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 1067 ); 
                                                                  _set_MIMARKcdr_EXMARK(
                                                                      begin
                                                                          trampCall(_lis)
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1068"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                      begin
                                                                          trampCall(_new_MIMARKtail)
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1067"] + __e.backtrace ) ; raise __e
                                                                      end
                                                                  )
                                                              end
                                                              begin
                                                                  trampCall(_lis)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1068"] + __e.backtrace ) ; raise __e
                                                              end
                                                          end
                                                      end
                                                  } ; ___lambda.call(
                                                        begin
                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 1062 ); 
                                                            trampCall( callProcedure(  '_recur',  'recur',
                                                                begin
                                                                    trampCall(_recur)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1062"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                            [
                                                                  begin
                                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1062 ); 
                                                                      trampCall( self._delete_EXMARK_METHOD(  'delete!',
                                                                          begin
                                                                            if @global_lisp_binding.has_key?('_delete_EXMARK') then
                                                                              trampCall(@_delete_EXMARK)
                                                                            else raise NameError.new( "Error: undefined variable _delete_EXMARK", "_delete_EXMARK" ) end
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1062"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                      [
                                                                            begin
                                                                                trampCall(_x)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1066"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                            begin
                                                                                trampCall(_tail)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1063"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                            begin
                                                                                trampCall(_elt_EQMARK)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1062"] + __e.backtrace ) ; raise __e
                                                                            end
                                                                      ]
                                                                                   ))
                                                                  end
                                                            ]
                                                                         ))
                                                        end
                                                             )
                                                end
                                            } ; ___lambda.call(
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1061 ); 
                                                      _cdr(
                                                          begin
                                                              trampCall(_lis)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1068"] + __e.backtrace ) ; raise __e
                                                          end
                                                      )
                                                  end
                                                       )
                                          end
                                      } ; ___lambda.call(
                                            begin
                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 1060 ); 
                                                _car(
                                                    begin
                                                        trampCall(_lis)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1068"] + __e.backtrace ) ; raise __e
                                                    end
                                                )
                                            end
                                                 )
                                    end
                                end
                            }
                          begin
                            embedBacktraceInfo( "./lib/srfi-1.nnd", 1062 ); 
                              delayCall( '_recur',  'recur',
                                  begin
                                      trampCall(_recur)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1062"] + __e.backtrace ) ; raise __e
                                  end                                ,
                              [
                                    begin
                                        trampCall(_lis)
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1068"] + __e.backtrace ) ; raise __e
                                    end
                              ]
                                           )
                          end
                      } ; ___lambda.call(
                      nil
                                 )
                    end
                } ; ___lambda.call(
                      begin
                        ___lambda = lambda { |___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30229| 
                            if ( 
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 738 ); 
                                  _null_QUMARK(
                                      begin
                                          trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30229)
                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                      end
                                  )
                              end
                             ) then
                                begin
                                  if @global_lisp_binding.has_key?('_equal_QUMARK') then
                                    trampCall(@_equal_QUMARK)
                                  else raise NameError.new( "Error: undefined variable _equal_QUMARK", "_equal_QUMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1056"] + __e.backtrace ) ; raise __e
                                end
                            else
                                begin
                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 1060 ); 
                                    delayCall( '_car',  'car',
                                        begin
                                          if @global_lisp_binding.has_key?('_car') then
                                            trampCall(@_car)
                                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1060"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                    [
                                          begin
                                              trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30229)
                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                          end
                                    ]
                                                 )
                                end
                            end
                        } ; ___lambda.call(
                              begin
                                  trampCall(_maybe_MIMARK_EQMARK)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1056"] + __e.backtrace ) ; raise __e
                              end
                                   )
                      end
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._assoc_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_assoc', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_assoc'] = self.method( :_assoc_METHOD )
    @_assoc = 
    trampCall(
          Proc.new { |_x,_lis,*__rest__| _maybe_MIMARK_EQMARK = __rest__[0] ;  
              begin
                ___lambda = lambda { |__EQMARK| 
                    begin
                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1076 ); 
                        delayCall( '_find',  'find',
                            begin
                              if @global_lisp_binding.has_key?('_find') then
                                trampCall(@_find)
                              else raise NameError.new( "Error: undefined variable _find", "_find" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1076"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              Proc.new { |_entry| 
                                  begin
                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1076 ); 
                                      trampCall( callProcedure(  '__EQMARK',  '=',
                                          begin
                                              trampCall(__EQMARK)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1076"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                      [
                                            begin
                                                trampCall(_x)
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1076"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            begin
                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 1076 ); 
                                                _car(
                                                    begin
                                                        trampCall(_entry)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1076"] + __e.backtrace ) ; raise __e
                                                    end
                                                )
                                            end
                                      ]
                                                   ))
                                  end
                              }                            ,
                              begin
                                  trampCall(_lis)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1076"] + __e.backtrace ) ; raise __e
                              end
                        ]
                                     )
                    end
                } ; ___lambda.call(
                      begin
                        ___lambda = lambda { |___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30230| 
                            if ( 
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 738 ); 
                                  _null_QUMARK(
                                      begin
                                          trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30230)
                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                      end
                                  )
                              end
                             ) then
                                begin
                                  if @global_lisp_binding.has_key?('_equal_QUMARK') then
                                    trampCall(@_equal_QUMARK)
                                  else raise NameError.new( "Error: undefined variable _equal_QUMARK", "_equal_QUMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1075"] + __e.backtrace ) ; raise __e
                                end
                            else
                                begin
                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 1076 ); 
                                    delayCall( '_car',  'car',
                                        begin
                                          if @global_lisp_binding.has_key?('_car') then
                                            trampCall(@_car)
                                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1076"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                    [
                                          begin
                                              trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30230)
                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                          end
                                    ]
                                                 )
                                end
                            end
                        } ; ___lambda.call(
                              begin
                                  trampCall(_maybe_MIMARK_EQMARK)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1075"] + __e.backtrace ) ; raise __e
                              end
                                   )
                      end
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._alist_MIMARKcons_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_alist_MIMARKcons', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_alist_MIMARKcons'] = self.method( :_alist_MIMARKcons_METHOD )
    @_alist_MIMARKcons = 
    trampCall(
          Proc.new { |_key,_datum,_alist| 
              begin
                embedBacktraceInfo( "./lib/srfi-1.nnd", 1078 ); 
                  delayCall( '_cons',  'cons',
                      begin
                        if @global_lisp_binding.has_key?('_cons') then
                          trampCall(@_cons)
                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1078"] + __e.backtrace ) ; raise __e
                      end                    ,
                  [
                        begin
                          embedBacktraceInfo( "./lib/srfi-1.nnd", 1078 ); 
                            _cons(
                                begin
                                    trampCall(_key)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1078"] + __e.backtrace ) ; raise __e
                                end                              ,
                                begin
                                    trampCall(_datum)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1078"] + __e.backtrace ) ; raise __e
                                end
                            )
                        end                      ,
                        begin
                            trampCall(_alist)
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1078"] + __e.backtrace ) ; raise __e
                        end
                  ]
                               )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._alist_MIMARKcopy_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_alist_MIMARKcopy', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_alist_MIMARKcopy'] = self.method( :_alist_MIMARKcopy_METHOD )
    @_alist_MIMARKcopy = 
    trampCall(
          Proc.new { |_alist| 
              begin
                embedBacktraceInfo( "./lib/srfi-1.nnd", 1081 ); 
                  delayCall( '_map',  'map',
                      begin
                        if @global_lisp_binding.has_key?('_map') then
                          trampCall(@_map)
                        else raise NameError.new( "Error: undefined variable _map", "_map" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1081"] + __e.backtrace ) ; raise __e
                      end                    ,
                  [
                        Proc.new { |_elt| 
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 1081 ); 
                                _cons(
                                    begin
                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1081 ); 
                                        _car(
                                            begin
                                                trampCall(_elt)
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1081"] + __e.backtrace ) ; raise __e
                                            end
                                        )
                                    end                                  ,
                                    begin
                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1081 ); 
                                        _cdr(
                                            begin
                                                trampCall(_elt)
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1081"] + __e.backtrace ) ; raise __e
                                            end
                                        )
                                    end
                                )
                            end
                        }                      ,
                        begin
                            trampCall(_alist)
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1082"] + __e.backtrace ) ; raise __e
                        end
                  ]
                               )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._alist_MIMARKdelete_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_alist_MIMARKdelete', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_alist_MIMARKdelete'] = self.method( :_alist_MIMARKdelete_METHOD )
    @_alist_MIMARKdelete = 
    trampCall(
          Proc.new { |_key,_alist,*__rest__| _maybe_MIMARK_EQMARK = __rest__[0] ;  
              begin
                ___lambda = lambda { |__EQMARK| 
                    begin
                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1086 ); 
                        delayCall( '_filter',  'filter',
                            begin
                              if @global_lisp_binding.has_key?('_filter') then
                                trampCall(@_filter)
                              else raise NameError.new( "Error: undefined variable _filter", "_filter" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1086"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              Proc.new { |_elt| 
                                  begin
                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1086 ); 
                                      _not(
                                          begin
                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 1086 ); 
                                              trampCall( callProcedure(  '__EQMARK',  '=',
                                                  begin
                                                      trampCall(__EQMARK)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1086"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                              [
                                                    begin
                                                        trampCall(_key)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1086"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    begin
                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1086 ); 
                                                        _car(
                                                            begin
                                                                trampCall(_elt)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1086"] + __e.backtrace ) ; raise __e
                                                            end
                                                        )
                                                    end
                                              ]
                                                           ))
                                          end
                                      )
                                  end
                              }                            ,
                              begin
                                  trampCall(_alist)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1086"] + __e.backtrace ) ; raise __e
                              end
                        ]
                                     )
                    end
                } ; ___lambda.call(
                      begin
                        ___lambda = lambda { |___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30231| 
                            if ( 
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 738 ); 
                                  _null_QUMARK(
                                      begin
                                          trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30231)
                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                      end
                                  )
                              end
                             ) then
                                begin
                                  if @global_lisp_binding.has_key?('_equal_QUMARK') then
                                    trampCall(@_equal_QUMARK)
                                  else raise NameError.new( "Error: undefined variable _equal_QUMARK", "_equal_QUMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1085"] + __e.backtrace ) ; raise __e
                                end
                            else
                                begin
                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 1086 ); 
                                    delayCall( '_car',  'car',
                                        begin
                                          if @global_lisp_binding.has_key?('_car') then
                                            trampCall(@_car)
                                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1086"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                    [
                                          begin
                                              trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30231)
                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                          end
                                    ]
                                                 )
                                end
                            end
                        } ; ___lambda.call(
                              begin
                                  trampCall(_maybe_MIMARK_EQMARK)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1085"] + __e.backtrace ) ; raise __e
                              end
                                   )
                      end
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._alist_MIMARKdelete_EXMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_alist_MIMARKdelete_EXMARK', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_alist_MIMARKdelete_EXMARK'] = self.method( :_alist_MIMARKdelete_EXMARK_METHOD )
    @_alist_MIMARKdelete_EXMARK = 
    trampCall(
          Proc.new { |_key,_alist,*__rest__| _maybe_MIMARK_EQMARK = __rest__[0] ;  
              begin
                ___lambda = lambda { |__EQMARK| 
                    begin
                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1090 ); 
                        delayCall( '_filter_EXMARK',  'filter!',
                            begin
                              if @global_lisp_binding.has_key?('_filter_EXMARK') then
                                trampCall(@_filter_EXMARK)
                              else raise NameError.new( "Error: undefined variable _filter_EXMARK", "_filter_EXMARK" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1090"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              Proc.new { |_elt| 
                                  begin
                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1090 ); 
                                      _not(
                                          begin
                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 1090 ); 
                                              trampCall( callProcedure(  '__EQMARK',  '=',
                                                  begin
                                                      trampCall(__EQMARK)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1090"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                              [
                                                    begin
                                                        trampCall(_key)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1090"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    begin
                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1090 ); 
                                                        _car(
                                                            begin
                                                                trampCall(_elt)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1090"] + __e.backtrace ) ; raise __e
                                                            end
                                                        )
                                                    end
                                              ]
                                                           ))
                                          end
                                      )
                                  end
                              }                            ,
                              begin
                                  trampCall(_alist)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1090"] + __e.backtrace ) ; raise __e
                              end
                        ]
                                     )
                    end
                } ; ___lambda.call(
                      begin
                        ___lambda = lambda { |___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30232| 
                            if ( 
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 738 ); 
                                  _null_QUMARK(
                                      begin
                                          trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30232)
                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                      end
                                  )
                              end
                             ) then
                                begin
                                  if @global_lisp_binding.has_key?('_equal_QUMARK') then
                                    trampCall(@_equal_QUMARK)
                                  else raise NameError.new( "Error: undefined variable _equal_QUMARK", "_equal_QUMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1089"] + __e.backtrace ) ; raise __e
                                end
                            else
                                begin
                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 1090 ); 
                                    delayCall( '_car',  'car',
                                        begin
                                          if @global_lisp_binding.has_key?('_car') then
                                            trampCall(@_car)
                                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1090"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                    [
                                          begin
                                              trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30232)
                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                          end
                                    ]
                                                 )
                                end
                            end
                        } ; ___lambda.call(
                              begin
                                  trampCall(_maybe_MIMARK_EQMARK)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1089"] + __e.backtrace ) ; raise __e
                              end
                                   )
                      end
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._find_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_find', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_find'] = self.method( :_find_METHOD )
    @_find = 
    trampCall(
          Proc.new { |_pred,_list| 
              if ( 
                begin
                    def self.___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30234_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30234', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
                    @global_lisp_binding['___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30234'] = self.method( :___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30234_METHOD )
                  @___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30234 = 
                  trampCall(
                        begin
                          embedBacktraceInfo( "./lib/srfi-1.nnd", 1097 ); 
                            trampCall( self._find_MIMARKtail_METHOD(  'find-tail',
                                begin
                                  if @global_lisp_binding.has_key?('_find_MIMARKtail') then
                                    trampCall(@_find_MIMARKtail)
                                  else raise NameError.new( "Error: undefined variable _find_MIMARKtail", "_find_MIMARKtail" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1097"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                  begin
                                      trampCall(_pred)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1097"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  begin
                                      trampCall(_list)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1097"] + __e.backtrace ) ; raise __e
                                  end
                            ]
                                         ))
                        end
                  )
                end
               ) then
                  begin
                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1097 ); 
                      delayCall( '_car',  'car',
                          begin
                            if @global_lisp_binding.has_key?('_car') then
                              trampCall(@_car)
                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1097"] + __e.backtrace ) ; raise __e
                          end                        ,
                      [
                            begin
                              if @global_lisp_binding.has_key?('___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30234') then
                                trampCall(@___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30234)
                              else raise NameError.new( "Error: undefined variable ___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30234", "___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30234" ) end
                              rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                            end
                      ]
                                   )
                  end
              else
                  if ( 
                  true
                   ) then
                      begin
                        false
                      end
                  else
                      Cell.new()
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._find_MIMARKtail_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_find_MIMARKtail', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_find_MIMARKtail'] = self.method( :_find_MIMARKtail_METHOD )
    @_find_MIMARKtail = 
    trampCall(
          Proc.new { |_pred,_list| 
              begin
              end
              begin
                ___lambda = lambda { |_lp| 
                    _lp                     = 
                      Proc.new { |_list| 
                          if ( 
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 1103 ); 
                                _not(
                                    begin
                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1063 ); 
                                        _eq_QUMARK(
                                          false                                          ,
                                            begin
                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 1103 ); 
                                                _not(
                                                    begin
                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1103 ); 
                                                        trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                                                            begin
                                                              if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                                                trampCall(@_null_MIMARKlist_QUMARK)
                                                              else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1103"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                        [
                                                              begin
                                                                  trampCall(_list)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1105"] + __e.backtrace ) ; raise __e
                                                              end
                                                        ]
                                                                     ))
                                                    end
                                                )
                                            end
                                        )
                                    end
                                )
                            end
                           ) then
                              if ( 
                                begin
                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 1104 ); 
                                    trampCall( callProcedure(  '_pred',  'pred',
                                        begin
                                            trampCall(_pred)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1104"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                    [
                                          begin
                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 1104 ); 
                                              _car(
                                                  begin
                                                      trampCall(_list)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1105"] + __e.backtrace ) ; raise __e
                                                  end
                                              )
                                          end
                                    ]
                                                 ))
                                end
                               ) then
                                  begin
                                      trampCall(_list)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1105"] + __e.backtrace ) ; raise __e
                                  end
                              else
                                  begin
                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1105 ); 
                                      delayCall( '_lp',  'lp',
                                          begin
                                              trampCall(_lp)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1105"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                      [
                                            begin
                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 1105 ); 
                                                _cdr(
                                                    begin
                                                        trampCall(_list)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1105"] + __e.backtrace ) ; raise __e
                                                    end
                                                )
                                            end
                                      ]
                                                   )
                                  end
                              end
                          else
                            false
                          end
                      }
                    begin
                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1105 ); 
                        delayCall( '_lp',  'lp',
                            begin
                                trampCall(_lp)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1105"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              begin
                                  trampCall(_list)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1105"] + __e.backtrace ) ; raise __e
                              end
                        ]
                                     )
                    end
                } ; ___lambda.call(
                nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._take_MIMARKwhile_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_take_MIMARKwhile', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_take_MIMARKwhile'] = self.method( :_take_MIMARKwhile_METHOD )
    @_take_MIMARKwhile = 
    trampCall(
          Proc.new { |_pred,_lis| 
              begin
              end
              begin
                ___lambda = lambda { |_recur| 
                    _recur                     = 
                      Proc.new { |_lis| 
                          if ( 
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 1110 ); 
                                trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                                    begin
                                      if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                        trampCall(@_null_MIMARKlist_QUMARK)
                                      else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1110"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                [
                                      begin
                                          trampCall(_lis)
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1113"] + __e.backtrace ) ; raise __e
                                      end
                                ]
                                             ))
                            end
                           ) then
                            Cell.new()
                          else
                              begin
                                ___lambda = lambda { |_x| 
                                    if ( 
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 1112 ); 
                                          trampCall( callProcedure(  '_pred',  'pred',
                                              begin
                                                  trampCall(_pred)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1112"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                          [
                                                begin
                                                    trampCall(_x)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1113"] + __e.backtrace ) ; raise __e
                                                end
                                          ]
                                                       ))
                                      end
                                     ) then
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 1113 ); 
                                            delayCall( '_cons',  'cons',
                                                begin
                                                  if @global_lisp_binding.has_key?('_cons') then
                                                    trampCall(@_cons)
                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1113"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                  begin
                                                      trampCall(_x)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1113"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1113 ); 
                                                      trampCall( callProcedure(  '_recur',  'recur',
                                                          begin
                                                              trampCall(_recur)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1113"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                      [
                                                            begin
                                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 1113 ); 
                                                                _cdr(
                                                                    begin
                                                                        trampCall(_lis)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1113"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                )
                                                            end
                                                      ]
                                                                   ))
                                                  end
                                            ]
                                                         )
                                        end
                                    else
                                      Cell.new()
                                    end
                                } ; ___lambda.call(
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 1111 ); 
                                          _car(
                                              begin
                                                  trampCall(_lis)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1113"] + __e.backtrace ) ; raise __e
                                              end
                                          )
                                      end
                                           )
                              end
                          end
                      }
                    begin
                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1113 ); 
                        delayCall( '_recur',  'recur',
                            begin
                                trampCall(_recur)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1113"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              begin
                                  trampCall(_lis)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1113"] + __e.backtrace ) ; raise __e
                              end
                        ]
                                     )
                    end
                } ; ___lambda.call(
                nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._drop_MIMARKwhile_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_drop_MIMARKwhile', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_drop_MIMARKwhile'] = self.method( :_drop_MIMARKwhile_METHOD )
    @_drop_MIMARKwhile = 
    trampCall(
          Proc.new { |_pred,_lis| 
              begin
              end
              begin
                ___lambda = lambda { |_lp| 
                    _lp                     = 
                      Proc.new { |_lis| 
                          if ( 
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 1119 ); 
                                trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                                    begin
                                      if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                        trampCall(@_null_MIMARKlist_QUMARK)
                                      else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1119"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                [
                                      begin
                                          trampCall(_lis)
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1122"] + __e.backtrace ) ; raise __e
                                      end
                                ]
                                             ))
                            end
                           ) then
                            Cell.new()
                          else
                              if ( 
                                begin
                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 1120 ); 
                                    trampCall( callProcedure(  '_pred',  'pred',
                                        begin
                                            trampCall(_pred)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1120"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                    [
                                          begin
                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 1120 ); 
                                              _car(
                                                  begin
                                                      trampCall(_lis)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1122"] + __e.backtrace ) ; raise __e
                                                  end
                                              )
                                          end
                                    ]
                                                 ))
                                end
                               ) then
                                  begin
                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1121 ); 
                                      delayCall( '_lp',  'lp',
                                          begin
                                              trampCall(_lp)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1121"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                      [
                                            begin
                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 1121 ); 
                                                _cdr(
                                                    begin
                                                        trampCall(_lis)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1122"] + __e.backtrace ) ; raise __e
                                                    end
                                                )
                                            end
                                      ]
                                                   )
                                  end
                              else
                                  begin
                                      trampCall(_lis)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1122"] + __e.backtrace ) ; raise __e
                                  end
                              end
                          end
                      }
                    begin
                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1121 ); 
                        delayCall( '_lp',  'lp',
                            begin
                                trampCall(_lp)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1121"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              begin
                                  trampCall(_lis)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1122"] + __e.backtrace ) ; raise __e
                              end
                        ]
                                     )
                    end
                } ; ___lambda.call(
                nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._take_MIMARKwhile_EXMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_take_MIMARKwhile_EXMARK', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_take_MIMARKwhile_EXMARK'] = self.method( :_take_MIMARKwhile_EXMARK_METHOD )
    @_take_MIMARKwhile_EXMARK = 
    trampCall(
          Proc.new { |_pred,_lis| 
              begin
              end
              if ( 
                begin
                  ___lambda = lambda { |___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30235| 
                      if ( 
                        begin
                            trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30235)
                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                        end
                       ) then
                          begin
                              trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30235)
                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                          end
                      else
                          begin
                            ___lambda = lambda { |___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30236| 
                                if ( 
                                  begin
                                      trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30236)
                                    rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                  end
                                 ) then
                                    begin
                                        trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30236)
                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                    end
                                else
                                  false
                                end
                            } ; ___lambda.call(
                                  begin
                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1126 ); 
                                      _not(
                                          begin
                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 1130 ); 
                                              trampCall( callProcedure(  '_pred',  'pred',
                                                  begin
                                                      trampCall(_pred)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1130"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                              [
                                                    begin
                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1129 ); 
                                                        _car(
                                                            begin
                                                                trampCall(_lis)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1132"] + __e.backtrace ) ; raise __e
                                                            end
                                                        )
                                                    end
                                              ]
                                                           ))
                                          end
                                      )
                                  end
                                       )
                          end
                      end
                  } ; ___lambda.call(
                        begin
                          embedBacktraceInfo( "./lib/srfi-1.nnd", 1126 ); 
                            trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                                begin
                                  if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                    trampCall(@_null_MIMARKlist_QUMARK)
                                  else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1126"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                  begin
                                      trampCall(_lis)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1132"] + __e.backtrace ) ; raise __e
                                  end
                            ]
                                         ))
                        end
                             )
                end
               ) then
                Cell.new()
              else
                  begin
                      begin
                        ___lambda = lambda { |_lp| 
                            _lp                             = 
                              Proc.new { |_prev,_rest| 
                                  if ( 
                                    begin
                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1128 ); 
                                        _pair_QUMARK(
                                            begin
                                                trampCall(_rest)
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1130"] + __e.backtrace ) ; raise __e
                                            end
                                        )
                                    end
                                   ) then
                                      begin
                                        ___lambda = lambda { |_x| 
                                            if ( 
                                              begin
                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 1130 ); 
                                                  trampCall( callProcedure(  '_pred',  'pred',
                                                      begin
                                                          trampCall(_pred)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1130"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                  [
                                                        begin
                                                            trampCall(_x)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1130"] + __e.backtrace ) ; raise __e
                                                        end
                                                  ]
                                                               ))
                                              end
                                             ) then
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 1130 ); 
                                                    trampCall( callProcedure(  '_lp',  'lp',
                                                        begin
                                                            trampCall(_lp)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1130"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                    [
                                                          begin
                                                              trampCall(_rest)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1130"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          begin
                                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 1130 ); 
                                                              _cdr(
                                                                  begin
                                                                      trampCall(_rest)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1130"] + __e.backtrace ) ; raise __e
                                                                  end
                                                              )
                                                          end
                                                    ]
                                                                 ))
                                                end
                                            else
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 1131 ); 
                                                    _set_MIMARKcdr_EXMARK(
                                                        begin
                                                            trampCall(_prev)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1131"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                      Cell.new()
                                                    )
                                                end
                                            end
                                        } ; ___lambda.call(
                                              begin
                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 1129 ); 
                                                  _car(
                                                      begin
                                                          trampCall(_rest)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1130"] + __e.backtrace ) ; raise __e
                                                      end
                                                  )
                                              end
                                                   )
                                      end
                                  end
                              }
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 1130 ); 
                                trampCall( callProcedure(  '_lp',  'lp',
                                    begin
                                        trampCall(_lp)
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1130"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                [
                                      begin
                                          trampCall(_lis)
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1132"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 1130 ); 
                                          _cdr(
                                              begin
                                                  trampCall(_lis)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1132"] + __e.backtrace ) ; raise __e
                                              end
                                          )
                                      end
                                ]
                                             ))
                            end
                        } ; ___lambda.call(
                        nil
                                   )
                      end
                      begin
                          trampCall(_lis)
                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1132"] + __e.backtrace ) ; raise __e
                      end
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._span_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_span', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_span'] = self.method( :_span_METHOD )
    @_span = 
    trampCall(
          Proc.new { |_pred,_lis| 
              begin
              end
              begin
                ___lambda = lambda { |_recur| 
                    _recur                     = 
                      Proc.new { |_lis| 
                          if ( 
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 1137 ); 
                                trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                                    begin
                                      if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                        trampCall(@_null_MIMARKlist_QUMARK)
                                      else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1137"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                [
                                      begin
                                          trampCall(_lis)
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1142"] + __e.backtrace ) ; raise __e
                                      end
                                ]
                                             ))
                            end
                           ) then
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 1142 ); 
                                  delayCall( '_values',  'values',
                                      begin
                                        if @global_lisp_binding.has_key?('_values') then
                                          trampCall(@_values)
                                        else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1142"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                      Cell.new()                                      ,
                                      Cell.new()
                                  ]
                                               )
                              end
                          else
                              begin
                                ___lambda = lambda { |_x| 
                                    if ( 
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 1139 ); 
                                          trampCall( callProcedure(  '_pred',  'pred',
                                              begin
                                                  trampCall(_pred)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1139"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                          [
                                                begin
                                                    trampCall(_x)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1141"] + __e.backtrace ) ; raise __e
                                                end
                                          ]
                                                       ))
                                      end
                                     ) then
                                        begin
                                          embedBacktraceInfo( "", 1 ); 
                                            delayCall( '_call_MIMARKwith_MIMARKvalues',  'call-with-values',
                                                begin
                                                  if @global_lisp_binding.has_key?('_call_MIMARKwith_MIMARKvalues') then
                                                    trampCall(@_call_MIMARKwith_MIMARKvalues)
                                                  else raise NameError.new( "Error: undefined variable _call_MIMARKwith_MIMARKvalues", "_call_MIMARKwith_MIMARKvalues" ) end
                                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                  Proc.new { || 
                                                      begin
                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 1140 ); 
                                                          trampCall( callProcedure(  '_recur',  'recur',
                                                              begin
                                                                  trampCall(_recur)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1140"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                          [
                                                                begin
                                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 1140 ); 
                                                                    _cdr(
                                                                        begin
                                                                            trampCall(_lis)
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1142"] + __e.backtrace ) ; raise __e
                                                                        end
                                                                    )
                                                                end
                                                          ]
                                                                       ))
                                                      end
                                                  }                                                ,
                                                  Proc.new { |_prefix,_suffix| 
                                                      begin
                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 1142 ); 
                                                          trampCall( self._values_METHOD(  'values',
                                                              begin
                                                                if @global_lisp_binding.has_key?('_values') then
                                                                  trampCall(@_values)
                                                                else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1142"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                          [
                                                                begin
                                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 1141 ); 
                                                                    _cons(
                                                                        begin
                                                                            trampCall(_x)
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1141"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                        begin
                                                                            trampCall(_prefix)
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1141"] + __e.backtrace ) ; raise __e
                                                                        end
                                                                    )
                                                                end                                                              ,
                                                                begin
                                                                    trampCall(_suffix)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1141"] + __e.backtrace ) ; raise __e
                                                                end
                                                          ]
                                                                       ))
                                                      end
                                                  }
                                            ]
                                                         )
                                        end
                                    else
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 1142 ); 
                                            delayCall( '_values',  'values',
                                                begin
                                                  if @global_lisp_binding.has_key?('_values') then
                                                    trampCall(@_values)
                                                  else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1142"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                Cell.new()                                                ,
                                                  begin
                                                      trampCall(_lis)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1142"] + __e.backtrace ) ; raise __e
                                                  end
                                            ]
                                                         )
                                        end
                                    end
                                } ; ___lambda.call(
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 1138 ); 
                                          _car(
                                              begin
                                                  trampCall(_lis)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1142"] + __e.backtrace ) ; raise __e
                                              end
                                          )
                                      end
                                           )
                              end
                          end
                      }
                    begin
                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1140 ); 
                        delayCall( '_recur',  'recur',
                            begin
                                trampCall(_recur)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1140"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              begin
                                  trampCall(_lis)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1142"] + __e.backtrace ) ; raise __e
                              end
                        ]
                                     )
                    end
                } ; ___lambda.call(
                nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._span_EXMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_span_EXMARK', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_span_EXMARK'] = self.method( :_span_EXMARK_METHOD )
    @_span_EXMARK = 
    trampCall(
          Proc.new { |_pred,_lis| 
              begin
              end
              if ( 
                begin
                  ___lambda = lambda { |___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30237| 
                      if ( 
                        begin
                            trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30237)
                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                        end
                       ) then
                          begin
                              trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30237)
                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                          end
                      else
                          begin
                            ___lambda = lambda { |___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30238| 
                                if ( 
                                  begin
                                      trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30238)
                                    rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                  end
                                 ) then
                                    begin
                                        trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30238)
                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                    end
                                else
                                  false
                                end
                            } ; ___lambda.call(
                                  begin
                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1146 ); 
                                      _not(
                                          begin
                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 1150 ); 
                                              trampCall( callProcedure(  '_pred',  'pred',
                                                  begin
                                                      trampCall(_pred)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1150"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                              [
                                                    begin
                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1149 ); 
                                                        _car(
                                                            begin
                                                                trampCall(_lis)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1153"] + __e.backtrace ) ; raise __e
                                                            end
                                                        )
                                                    end
                                              ]
                                                           ))
                                          end
                                      )
                                  end
                                       )
                          end
                      end
                  } ; ___lambda.call(
                        begin
                          embedBacktraceInfo( "./lib/srfi-1.nnd", 1148 ); 
                            trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                                begin
                                  if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                    trampCall(@_null_MIMARKlist_QUMARK)
                                  else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1148"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                  begin
                                      trampCall(_lis)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1153"] + __e.backtrace ) ; raise __e
                                  end
                            ]
                                         ))
                        end
                             )
                end
               ) then
                  begin
                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1153 ); 
                      delayCall( '_values',  'values',
                          begin
                            if @global_lisp_binding.has_key?('_values') then
                              trampCall(@_values)
                            else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1153"] + __e.backtrace ) ; raise __e
                          end                        ,
                      [
                          Cell.new()                          ,
                            begin
                                trampCall(_lis)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1153"] + __e.backtrace ) ; raise __e
                            end
                      ]
                                   )
                  end
              else
                  begin
                    ___lambda = lambda { |_suffix| 
                        begin
                          embedBacktraceInfo( "./lib/srfi-1.nnd", 1153 ); 
                            delayCall( '_values',  'values',
                                begin
                                  if @global_lisp_binding.has_key?('_values') then
                                    trampCall(@_values)
                                  else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1153"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                  begin
                                      trampCall(_lis)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1153"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  begin
                                      trampCall(_suffix)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1153"] + __e.backtrace ) ; raise __e
                                  end
                            ]
                                         )
                        end
                    } ; ___lambda.call(
                          begin
                            ___lambda = lambda { |_lp| 
                                _lp                                 = 
                                  Proc.new { |_prev,_rest| 
                                      if ( 
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 1148 ); 
                                            trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                                                begin
                                                  if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                                    trampCall(@_null_MIMARKlist_QUMARK)
                                                  else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1148"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                  begin
                                                      trampCall(_rest)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1152"] + __e.backtrace ) ; raise __e
                                                  end
                                            ]
                                                         ))
                                        end
                                       ) then
                                          begin
                                              trampCall(_rest)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1152"] + __e.backtrace ) ; raise __e
                                          end
                                      else
                                          begin
                                            ___lambda = lambda { |_x| 
                                                if ( 
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1150 ); 
                                                      trampCall( callProcedure(  '_pred',  'pred',
                                                          begin
                                                              trampCall(_pred)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1150"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                      [
                                                            begin
                                                                trampCall(_x)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1150"] + __e.backtrace ) ; raise __e
                                                            end
                                                      ]
                                                                   ))
                                                  end
                                                 ) then
                                                    begin
                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1150 ); 
                                                        delayCall( '_lp',  'lp',
                                                            begin
                                                                trampCall(_lp)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1150"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                        [
                                                              begin
                                                                  trampCall(_rest)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1152"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              begin
                                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 1150 ); 
                                                                  _cdr(
                                                                      begin
                                                                          trampCall(_rest)
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1152"] + __e.backtrace ) ; raise __e
                                                                      end
                                                                  )
                                                              end
                                                        ]
                                                                     )
                                                    end
                                                else
                                                    begin
                                                        begin
                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 1151 ); 
                                                            _set_MIMARKcdr_EXMARK(
                                                                begin
                                                                    trampCall(_prev)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1151"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                              Cell.new()
                                                            )
                                                        end
                                                        begin
                                                            trampCall(_rest)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1152"] + __e.backtrace ) ; raise __e
                                                        end
                                                    end
                                                end
                                            } ; ___lambda.call(
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1149 ); 
                                                      _car(
                                                          begin
                                                              trampCall(_rest)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1152"] + __e.backtrace ) ; raise __e
                                                          end
                                                      )
                                                  end
                                                       )
                                          end
                                      end
                                  }
                                begin
                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 1150 ); 
                                    delayCall( '_lp',  'lp',
                                        begin
                                            trampCall(_lp)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1150"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                    [
                                          begin
                                              trampCall(_lis)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1153"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          begin
                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 1150 ); 
                                              _cdr(
                                                  begin
                                                      trampCall(_lis)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1153"] + __e.backtrace ) ; raise __e
                                                  end
                                              )
                                          end
                                    ]
                                                 )
                                end
                            } ; ___lambda.call(
                            nil
                                       )
                          end
                               )
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._break_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_break', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_break'] = self.method( :_break_METHOD )
    @_break = 
    trampCall(
          Proc.new { |_pred,_lis| 
              begin
                embedBacktraceInfo( "./lib/srfi-1.nnd", 1156 ); 
                  delayCall( '_span',  'span',
                      begin
                        if @global_lisp_binding.has_key?('_span') then
                          trampCall(@_span)
                        else raise NameError.new( "Error: undefined variable _span", "_span" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1156"] + __e.backtrace ) ; raise __e
                      end                    ,
                  [
                        Proc.new { |_x| 
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 1156 ); 
                                _not(
                                    begin
                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1156 ); 
                                        trampCall( callProcedure(  '_pred',  'pred',
                                            begin
                                                trampCall(_pred)
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1156"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                        [
                                              begin
                                                  trampCall(_x)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1156"] + __e.backtrace ) ; raise __e
                                              end
                                        ]
                                                     ))
                                    end
                                )
                            end
                        }                      ,
                        begin
                            trampCall(_lis)
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1156"] + __e.backtrace ) ; raise __e
                        end
                  ]
                               )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._break_EXMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_break_EXMARK', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_break_EXMARK'] = self.method( :_break_EXMARK_METHOD )
    @_break_EXMARK = 
    trampCall(
          Proc.new { |_pred,_lis| 
              begin
                embedBacktraceInfo( "./lib/srfi-1.nnd", 1157 ); 
                  delayCall( '_span_EXMARK',  'span!',
                      begin
                        if @global_lisp_binding.has_key?('_span_EXMARK') then
                          trampCall(@_span_EXMARK)
                        else raise NameError.new( "Error: undefined variable _span_EXMARK", "_span_EXMARK" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1157"] + __e.backtrace ) ; raise __e
                      end                    ,
                  [
                        Proc.new { |_x| 
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 1157 ); 
                                _not(
                                    begin
                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1157 ); 
                                        trampCall( callProcedure(  '_pred',  'pred',
                                            begin
                                                trampCall(_pred)
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1157"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                        [
                                              begin
                                                  trampCall(_x)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1157"] + __e.backtrace ) ; raise __e
                                              end
                                        ]
                                                     ))
                                    end
                                )
                            end
                        }                      ,
                        begin
                            trampCall(_lis)
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1157"] + __e.backtrace ) ; raise __e
                        end
                  ]
                               )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._any_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_any', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_any'] = self.method( :_any_METHOD )
    @_any = 
    trampCall(
          Proc.new { |_pred,_lis1,*__rest__| _lists = __rest__[0] ;  
              begin
              end
              if ( 
                begin
                  embedBacktraceInfo( "./lib/srfi-1.nnd", 1168 ); 
                    _pair_QUMARK(
                        begin
                            trampCall(_lists)
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1164"] + __e.backtrace ) ; raise __e
                        end
                    )
                end
               ) then
                  begin
                    embedBacktraceInfo( "", 1 ); 
                      delayCall( '_call_MIMARKwith_MIMARKvalues',  'call-with-values',
                          begin
                            if @global_lisp_binding.has_key?('_call_MIMARKwith_MIMARKvalues') then
                              trampCall(@_call_MIMARKwith_MIMARKvalues)
                            else raise NameError.new( "Error: undefined variable _call_MIMARKwith_MIMARKvalues", "_call_MIMARKwith_MIMARKvalues" ) end
                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                          end                        ,
                      [
                            Proc.new { || 
                                begin
                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 1167 ); 
                                    trampCall( self.__PAMARKcars_PLMARKcdrs_METHOD(  '%cars+cdrs',
                                        begin
                                          if @global_lisp_binding.has_key?('__PAMARKcars_PLMARKcdrs') then
                                            trampCall(@__PAMARKcars_PLMARKcdrs)
                                          else raise NameError.new( "Error: undefined variable __PAMARKcars_PLMARKcdrs", "__PAMARKcars_PLMARKcdrs" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1167"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                    [
                                          begin
                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 1164 ); 
                                              _cons(
                                                  begin
                                                      trampCall(_lis1)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1174"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  begin
                                                      trampCall(_lists)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1164"] + __e.backtrace ) ; raise __e
                                                  end
                                              )
                                          end
                                    ]
                                                 ))
                                end
                            }                          ,
                            Proc.new { |_heads,_tails| 
                                if ( 
                                  begin
                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1173 ); 
                                      _not(
                                          begin
                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 1063 ); 
                                              _eq_QUMARK(
                                                false                                                ,
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1168 ); 
                                                      _pair_QUMARK(
                                                          begin
                                                              trampCall(_heads)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1170"] + __e.backtrace ) ; raise __e
                                                          end
                                                      )
                                                  end
                                              )
                                          end
                                      )
                                  end
                                 ) then
                                    begin
                                      ___lambda = lambda { |_lp| 
                                          _lp                                           = 
                                            Proc.new { |_heads,_tails| 
                                                begin
                                                  embedBacktraceInfo( "", 1 ); 
                                                    trampCall( self._call_MIMARKwith_MIMARKvalues_METHOD(  'call-with-values',
                                                        begin
                                                          if @global_lisp_binding.has_key?('_call_MIMARKwith_MIMARKvalues') then
                                                            trampCall(@_call_MIMARKwith_MIMARKvalues)
                                                          else raise NameError.new( "Error: undefined variable _call_MIMARKwith_MIMARKvalues", "_call_MIMARKwith_MIMARKvalues" ) end
                                                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                    [
                                                          Proc.new { || 
                                                              begin
                                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 1167 ); 
                                                                  trampCall( self.__PAMARKcars_PLMARKcdrs_METHOD(  '%cars+cdrs',
                                                                      begin
                                                                        if @global_lisp_binding.has_key?('__PAMARKcars_PLMARKcdrs') then
                                                                          trampCall(@__PAMARKcars_PLMARKcdrs)
                                                                        else raise NameError.new( "Error: undefined variable __PAMARKcars_PLMARKcdrs", "__PAMARKcars_PLMARKcdrs" ) end
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1167"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                  [
                                                                        begin
                                                                            trampCall(_tails)
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1167"] + __e.backtrace ) ; raise __e
                                                                        end
                                                                  ]
                                                                               ))
                                                              end
                                                          }                                                        ,
                                                          Proc.new { |_next_MIMARKheads,_next_MIMARKtails| 
                                                              if ( 
                                                                begin
                                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 1168 ); 
                                                                    _pair_QUMARK(
                                                                        begin
                                                                            trampCall(_next_MIMARKheads)
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1169"] + __e.backtrace ) ; raise __e
                                                                        end
                                                                    )
                                                                end
                                                               ) then
                                                                  begin
                                                                    ___lambda = lambda { |___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30241| 
                                                                        if ( 
                                                                          begin
                                                                              trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30241)
                                                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                          end
                                                                         ) then
                                                                            begin
                                                                                trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30241)
                                                                              rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                            end
                                                                        else
                                                                            begin
                                                                              ___lambda = lambda { |___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30242| 
                                                                                  if ( 
                                                                                    begin
                                                                                        trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30242)
                                                                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                    end
                                                                                   ) then
                                                                                      begin
                                                                                          trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30242)
                                                                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                      end
                                                                                  else
                                                                                    false
                                                                                  end
                                                                              } ; ___lambda.call(
                                                                                    begin
                                                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1177 ); 
                                                                                        trampCall( callProcedure(  '_lp',  'lp',
                                                                                            begin
                                                                                                trampCall(_lp)
                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1177"] + __e.backtrace ) ; raise __e
                                                                                            end                                                                                          ,
                                                                                        [
                                                                                              begin
                                                                                                  trampCall(_next_MIMARKheads)
                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1169"] + __e.backtrace ) ; raise __e
                                                                                              end                                                                                            ,
                                                                                              begin
                                                                                                  trampCall(_next_MIMARKtails)
                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1169"] + __e.backtrace ) ; raise __e
                                                                                              end
                                                                                        ]
                                                                                                     ))
                                                                                    end
                                                                                         )
                                                                            end
                                                                        end
                                                                    } ; ___lambda.call(
                                                                          begin
                                                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 1170 ); 
                                                                              trampCall( self._apply_METHOD(  'apply',
                                                                                  begin
                                                                                    if @global_lisp_binding.has_key?('_apply') then
                                                                                      trampCall(@_apply)
                                                                                    else raise NameError.new( "Error: undefined variable _apply", "_apply" ) end
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1170"] + __e.backtrace ) ; raise __e
                                                                                  end                                                                                ,
                                                                              [
                                                                                    begin
                                                                                        trampCall(_pred)
                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1177"] + __e.backtrace ) ; raise __e
                                                                                    end                                                                                  ,
                                                                                    begin
                                                                                        trampCall(_heads)
                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1170"] + __e.backtrace ) ; raise __e
                                                                                    end
                                                                              ]
                                                                                           ))
                                                                          end
                                                                               )
                                                                  end
                                                              else
                                                                  begin
                                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1170 ); 
                                                                      trampCall( self._apply_METHOD(  'apply',
                                                                          begin
                                                                            if @global_lisp_binding.has_key?('_apply') then
                                                                              trampCall(@_apply)
                                                                            else raise NameError.new( "Error: undefined variable _apply", "_apply" ) end
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1170"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                      [
                                                                            begin
                                                                                trampCall(_pred)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1177"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                            begin
                                                                                trampCall(_heads)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1170"] + __e.backtrace ) ; raise __e
                                                                            end
                                                                      ]
                                                                                   ))
                                                                  end
                                                              end
                                                          }
                                                    ]
                                                                 ))
                                                end
                                            }
                                          begin
                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 1177 ); 
                                              trampCall( callProcedure(  '_lp',  'lp',
                                                  begin
                                                      trampCall(_lp)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1177"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                              [
                                                    begin
                                                        trampCall(_heads)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1170"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    begin
                                                        trampCall(_tails)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1167"] + __e.backtrace ) ; raise __e
                                                    end
                                              ]
                                                           ))
                                          end
                                      } ; ___lambda.call(
                                      nil
                                                 )
                                    end
                                else
                                  false
                                end
                            }
                      ]
                                   )
                  end
              else
                  if ( 
                    begin
                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1173 ); 
                        _not(
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 1063 ); 
                                _eq_QUMARK(
                                  false                                  ,
                                    begin
                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1173 ); 
                                        _not(
                                            begin
                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 1175 ); 
                                                trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                                                    begin
                                                      if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                                        trampCall(@_null_MIMARKlist_QUMARK)
                                                      else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1175"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                [
                                                      begin
                                                          trampCall(_lis1)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1174"] + __e.backtrace ) ; raise __e
                                                      end
                                                ]
                                                             ))
                                            end
                                        )
                                    end
                                )
                            end
                        )
                    end
                   ) then
                      begin
                        ___lambda = lambda { |_lp| 
                            _lp                             = 
                              Proc.new { |_head,_tail| 
                                  if ( 
                                    begin
                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1175 ); 
                                        trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                                            begin
                                              if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                                trampCall(@_null_MIMARKlist_QUMARK)
                                              else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1175"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                        [
                                              begin
                                                  trampCall(_tail)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1177"] + __e.backtrace ) ; raise __e
                                              end
                                        ]
                                                     ))
                                    end
                                   ) then
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 1177 ); 
                                          delayCall( '_pred',  'pred',
                                              begin
                                                  trampCall(_pred)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1177"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                          [
                                                begin
                                                    trampCall(_head)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1177"] + __e.backtrace ) ; raise __e
                                                end
                                          ]
                                                       )
                                      end
                                  else
                                      begin
                                        ___lambda = lambda { |___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30239| 
                                            if ( 
                                              begin
                                                  trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30239)
                                                rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                              end
                                             ) then
                                                begin
                                                    trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30239)
                                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                end
                                            else
                                                begin
                                                  ___lambda = lambda { |___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30240| 
                                                      if ( 
                                                        begin
                                                            trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30240)
                                                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                        end
                                                       ) then
                                                          begin
                                                              trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30240)
                                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                          end
                                                      else
                                                        false
                                                      end
                                                  } ; ___lambda.call(
                                                        begin
                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 1177 ); 
                                                            trampCall( callProcedure(  '_lp',  'lp',
                                                                begin
                                                                    trampCall(_lp)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1177"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                            [
                                                                  begin
                                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1177 ); 
                                                                      _car(
                                                                          begin
                                                                              trampCall(_tail)
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1177"] + __e.backtrace ) ; raise __e
                                                                          end
                                                                      )
                                                                  end                                                                ,
                                                                  begin
                                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1177 ); 
                                                                      _cdr(
                                                                          begin
                                                                              trampCall(_tail)
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1177"] + __e.backtrace ) ; raise __e
                                                                          end
                                                                      )
                                                                  end
                                                            ]
                                                                         ))
                                                        end
                                                             )
                                                end
                                            end
                                        } ; ___lambda.call(
                                              begin
                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 1177 ); 
                                                  trampCall( callProcedure(  '_pred',  'pred',
                                                      begin
                                                          trampCall(_pred)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1177"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                  [
                                                        begin
                                                            trampCall(_head)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1177"] + __e.backtrace ) ; raise __e
                                                        end
                                                  ]
                                                               ))
                                              end
                                                   )
                                      end
                                  end
                              }
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 1177 ); 
                                delayCall( '_lp',  'lp',
                                    begin
                                        trampCall(_lp)
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1177"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                [
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 1177 ); 
                                          _car(
                                              begin
                                                  trampCall(_lis1)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1174"] + __e.backtrace ) ; raise __e
                                              end
                                          )
                                      end                                    ,
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 1177 ); 
                                          _cdr(
                                              begin
                                                  trampCall(_lis1)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1174"] + __e.backtrace ) ; raise __e
                                              end
                                          )
                                      end
                                ]
                                             )
                            end
                        } ; ___lambda.call(
                        nil
                                   )
                      end
                  else
                    false
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._every_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_every', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_every'] = self.method( :_every_METHOD )
    @_every = 
    trampCall(
          Proc.new { |_pred,_lis1,*__rest__| _lists = __rest__[0] ;  
              begin
              end
              if ( 
                begin
                  embedBacktraceInfo( "./lib/srfi-1.nnd", 1195 ); 
                    _pair_QUMARK(
                        begin
                            trampCall(_lists)
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1191"] + __e.backtrace ) ; raise __e
                        end
                    )
                end
               ) then
                  begin
                    embedBacktraceInfo( "", 1 ); 
                      delayCall( '_call_MIMARKwith_MIMARKvalues',  'call-with-values',
                          begin
                            if @global_lisp_binding.has_key?('_call_MIMARKwith_MIMARKvalues') then
                              trampCall(@_call_MIMARKwith_MIMARKvalues)
                            else raise NameError.new( "Error: undefined variable _call_MIMARKwith_MIMARKvalues", "_call_MIMARKwith_MIMARKvalues" ) end
                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                          end                        ,
                      [
                            Proc.new { || 
                                begin
                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 1194 ); 
                                    trampCall( self.__PAMARKcars_PLMARKcdrs_METHOD(  '%cars+cdrs',
                                        begin
                                          if @global_lisp_binding.has_key?('__PAMARKcars_PLMARKcdrs') then
                                            trampCall(@__PAMARKcars_PLMARKcdrs)
                                          else raise NameError.new( "Error: undefined variable __PAMARKcars_PLMARKcdrs", "__PAMARKcars_PLMARKcdrs" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1194"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                    [
                                          begin
                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 1191 ); 
                                              _cons(
                                                  begin
                                                      trampCall(_lis1)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1201"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  begin
                                                      trampCall(_lists)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1191"] + __e.backtrace ) ; raise __e
                                                  end
                                              )
                                          end
                                    ]
                                                 ))
                                end
                            }                          ,
                            Proc.new { |_heads,_tails| 
                                begin
                                  ___lambda = lambda { |___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30245| 
                                      if ( 
                                        begin
                                            trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30245)
                                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                        end
                                       ) then
                                          begin
                                              trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30245)
                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                          end
                                      else
                                          begin
                                            ___lambda = lambda { |___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30246| 
                                                if ( 
                                                  begin
                                                      trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30246)
                                                    rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                  end
                                                 ) then
                                                    begin
                                                        trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30246)
                                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                    end
                                                else
                                                  false
                                                end
                                            } ; ___lambda.call(
                                                  begin
                                                    ___lambda = lambda { |_lp| 
                                                        _lp                                                         = 
                                                          Proc.new { |_heads,_tails| 
                                                              begin
                                                                embedBacktraceInfo( "", 1 ); 
                                                                  trampCall( self._call_MIMARKwith_MIMARKvalues_METHOD(  'call-with-values',
                                                                      begin
                                                                        if @global_lisp_binding.has_key?('_call_MIMARKwith_MIMARKvalues') then
                                                                          trampCall(@_call_MIMARKwith_MIMARKvalues)
                                                                        else raise NameError.new( "Error: undefined variable _call_MIMARKwith_MIMARKvalues", "_call_MIMARKwith_MIMARKvalues" ) end
                                                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                  [
                                                                        Proc.new { || 
                                                                            begin
                                                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 1194 ); 
                                                                                trampCall( self.__PAMARKcars_PLMARKcdrs_METHOD(  '%cars+cdrs',
                                                                                    begin
                                                                                      if @global_lisp_binding.has_key?('__PAMARKcars_PLMARKcdrs') then
                                                                                        trampCall(@__PAMARKcars_PLMARKcdrs)
                                                                                      else raise NameError.new( "Error: undefined variable __PAMARKcars_PLMARKcdrs", "__PAMARKcars_PLMARKcdrs" ) end
                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1194"] + __e.backtrace ) ; raise __e
                                                                                    end                                                                                  ,
                                                                                [
                                                                                      begin
                                                                                          trampCall(_tails)
                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1194"] + __e.backtrace ) ; raise __e
                                                                                      end
                                                                                ]
                                                                                             ))
                                                                            end
                                                                        }                                                                      ,
                                                                        Proc.new { |_next_MIMARKheads,_next_MIMARKtails| 
                                                                            if ( 
                                                                              begin
                                                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 1195 ); 
                                                                                  _pair_QUMARK(
                                                                                      begin
                                                                                          trampCall(_next_MIMARKheads)
                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1196"] + __e.backtrace ) ; raise __e
                                                                                      end
                                                                                  )
                                                                              end
                                                                             ) then
                                                                                if ( 
                                                                                  begin
                                                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1192 ); 
                                                                                      _not(
                                                                                          begin
                                                                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 1063 ); 
                                                                                              _eq_QUMARK(
                                                                                                false                                                                                                ,
                                                                                                  begin
                                                                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1197 ); 
                                                                                                      trampCall( self._apply_METHOD(  'apply',
                                                                                                          begin
                                                                                                            if @global_lisp_binding.has_key?('_apply') then
                                                                                                              trampCall(@_apply)
                                                                                                            else raise NameError.new( "Error: undefined variable _apply", "_apply" ) end
                                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1197"] + __e.backtrace ) ; raise __e
                                                                                                          end                                                                                                        ,
                                                                                                      [
                                                                                                            begin
                                                                                                                trampCall(_pred)
                                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1204"] + __e.backtrace ) ; raise __e
                                                                                                            end                                                                                                          ,
                                                                                                            begin
                                                                                                                trampCall(_heads)
                                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1197"] + __e.backtrace ) ; raise __e
                                                                                                            end
                                                                                                      ]
                                                                                                                   ))
                                                                                                  end
                                                                                              )
                                                                                          end
                                                                                      )
                                                                                  end
                                                                                 ) then
                                                                                    begin
                                                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1204 ); 
                                                                                        trampCall( callProcedure(  '_lp',  'lp',
                                                                                            begin
                                                                                                trampCall(_lp)
                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1204"] + __e.backtrace ) ; raise __e
                                                                                            end                                                                                          ,
                                                                                        [
                                                                                              begin
                                                                                                  trampCall(_next_MIMARKheads)
                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1196"] + __e.backtrace ) ; raise __e
                                                                                              end                                                                                            ,
                                                                                              begin
                                                                                                  trampCall(_next_MIMARKtails)
                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1196"] + __e.backtrace ) ; raise __e
                                                                                              end
                                                                                        ]
                                                                                                     ))
                                                                                    end
                                                                                else
                                                                                  false
                                                                                end
                                                                            else
                                                                                begin
                                                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 1197 ); 
                                                                                    trampCall( self._apply_METHOD(  'apply',
                                                                                        begin
                                                                                          if @global_lisp_binding.has_key?('_apply') then
                                                                                            trampCall(@_apply)
                                                                                          else raise NameError.new( "Error: undefined variable _apply", "_apply" ) end
                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1197"] + __e.backtrace ) ; raise __e
                                                                                        end                                                                                      ,
                                                                                    [
                                                                                          begin
                                                                                              trampCall(_pred)
                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1204"] + __e.backtrace ) ; raise __e
                                                                                          end                                                                                        ,
                                                                                          begin
                                                                                              trampCall(_heads)
                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1197"] + __e.backtrace ) ; raise __e
                                                                                          end
                                                                                    ]
                                                                                                 ))
                                                                                end
                                                                            end
                                                                        }
                                                                  ]
                                                                               ))
                                                              end
                                                          }
                                                        begin
                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 1204 ); 
                                                            trampCall( callProcedure(  '_lp',  'lp',
                                                                begin
                                                                    trampCall(_lp)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1204"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                            [
                                                                  begin
                                                                      trampCall(_heads)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1197"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  begin
                                                                      trampCall(_tails)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1194"] + __e.backtrace ) ; raise __e
                                                                  end
                                                            ]
                                                                         ))
                                                        end
                                                    } ; ___lambda.call(
                                                    nil
                                                               )
                                                  end
                                                       )
                                          end
                                      end
                                  } ; ___lambda.call(
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 1192 ); 
                                            _not(
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 1195 ); 
                                                    _pair_QUMARK(
                                                        begin
                                                            trampCall(_heads)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1197"] + __e.backtrace ) ; raise __e
                                                        end
                                                    )
                                                end
                                            )
                                        end
                                             )
                                end
                            }
                      ]
                                   )
                  end
              else
                  begin
                    ___lambda = lambda { |___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30243| 
                        if ( 
                          begin
                              trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30243)
                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                          end
                         ) then
                            begin
                                trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30243)
                              rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                            end
                        else
                            begin
                              ___lambda = lambda { |___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30244| 
                                  if ( 
                                    begin
                                        trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30244)
                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                    end
                                   ) then
                                      begin
                                          trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30244)
                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                      end
                                  else
                                    false
                                  end
                              } ; ___lambda.call(
                                    begin
                                      ___lambda = lambda { |_lp| 
                                          _lp                                           = 
                                            Proc.new { |_head,_tail| 
                                                if ( 
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1202 ); 
                                                      trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                                              trampCall(@_null_MIMARKlist_QUMARK)
                                                            else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1202"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                      [
                                                            begin
                                                                trampCall(_tail)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1204"] + __e.backtrace ) ; raise __e
                                                            end
                                                      ]
                                                                   ))
                                                  end
                                                 ) then
                                                    begin
                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1204 ); 
                                                        delayCall( '_pred',  'pred',
                                                            begin
                                                                trampCall(_pred)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1204"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                        [
                                                              begin
                                                                  trampCall(_head)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1204"] + __e.backtrace ) ; raise __e
                                                              end
                                                        ]
                                                                     )
                                                    end
                                                else
                                                    if ( 
                                                      begin
                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 1192 ); 
                                                          _not(
                                                              begin
                                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 1063 ); 
                                                                  _eq_QUMARK(
                                                                    false                                                                    ,
                                                                      begin
                                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 1204 ); 
                                                                          trampCall( callProcedure(  '_pred',  'pred',
                                                                              begin
                                                                                  trampCall(_pred)
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1204"] + __e.backtrace ) ; raise __e
                                                                              end                                                                            ,
                                                                          [
                                                                                begin
                                                                                    trampCall(_head)
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1204"] + __e.backtrace ) ; raise __e
                                                                                end
                                                                          ]
                                                                                       ))
                                                                      end
                                                                  )
                                                              end
                                                          )
                                                      end
                                                     ) then
                                                        begin
                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 1204 ); 
                                                            delayCall( '_lp',  'lp',
                                                                begin
                                                                    trampCall(_lp)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1204"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                            [
                                                                  begin
                                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1204 ); 
                                                                      _car(
                                                                          begin
                                                                              trampCall(_tail)
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1204"] + __e.backtrace ) ; raise __e
                                                                          end
                                                                      )
                                                                  end                                                                ,
                                                                  begin
                                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1204 ); 
                                                                      _cdr(
                                                                          begin
                                                                              trampCall(_tail)
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1204"] + __e.backtrace ) ; raise __e
                                                                          end
                                                                      )
                                                                  end
                                                            ]
                                                                         )
                                                        end
                                                    else
                                                      false
                                                    end
                                                end
                                            }
                                          begin
                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 1204 ); 
                                              delayCall( '_lp',  'lp',
                                                  begin
                                                      trampCall(_lp)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1204"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                              [
                                                    begin
                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1204 ); 
                                                        _car(
                                                            begin
                                                                trampCall(_lis1)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1201"] + __e.backtrace ) ; raise __e
                                                            end
                                                        )
                                                    end                                                  ,
                                                    begin
                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1204 ); 
                                                        _cdr(
                                                            begin
                                                                trampCall(_lis1)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1201"] + __e.backtrace ) ; raise __e
                                                            end
                                                        )
                                                    end
                                              ]
                                                           )
                                          end
                                      } ; ___lambda.call(
                                      nil
                                                 )
                                    end
                                         )
                            end
                        end
                    } ; ___lambda.call(
                          begin
                            embedBacktraceInfo( "./lib/srfi-1.nnd", 1202 ); 
                              trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                                  begin
                                    if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                      trampCall(@_null_MIMARKlist_QUMARK)
                                    else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1202"] + __e.backtrace ) ; raise __e
                                  end                                ,
                              [
                                    begin
                                        trampCall(_lis1)
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1201"] + __e.backtrace ) ; raise __e
                                    end
                              ]
                                           ))
                          end
                               )
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._list_MIMARKindex_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_list_MIMARKindex', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_list_MIMARKindex'] = self.method( :_list_MIMARKindex_METHOD )
    @_list_MIMARKindex = 
    trampCall(
          Proc.new { |_pred,_lis1,*__rest__| _lists = __rest__[0] ;  
              begin
              end
              if ( 
                begin
                  embedBacktraceInfo( "./lib/srfi-1.nnd", 1213 ); 
                    _pair_QUMARK(
                        begin
                            trampCall(_lists)
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1212"] + __e.backtrace ) ; raise __e
                        end
                    )
                end
               ) then
                  begin
                    ___lambda = lambda { |_lp| 
                        _lp                         = 
                          Proc.new { |_lists,_n| 
                              begin
                                embedBacktraceInfo( "", 1 ); 
                                  delayCall( '_call_MIMARKwith_MIMARKvalues',  'call-with-values',
                                      begin
                                        if @global_lisp_binding.has_key?('_call_MIMARKwith_MIMARKvalues') then
                                          trampCall(@_call_MIMARKwith_MIMARKvalues)
                                        else raise NameError.new( "Error: undefined variable _call_MIMARKwith_MIMARKvalues", "_call_MIMARKwith_MIMARKvalues" ) end
                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        Proc.new { || 
                                            begin
                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 1212 ); 
                                                trampCall( self.__PAMARKcars_PLMARKcdrs_METHOD(  '%cars+cdrs',
                                                    begin
                                                      if @global_lisp_binding.has_key?('__PAMARKcars_PLMARKcdrs') then
                                                        trampCall(@__PAMARKcars_PLMARKcdrs)
                                                      else raise NameError.new( "Error: undefined variable __PAMARKcars_PLMARKcdrs", "__PAMARKcars_PLMARKcdrs" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1212"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                [
                                                      begin
                                                          trampCall(_lists)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1212"] + __e.backtrace ) ; raise __e
                                                      end
                                                ]
                                                             ))
                                            end
                                        }                                      ,
                                        Proc.new { |_heads,_tails| 
                                            if ( 
                                              begin
                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 1219 ); 
                                                  _not(
                                                      begin
                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 1063 ); 
                                                          _eq_QUMARK(
                                                            false                                                            ,
                                                              begin
                                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 1213 ); 
                                                                  _pair_QUMARK(
                                                                      begin
                                                                          trampCall(_heads)
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1214"] + __e.backtrace ) ; raise __e
                                                                      end
                                                                  )
                                                              end
                                                          )
                                                      end
                                                  )
                                              end
                                             ) then
                                                if ( 
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1214 ); 
                                                      trampCall( self._apply_METHOD(  'apply',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_apply') then
                                                              trampCall(@_apply)
                                                            else raise NameError.new( "Error: undefined variable _apply", "_apply" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1214"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                      [
                                                            begin
                                                                trampCall(_pred)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1220"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            begin
                                                                trampCall(_heads)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1214"] + __e.backtrace ) ; raise __e
                                                            end
                                                      ]
                                                                   ))
                                                  end
                                                 ) then
                                                    begin
                                                        trampCall(_n)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1220"] + __e.backtrace ) ; raise __e
                                                    end
                                                else
                                                    begin
                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1220 ); 
                                                        trampCall( callProcedure(  '_lp',  'lp',
                                                            begin
                                                                trampCall(_lp)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1220"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                        [
                                                              begin
                                                                  trampCall(_tails)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1215"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              begin
                                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 1220 ); 
                                                                  __PLMARK_ARGS2(
                                                                      begin
                                                                          trampCall(_n)
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1220"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                    1
                                                                  )
                                                              end
                                                        ]
                                                                     ))
                                                    end
                                                end
                                            else
                                              false
                                            end
                                        }
                                  ]
                                               )
                              end
                          }
                        begin
                          embedBacktraceInfo( "./lib/srfi-1.nnd", 1220 ); 
                            delayCall( '_lp',  'lp',
                                begin
                                    trampCall(_lp)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1220"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                  begin
                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1211 ); 
                                      _cons(
                                          begin
                                              trampCall(_lis1)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1218"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          begin
                                              trampCall(_lists)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1212"] + __e.backtrace ) ; raise __e
                                          end
                                      )
                                  end                                ,
                                0
                            ]
                                         )
                        end
                    } ; ___lambda.call(
                    nil
                               )
                  end
              else
                  begin
                    ___lambda = lambda { |_lp| 
                        _lp                         = 
                          Proc.new { |_lis,_n| 
                              if ( 
                                begin
                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 1219 ); 
                                    _not(
                                        begin
                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 1063 ); 
                                            _eq_QUMARK(
                                              false                                              ,
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 1219 ); 
                                                    _not(
                                                        begin
                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 1219 ); 
                                                            trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                                                    trampCall(@_null_MIMARKlist_QUMARK)
                                                                  else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1219"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                            [
                                                                  begin
                                                                      trampCall(_lis)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1220"] + __e.backtrace ) ; raise __e
                                                                  end
                                                            ]
                                                                         ))
                                                        end
                                                    )
                                                end
                                            )
                                        end
                                    )
                                end
                               ) then
                                  if ( 
                                    begin
                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1220 ); 
                                        trampCall( callProcedure(  '_pred',  'pred',
                                            begin
                                                trampCall(_pred)
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1220"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                        [
                                              begin
                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 1220 ); 
                                                  _car(
                                                      begin
                                                          trampCall(_lis)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1220"] + __e.backtrace ) ; raise __e
                                                      end
                                                  )
                                              end
                                        ]
                                                     ))
                                    end
                                   ) then
                                      begin
                                          trampCall(_n)
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1220"] + __e.backtrace ) ; raise __e
                                      end
                                  else
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 1220 ); 
                                          delayCall( '_lp',  'lp',
                                              begin
                                                  trampCall(_lp)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1220"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                          [
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 1220 ); 
                                                    _cdr(
                                                        begin
                                                            trampCall(_lis)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1220"] + __e.backtrace ) ; raise __e
                                                        end
                                                    )
                                                end                                              ,
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 1220 ); 
                                                    __PLMARK_ARGS2(
                                                        begin
                                                            trampCall(_n)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1220"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                      1
                                                    )
                                                end
                                          ]
                                                       )
                                      end
                                  end
                              else
                                false
                              end
                          }
                        begin
                          embedBacktraceInfo( "./lib/srfi-1.nnd", 1220 ); 
                            delayCall( '_lp',  'lp',
                                begin
                                    trampCall(_lp)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1220"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                  begin
                                      trampCall(_lis1)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1218"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                0
                            ]
                                         )
                        end
                    } ; ___lambda.call(
                    nil
                               )
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._reverse_EXMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_reverse_EXMARK', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_reverse_EXMARK'] = self.method( :_reverse_EXMARK_METHOD )
    @_reverse_EXMARK = 
    trampCall(
          Proc.new { |_lis| 
              begin
                ___lambda = lambda { |_lp| 
                    _lp                     = 
                      Proc.new { |_lis,_ans| 
                          if ( 
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 1233 ); 
                                trampCall( self._null_MIMARKlist_QUMARK_METHOD(  'null-list?',
                                    begin
                                      if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                        trampCall(@_null_MIMARKlist_QUMARK)
                                      else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1233"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                [
                                      begin
                                          trampCall(_lis)
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1236"] + __e.backtrace ) ; raise __e
                                      end
                                ]
                                             ))
                            end
                           ) then
                              begin
                                  trampCall(_ans)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1235"] + __e.backtrace ) ; raise __e
                              end
                          else
                              begin
                                ___lambda = lambda { |_tail| 
                                    begin
                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1235 ); 
                                        _set_MIMARKcdr_EXMARK(
                                            begin
                                                trampCall(_lis)
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1236"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            begin
                                                trampCall(_ans)
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1235"] + __e.backtrace ) ; raise __e
                                            end
                                        )
                                    end
                                    begin
                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1236 ); 
                                        delayCall( '_lp',  'lp',
                                            begin
                                                trampCall(_lp)
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1236"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                        [
                                              begin
                                                  trampCall(_tail)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1236"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              begin
                                                  trampCall(_lis)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1236"] + __e.backtrace ) ; raise __e
                                              end
                                        ]
                                                     )
                                    end
                                } ; ___lambda.call(
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 1234 ); 
                                          _cdr(
                                              begin
                                                  trampCall(_lis)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1236"] + __e.backtrace ) ; raise __e
                                              end
                                          )
                                      end
                                           )
                              end
                          end
                      }
                    begin
                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1236 ); 
                        delayCall( '_lp',  'lp',
                            begin
                                trampCall(_lp)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1236"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              begin
                                  trampCall(_lis)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1236"] + __e.backtrace ) ; raise __e
                              end                            ,
                            Cell.new()
                        ]
                                     )
                    end
                } ; ___lambda.call(
                nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self.__PAMARKlset2_LTMARK_EQMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '__PAMARKlset2_LTMARK_EQMARK', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['__PAMARKlset2_LTMARK_EQMARK'] = self.method( :__PAMARKlset2_LTMARK_EQMARK_METHOD )
    @__PAMARKlset2_LTMARK_EQMARK = 
    trampCall(
          Proc.new { |__EQMARK,_lis1,_lis2| 
              begin
                embedBacktraceInfo( "./lib/srfi-1.nnd", 1251 ); 
                  delayCall( '_every',  'every',
                      begin
                        if @global_lisp_binding.has_key?('_every') then
                          trampCall(@_every)
                        else raise NameError.new( "Error: undefined variable _every", "_every" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1251"] + __e.backtrace ) ; raise __e
                      end                    ,
                  [
                        Proc.new { |_x| 
                            begin
                              embedBacktraceInfo( "./lib/srfi-1.nnd", 1251 ); 
                                trampCall( self._member_METHOD(  'member',
                                    begin
                                      if @global_lisp_binding.has_key?('_member') then
                                        trampCall(@_member)
                                      else raise NameError.new( "Error: undefined variable _member", "_member" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1251"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                [
                                      begin
                                          trampCall(_x)
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1251"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      begin
                                          trampCall(_lis2)
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1251"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      begin
                                          trampCall(__EQMARK)
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1251"] + __e.backtrace ) ; raise __e
                                      end
                                ]
                                             ))
                            end
                        }                      ,
                        begin
                            trampCall(_lis1)
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1251"] + __e.backtrace ) ; raise __e
                        end
                  ]
                               )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._lset_LTMARK_EQMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_lset_LTMARK_EQMARK', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_lset_LTMARK_EQMARK'] = self.method( :_lset_LTMARK_EQMARK_METHOD )
    @_lset_LTMARK_EQMARK = 
    trampCall(
          Proc.new { |__EQMARK,*__rest__| _lists = __rest__[0] ;  
              begin
              end
              begin
                ___lambda = lambda { |___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30247| 
                    if ( 
                      begin
                          trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30247)
                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                      end
                     ) then
                        begin
                            trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30247)
                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                        end
                    else
                        begin
                          ___lambda = lambda { |___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30248| 
                              if ( 
                                begin
                                    trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30248)
                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                end
                               ) then
                                  begin
                                      trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30248)
                                    rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                  end
                              else
                                false
                              end
                          } ; ___lambda.call(
                                begin
                                  ___lambda = lambda { |_lp| 
                                      _lp                                       = 
                                        Proc.new { |_s1,_rest| 
                                            begin
                                              ___lambda = lambda { |___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30249| 
                                                  if ( 
                                                    begin
                                                        trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30249)
                                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                    end
                                                   ) then
                                                      begin
                                                          trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30249)
                                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                      end
                                                  else
                                                      begin
                                                        ___lambda = lambda { |___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30250| 
                                                            if ( 
                                                              begin
                                                                  trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30250)
                                                                rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                              end
                                                             ) then
                                                                begin
                                                                    trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30250)
                                                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                end
                                                            else
                                                              false
                                                            end
                                                        } ; ___lambda.call(
                                                              begin
                                                                ___lambda = lambda { |_s2,_rest| 
                                                                    if ( 
                                                                      begin
                                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 1257 ); 
                                                                          _not(
                                                                              begin
                                                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 1259 ); 
                                                                                  _eq_QUMARK(
                                                                                    false                                                                                    ,
                                                                                      begin
                                                                                        ___lambda = lambda { |___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30251| 
                                                                                            if ( 
                                                                                              begin
                                                                                                  trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30251)
                                                                                                rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                              end
                                                                                             ) then
                                                                                                begin
                                                                                                    trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30251)
                                                                                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                                end
                                                                                            else
                                                                                                begin
                                                                                                  ___lambda = lambda { |___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30252| 
                                                                                                      if ( 
                                                                                                        begin
                                                                                                            trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30252)
                                                                                                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                                        end
                                                                                                       ) then
                                                                                                          begin
                                                                                                              trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30252)
                                                                                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                                          end
                                                                                                      else
                                                                                                        false
                                                                                                      end
                                                                                                  } ; ___lambda.call(
                                                                                                        begin
                                                                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 1260 ); 
                                                                                                            trampCall( self.__PAMARKlset2_LTMARK_EQMARK_METHOD(  '%lset2<=',
                                                                                                                begin
                                                                                                                  if @global_lisp_binding.has_key?('__PAMARKlset2_LTMARK_EQMARK') then
                                                                                                                    trampCall(@__PAMARKlset2_LTMARK_EQMARK)
                                                                                                                  else raise NameError.new( "Error: undefined variable __PAMARKlset2_LTMARK_EQMARK", "__PAMARKlset2_LTMARK_EQMARK" ) end
                                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1260"] + __e.backtrace ) ; raise __e
                                                                                                                end                                                                                                              ,
                                                                                                            [
                                                                                                                  begin
                                                                                                                      trampCall(__EQMARK)
                                                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1260"] + __e.backtrace ) ; raise __e
                                                                                                                  end                                                                                                                ,
                                                                                                                  begin
                                                                                                                      trampCall(_s1)
                                                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1260"] + __e.backtrace ) ; raise __e
                                                                                                                  end                                                                                                                ,
                                                                                                                  begin
                                                                                                                      trampCall(_s2)
                                                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1261"] + __e.backtrace ) ; raise __e
                                                                                                                  end
                                                                                                            ]
                                                                                                                         ))
                                                                                                        end
                                                                                                             )
                                                                                                end
                                                                                            end
                                                                                        } ; ___lambda.call(
                                                                                              begin
                                                                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 1259 ); 
                                                                                                  _eq_QUMARK(
                                                                                                      begin
                                                                                                          trampCall(_s2)
                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1261"] + __e.backtrace ) ; raise __e
                                                                                                      end                                                                                                    ,
                                                                                                      begin
                                                                                                          trampCall(_s1)
                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1260"] + __e.backtrace ) ; raise __e
                                                                                                      end
                                                                                                  )
                                                                                              end
                                                                                                   )
                                                                                      end
                                                                                  )
                                                                              end
                                                                          )
                                                                      end
                                                                     ) then
                                                                        begin
                                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 1261 ); 
                                                                            delayCall( '_lp',  'lp',
                                                                                begin
                                                                                    trampCall(_lp)
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1261"] + __e.backtrace ) ; raise __e
                                                                                end                                                                              ,
                                                                            [
                                                                                  begin
                                                                                      trampCall(_s2)
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1261"] + __e.backtrace ) ; raise __e
                                                                                  end                                                                                ,
                                                                                  begin
                                                                                      trampCall(_rest)
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1261"] + __e.backtrace ) ; raise __e
                                                                                  end
                                                                            ]
                                                                                         )
                                                                        end
                                                                    else
                                                                      false
                                                                    end
                                                                } ; ___lambda.call(
                                                                      begin
                                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 1258 ); 
                                                                          _car(
                                                                              begin
                                                                                  trampCall(_rest)
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1261"] + __e.backtrace ) ; raise __e
                                                                              end
                                                                          )
                                                                      end                                                                    ,
                                                                      begin
                                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 1258 ); 
                                                                          _cdr(
                                                                              begin
                                                                                  trampCall(_rest)
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1261"] + __e.backtrace ) ; raise __e
                                                                              end
                                                                          )
                                                                      end
                                                                           )
                                                              end
                                                                   )
                                                      end
                                                  end
                                              } ; ___lambda.call(
                                                    begin
                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1257 ); 
                                                        _not(
                                                            begin
                                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 1257 ); 
                                                                _pair_QUMARK(
                                                                    begin
                                                                        trampCall(_rest)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1261"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                )
                                                            end
                                                        )
                                                    end
                                                         )
                                            end
                                        }
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 1261 ); 
                                          delayCall( '_lp',  'lp',
                                              begin
                                                  trampCall(_lp)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1261"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                          [
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 1258 ); 
                                                    _car(
                                                        begin
                                                            trampCall(_lists)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1256"] + __e.backtrace ) ; raise __e
                                                        end
                                                    )
                                                end                                              ,
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 1258 ); 
                                                    _cdr(
                                                        begin
                                                            trampCall(_lists)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1256"] + __e.backtrace ) ; raise __e
                                                        end
                                                    )
                                                end
                                          ]
                                                       )
                                      end
                                  } ; ___lambda.call(
                                  nil
                                             )
                                end
                                     )
                        end
                    end
                } ; ___lambda.call(
                      begin
                        embedBacktraceInfo( "./lib/srfi-1.nnd", 1257 ); 
                          _not(
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 1257 ); 
                                  _pair_QUMARK(
                                      begin
                                          trampCall(_lists)
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1256"] + __e.backtrace ) ; raise __e
                                      end
                                  )
                              end
                          )
                      end
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._lset_EQMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_lset_EQMARK', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_lset_EQMARK'] = self.method( :_lset_EQMARK_METHOD )
    @_lset_EQMARK = 
    trampCall(
          Proc.new { |__EQMARK,*__rest__| _lists = __rest__[0] ;  
              begin
              end
              begin
                ___lambda = lambda { |___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30253| 
                    if ( 
                      begin
                          trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30253)
                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                      end
                     ) then
                        begin
                            trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30253)
                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                        end
                    else
                        begin
                          ___lambda = lambda { |___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30254| 
                              if ( 
                                begin
                                    trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30254)
                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                end
                               ) then
                                  begin
                                      trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30254)
                                    rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                  end
                              else
                                false
                              end
                          } ; ___lambda.call(
                                begin
                                  ___lambda = lambda { |_lp| 
                                      _lp                                       = 
                                        Proc.new { |_s1,_rest| 
                                            begin
                                              ___lambda = lambda { |___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30255| 
                                                  if ( 
                                                    begin
                                                        trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30255)
                                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                    end
                                                   ) then
                                                      begin
                                                          trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30255)
                                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                      end
                                                  else
                                                      begin
                                                        ___lambda = lambda { |___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30256| 
                                                            if ( 
                                                              begin
                                                                  trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30256)
                                                                rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                              end
                                                             ) then
                                                                begin
                                                                    trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30256)
                                                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                end
                                                            else
                                                              false
                                                            end
                                                        } ; ___lambda.call(
                                                              begin
                                                                ___lambda = lambda { |_s2,_rest| 
                                                                    if ( 
                                                                      begin
                                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 1267 ); 
                                                                          _not(
                                                                              begin
                                                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 1270 ); 
                                                                                  _eq_QUMARK(
                                                                                    false                                                                                    ,
                                                                                      begin
                                                                                        ___lambda = lambda { |___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30257| 
                                                                                            if ( 
                                                                                              begin
                                                                                                  trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30257)
                                                                                                rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                              end
                                                                                             ) then
                                                                                                begin
                                                                                                    trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30257)
                                                                                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                                end
                                                                                            else
                                                                                                begin
                                                                                                  ___lambda = lambda { |___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30258| 
                                                                                                      if ( 
                                                                                                        begin
                                                                                                            trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30258)
                                                                                                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                                        end
                                                                                                       ) then
                                                                                                          begin
                                                                                                              trampCall(___gensym__d2f54e498a1042043dafdae0618b15c325a30372_30258)
                                                                                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                                          end
                                                                                                      else
                                                                                                        false
                                                                                                      end
                                                                                                  } ; ___lambda.call(
                                                                                                        if ( 
                                                                                                          begin
                                                                                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 1267 ); 
                                                                                                              _not(
                                                                                                                  begin
                                                                                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1270 ); 
                                                                                                                      _eq_QUMARK(
                                                                                                                        false                                                                                                                        ,
                                                                                                                          begin
                                                                                                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 1271 ); 
                                                                                                                              trampCall( self.__PAMARKlset2_LTMARK_EQMARK_METHOD(  '%lset2<=',
                                                                                                                                  begin
                                                                                                                                    if @global_lisp_binding.has_key?('__PAMARKlset2_LTMARK_EQMARK') then
                                                                                                                                      trampCall(@__PAMARKlset2_LTMARK_EQMARK)
                                                                                                                                    else raise NameError.new( "Error: undefined variable __PAMARKlset2_LTMARK_EQMARK", "__PAMARKlset2_LTMARK_EQMARK" ) end
                                                                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1271"] + __e.backtrace ) ; raise __e
                                                                                                                                  end                                                                                                                                ,
                                                                                                                              [
                                                                                                                                    begin
                                                                                                                                        trampCall(__EQMARK)
                                                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1271"] + __e.backtrace ) ; raise __e
                                                                                                                                    end                                                                                                                                  ,
                                                                                                                                    begin
                                                                                                                                        trampCall(_s1)
                                                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1271"] + __e.backtrace ) ; raise __e
                                                                                                                                    end                                                                                                                                  ,
                                                                                                                                    begin
                                                                                                                                        trampCall(_s2)
                                                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1272"] + __e.backtrace ) ; raise __e
                                                                                                                                    end
                                                                                                                              ]
                                                                                                                                           ))
                                                                                                                          end
                                                                                                                      )
                                                                                                                  end
                                                                                                              )
                                                                                                          end
                                                                                                         ) then
                                                                                                            begin
                                                                                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 1271 ); 
                                                                                                                trampCall( self.__PAMARKlset2_LTMARK_EQMARK_METHOD(  '%lset2<=',
                                                                                                                    begin
                                                                                                                      if @global_lisp_binding.has_key?('__PAMARKlset2_LTMARK_EQMARK') then
                                                                                                                        trampCall(@__PAMARKlset2_LTMARK_EQMARK)
                                                                                                                      else raise NameError.new( "Error: undefined variable __PAMARKlset2_LTMARK_EQMARK", "__PAMARKlset2_LTMARK_EQMARK" ) end
                                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1271"] + __e.backtrace ) ; raise __e
                                                                                                                    end                                                                                                                  ,
                                                                                                                [
                                                                                                                      begin
                                                                                                                          trampCall(__EQMARK)
                                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1271"] + __e.backtrace ) ; raise __e
                                                                                                                      end                                                                                                                    ,
                                                                                                                      begin
                                                                                                                          trampCall(_s2)
                                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1272"] + __e.backtrace ) ; raise __e
                                                                                                                      end                                                                                                                    ,
                                                                                                                      begin
                                                                                                                          trampCall(_s1)
                                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1271"] + __e.backtrace ) ; raise __e
                                                                                                                      end
                                                                                                                ]
                                                                                                                             ))
                                                                                                            end
                                                                                                        else
                                                                                                          false
                                                                                                        end
                                                                                                             )
                                                                                                end
                                                                                            end
                                                                                        } ; ___lambda.call(
                                                                                              begin
                                                                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 1270 ); 
                                                                                                  _eq_QUMARK(
                                                                                                      begin
                                                                                                          trampCall(_s1)
                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1271"] + __e.backtrace ) ; raise __e
                                                                                                      end                                                                                                    ,
                                                                                                      begin
                                                                                                          trampCall(_s2)
                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1272"] + __e.backtrace ) ; raise __e
                                                                                                      end
                                                                                                  )
                                                                                              end
                                                                                                   )
                                                                                      end
                                                                                  )
                                                                              end
                                                                          )
                                                                      end
                                                                     ) then
                                                                        begin
                                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 1272 ); 
                                                                            delayCall( '_lp',  'lp',
                                                                                begin
                                                                                    trampCall(_lp)
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1272"] + __e.backtrace ) ; raise __e
                                                                                end                                                                              ,
                                                                            [
                                                                                  begin
                                                                                      trampCall(_s2)
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1272"] + __e.backtrace ) ; raise __e
                                                                                  end                                                                                ,
                                                                                  begin
                                                                                      trampCall(_rest)
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1272"] + __e.backtrace ) ; raise __e
                                                                                  end
                                                                            ]
                                                                                         )
                                                                        end
                                                                    else
                                                                      false
                                                                    end
                                                                } ; ___lambda.call(
                                                                      begin
                                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 1268 ); 
                                                                          _car(
                                                                              begin
                                                                                  trampCall(_rest)
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1272"] + __e.backtrace ) ; raise __e
                                                                              end
                                                                          )
                                                                      end                                                                    ,
                                                                      begin
                                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 1269 ); 
                                                                          _cdr(
                                                                              begin
                                                                                  trampCall(_rest)
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1272"] + __e.backtrace ) ; raise __e
                                                                              end
                                                                          )
                                                                      end
                                                                           )
                                                              end
                                                                   )
                                                      end
                                                  end
                                              } ; ___lambda.call(
                                                    begin
                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1267 ); 
                                                        _not(
                                                            begin
                                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 1267 ); 
                                                                _pair_QUMARK(
                                                                    begin
                                                                        trampCall(_rest)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1272"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                )
                                                            end
                                                        )
                                                    end
                                                         )
                                            end
                                        }
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 1272 ); 
                                          delayCall( '_lp',  'lp',
                                              begin
                                                  trampCall(_lp)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1272"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                          [
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 1268 ); 
                                                    _car(
                                                        begin
                                                            trampCall(_lists)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1266"] + __e.backtrace ) ; raise __e
                                                        end
                                                    )
                                                end                                              ,
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 1269 ); 
                                                    _cdr(
                                                        begin
                                                            trampCall(_lists)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1266"] + __e.backtrace ) ; raise __e
                                                        end
                                                    )
                                                end
                                          ]
                                                       )
                                      end
                                  } ; ___lambda.call(
                                  nil
                                             )
                                end
                                     )
                        end
                    end
                } ; ___lambda.call(
                      begin
                        embedBacktraceInfo( "./lib/srfi-1.nnd", 1267 ); 
                          _not(
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 1267 ); 
                                  _pair_QUMARK(
                                      begin
                                          trampCall(_lists)
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1266"] + __e.backtrace ) ; raise __e
                                      end
                                  )
                              end
                          )
                      end
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._lset_MIMARKadjoin_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_lset_MIMARKadjoin', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_lset_MIMARKadjoin'] = self.method( :_lset_MIMARKadjoin_METHOD )
    @_lset_MIMARKadjoin = 
    trampCall(
          Proc.new { |__EQMARK,_lis,*__rest__| _elts = __rest__[0] ;  
              begin
              end
              begin
                embedBacktraceInfo( "./lib/srfi-1.nnd", 1277 ); 
                  delayCall( '_fold',  'fold',
                      begin
                        if @global_lisp_binding.has_key?('_fold') then
                          trampCall(@_fold)
                        else raise NameError.new( "Error: undefined variable _fold", "_fold" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1277"] + __e.backtrace ) ; raise __e
                      end                    ,
                  [
                        Proc.new { |_elt,_ans| 
                            if ( 
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 1277 ); 
                                  trampCall( self._member_METHOD(  'member',
                                      begin
                                        if @global_lisp_binding.has_key?('_member') then
                                          trampCall(@_member)
                                        else raise NameError.new( "Error: undefined variable _member", "_member" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1277"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        begin
                                            trampCall(_elt)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1277"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        begin
                                            trampCall(_ans)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1277"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        begin
                                            trampCall(__EQMARK)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1277"] + __e.backtrace ) ; raise __e
                                        end
                                  ]
                                               ))
                              end
                             ) then
                                begin
                                    trampCall(_ans)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1277"] + __e.backtrace ) ; raise __e
                                end
                            else
                                begin
                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 1277 ); 
                                    _cons(
                                        begin
                                            trampCall(_elt)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1277"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        begin
                                            trampCall(_ans)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1277"] + __e.backtrace ) ; raise __e
                                        end
                                    )
                                end
                            end
                        }                      ,
                        begin
                            trampCall(_lis)
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1278"] + __e.backtrace ) ; raise __e
                        end                      ,
                        begin
                            trampCall(_elts)
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1278"] + __e.backtrace ) ; raise __e
                        end
                  ]
                               )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._lset_MIMARKunion_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_lset_MIMARKunion', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_lset_MIMARKunion'] = self.method( :_lset_MIMARKunion_METHOD )
    @_lset_MIMARKunion = 
    trampCall(
          Proc.new { |__EQMARK,*__rest__| _lists = __rest__[0] ;  
              begin
              end
              begin
                embedBacktraceInfo( "./lib/srfi-1.nnd", 1283 ); 
                  delayCall( '_reduce',  'reduce',
                      begin
                        if @global_lisp_binding.has_key?('_reduce') then
                          trampCall(@_reduce)
                        else raise NameError.new( "Error: undefined variable _reduce", "_reduce" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1283"] + __e.backtrace ) ; raise __e
                      end                    ,
                  [
                        Proc.new { |_lis,_ans| 
                            if ( 
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 1285 ); 
                                  _null_QUMARK(
                                      begin
                                          trampCall(_lis)
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1291"] + __e.backtrace ) ; raise __e
                                      end
                                  )
                              end
                             ) then
                                begin
                                    begin
                                        trampCall(_ans)
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1291"] + __e.backtrace ) ; raise __e
                                    end
                                end
                            else
                                if ( 
                                  begin
                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1285 ); 
                                      _null_QUMARK(
                                          begin
                                              trampCall(_ans)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1291"] + __e.backtrace ) ; raise __e
                                          end
                                      )
                                  end
                                 ) then
                                    begin
                                        begin
                                            trampCall(_lis)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1291"] + __e.backtrace ) ; raise __e
                                        end
                                    end
                                else
                                    if ( 
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 1286 ); 
                                          _eq_QUMARK(
                                              begin
                                                  trampCall(_lis)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1291"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              begin
                                                  trampCall(_ans)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1291"] + __e.backtrace ) ; raise __e
                                              end
                                          )
                                      end
                                     ) then
                                        begin
                                            begin
                                                trampCall(_ans)
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1291"] + __e.backtrace ) ; raise __e
                                            end
                                        end
                                    else
                                        if ( 
                                        true
                                         ) then
                                            begin
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 1288 ); 
                                                    trampCall( self._fold_METHOD(  'fold',
                                                        begin
                                                          if @global_lisp_binding.has_key?('_fold') then
                                                            trampCall(@_fold)
                                                          else raise NameError.new( "Error: undefined variable _fold", "_fold" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1288"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                    [
                                                          Proc.new { |_elt,_ans| 
                                                              if ( 
                                                                begin
                                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 1288 ); 
                                                                    trampCall( self._any_METHOD(  'any',
                                                                        begin
                                                                          if @global_lisp_binding.has_key?('_any') then
                                                                            trampCall(@_any)
                                                                          else raise NameError.new( "Error: undefined variable _any", "_any" ) end
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1288"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                    [
                                                                          Proc.new { |_x| 
                                                                              begin
                                                                                embedBacktraceInfo( "./lib/srfi-1.nnd", 1288 ); 
                                                                                  trampCall( callProcedure(  '__EQMARK',  '=',
                                                                                      begin
                                                                                          trampCall(__EQMARK)
                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1288"] + __e.backtrace ) ; raise __e
                                                                                      end                                                                                    ,
                                                                                  [
                                                                                        begin
                                                                                            trampCall(_x)
                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1288"] + __e.backtrace ) ; raise __e
                                                                                        end                                                                                      ,
                                                                                        begin
                                                                                            trampCall(_elt)
                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1290"] + __e.backtrace ) ; raise __e
                                                                                        end
                                                                                  ]
                                                                                               ))
                                                                              end
                                                                          }                                                                        ,
                                                                          begin
                                                                              trampCall(_ans)
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1291"] + __e.backtrace ) ; raise __e
                                                                          end
                                                                    ]
                                                                                 ))
                                                                end
                                                               ) then
                                                                  begin
                                                                      trampCall(_ans)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1291"] + __e.backtrace ) ; raise __e
                                                                  end
                                                              else
                                                                  begin
                                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1290 ); 
                                                                      _cons(
                                                                          begin
                                                                              trampCall(_elt)
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1290"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                          begin
                                                                              trampCall(_ans)
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1291"] + __e.backtrace ) ; raise __e
                                                                          end
                                                                      )
                                                                  end
                                                              end
                                                          }                                                        ,
                                                          begin
                                                              trampCall(_ans)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1291"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          begin
                                                              trampCall(_lis)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1291"] + __e.backtrace ) ; raise __e
                                                          end
                                                    ]
                                                                 ))
                                                end
                                            end
                                        else
                                            Cell.new()
                                        end
                                    end
                                end
                            end
                        }                      ,
                      Cell.new()                      ,
                        begin
                            trampCall(_lists)
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1292"] + __e.backtrace ) ; raise __e
                        end
                  ]
                               )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._lset_MIMARKunion_EXMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_lset_MIMARKunion_EXMARK', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_lset_MIMARKunion_EXMARK'] = self.method( :_lset_MIMARKunion_EXMARK_METHOD )
    @_lset_MIMARKunion_EXMARK = 
    trampCall(
          Proc.new { |__EQMARK,*__rest__| _lists = __rest__[0] ;  
              begin
              end
              begin
                embedBacktraceInfo( "./lib/srfi-1.nnd", 1296 ); 
                  delayCall( '_reduce',  'reduce',
                      begin
                        if @global_lisp_binding.has_key?('_reduce') then
                          trampCall(@_reduce)
                        else raise NameError.new( "Error: undefined variable _reduce", "_reduce" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1296"] + __e.backtrace ) ; raise __e
                      end                    ,
                  [
                        Proc.new { |_lis,_ans| 
                            if ( 
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 1298 ); 
                                  _null_QUMARK(
                                      begin
                                          trampCall(_lis)
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1306"] + __e.backtrace ) ; raise __e
                                      end
                                  )
                              end
                             ) then
                                begin
                                    begin
                                        trampCall(_ans)
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1306"] + __e.backtrace ) ; raise __e
                                    end
                                end
                            else
                                if ( 
                                  begin
                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1298 ); 
                                      _null_QUMARK(
                                          begin
                                              trampCall(_ans)
                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1306"] + __e.backtrace ) ; raise __e
                                          end
                                      )
                                  end
                                 ) then
                                    begin
                                        begin
                                            trampCall(_lis)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1306"] + __e.backtrace ) ; raise __e
                                        end
                                    end
                                else
                                    if ( 
                                      begin
                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 1299 ); 
                                          _eq_QUMARK(
                                              begin
                                                  trampCall(_lis)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1306"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              begin
                                                  trampCall(_ans)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1306"] + __e.backtrace ) ; raise __e
                                              end
                                          )
                                      end
                                     ) then
                                        begin
                                            begin
                                                trampCall(_ans)
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1306"] + __e.backtrace ) ; raise __e
                                            end
                                        end
                                    else
                                        if ( 
                                        true
                                         ) then
                                            begin
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 1301 ); 
                                                    trampCall( self._pair_MIMARKfold_METHOD(  'pair-fold',
                                                        begin
                                                          if @global_lisp_binding.has_key?('_pair_MIMARKfold') then
                                                            trampCall(@_pair_MIMARKfold)
                                                          else raise NameError.new( "Error: undefined variable _pair_MIMARKfold", "_pair_MIMARKfold" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1301"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                    [
                                                          Proc.new { |_pair,_ans| 
                                                              begin
                                                                ___lambda = lambda { |_elt| 
                                                                    if ( 
                                                                      begin
                                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 1303 ); 
                                                                          trampCall( self._any_METHOD(  'any',
                                                                              begin
                                                                                if @global_lisp_binding.has_key?('_any') then
                                                                                  trampCall(@_any)
                                                                                else raise NameError.new( "Error: undefined variable _any", "_any" ) end
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1303"] + __e.backtrace ) ; raise __e
                                                                              end                                                                            ,
                                                                          [
                                                                                Proc.new { |_x| 
                                                                                    begin
                                                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1303 ); 
                                                                                        trampCall( callProcedure(  '__EQMARK',  '=',
                                                                                            begin
                                                                                                trampCall(__EQMARK)
                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1303"] + __e.backtrace ) ; raise __e
                                                                                            end                                                                                          ,
                                                                                        [
                                                                                              begin
                                                                                                  trampCall(_x)
                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1303"] + __e.backtrace ) ; raise __e
                                                                                              end                                                                                            ,
                                                                                              begin
                                                                                                  trampCall(_elt)
                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1303"] + __e.backtrace ) ; raise __e
                                                                                              end
                                                                                        ]
                                                                                                     ))
                                                                                    end
                                                                                }                                                                              ,
                                                                                begin
                                                                                    trampCall(_ans)
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1306"] + __e.backtrace ) ; raise __e
                                                                                end
                                                                          ]
                                                                                       ))
                                                                      end
                                                                     ) then
                                                                        begin
                                                                            trampCall(_ans)
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1306"] + __e.backtrace ) ; raise __e
                                                                        end
                                                                    else
                                                                        begin
                                                                            begin
                                                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 1305 ); 
                                                                                _set_MIMARKcdr_EXMARK(
                                                                                    begin
                                                                                        trampCall(_pair)
                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1305"] + __e.backtrace ) ; raise __e
                                                                                    end                                                                                  ,
                                                                                    begin
                                                                                        trampCall(_ans)
                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1306"] + __e.backtrace ) ; raise __e
                                                                                    end
                                                                                )
                                                                            end
                                                                            begin
                                                                                trampCall(_pair)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1305"] + __e.backtrace ) ; raise __e
                                                                            end
                                                                        end
                                                                    end
                                                                } ; ___lambda.call(
                                                                      begin
                                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 1302 ); 
                                                                          _car(
                                                                              begin
                                                                                  trampCall(_pair)
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1305"] + __e.backtrace ) ; raise __e
                                                                              end
                                                                          )
                                                                      end
                                                                           )
                                                              end
                                                          }                                                        ,
                                                          begin
                                                              trampCall(_ans)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1306"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          begin
                                                              trampCall(_lis)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1306"] + __e.backtrace ) ; raise __e
                                                          end
                                                    ]
                                                                 ))
                                                end
                                            end
                                        else
                                            Cell.new()
                                        end
                                    end
                                end
                            end
                        }                      ,
                      Cell.new()                      ,
                        begin
                            trampCall(_lists)
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1307"] + __e.backtrace ) ; raise __e
                        end
                  ]
                               )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._lset_MIMARKintersection_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_lset_MIMARKintersection', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_lset_MIMARKintersection'] = self.method( :_lset_MIMARKintersection_METHOD )
    @_lset_MIMARKintersection = 
    trampCall(
          Proc.new { |__EQMARK,_lis1,*__rest__| _lists = __rest__[0] ;  
              begin
              end
              begin
                ___lambda = lambda { |_lists| 
                    if ( 
                      begin
                        embedBacktraceInfo( "./lib/srfi-1.nnd", 1313 ); 
                          trampCall( self._any_METHOD(  'any',
                              begin
                                if @global_lisp_binding.has_key?('_any') then
                                  trampCall(@_any)
                                else raise NameError.new( "Error: undefined variable _any", "_any" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1313"] + __e.backtrace ) ; raise __e
                              end                            ,
                          [
                                begin
                                  if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                    trampCall(@_null_MIMARKlist_QUMARK)
                                  else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1313"] + __e.backtrace ) ; raise __e
                                end                              ,
                                begin
                                    trampCall(_lists)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1316"] + __e.backtrace ) ; raise __e
                                end
                          ]
                                       ))
                      end
                     ) then
                        begin
                          Cell.new()
                        end
                    else
                        if ( 
                          begin
                            embedBacktraceInfo( "./lib/srfi-1.nnd", 1314 ); 
                              _null_QUMARK(
                                  begin
                                      trampCall(_lists)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1316"] + __e.backtrace ) ; raise __e
                                  end
                              )
                          end
                         ) then
                            begin
                                begin
                                    trampCall(_lis1)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1317"] + __e.backtrace ) ; raise __e
                                end
                            end
                        else
                            if ( 
                            true
                             ) then
                                begin
                                    begin
                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1315 ); 
                                        delayCall( '_filter',  'filter',
                                            begin
                                              if @global_lisp_binding.has_key?('_filter') then
                                                trampCall(@_filter)
                                              else raise NameError.new( "Error: undefined variable _filter", "_filter" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1315"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                        [
                                              Proc.new { |_x| 
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1316 ); 
                                                      trampCall( self._every_METHOD(  'every',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_every') then
                                                              trampCall(@_every)
                                                            else raise NameError.new( "Error: undefined variable _every", "_every" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1316"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                      [
                                                            Proc.new { |_lis| 
                                                                begin
                                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 1316 ); 
                                                                    trampCall( self._member_METHOD(  'member',
                                                                        begin
                                                                          if @global_lisp_binding.has_key?('_member') then
                                                                            trampCall(@_member)
                                                                          else raise NameError.new( "Error: undefined variable _member", "_member" ) end
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1316"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                    [
                                                                          begin
                                                                              trampCall(_x)
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1316"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                          begin
                                                                              trampCall(_lis)
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1316"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                          begin
                                                                              trampCall(__EQMARK)
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1316"] + __e.backtrace ) ; raise __e
                                                                          end
                                                                    ]
                                                                                 ))
                                                                end
                                                            }                                                          ,
                                                            begin
                                                                trampCall(_lists)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1316"] + __e.backtrace ) ; raise __e
                                                            end
                                                      ]
                                                                   ))
                                                  end
                                              }                                            ,
                                              begin
                                                  trampCall(_lis1)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1317"] + __e.backtrace ) ; raise __e
                                              end
                                        ]
                                                     )
                                    end
                                end
                            else
                                Cell.new()
                            end
                        end
                    end
                } ; ___lambda.call(
                      begin
                        embedBacktraceInfo( "./lib/srfi-1.nnd", 1312 ); 
                          trampCall( self._delete_METHOD(  'delete',
                              begin
                                if @global_lisp_binding.has_key?('_delete') then
                                  trampCall(@_delete)
                                else raise NameError.new( "Error: undefined variable _delete", "_delete" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1312"] + __e.backtrace ) ; raise __e
                              end                            ,
                          [
                                begin
                                    trampCall(_lis1)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1317"] + __e.backtrace ) ; raise __e
                                end                              ,
                                begin
                                    trampCall(_lists)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1316"] + __e.backtrace ) ; raise __e
                                end                              ,
                                begin
                                  if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                    trampCall(@_eq_QUMARK)
                                  else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1312"] + __e.backtrace ) ; raise __e
                                end
                          ]
                                       ))
                      end
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._lset_MIMARKintersection_EXMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_lset_MIMARKintersection_EXMARK', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_lset_MIMARKintersection_EXMARK'] = self.method( :_lset_MIMARKintersection_EXMARK_METHOD )
    @_lset_MIMARKintersection_EXMARK = 
    trampCall(
          Proc.new { |__EQMARK,_lis1,*__rest__| _lists = __rest__[0] ;  
              begin
              end
              begin
                ___lambda = lambda { |_lists| 
                    if ( 
                      begin
                        embedBacktraceInfo( "./lib/srfi-1.nnd", 1322 ); 
                          trampCall( self._any_METHOD(  'any',
                              begin
                                if @global_lisp_binding.has_key?('_any') then
                                  trampCall(@_any)
                                else raise NameError.new( "Error: undefined variable _any", "_any" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1322"] + __e.backtrace ) ; raise __e
                              end                            ,
                          [
                                begin
                                  if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                                    trampCall(@_null_MIMARKlist_QUMARK)
                                  else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1322"] + __e.backtrace ) ; raise __e
                                end                              ,
                                begin
                                    trampCall(_lists)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1325"] + __e.backtrace ) ; raise __e
                                end
                          ]
                                       ))
                      end
                     ) then
                        begin
                          Cell.new()
                        end
                    else
                        if ( 
                          begin
                            embedBacktraceInfo( "./lib/srfi-1.nnd", 1323 ); 
                              _null_QUMARK(
                                  begin
                                      trampCall(_lists)
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1325"] + __e.backtrace ) ; raise __e
                                  end
                              )
                          end
                         ) then
                            begin
                                begin
                                    trampCall(_lis1)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1326"] + __e.backtrace ) ; raise __e
                                end
                            end
                        else
                            if ( 
                            true
                             ) then
                                begin
                                    begin
                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1324 ); 
                                        delayCall( '_filter_EXMARK',  'filter!',
                                            begin
                                              if @global_lisp_binding.has_key?('_filter_EXMARK') then
                                                trampCall(@_filter_EXMARK)
                                              else raise NameError.new( "Error: undefined variable _filter_EXMARK", "_filter_EXMARK" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1324"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                        [
                                              Proc.new { |_x| 
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1325 ); 
                                                      trampCall( self._every_METHOD(  'every',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_every') then
                                                              trampCall(@_every)
                                                            else raise NameError.new( "Error: undefined variable _every", "_every" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1325"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                      [
                                                            Proc.new { |_lis| 
                                                                begin
                                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 1325 ); 
                                                                    trampCall( self._member_METHOD(  'member',
                                                                        begin
                                                                          if @global_lisp_binding.has_key?('_member') then
                                                                            trampCall(@_member)
                                                                          else raise NameError.new( "Error: undefined variable _member", "_member" ) end
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1325"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                    [
                                                                          begin
                                                                              trampCall(_x)
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1325"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                          begin
                                                                              trampCall(_lis)
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1325"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                          begin
                                                                              trampCall(__EQMARK)
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1325"] + __e.backtrace ) ; raise __e
                                                                          end
                                                                    ]
                                                                                 ))
                                                                end
                                                            }                                                          ,
                                                            begin
                                                                trampCall(_lists)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1325"] + __e.backtrace ) ; raise __e
                                                            end
                                                      ]
                                                                   ))
                                                  end
                                              }                                            ,
                                              begin
                                                  trampCall(_lis1)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1326"] + __e.backtrace ) ; raise __e
                                              end
                                        ]
                                                     )
                                    end
                                end
                            else
                                Cell.new()
                            end
                        end
                    end
                } ; ___lambda.call(
                      begin
                        embedBacktraceInfo( "./lib/srfi-1.nnd", 1321 ); 
                          trampCall( self._delete_METHOD(  'delete',
                              begin
                                if @global_lisp_binding.has_key?('_delete') then
                                  trampCall(@_delete)
                                else raise NameError.new( "Error: undefined variable _delete", "_delete" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1321"] + __e.backtrace ) ; raise __e
                              end                            ,
                          [
                                begin
                                    trampCall(_lis1)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1326"] + __e.backtrace ) ; raise __e
                                end                              ,
                                begin
                                    trampCall(_lists)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1325"] + __e.backtrace ) ; raise __e
                                end                              ,
                                begin
                                  if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                    trampCall(@_eq_QUMARK)
                                  else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1321"] + __e.backtrace ) ; raise __e
                                end
                          ]
                                       ))
                      end
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._lset_MIMARKdifference_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_lset_MIMARKdifference', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_lset_MIMARKdifference'] = self.method( :_lset_MIMARKdifference_METHOD )
    @_lset_MIMARKdifference = 
    trampCall(
          Proc.new { |__EQMARK,_lis1,*__rest__| _lists = __rest__[0] ;  
              begin
              end
              begin
                ___lambda = lambda { |_lists| 
                    if ( 
                      begin
                        embedBacktraceInfo( "./lib/srfi-1.nnd", 1332 ); 
                          _null_QUMARK(
                              begin
                                  trampCall(_lists)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1336"] + __e.backtrace ) ; raise __e
                              end
                          )
                      end
                     ) then
                        begin
                            begin
                                trampCall(_lis1)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1337"] + __e.backtrace ) ; raise __e
                            end
                        end
                    else
                        if ( 
                          begin
                            embedBacktraceInfo( "./lib/srfi-1.nnd", 1333 ); 
                              trampCall( self._memq_METHOD(  'memq',
                                  begin
                                    if @global_lisp_binding.has_key?('_memq') then
                                      trampCall(@_memq)
                                    else raise NameError.new( "Error: undefined variable _memq", "_memq" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1333"] + __e.backtrace ) ; raise __e
                                  end                                ,
                              [
                                    begin
                                        trampCall(_lis1)
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1337"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    begin
                                        trampCall(_lists)
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1336"] + __e.backtrace ) ; raise __e
                                    end
                              ]
                                           ))
                          end
                         ) then
                            begin
                              Cell.new()
                            end
                        else
                            if ( 
                            true
                             ) then
                                begin
                                    begin
                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1334 ); 
                                        delayCall( '_filter',  'filter',
                                            begin
                                              if @global_lisp_binding.has_key?('_filter') then
                                                trampCall(@_filter)
                                              else raise NameError.new( "Error: undefined variable _filter", "_filter" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1334"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                        [
                                              Proc.new { |_x| 
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1335 ); 
                                                      trampCall( self._every_METHOD(  'every',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_every') then
                                                              trampCall(@_every)
                                                            else raise NameError.new( "Error: undefined variable _every", "_every" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1335"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                      [
                                                            Proc.new { |_lis| 
                                                                begin
                                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 1335 ); 
                                                                    _not(
                                                                        begin
                                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 1335 ); 
                                                                            trampCall( self._member_METHOD(  'member',
                                                                                begin
                                                                                  if @global_lisp_binding.has_key?('_member') then
                                                                                    trampCall(@_member)
                                                                                  else raise NameError.new( "Error: undefined variable _member", "_member" ) end
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1335"] + __e.backtrace ) ; raise __e
                                                                                end                                                                              ,
                                                                            [
                                                                                  begin
                                                                                      trampCall(_x)
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1335"] + __e.backtrace ) ; raise __e
                                                                                  end                                                                                ,
                                                                                  begin
                                                                                      trampCall(_lis)
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1335"] + __e.backtrace ) ; raise __e
                                                                                  end                                                                                ,
                                                                                  begin
                                                                                      trampCall(__EQMARK)
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1335"] + __e.backtrace ) ; raise __e
                                                                                  end
                                                                            ]
                                                                                         ))
                                                                        end
                                                                    )
                                                                end
                                                            }                                                          ,
                                                            begin
                                                                trampCall(_lists)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1336"] + __e.backtrace ) ; raise __e
                                                            end
                                                      ]
                                                                   ))
                                                  end
                                              }                                            ,
                                              begin
                                                  trampCall(_lis1)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1337"] + __e.backtrace ) ; raise __e
                                              end
                                        ]
                                                     )
                                    end
                                end
                            else
                                Cell.new()
                            end
                        end
                    end
                } ; ___lambda.call(
                      begin
                        embedBacktraceInfo( "./lib/srfi-1.nnd", 1334 ); 
                          trampCall( self._filter_METHOD(  'filter',
                              begin
                                if @global_lisp_binding.has_key?('_filter') then
                                  trampCall(@_filter)
                                else raise NameError.new( "Error: undefined variable _filter", "_filter" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1334"] + __e.backtrace ) ; raise __e
                              end                            ,
                          [
                                begin
                                  if @global_lisp_binding.has_key?('_pair_QUMARK') then
                                    trampCall(@_pair_QUMARK)
                                  else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1331"] + __e.backtrace ) ; raise __e
                                end                              ,
                                begin
                                    trampCall(_lists)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1336"] + __e.backtrace ) ; raise __e
                                end
                          ]
                                       ))
                      end
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._lset_MIMARKdifference_EXMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_lset_MIMARKdifference_EXMARK', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_lset_MIMARKdifference_EXMARK'] = self.method( :_lset_MIMARKdifference_EXMARK_METHOD )
    @_lset_MIMARKdifference_EXMARK = 
    trampCall(
          Proc.new { |__EQMARK,_lis1,*__rest__| _lists = __rest__[0] ;  
              begin
              end
              begin
                ___lambda = lambda { |_lists| 
                    if ( 
                      begin
                        embedBacktraceInfo( "./lib/srfi-1.nnd", 1342 ); 
                          _null_QUMARK(
                              begin
                                  trampCall(_lists)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1346"] + __e.backtrace ) ; raise __e
                              end
                          )
                      end
                     ) then
                        begin
                            begin
                                trampCall(_lis1)
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1347"] + __e.backtrace ) ; raise __e
                            end
                        end
                    else
                        if ( 
                          begin
                            embedBacktraceInfo( "./lib/srfi-1.nnd", 1343 ); 
                              trampCall( self._memq_METHOD(  'memq',
                                  begin
                                    if @global_lisp_binding.has_key?('_memq') then
                                      trampCall(@_memq)
                                    else raise NameError.new( "Error: undefined variable _memq", "_memq" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1343"] + __e.backtrace ) ; raise __e
                                  end                                ,
                              [
                                    begin
                                        trampCall(_lis1)
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1347"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    begin
                                        trampCall(_lists)
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1346"] + __e.backtrace ) ; raise __e
                                    end
                              ]
                                           ))
                          end
                         ) then
                            begin
                              Cell.new()
                            end
                        else
                            if ( 
                            true
                             ) then
                                begin
                                    begin
                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1344 ); 
                                        delayCall( '_filter_EXMARK',  'filter!',
                                            begin
                                              if @global_lisp_binding.has_key?('_filter_EXMARK') then
                                                trampCall(@_filter_EXMARK)
                                              else raise NameError.new( "Error: undefined variable _filter_EXMARK", "_filter_EXMARK" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1344"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                        [
                                              Proc.new { |_x| 
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1345 ); 
                                                      trampCall( self._every_METHOD(  'every',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_every') then
                                                              trampCall(@_every)
                                                            else raise NameError.new( "Error: undefined variable _every", "_every" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1345"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                      [
                                                            Proc.new { |_lis| 
                                                                begin
                                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 1345 ); 
                                                                    _not(
                                                                        begin
                                                                          embedBacktraceInfo( "./lib/srfi-1.nnd", 1345 ); 
                                                                            trampCall( self._member_METHOD(  'member',
                                                                                begin
                                                                                  if @global_lisp_binding.has_key?('_member') then
                                                                                    trampCall(@_member)
                                                                                  else raise NameError.new( "Error: undefined variable _member", "_member" ) end
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1345"] + __e.backtrace ) ; raise __e
                                                                                end                                                                              ,
                                                                            [
                                                                                  begin
                                                                                      trampCall(_x)
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1345"] + __e.backtrace ) ; raise __e
                                                                                  end                                                                                ,
                                                                                  begin
                                                                                      trampCall(_lis)
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1345"] + __e.backtrace ) ; raise __e
                                                                                  end                                                                                ,
                                                                                  begin
                                                                                      trampCall(__EQMARK)
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1345"] + __e.backtrace ) ; raise __e
                                                                                  end
                                                                            ]
                                                                                         ))
                                                                        end
                                                                    )
                                                                end
                                                            }                                                          ,
                                                            begin
                                                                trampCall(_lists)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1346"] + __e.backtrace ) ; raise __e
                                                            end
                                                      ]
                                                                   ))
                                                  end
                                              }                                            ,
                                              begin
                                                  trampCall(_lis1)
                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1347"] + __e.backtrace ) ; raise __e
                                              end
                                        ]
                                                     )
                                    end
                                end
                            else
                                Cell.new()
                            end
                        end
                    end
                } ; ___lambda.call(
                      begin
                        embedBacktraceInfo( "./lib/srfi-1.nnd", 1341 ); 
                          trampCall( self._filter_METHOD(  'filter',
                              begin
                                if @global_lisp_binding.has_key?('_filter') then
                                  trampCall(@_filter)
                                else raise NameError.new( "Error: undefined variable _filter", "_filter" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1341"] + __e.backtrace ) ; raise __e
                              end                            ,
                          [
                                begin
                                  if @global_lisp_binding.has_key?('_pair_QUMARK') then
                                    trampCall(@_pair_QUMARK)
                                  else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1341"] + __e.backtrace ) ; raise __e
                                end                              ,
                                begin
                                    trampCall(_lists)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1346"] + __e.backtrace ) ; raise __e
                                end
                          ]
                                       ))
                      end
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._lset_MIMARKxor_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_lset_MIMARKxor', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_lset_MIMARKxor'] = self.method( :_lset_MIMARKxor_METHOD )
    @_lset_MIMARKxor = 
    trampCall(
          Proc.new { |__EQMARK,*__rest__| _lists = __rest__[0] ;  
              begin
              end
              begin
                embedBacktraceInfo( "./lib/srfi-1.nnd", 1352 ); 
                  delayCall( '_reduce',  'reduce',
                      begin
                        if @global_lisp_binding.has_key?('_reduce') then
                          trampCall(@_reduce)
                        else raise NameError.new( "Error: undefined variable _reduce", "_reduce" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1352"] + __e.backtrace ) ; raise __e
                      end                    ,
                  [
                        Proc.new { |_b,_a| 
                            begin
                              embedBacktraceInfo( "", 1 ); 
                                trampCall( self._call_MIMARKwith_MIMARKvalues_METHOD(  'call-with-values',
                                    begin
                                      if @global_lisp_binding.has_key?('_call_MIMARKwith_MIMARKvalues') then
                                        trampCall(@_call_MIMARKwith_MIMARKvalues)
                                      else raise NameError.new( "Error: undefined variable _call_MIMARKwith_MIMARKvalues", "_call_MIMARKwith_MIMARKvalues" ) end
                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                [
                                      Proc.new { || 
                                          begin
                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 1362 ); 
                                              trampCall( self._lset_MIMARKdiff_PLMARKintersection_METHOD(  'lset-diff+intersection',
                                                  begin
                                                    if @global_lisp_binding.has_key?('_lset_MIMARKdiff_PLMARKintersection') then
                                                      trampCall(@_lset_MIMARKdiff_PLMARKintersection)
                                                    else raise NameError.new( "Error: undefined variable _lset_MIMARKdiff_PLMARKintersection", "_lset_MIMARKdiff_PLMARKintersection" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1362"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                              [
                                                    begin
                                                        trampCall(__EQMARK)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1366"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    begin
                                                        trampCall(_a)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1364"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    begin
                                                        trampCall(_b)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1368"] + __e.backtrace ) ; raise __e
                                                    end
                                              ]
                                                           ))
                                          end
                                      }                                    ,
                                      Proc.new { |_a_MIMARKb,_a_MIMARKint_MIMARKb| 
                                          if ( 
                                            begin
                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 1364 ); 
                                                _null_QUMARK(
                                                    begin
                                                        trampCall(_a_MIMARKb)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1367"] + __e.backtrace ) ; raise __e
                                                    end
                                                )
                                            end
                                           ) then
                                              begin
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1363 ); 
                                                      trampCall( self._lset_MIMARKdifference_METHOD(  'lset-difference',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_lset_MIMARKdifference') then
                                                              trampCall(@_lset_MIMARKdifference)
                                                            else raise NameError.new( "Error: undefined variable _lset_MIMARKdifference", "_lset_MIMARKdifference" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1363"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                      [
                                                            begin
                                                                trampCall(__EQMARK)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1366"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            begin
                                                                trampCall(_b)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1368"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            begin
                                                                trampCall(_a)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1364"] + __e.backtrace ) ; raise __e
                                                            end
                                                      ]
                                                                   ))
                                                  end
                                              end
                                          else
                                              if ( 
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 1364 ); 
                                                    _null_QUMARK(
                                                        begin
                                                            trampCall(_a_MIMARKint_MIMARKb)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1366"] + __e.backtrace ) ; raise __e
                                                        end
                                                    )
                                                end
                                               ) then
                                                  begin
                                                      begin
                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 1364 ); 
                                                          trampCall( self._append_METHOD(  'append',
                                                              begin
                                                                if @global_lisp_binding.has_key?('_append') then
                                                                  trampCall(@_append)
                                                                else raise NameError.new( "Error: undefined variable _append", "_append" ) end
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1364"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                          [
                                                                begin
                                                                    trampCall(_b)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1368"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                begin
                                                                    trampCall(_a)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1364"] + __e.backtrace ) ; raise __e
                                                                end
                                                          ]
                                                                       ))
                                                      end
                                                  end
                                              else
                                                  if ( 
                                                  true
                                                   ) then
                                                      begin
                                                          begin
                                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 1365 ); 
                                                              trampCall( self._fold_METHOD(  'fold',
                                                                  begin
                                                                    if @global_lisp_binding.has_key?('_fold') then
                                                                      trampCall(@_fold)
                                                                    else raise NameError.new( "Error: undefined variable _fold", "_fold" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1365"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                              [
                                                                    Proc.new { |_xb,_ans| 
                                                                        if ( 
                                                                          begin
                                                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 1366 ); 
                                                                              trampCall( self._member_METHOD(  'member',
                                                                                  begin
                                                                                    if @global_lisp_binding.has_key?('_member') then
                                                                                      trampCall(@_member)
                                                                                    else raise NameError.new( "Error: undefined variable _member", "_member" ) end
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1366"] + __e.backtrace ) ; raise __e
                                                                                  end                                                                                ,
                                                                              [
                                                                                    begin
                                                                                        trampCall(_xb)
                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1366"] + __e.backtrace ) ; raise __e
                                                                                    end                                                                                  ,
                                                                                    begin
                                                                                        trampCall(_a_MIMARKint_MIMARKb)
                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1366"] + __e.backtrace ) ; raise __e
                                                                                    end                                                                                  ,
                                                                                    begin
                                                                                        trampCall(__EQMARK)
                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1366"] + __e.backtrace ) ; raise __e
                                                                                    end
                                                                              ]
                                                                                           ))
                                                                          end
                                                                         ) then
                                                                            begin
                                                                                trampCall(_ans)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1366"] + __e.backtrace ) ; raise __e
                                                                            end
                                                                        else
                                                                            begin
                                                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 1366 ); 
                                                                                _cons(
                                                                                    begin
                                                                                        trampCall(_xb)
                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1366"] + __e.backtrace ) ; raise __e
                                                                                    end                                                                                  ,
                                                                                    begin
                                                                                        trampCall(_ans)
                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1366"] + __e.backtrace ) ; raise __e
                                                                                    end
                                                                                )
                                                                            end
                                                                        end
                                                                    }                                                                  ,
                                                                    begin
                                                                        trampCall(_a_MIMARKb)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1367"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                    begin
                                                                        trampCall(_b)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1368"] + __e.backtrace ) ; raise __e
                                                                    end
                                                              ]
                                                                           ))
                                                          end
                                                      end
                                                  else
                                                      Cell.new()
                                                  end
                                              end
                                          end
                                      }
                                ]
                                             ))
                            end
                        }                      ,
                      Cell.new()                      ,
                        begin
                            trampCall(_lists)
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1369"] + __e.backtrace ) ; raise __e
                        end
                  ]
                               )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._lset_MIMARKxor_EXMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_lset_MIMARKxor_EXMARK', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_lset_MIMARKxor_EXMARK'] = self.method( :_lset_MIMARKxor_EXMARK_METHOD )
    @_lset_MIMARKxor_EXMARK = 
    trampCall(
          Proc.new { |__EQMARK,*__rest__| _lists = __rest__[0] ;  
              begin
              end
              begin
                embedBacktraceInfo( "./lib/srfi-1.nnd", 1374 ); 
                  delayCall( '_reduce',  'reduce',
                      begin
                        if @global_lisp_binding.has_key?('_reduce') then
                          trampCall(@_reduce)
                        else raise NameError.new( "Error: undefined variable _reduce", "_reduce" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1374"] + __e.backtrace ) ; raise __e
                      end                    ,
                  [
                        Proc.new { |_b,_a| 
                            begin
                              embedBacktraceInfo( "", 1 ); 
                                trampCall( self._call_MIMARKwith_MIMARKvalues_METHOD(  'call-with-values',
                                    begin
                                      if @global_lisp_binding.has_key?('_call_MIMARKwith_MIMARKvalues') then
                                        trampCall(@_call_MIMARKwith_MIMARKvalues)
                                      else raise NameError.new( "Error: undefined variable _call_MIMARKwith_MIMARKvalues", "_call_MIMARKwith_MIMARKvalues" ) end
                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                [
                                      Proc.new { || 
                                          begin
                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 1384 ); 
                                              trampCall( self._lset_MIMARKdiff_PLMARKintersection_EXMARK_METHOD(  'lset-diff+intersection!',
                                                  begin
                                                    if @global_lisp_binding.has_key?('_lset_MIMARKdiff_PLMARKintersection_EXMARK') then
                                                      trampCall(@_lset_MIMARKdiff_PLMARKintersection_EXMARK)
                                                    else raise NameError.new( "Error: undefined variable _lset_MIMARKdiff_PLMARKintersection_EXMARK", "_lset_MIMARKdiff_PLMARKintersection_EXMARK" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1384"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                              [
                                                    begin
                                                        trampCall(__EQMARK)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1388"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    begin
                                                        trampCall(_a)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1386"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    begin
                                                        trampCall(_b)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1391"] + __e.backtrace ) ; raise __e
                                                    end
                                              ]
                                                           ))
                                          end
                                      }                                    ,
                                      Proc.new { |_a_MIMARKb,_a_MIMARKint_MIMARKb| 
                                          if ( 
                                            begin
                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 1386 ); 
                                                _null_QUMARK(
                                                    begin
                                                        trampCall(_a_MIMARKb)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1390"] + __e.backtrace ) ; raise __e
                                                    end
                                                )
                                            end
                                           ) then
                                              begin
                                                  begin
                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1385 ); 
                                                      trampCall( self._lset_MIMARKdifference_EXMARK_METHOD(  'lset-difference!',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_lset_MIMARKdifference_EXMARK') then
                                                              trampCall(@_lset_MIMARKdifference_EXMARK)
                                                            else raise NameError.new( "Error: undefined variable _lset_MIMARKdifference_EXMARK", "_lset_MIMARKdifference_EXMARK" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1385"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                      [
                                                            begin
                                                                trampCall(__EQMARK)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1388"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            begin
                                                                trampCall(_b)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1391"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            begin
                                                                trampCall(_a)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1386"] + __e.backtrace ) ; raise __e
                                                            end
                                                      ]
                                                                   ))
                                                  end
                                              end
                                          else
                                              if ( 
                                                begin
                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 1386 ); 
                                                    _null_QUMARK(
                                                        begin
                                                            trampCall(_a_MIMARKint_MIMARKb)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1388"] + __e.backtrace ) ; raise __e
                                                        end
                                                    )
                                                end
                                               ) then
                                                  begin
                                                      begin
                                                        embedBacktraceInfo( "./lib/srfi-1.nnd", 1386 ); 
                                                          trampCall( self._append_EXMARK_METHOD(  'append!',
                                                              begin
                                                                if @global_lisp_binding.has_key?('_append_EXMARK') then
                                                                  trampCall(@_append_EXMARK)
                                                                else raise NameError.new( "Error: undefined variable _append_EXMARK", "_append_EXMARK" ) end
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1386"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                          [
                                                                begin
                                                                    trampCall(_b)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1391"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                begin
                                                                    trampCall(_a)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1386"] + __e.backtrace ) ; raise __e
                                                                end
                                                          ]
                                                                       ))
                                                      end
                                                  end
                                              else
                                                  if ( 
                                                  true
                                                   ) then
                                                      begin
                                                          begin
                                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 1387 ); 
                                                              trampCall( self._pair_MIMARKfold_METHOD(  'pair-fold',
                                                                  begin
                                                                    if @global_lisp_binding.has_key?('_pair_MIMARKfold') then
                                                                      trampCall(@_pair_MIMARKfold)
                                                                    else raise NameError.new( "Error: undefined variable _pair_MIMARKfold", "_pair_MIMARKfold" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1387"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                              [
                                                                    Proc.new { |_b_MIMARKpair,_ans| 
                                                                        if ( 
                                                                          begin
                                                                            embedBacktraceInfo( "./lib/srfi-1.nnd", 1388 ); 
                                                                              trampCall( self._member_METHOD(  'member',
                                                                                  begin
                                                                                    if @global_lisp_binding.has_key?('_member') then
                                                                                      trampCall(@_member)
                                                                                    else raise NameError.new( "Error: undefined variable _member", "_member" ) end
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1388"] + __e.backtrace ) ; raise __e
                                                                                  end                                                                                ,
                                                                              [
                                                                                    begin
                                                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1388 ); 
                                                                                        _car(
                                                                                            begin
                                                                                                trampCall(_b_MIMARKpair)
                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1389"] + __e.backtrace ) ; raise __e
                                                                                            end
                                                                                        )
                                                                                    end                                                                                  ,
                                                                                    begin
                                                                                        trampCall(_a_MIMARKint_MIMARKb)
                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1388"] + __e.backtrace ) ; raise __e
                                                                                    end                                                                                  ,
                                                                                    begin
                                                                                        trampCall(__EQMARK)
                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1388"] + __e.backtrace ) ; raise __e
                                                                                    end
                                                                              ]
                                                                                           ))
                                                                          end
                                                                         ) then
                                                                            begin
                                                                                trampCall(_ans)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1389"] + __e.backtrace ) ; raise __e
                                                                            end
                                                                        else
                                                                            begin
                                                                                begin
                                                                                  embedBacktraceInfo( "./lib/srfi-1.nnd", 1389 ); 
                                                                                    _set_MIMARKcdr_EXMARK(
                                                                                        begin
                                                                                            trampCall(_b_MIMARKpair)
                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1389"] + __e.backtrace ) ; raise __e
                                                                                        end                                                                                      ,
                                                                                        begin
                                                                                            trampCall(_ans)
                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1389"] + __e.backtrace ) ; raise __e
                                                                                        end
                                                                                    )
                                                                                end
                                                                                begin
                                                                                    trampCall(_b_MIMARKpair)
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1389"] + __e.backtrace ) ; raise __e
                                                                                end
                                                                            end
                                                                        end
                                                                    }                                                                  ,
                                                                    begin
                                                                        trampCall(_a_MIMARKb)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1390"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                    begin
                                                                        trampCall(_b)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1391"] + __e.backtrace ) ; raise __e
                                                                    end
                                                              ]
                                                                           ))
                                                          end
                                                      end
                                                  else
                                                      Cell.new()
                                                  end
                                              end
                                          end
                                      }
                                ]
                                             ))
                            end
                        }                      ,
                      Cell.new()                      ,
                        begin
                            trampCall(_lists)
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1392"] + __e.backtrace ) ; raise __e
                        end
                  ]
                               )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._lset_MIMARKdiff_PLMARKintersection_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_lset_MIMARKdiff_PLMARKintersection', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_lset_MIMARKdiff_PLMARKintersection'] = self.method( :_lset_MIMARKdiff_PLMARKintersection_METHOD )
    @_lset_MIMARKdiff_PLMARKintersection = 
    trampCall(
          Proc.new { |__EQMARK,_lis1,*__rest__| _lists = __rest__[0] ;  
              begin
              end
              if ( 
                begin
                  embedBacktraceInfo( "./lib/srfi-1.nnd", 1397 ); 
                    trampCall( self._every_METHOD(  'every',
                        begin
                          if @global_lisp_binding.has_key?('_every') then
                            trampCall(@_every)
                          else raise NameError.new( "Error: undefined variable _every", "_every" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1397"] + __e.backtrace ) ; raise __e
                        end                      ,
                    [
                          begin
                            if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                              trampCall(@_null_MIMARKlist_QUMARK)
                            else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1397"] + __e.backtrace ) ; raise __e
                          end                        ,
                          begin
                              trampCall(_lists)
                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1401"] + __e.backtrace ) ; raise __e
                          end
                    ]
                                 ))
                end
               ) then
                  begin
                      begin
                        embedBacktraceInfo( "./lib/srfi-1.nnd", 1398 ); 
                          delayCall( '_values',  'values',
                              begin
                                if @global_lisp_binding.has_key?('_values') then
                                  trampCall(@_values)
                                else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1398"] + __e.backtrace ) ; raise __e
                              end                            ,
                          [
                                begin
                                    trampCall(_lis1)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1402"] + __e.backtrace ) ; raise __e
                                end                              ,
                              Cell.new()
                          ]
                                       )
                      end
                  end
              else
                  if ( 
                    begin
                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1398 ); 
                        trampCall( self._memq_METHOD(  'memq',
                            begin
                              if @global_lisp_binding.has_key?('_memq') then
                                trampCall(@_memq)
                              else raise NameError.new( "Error: undefined variable _memq", "_memq" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1398"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              begin
                                  trampCall(_lis1)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1402"] + __e.backtrace ) ; raise __e
                              end                            ,
                              begin
                                  trampCall(_lists)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1401"] + __e.backtrace ) ; raise __e
                              end
                        ]
                                     ))
                    end
                   ) then
                      begin
                          begin
                            embedBacktraceInfo( "./lib/srfi-1.nnd", 1398 ); 
                              delayCall( '_values',  'values',
                                  begin
                                    if @global_lisp_binding.has_key?('_values') then
                                      trampCall(@_values)
                                    else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1398"] + __e.backtrace ) ; raise __e
                                  end                                ,
                              [
                                  Cell.new()                                  ,
                                    begin
                                        trampCall(_lis1)
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1402"] + __e.backtrace ) ; raise __e
                                    end
                              ]
                                           )
                          end
                      end
                  else
                      if ( 
                      true
                       ) then
                          begin
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 1399 ); 
                                  delayCall( '_partition',  'partition',
                                      begin
                                        if @global_lisp_binding.has_key?('_partition') then
                                          trampCall(@_partition)
                                        else raise NameError.new( "Error: undefined variable _partition", "_partition" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1399"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        Proc.new { |_elt| 
                                            begin
                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 1400 ); 
                                                _not(
                                                    begin
                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1400 ); 
                                                        trampCall( self._any_METHOD(  'any',
                                                            begin
                                                              if @global_lisp_binding.has_key?('_any') then
                                                                trampCall(@_any)
                                                              else raise NameError.new( "Error: undefined variable _any", "_any" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1400"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                        [
                                                              Proc.new { |_lis| 
                                                                  begin
                                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1400 ); 
                                                                      trampCall( self._member_METHOD(  'member',
                                                                          begin
                                                                            if @global_lisp_binding.has_key?('_member') then
                                                                              trampCall(@_member)
                                                                            else raise NameError.new( "Error: undefined variable _member", "_member" ) end
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1400"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                      [
                                                                            begin
                                                                                trampCall(_elt)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1400"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                            begin
                                                                                trampCall(_lis)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1400"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                            begin
                                                                                trampCall(__EQMARK)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1400"] + __e.backtrace ) ; raise __e
                                                                            end
                                                                      ]
                                                                                   ))
                                                                  end
                                                              }                                                            ,
                                                              begin
                                                                  trampCall(_lists)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1401"] + __e.backtrace ) ; raise __e
                                                              end
                                                        ]
                                                                     ))
                                                    end
                                                )
                                            end
                                        }                                      ,
                                        begin
                                            trampCall(_lis1)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1402"] + __e.backtrace ) ; raise __e
                                        end
                                  ]
                                               )
                              end
                          end
                      else
                          Cell.new()
                      end
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._lset_MIMARKdiff_PLMARKintersection_EXMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_lset_MIMARKdiff_PLMARKintersection_EXMARK', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_lset_MIMARKdiff_PLMARKintersection_EXMARK'] = self.method( :_lset_MIMARKdiff_PLMARKintersection_EXMARK_METHOD )
    @_lset_MIMARKdiff_PLMARKintersection_EXMARK = 
    trampCall(
          Proc.new { |__EQMARK,_lis1,*__rest__| _lists = __rest__[0] ;  
              begin
              end
              if ( 
                begin
                  embedBacktraceInfo( "./lib/srfi-1.nnd", 1406 ); 
                    trampCall( self._every_METHOD(  'every',
                        begin
                          if @global_lisp_binding.has_key?('_every') then
                            trampCall(@_every)
                          else raise NameError.new( "Error: undefined variable _every", "_every" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1406"] + __e.backtrace ) ; raise __e
                        end                      ,
                    [
                          begin
                            if @global_lisp_binding.has_key?('_null_MIMARKlist_QUMARK') then
                              trampCall(@_null_MIMARKlist_QUMARK)
                            else raise NameError.new( "Error: undefined variable _null_MIMARKlist_QUMARK", "_null_MIMARKlist_QUMARK" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1406"] + __e.backtrace ) ; raise __e
                          end                        ,
                          begin
                              trampCall(_lists)
                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1410"] + __e.backtrace ) ; raise __e
                          end
                    ]
                                 ))
                end
               ) then
                  begin
                      begin
                        embedBacktraceInfo( "./lib/srfi-1.nnd", 1407 ); 
                          delayCall( '_values',  'values',
                              begin
                                if @global_lisp_binding.has_key?('_values') then
                                  trampCall(@_values)
                                else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1407"] + __e.backtrace ) ; raise __e
                              end                            ,
                          [
                                begin
                                    trampCall(_lis1)
                                  rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1411"] + __e.backtrace ) ; raise __e
                                end                              ,
                              Cell.new()
                          ]
                                       )
                      end
                  end
              else
                  if ( 
                    begin
                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1407 ); 
                        trampCall( self._memq_METHOD(  'memq',
                            begin
                              if @global_lisp_binding.has_key?('_memq') then
                                trampCall(@_memq)
                              else raise NameError.new( "Error: undefined variable _memq", "_memq" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1407"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              begin
                                  trampCall(_lis1)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1411"] + __e.backtrace ) ; raise __e
                              end                            ,
                              begin
                                  trampCall(_lists)
                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1410"] + __e.backtrace ) ; raise __e
                              end
                        ]
                                     ))
                    end
                   ) then
                      begin
                          begin
                            embedBacktraceInfo( "./lib/srfi-1.nnd", 1407 ); 
                              delayCall( '_values',  'values',
                                  begin
                                    if @global_lisp_binding.has_key?('_values') then
                                      trampCall(@_values)
                                    else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1407"] + __e.backtrace ) ; raise __e
                                  end                                ,
                              [
                                  Cell.new()                                  ,
                                    begin
                                        trampCall(_lis1)
                                      rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1411"] + __e.backtrace ) ; raise __e
                                    end
                              ]
                                           )
                          end
                      end
                  else
                      if ( 
                      true
                       ) then
                          begin
                              begin
                                embedBacktraceInfo( "./lib/srfi-1.nnd", 1408 ); 
                                  delayCall( '_partition_EXMARK',  'partition!',
                                      begin
                                        if @global_lisp_binding.has_key?('_partition_EXMARK') then
                                          trampCall(@_partition_EXMARK)
                                        else raise NameError.new( "Error: undefined variable _partition_EXMARK", "_partition_EXMARK" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1408"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        Proc.new { |_elt| 
                                            begin
                                              embedBacktraceInfo( "./lib/srfi-1.nnd", 1409 ); 
                                                _not(
                                                    begin
                                                      embedBacktraceInfo( "./lib/srfi-1.nnd", 1409 ); 
                                                        trampCall( self._any_METHOD(  'any',
                                                            begin
                                                              if @global_lisp_binding.has_key?('_any') then
                                                                trampCall(@_any)
                                                              else raise NameError.new( "Error: undefined variable _any", "_any" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1409"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                        [
                                                              Proc.new { |_lis| 
                                                                  begin
                                                                    embedBacktraceInfo( "./lib/srfi-1.nnd", 1409 ); 
                                                                      trampCall( self._member_METHOD(  'member',
                                                                          begin
                                                                            if @global_lisp_binding.has_key?('_member') then
                                                                              trampCall(@_member)
                                                                            else raise NameError.new( "Error: undefined variable _member", "_member" ) end
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1409"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                      [
                                                                            begin
                                                                                trampCall(_elt)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1409"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                            begin
                                                                                trampCall(_lis)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1409"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                            begin
                                                                                trampCall(__EQMARK)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1409"] + __e.backtrace ) ; raise __e
                                                                            end
                                                                      ]
                                                                                   ))
                                                                  end
                                                              }                                                            ,
                                                              begin
                                                                  trampCall(_lists)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1410"] + __e.backtrace ) ; raise __e
                                                              end
                                                        ]
                                                                     ))
                                                    end
                                                )
                                            end
                                        }                                      ,
                                        begin
                                            trampCall(_lis1)
                                          rescue => __e ; __e.set_backtrace( ["./lib/srfi-1.nnd:1411"] + __e.backtrace ) ; raise __e
                                        end
                                  ]
                                               )
                              end
                          end
                      else
                          Cell.new()
                      end
                  end
              end
          }
    )
  end
 )


# -------------------------------------------------------
# [EOF]
# -------------------------------------------------------
