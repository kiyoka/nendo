#
#    This file is nendo's compiled library file. 
#    generated  "nendo -c src" command. 
# 

trampCall( 
  begin
      def self._html_MIMARKescape_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
      @global_lisp_binding['_html_MIMARKescape'] = self.method( :_html_MIMARKescape_METHOD )
    @_html_MIMARKescape = 
    trampCall(
          Proc.new { |_c| 
              begin
                ___lambda = lambda { |___gensym__7421c160c97efe3fa4b72b1f1f8b235cd6625c27_20023| 
                    if ( 
                      begin
                        ___lambda = lambda { |___gensym__7421c160c97efe3fa4b72b1f1f8b235cd6625c27_20029| 
                            if ( 
                              begin
                                  trampCall(___gensym__7421c160c97efe3fa4b72b1f1f8b235cd6625c27_20029)
                                rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                              end
                             ) then
                                begin
                                    trampCall(___gensym__7421c160c97efe3fa4b72b1f1f8b235cd6625c27_20029)
                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                end
                            else
                              false
                            end
                        } ; ___lambda.call(
                              trampCall( self._eqv_QUMARK_METHOD( 'eqv?',
                                  begin
                                    if @global_lisp_binding.has_key?('_eqv_QUMARK') then
                                      trampCall(@_eqv_QUMARK)
                                    else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:143"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                  "<"                                  ,Cell.new(
                                    begin
                                        trampCall(___gensym__7421c160c97efe3fa4b72b1f1f8b235cd6625c27_20023)
                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                    end
                                           ))))
                                   )
                      end
                     ) then
                        begin
                          "&lt;"
                        end
                    else
                        if ( 
                          begin
                            ___lambda = lambda { |___gensym__7421c160c97efe3fa4b72b1f1f8b235cd6625c27_20030| 
                                if ( 
                                  begin
                                      trampCall(___gensym__7421c160c97efe3fa4b72b1f1f8b235cd6625c27_20030)
                                    rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                  end
                                 ) then
                                    begin
                                        trampCall(___gensym__7421c160c97efe3fa4b72b1f1f8b235cd6625c27_20030)
                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                    end
                                else
                                  false
                                end
                            } ; ___lambda.call(
                                  trampCall( self._eqv_QUMARK_METHOD( 'eqv?',
                                      begin
                                        if @global_lisp_binding.has_key?('_eqv_QUMARK') then
                                          trampCall(@_eqv_QUMARK)
                                        else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:143"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                      ">"                                      ,Cell.new(
                                        begin
                                            trampCall(___gensym__7421c160c97efe3fa4b72b1f1f8b235cd6625c27_20023)
                                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                        end
                                               ))))
                                       )
                          end
                         ) then
                            begin
                              "&gt;"
                            end
                        else
                            if ( 
                              begin
                                ___lambda = lambda { |___gensym__7421c160c97efe3fa4b72b1f1f8b235cd6625c27_20031| 
                                    if ( 
                                      begin
                                          trampCall(___gensym__7421c160c97efe3fa4b72b1f1f8b235cd6625c27_20031)
                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                      end
                                     ) then
                                        begin
                                            trampCall(___gensym__7421c160c97efe3fa4b72b1f1f8b235cd6625c27_20031)
                                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                        end
                                    else
                                      false
                                    end
                                } ; ___lambda.call(
                                      trampCall( self._eqv_QUMARK_METHOD( 'eqv?',
                                          begin
                                            if @global_lisp_binding.has_key?('_eqv_QUMARK') then
                                              trampCall(@_eqv_QUMARK)
                                            else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:143"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                          "&"                                          ,Cell.new(
                                            begin
                                                trampCall(___gensym__7421c160c97efe3fa4b72b1f1f8b235cd6625c27_20023)
                                              rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                            end
                                                   ))))
                                           )
                              end
                             ) then
                                begin
                                  "&amp;"
                                end
                            else
                                if ( 
                                  begin
                                    ___lambda = lambda { |___gensym__7421c160c97efe3fa4b72b1f1f8b235cd6625c27_20032| 
                                        if ( 
                                          begin
                                              trampCall(___gensym__7421c160c97efe3fa4b72b1f1f8b235cd6625c27_20032)
                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                          end
                                         ) then
                                            begin
                                                trampCall(___gensym__7421c160c97efe3fa4b72b1f1f8b235cd6625c27_20032)
                                              rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                            end
                                        else
                                          false
                                        end
                                    } ; ___lambda.call(
                                          trampCall( self._eqv_QUMARK_METHOD( 'eqv?',
                                              begin
                                                if @global_lisp_binding.has_key?('_eqv_QUMARK') then
                                                  trampCall(@_eqv_QUMARK)
                                                else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:143"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                              "\""                                              ,Cell.new(
                                                begin
                                                    trampCall(___gensym__7421c160c97efe3fa4b72b1f1f8b235cd6625c27_20023)
                                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                end
                                                       ))))
                                               )
                                  end
                                 ) then
                                    begin
                                      "&quot;"
                                    end
                                else
                                    if ( 
                                    true
                                     ) then
                                        begin
                                            begin
                                                trampCall(_c)
                                              rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:46"] + __e.backtrace ) ; raise __e
                                            end
                                        end
                                    else
                                        Cell.new()
                                    end
                                end
                            end
                        end
                    end
                } ; ___lambda.call(
                      begin
                          trampCall(_c)
                        rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:46"] + __e.backtrace ) ; raise __e
                      end
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._html_MIMARKescape_MIMARKstring_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
      @global_lisp_binding['_html_MIMARKescape_MIMARKstring'] = self.method( :_html_MIMARKescape_MIMARKstring_METHOD )
    @_html_MIMARKescape_MIMARKstring = 
    trampCall(
          Proc.new { |_string| 
              DelayedCallPacket.new( 'string-join',
                  begin
                    if @global_lisp_binding.has_key?('_string_MIMARKjoin') then
                      trampCall(@_string_MIMARKjoin)
                    else raise NameError.new( "Error: undefined variable _string_MIMARKjoin", "_string_MIMARKjoin" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:49"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    trampCall( self._map_METHOD( 'map',
                        begin
                          if @global_lisp_binding.has_key?('_map') then
                            trampCall(@_map)
                          else raise NameError.new( "Error: undefined variable _map", "_map" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:50"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                            if @global_lisp_binding.has_key?('_html_MIMARKescape') then
                              trampCall(@_html_MIMARKescape)
                            else raise NameError.new( "Error: undefined variable _html_MIMARKescape", "_html_MIMARKescape" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:51"] + __e.backtrace ) ; raise __e
                          end                        ,Cell.new(
                          trampCall( self._to_MIMARKlist_METHOD( 'to-list',
                              begin
                                if @global_lisp_binding.has_key?('_to_MIMARKlist') then
                                  trampCall(@_to_MIMARKlist)
                                else raise NameError.new( "Error: undefined variable _to_MIMARKlist", "_to_MIMARKlist" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:52"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    trampCall(_string).split(
                                        ""
                                      )
                                  rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:52"] + __e.backtrace ) ; raise __e
                                end
                                       )))
                                 ))))                  ,Cell.new(
                  ""
                           )))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self.__ASMARKdoctype_MIMARKalist_ASMARK_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
      @global_lisp_binding['__ASMARKdoctype_MIMARKalist_ASMARK'] = self.method( :__ASMARKdoctype_MIMARKalist_ASMARK_METHOD )
    @__ASMARKdoctype_MIMARKalist_ASMARK = 
    trampCall(
        Cell.new(Cell.new(Cell.new(LispKeyword.new( "strict" ),Cell.new(LispKeyword.new( "html" ),Cell.new(LispKeyword.new( "html-strict" ),Cell.new(LispKeyword.new( "html-4.01" ),Cell.new(LispKeyword.new( "html-4.01-strict" )))))),Cell.new(false,Cell.new("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"
       \"http://www.w3.org/TR/html4/strict.dtd\">
"))),Cell.new(Cell.new(Cell.new(LispKeyword.new( "transitional" ),Cell.new(LispKeyword.new( "html-transitional" ),Cell.new(LispKeyword.new( "html-4.01-transitional" )))),Cell.new(false,Cell.new("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"
       \"http://www.w3.org/TR/html4/loose.dtd\">
"))),Cell.new(Cell.new(Cell.new(LispKeyword.new( "frameset" ),Cell.new(LispKeyword.new( "html-frameset" ),Cell.new(LispKeyword.new( "html-4.01-frameset" )))),Cell.new(false,Cell.new("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Frameset//EN\"
       \"http://www.w3.org/TR/html4/frameset.dtd\">
"))),Cell.new(Cell.new(Cell.new(LispKeyword.new( "xhtml-1.0-strict" ),Cell.new(LispKeyword.new( "xhtml-1.0" ))),Cell.new(true,Cell.new("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"
       \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">
"))),Cell.new(Cell.new(Cell.new(LispKeyword.new( "xhtml-1.0-transitional" )),Cell.new(true,Cell.new("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"
       \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">
"))),Cell.new(Cell.new(Cell.new(LispKeyword.new( "xhtml-1.0-frameset" )),Cell.new(true,Cell.new("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\"
       \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">
"))),Cell.new(Cell.new(Cell.new(LispKeyword.new( "xhtml-1.1" )),Cell.new(true,Cell.new("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\"
       \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">
"))))))))))
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._html_MIMARKdoctype_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
      @global_lisp_binding['_html_MIMARKdoctype'] = self.method( :_html_MIMARKdoctype_METHOD )
    @_html_MIMARKdoctype = 
    trampCall(
          Proc.new { |*__rest__| _type = __rest__[0] ;  
              begin
                ___lambda = lambda { |_type| 
                    if ( 
                      begin
                          def self.___gensym__7421c160c97efe3fa4b72b1f1f8b235cd6625c27_20034_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
                          @global_lisp_binding['___gensym__7421c160c97efe3fa4b72b1f1f8b235cd6625c27_20034'] = self.method( :___gensym__7421c160c97efe3fa4b72b1f1f8b235cd6625c27_20034_METHOD )
                        @___gensym__7421c160c97efe3fa4b72b1f1f8b235cd6625c27_20034 = 
                        trampCall(
                              trampCall( self._find_METHOD( 'find',
                                  begin
                                    if @global_lisp_binding.has_key?('_find') then
                                      trampCall(@_find)
                                    else raise NameError.new( "Error: undefined variable _find", "_find" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:97"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    Proc.new { |_e| 
                                        trampCall( self._memq_METHOD( 'memq',
                                            begin
                                              if @global_lisp_binding.has_key?('_memq') then
                                                trampCall(@_memq)
                                              else raise NameError.new( "Error: undefined variable _memq", "_memq" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:97"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              begin
                                                  trampCall(_type)
                                                rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:99"] + __e.backtrace ) ; raise __e
                                              end                                            ,Cell.new(
                                              trampCall( self._car_METHOD( 'car',
                                                  begin
                                                    if @global_lisp_binding.has_key?('_car') then
                                                      trampCall(@_car)
                                                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:97"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    begin
                                                        trampCall(_e)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:97"] + __e.backtrace ) ; raise __e
                                                    end
                                                           )))
                                                     ))))
                                    }                                  ,Cell.new(
                                    begin
                                      if @global_lisp_binding.has_key?('__ASMARKdoctype_MIMARKalist_ASMARK') then
                                        trampCall(@__ASMARKdoctype_MIMARKalist_ASMARK)
                                      else raise NameError.new( "Error: undefined variable __ASMARKdoctype_MIMARKalist_ASMARK", "__ASMARKdoctype_MIMARKalist_ASMARK" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:97"] + __e.backtrace ) ; raise __e
                                    end
                                           ))))
                        )
                      end
                     ) then
                        DelayedCallPacket.new( 'caddr',
                            begin
                              if @global_lisp_binding.has_key?('_caddr') then
                                trampCall(@_caddr)
                              else raise NameError.new( "Error: undefined variable _caddr", "_caddr" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:98"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                if @global_lisp_binding.has_key?('___gensym__7421c160c97efe3fa4b72b1f1f8b235cd6625c27_20034') then
                                  trampCall(@___gensym__7421c160c97efe3fa4b72b1f1f8b235cd6625c27_20034)
                                else raise NameError.new( "Error: undefined variable ___gensym__7421c160c97efe3fa4b72b1f1f8b235cd6625c27_20034", "___gensym__7421c160c97efe3fa4b72b1f1f8b235cd6625c27_20034" ) end
                                rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                              end
                                     ))
                    else
                        if ( 
                        true
                         ) then
                            begin
                                begin raise RuntimeError, 
                                "Unknown doctype type spec"
                                rescue => __e 
                                  __e.set_backtrace( ["./lib/text/html-lite.nnd:99"] + __e.backtrace )
                                  raise __e
                                end 
                            end
                        else
                            Cell.new()
                        end
                    end
                } ; ___lambda.call(
                      if ( 
                        trampCall( self._null_QUMARK_METHOD( 'null?',
                            begin
                              if @global_lisp_binding.has_key?('_null_QUMARK') then
                                trampCall(@_null_QUMARK)
                              else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:94"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  trampCall(_type)
                                rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:99"] + __e.backtrace ) ; raise __e
                              end
                                     )))
                       ) then
                        LispKeyword.new( "html-4.01-strict" )
                      else
                          begin
                              trampCall(_type)
                            rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:99"] + __e.backtrace ) ; raise __e
                          end
                      end
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._make_MIMARKhtml_MIMARKelement_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
      @global_lisp_binding['_make_MIMARKhtml_MIMARKelement'] = self.method( :_make_MIMARKhtml_MIMARKelement_METHOD )
    @_make_MIMARKhtml_MIMARKelement = 
    trampCall(
          Proc.new { |_name,*__rest__| _args = __rest__[0] ;  
              begin
                ___lambda = lambda { |_get_MIMARKattr| 
                    _get_MIMARKattr                     = 
                      Proc.new { |_args,_attrs| 
                          if ( 
                            trampCall( self._null_QUMARK_METHOD( 'null?',
                                begin
                                  if @global_lisp_binding.has_key?('_null_QUMARK') then
                                    trampCall(@_null_QUMARK)
                                  else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:126"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      trampCall(_args)
                                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:131"] + __e.backtrace ) ; raise __e
                                  end
                                         )))
                           ) then
                              begin
                                  DelayedCallPacket.new( 'values',
                                      begin
                                        if @global_lisp_binding.has_key?('_values') then
                                          trampCall(@_values)
                                        else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:120"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        trampCall( self._reverse_METHOD( 'reverse',
                                            begin
                                              if @global_lisp_binding.has_key?('_reverse') then
                                                trampCall(@_reverse)
                                              else raise NameError.new( "Error: undefined variable _reverse", "_reverse" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:120"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              begin
                                                  trampCall(_attrs)
                                                rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:120"] + __e.backtrace ) ; raise __e
                                              end
                                                     )))                                      ,Cell.new(
                                        begin
                                            trampCall(_args)
                                          rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:131"] + __e.backtrace ) ; raise __e
                                        end
                                               )))
                              end
                          else
                              if ( 
                                trampCall( self._keyword_QUMARK_METHOD( 'keyword?',
                                    begin
                                      if @global_lisp_binding.has_key?('_keyword_QUMARK') then
                                        trampCall(@_keyword_QUMARK)
                                      else raise NameError.new( "Error: undefined variable _keyword_QUMARK", "_keyword_QUMARK" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:106"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      trampCall( self._car_METHOD( 'car',
                                          begin
                                            if @global_lisp_binding.has_key?('_car') then
                                              trampCall(@_car)
                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:117"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                trampCall(_args)
                                              rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:131"] + __e.backtrace ) ; raise __e
                                            end
                                                   )))
                                             )))
                               ) then
                                  begin
                                      if ( 
                                        trampCall( self._null_QUMARK_METHOD( 'null?',
                                            begin
                                              if @global_lisp_binding.has_key?('_null_QUMARK') then
                                                trampCall(@_null_QUMARK)
                                              else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:126"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              trampCall( self._cdr_METHOD( 'cdr',
                                                  begin
                                                    if @global_lisp_binding.has_key?('_cdr') then
                                                      trampCall(@_cdr)
                                                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:107"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    begin
                                                        trampCall(_args)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:131"] + __e.backtrace ) ; raise __e
                                                    end
                                                           )))
                                                     )))
                                       ) then
                                          begin
                                              DelayedCallPacket.new( 'values',
                                                  begin
                                                    if @global_lisp_binding.has_key?('_values') then
                                                      trampCall(@_values)
                                                    else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:120"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    trampCall( self._reverse_METHOD( 'reverse',
                                                        begin
                                                          if @global_lisp_binding.has_key?('_reverse') then
                                                            trampCall(@_reverse)
                                                          else raise NameError.new( "Error: undefined variable _reverse", "_reverse" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:120"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                          trampCall( self._list_ASMARK_METHOD( 'list*',
                                                              begin
                                                                if @global_lisp_binding.has_key?('_list_ASMARK') then
                                                                  trampCall(@_list_ASMARK)
                                                                else raise NameError.new( "Error: undefined variable _list_ASMARK", "_list_ASMARK" ) end
                                                                rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:115"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                                trampCall( self._car_METHOD( 'car',
                                                                    begin
                                                                      if @global_lisp_binding.has_key?('_car') then
                                                                        trampCall(@_car)
                                                                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:117"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                    Cell.new(
                                                                      begin
                                                                          trampCall(_args)
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:131"] + __e.backtrace ) ; raise __e
                                                                      end
                                                                             )))                                                              ,Cell.new(
                                                              " "                                                              ,Cell.new(
                                                                begin
                                                                    trampCall(_attrs)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:120"] + __e.backtrace ) ; raise __e
                                                                end
                                                                       )))))
                                                                 )))                                                  ,Cell.new(
                                                    begin
                                                        trampCall(_args)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:131"] + __e.backtrace ) ; raise __e
                                                    end
                                                           )))
                                          end
                                      else
                                          if ( 
                                            trampCall( self._eq_QUMARK_METHOD( 'eq?',
                                                begin
                                                  if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                    trampCall(@_eq_QUMARK)
                                                  else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:111"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  trampCall( self._cadr_METHOD( 'cadr',
                                                      begin
                                                        if @global_lisp_binding.has_key?('_cadr') then
                                                          trampCall(@_cadr)
                                                        else raise NameError.new( "Error: undefined variable _cadr", "_cadr" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:116"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        begin
                                                            trampCall(_args)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:131"] + __e.backtrace ) ; raise __e
                                                        end
                                                               )))                                                ,Cell.new(
                                                false
                                                         ))))
                                           ) then
                                              begin
                                                  DelayedCallPacket.new( 'get-attr',
                                                      begin
                                                          trampCall(_get_MIMARKattr)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:130"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        trampCall( self._cddr_METHOD( 'cddr',
                                                            begin
                                                              if @global_lisp_binding.has_key?('_cddr') then
                                                                trampCall(@_cddr)
                                                              else raise NameError.new( "Error: undefined variable _cddr", "_cddr" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:114"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              begin
                                                                  trampCall(_args)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:131"] + __e.backtrace ) ; raise __e
                                                              end
                                                                     )))                                                      ,Cell.new(
                                                        begin
                                                            trampCall(_attrs)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:120"] + __e.backtrace ) ; raise __e
                                                        end
                                                               )))
                                              end
                                          else
                                              if ( 
                                                trampCall( self._eq_QUMARK_METHOD( 'eq?',
                                                    begin
                                                      if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                        trampCall(@_eq_QUMARK)
                                                      else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:111"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      trampCall( self._cadr_METHOD( 'cadr',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_cadr') then
                                                              trampCall(@_cadr)
                                                            else raise NameError.new( "Error: undefined variable _cadr", "_cadr" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:116"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            begin
                                                                trampCall(_args)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:131"] + __e.backtrace ) ; raise __e
                                                            end
                                                                   )))                                                    ,Cell.new(
                                                    true
                                                             ))))
                                               ) then
                                                  begin
                                                      DelayedCallPacket.new( 'get-attr',
                                                          begin
                                                              trampCall(_get_MIMARKattr)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:130"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            trampCall( self._cddr_METHOD( 'cddr',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_cddr') then
                                                                    trampCall(@_cddr)
                                                                  else raise NameError.new( "Error: undefined variable _cddr", "_cddr" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:114"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                  begin
                                                                      trampCall(_args)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:131"] + __e.backtrace ) ; raise __e
                                                                  end
                                                                         )))                                                          ,Cell.new(
                                                            trampCall( self._list_ASMARK_METHOD( 'list*',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_list_ASMARK') then
                                                                    trampCall(@_list_ASMARK)
                                                                  else raise NameError.new( "Error: undefined variable _list_ASMARK", "_list_ASMARK" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:115"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                  trampCall( self._car_METHOD( 'car',
                                                                      begin
                                                                        if @global_lisp_binding.has_key?('_car') then
                                                                          trampCall(@_car)
                                                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:117"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                      Cell.new(
                                                                        begin
                                                                            trampCall(_args)
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:131"] + __e.backtrace ) ; raise __e
                                                                        end
                                                                               )))                                                                ,Cell.new(
                                                                " "                                                                ,Cell.new(
                                                                  begin
                                                                      trampCall(_attrs)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:120"] + __e.backtrace ) ; raise __e
                                                                  end
                                                                         )))))
                                                                   )))
                                                  end
                                              else
                                                  if ( 
                                                  true
                                                   ) then
                                                      begin
                                                          DelayedCallPacket.new( 'get-attr',
                                                              begin
                                                                  trampCall(_get_MIMARKattr)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:130"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                                trampCall( self._cddr_METHOD( 'cddr',
                                                                    begin
                                                                      if @global_lisp_binding.has_key?('_cddr') then
                                                                        trampCall(@_cddr)
                                                                      else raise NameError.new( "Error: undefined variable _cddr", "_cddr" ) end
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:114"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                    Cell.new(
                                                                      begin
                                                                          trampCall(_args)
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:131"] + __e.backtrace ) ; raise __e
                                                                      end
                                                                             )))                                                              ,Cell.new(
                                                                trampCall( self._list_ASMARK_METHOD( 'list*',
                                                                    begin
                                                                      if @global_lisp_binding.has_key?('_list_ASMARK') then
                                                                        trampCall(@_list_ASMARK)
                                                                      else raise NameError.new( "Error: undefined variable _list_ASMARK", "_list_ASMARK" ) end
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:115"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                    Cell.new(
                                                                      trampCall( self._sprintf_METHOD( 'sprintf',
                                                                          begin
                                                                            if @global_lisp_binding.has_key?('_sprintf') then
                                                                              trampCall(@_sprintf)
                                                                            else raise NameError.new( "Error: undefined variable _sprintf", "_sprintf" ) end
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:115"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                          Cell.new(
                                                                          "=\"%s\""                                                                          ,Cell.new(
                                                                            trampCall( self._html_MIMARKescape_MIMARKstring_METHOD( 'html-escape-string',
                                                                                begin
                                                                                  if @global_lisp_binding.has_key?('_html_MIMARKescape_MIMARKstring') then
                                                                                    trampCall(@_html_MIMARKescape_MIMARKstring)
                                                                                  else raise NameError.new( "Error: undefined variable _html_MIMARKescape_MIMARKstring", "_html_MIMARKescape_MIMARKstring" ) end
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:116"] + __e.backtrace ) ; raise __e
                                                                                end                                                                              ,
                                                                                Cell.new(
                                                                                  trampCall( self._x_MIMARK_GTMARKstring_METHOD( 'x->string',
                                                                                      begin
                                                                                        if @global_lisp_binding.has_key?('_x_MIMARK_GTMARKstring') then
                                                                                          trampCall(@_x_MIMARK_GTMARKstring)
                                                                                        else raise NameError.new( "Error: undefined variable _x_MIMARK_GTMARKstring", "_x_MIMARK_GTMARKstring" ) end
                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:116"] + __e.backtrace ) ; raise __e
                                                                                      end                                                                                    ,
                                                                                      Cell.new(
                                                                                        trampCall( self._cadr_METHOD( 'cadr',
                                                                                            begin
                                                                                              if @global_lisp_binding.has_key?('_cadr') then
                                                                                                trampCall(@_cadr)
                                                                                              else raise NameError.new( "Error: undefined variable _cadr", "_cadr" ) end
                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:116"] + __e.backtrace ) ; raise __e
                                                                                            end                                                                                          ,
                                                                                            Cell.new(
                                                                                              begin
                                                                                                  trampCall(_args)
                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:131"] + __e.backtrace ) ; raise __e
                                                                                              end
                                                                                                     )))
                                                                                               )))
                                                                                         )))
                                                                                   ))))                                                                    ,Cell.new(
                                                                      trampCall( self._car_METHOD( 'car',
                                                                          begin
                                                                            if @global_lisp_binding.has_key?('_car') then
                                                                              trampCall(@_car)
                                                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:117"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                          Cell.new(
                                                                            begin
                                                                                trampCall(_args)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:131"] + __e.backtrace ) ; raise __e
                                                                            end
                                                                                   )))                                                                    ,Cell.new(
                                                                    " "                                                                    ,Cell.new(
                                                                      begin
                                                                          trampCall(_attrs)
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:120"] + __e.backtrace ) ; raise __e
                                                                      end
                                                                             ))))))
                                                                       )))
                                                      end
                                                  else
                                                      Cell.new()
                                                  end
                                              end
                                          end
                                      end
                                  end
                              else
                                  if ( 
                                  true
                                   ) then
                                      begin
                                          DelayedCallPacket.new( 'values',
                                              begin
                                                if @global_lisp_binding.has_key?('_values') then
                                                  trampCall(@_values)
                                                else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:120"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                trampCall( self._reverse_METHOD( 'reverse',
                                                    begin
                                                      if @global_lisp_binding.has_key?('_reverse') then
                                                        trampCall(@_reverse)
                                                      else raise NameError.new( "Error: undefined variable _reverse", "_reverse" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:120"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      begin
                                                          trampCall(_attrs)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:120"] + __e.backtrace ) ; raise __e
                                                      end
                                                             )))                                              ,Cell.new(
                                                begin
                                                    trampCall(_args)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:131"] + __e.backtrace ) ; raise __e
                                                end
                                                       )))
                                      end
                                  else
                                      Cell.new()
                                  end
                              end
                          end
                      }
                    begin
                      ___lambda = lambda { |_empty_QUMARK| 
                          if ( 
                            begin
                                trampCall(_empty_QUMARK)
                              rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:123"] + __e.backtrace ) ; raise __e
                            end
                           ) then
                              Proc.new { |*__rest__| _args = __rest__[0] ;  
                                  DelayedCallPacket.new( 'call-with-values',
                                      begin
                                        if @global_lisp_binding.has_key?('_call_MIMARKwith_MIMARKvalues') then
                                          trampCall(@_call_MIMARKwith_MIMARKvalues)
                                        else raise NameError.new( "Error: undefined variable _call_MIMARKwith_MIMARKvalues", "_call_MIMARKwith_MIMARKvalues" ) end
                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        Proc.new { || 
                                            trampCall( self._get_MIMARKattr_METHOD( 'get-attr',
                                                begin
                                                    trampCall(_get_MIMARKattr)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:130"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  begin
                                                      trampCall(_args)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:131"] + __e.backtrace ) ; raise __e
                                                  end                                                ,Cell.new(
                                                Cell.new()
                                                         ))))
                                        }                                      ,Cell.new(
                                        Proc.new { |_attr,_args| 
                                            if ( 
                                              trampCall( self._not_METHOD( 'not',
                                                  begin
                                                    if @global_lisp_binding.has_key?('_not') then
                                                      trampCall(@_not)
                                                    else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                    rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    trampCall( self._null_QUMARK_METHOD( 'null?',
                                                        begin
                                                          if @global_lisp_binding.has_key?('_null_QUMARK') then
                                                            trampCall(@_null_QUMARK)
                                                          else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:126"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                          begin
                                                              trampCall(_args)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:131"] + __e.backtrace ) ; raise __e
                                                          end
                                                                 )))
                                                           )))
                                             ) then
                                                begin
                                                    begin raise RuntimeError, 
                                                      trampCall( self._sprintf_METHOD( 'sprintf',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_sprintf') then
                                                              trampCall(@_sprintf)
                                                            else raise NameError.new( "Error: undefined variable _sprintf", "_sprintf" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:115"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                          "element %s can't have content: %s"                                                          ,Cell.new(
                                                            begin
                                                                trampCall(_name)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:131"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,Cell.new(
                                                            trampCall( self._write_MIMARKto_MIMARKstring_METHOD( 'write-to-string',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_write_MIMARKto_MIMARKstring') then
                                                                    trampCall(@_write_MIMARKto_MIMARKstring)
                                                                  else raise NameError.new( "Error: undefined variable _write_MIMARKto_MIMARKstring", "_write_MIMARKto_MIMARKstring" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:127"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                  begin
                                                                      trampCall(_args)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:131"] + __e.backtrace ) ; raise __e
                                                                  end
                                                                         )))
                                                                   )))))
                                                    rescue => __e 
                                                      __e.set_backtrace( ["./lib/text/html-lite.nnd:99"] + __e.backtrace )
                                                      raise __e
                                                    end 
                                                end
                                            end
                                            trampCall( self._list_METHOD( 'list',
                                                begin
                                                  if @global_lisp_binding.has_key?('_list') then
                                                    trampCall(@_list)
                                                  else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:131"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                "<"                                                ,Cell.new(
                                                  begin
                                                      trampCall(_name)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:131"] + __e.backtrace ) ; raise __e
                                                  end                                                ,Cell.new(
                                                  begin
                                                      trampCall(_attr)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:131"] + __e.backtrace ) ; raise __e
                                                  end                                                ,Cell.new(
                                                " />"
                                                         ))))))
                                        }
                                               )))
                              }
                          else
                              Proc.new { |*__rest__| _args = __rest__[0] ;  
                                  DelayedCallPacket.new( 'call-with-values',
                                      begin
                                        if @global_lisp_binding.has_key?('_call_MIMARKwith_MIMARKvalues') then
                                          trampCall(@_call_MIMARKwith_MIMARKvalues)
                                        else raise NameError.new( "Error: undefined variable _call_MIMARKwith_MIMARKvalues", "_call_MIMARKwith_MIMARKvalues" ) end
                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        Proc.new { || 
                                            trampCall( self._get_MIMARKattr_METHOD( 'get-attr',
                                                begin
                                                    trampCall(_get_MIMARKattr)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:130"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  begin
                                                      trampCall(_args)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:131"] + __e.backtrace ) ; raise __e
                                                  end                                                ,Cell.new(
                                                Cell.new()
                                                         ))))
                                        }                                      ,Cell.new(
                                        Proc.new { |_attr,_args| 
                                            trampCall( self._list_METHOD( 'list',
                                                begin
                                                  if @global_lisp_binding.has_key?('_list') then
                                                    trampCall(@_list)
                                                  else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:131"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                "<"                                                ,Cell.new(
                                                  begin
                                                      trampCall(_name)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:131"] + __e.backtrace ) ; raise __e
                                                  end                                                ,Cell.new(
                                                  begin
                                                      trampCall(_attr)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:131"] + __e.backtrace ) ; raise __e
                                                  end                                                ,Cell.new(
                                                ">"                                                ,Cell.new(
                                                  begin
                                                      trampCall(_args)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:131"] + __e.backtrace ) ; raise __e
                                                  end                                                ,Cell.new(
                                                "</"                                                ,Cell.new(
                                                  begin
                                                      trampCall(_name)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:131"] + __e.backtrace ) ; raise __e
                                                  end                                                ,Cell.new(
                                                "
>"
                                                         ))))))))))
                                        }
                                               )))
                              }
                          end
                      } ; ___lambda.call(
                            trampCall( self._get_MIMARKkeyword_METHOD( 'get-keyword',
                                begin
                                  if @global_lisp_binding.has_key?('_get_MIMARKkeyword') then
                                    trampCall(@_get_MIMARKkeyword)
                                  else raise NameError.new( "Error: undefined variable _get_MIMARKkeyword", "_get_MIMARKkeyword" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:122"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                LispKeyword.new( "empty?" )                                ,Cell.new(
                                  begin
                                      trampCall(_args)
                                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:131"] + __e.backtrace ) ; raise __e
                                  end                                ,Cell.new(
                                false
                                         )))))
                                 )
                    end
                } ; ___lambda.call(
                nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._define_MIMARKhtml_MIMARKelements_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
      @global_lisp_binding['_define_MIMARKhtml_MIMARKelements'] = self.method( :_define_MIMARKhtml_MIMARKelements_METHOD )
    @_define_MIMARKhtml_MIMARKelements = 
    trampCall(
          LispMacro.new { |*__rest__| _elements = __rest__[0] ;  
              begin
                ___lambda = lambda { |_make_MIMARKscheme_MIMARKname| 
                    _make_MIMARKscheme_MIMARKname                     = 
                      Proc.new { |_name| 
                          trampCall( self._string_MIMARK_GTMARKsymbol_METHOD( 'string->symbol',
                              begin
                                if @global_lisp_binding.has_key?('_string_MIMARK_GTMARKsymbol') then
                                  trampCall(@_string_MIMARK_GTMARKsymbol)
                                else raise NameError.new( "Error: undefined variable _string_MIMARK_GTMARKsymbol", "_string_MIMARK_GTMARKsymbol" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:138"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                trampCall( self._sprintf_METHOD( 'sprintf',
                                    begin
                                      if @global_lisp_binding.has_key?('_sprintf') then
                                        trampCall(@_sprintf)
                                      else raise NameError.new( "Error: undefined variable _sprintf", "_sprintf" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:138"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                    "html:%s"                                    ,Cell.new(
                                      begin
                                          trampCall(_name)
                                        rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:138"] + __e.backtrace ) ; raise __e
                                      end
                                             ))))
                                       )))
                      }
                    begin
                      ___lambda = lambda { |_loop| 
                          _loop                           = 
                            Proc.new { |_elements,_r| 
                                if ( 
                                  trampCall( self._null_QUMARK_METHOD( 'null?',
                                      begin
                                        if @global_lisp_binding.has_key?('_null_QUMARK') then
                                          trampCall(@_null_QUMARK)
                                        else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:142"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            trampCall(_elements)
                                          rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:153"] + __e.backtrace ) ; raise __e
                                        end
                                               )))
                                 ) then
                                    begin
                                        trampCall( self._cons_METHOD( 'cons',
                                            begin
                                              if @global_lisp_binding.has_key?('_cons') then
                                                trampCall(@_cons)
                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                              rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                            :"begin"                                            ,Cell.new(
                                              trampCall( self._reverse_METHOD( 'reverse',
                                                  begin
                                                    if @global_lisp_binding.has_key?('_reverse') then
                                                      trampCall(@_reverse)
                                                    else raise NameError.new( "Error: undefined variable _reverse", "_reverse" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:142"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    begin
                                                        trampCall(_r)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:154"] + __e.backtrace ) ; raise __e
                                                    end
                                                           )))
                                                     ))))
                                    end
                                else
                                    if ( 
                                      if ( 
                                        trampCall( self._not_METHOD( 'not',
                                            begin
                                              if @global_lisp_binding.has_key?('_not') then
                                                trampCall(@_not)
                                              else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                              rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              trampCall( self._eq_QUMARK_METHOD( 'eq?',
                                                  begin
                                                    if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                      trampCall(@_eq_QUMARK)
                                                    else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:111"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                  false                                                  ,Cell.new(
                                                    trampCall( self._pair_QUMARK_METHOD( 'pair?',
                                                        begin
                                                          if @global_lisp_binding.has_key?('_pair_QUMARK') then
                                                            trampCall(@_pair_QUMARK)
                                                          else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:143"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                          trampCall( self._cdr_METHOD( 'cdr',
                                                              begin
                                                                if @global_lisp_binding.has_key?('_cdr') then
                                                                  trampCall(@_cdr)
                                                                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:150"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                                begin
                                                                    trampCall(_elements)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:153"] + __e.backtrace ) ; raise __e
                                                                end
                                                                       )))
                                                                 )))
                                                           ))))
                                                     )))
                                       ) then
                                          trampCall( self._eqv_QUMARK_METHOD( 'eqv?',
                                              begin
                                                if @global_lisp_binding.has_key?('_eqv_QUMARK') then
                                                  trampCall(@_eqv_QUMARK)
                                                else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:143"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                trampCall( self._cadr_METHOD( 'cadr',
                                                    begin
                                                      if @global_lisp_binding.has_key?('_cadr') then
                                                        trampCall(@_cadr)
                                                      else raise NameError.new( "Error: undefined variable _cadr", "_cadr" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:143"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      begin
                                                          trampCall(_elements)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:153"] + __e.backtrace ) ; raise __e
                                                      end
                                                             )))                                              ,Cell.new(
                                              LispKeyword.new( "empty" )
                                                       ))))
                                      else
                                        false
                                      end
                                     ) then
                                        begin
                                            trampCall( self._loop_METHOD( 'loop',
                                                begin
                                                    trampCall(_loop)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:150"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  trampCall( self._cddr_METHOD( 'cddr',
                                                      begin
                                                        if @global_lisp_binding.has_key?('_cddr') then
                                                          trampCall(@_cddr)
                                                        else raise NameError.new( "Error: undefined variable _cddr", "_cddr" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:144"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        begin
                                                            trampCall(_elements)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:153"] + __e.backtrace ) ; raise __e
                                                        end
                                                               )))                                                ,Cell.new(
                                                  trampCall( self._list_ASMARK_METHOD( 'list*',
                                                      begin
                                                        if @global_lisp_binding.has_key?('_list_ASMARK') then
                                                          trampCall(@_list_ASMARK)
                                                        else raise NameError.new( "Error: undefined variable _list_ASMARK", "_list_ASMARK" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:151"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        trampCall( self._cons_METHOD( 'cons',
                                                            begin
                                                              if @global_lisp_binding.has_key?('_cons') then
                                                                trampCall(@_cons)
                                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                              rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                            :"define"                                                            ,Cell.new(
                                                              trampCall( self._cons_METHOD( 'cons',
                                                                  begin
                                                                    if @global_lisp_binding.has_key?('_cons') then
                                                                      trampCall(@_cons)
                                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                    rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                    trampCall( self._make_MIMARKscheme_MIMARKname_METHOD( 'make-scheme-name',
                                                                        begin
                                                                            trampCall(_make_MIMARKscheme_MIMARKname)
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:153"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                        Cell.new(
                                                                          trampCall( self._car_METHOD( 'car',
                                                                              begin
                                                                                if @global_lisp_binding.has_key?('_car') then
                                                                                  trampCall(@_car)
                                                                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:153"] + __e.backtrace ) ; raise __e
                                                                              end                                                                            ,
                                                                              Cell.new(
                                                                                begin
                                                                                    trampCall(_elements)
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:153"] + __e.backtrace ) ; raise __e
                                                                                end
                                                                                       )))
                                                                                 )))                                                                  ,Cell.new(
                                                                    trampCall( self._cons_METHOD( 'cons',
                                                                        begin
                                                                          if @global_lisp_binding.has_key?('_cons') then
                                                                            trampCall(@_cons)
                                                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                        Cell.new(
                                                                          trampCall( self._cons_METHOD( 'cons',
                                                                              begin
                                                                                if @global_lisp_binding.has_key?('_cons') then
                                                                                  trampCall(@_cons)
                                                                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                              end                                                                            ,
                                                                              Cell.new(
                                                                              :"make-html-element"                                                                              ,Cell.new(
                                                                                trampCall( self._cons_METHOD( 'cons',
                                                                                    begin
                                                                                      if @global_lisp_binding.has_key?('_cons') then
                                                                                        trampCall(@_cons)
                                                                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                    end                                                                                  ,
                                                                                    Cell.new(
                                                                                      trampCall( self._cons_METHOD( 'cons',
                                                                                          begin
                                                                                            if @global_lisp_binding.has_key?('_cons') then
                                                                                              trampCall(@_cons)
                                                                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                          end                                                                                        ,
                                                                                          Cell.new(
                                                                                          :"quote"                                                                                          ,Cell.new(
                                                                                            trampCall( self._cons_METHOD( 'cons',
                                                                                                begin
                                                                                                  if @global_lisp_binding.has_key?('_cons') then
                                                                                                    trampCall(@_cons)
                                                                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                                end                                                                                              ,
                                                                                                Cell.new(
                                                                                                  trampCall( self._car_METHOD( 'car',
                                                                                                      begin
                                                                                                        if @global_lisp_binding.has_key?('_car') then
                                                                                                          trampCall(@_car)
                                                                                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:153"] + __e.backtrace ) ; raise __e
                                                                                                      end                                                                                                    ,
                                                                                                      Cell.new(
                                                                                                        begin
                                                                                                            trampCall(_elements)
                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:153"] + __e.backtrace ) ; raise __e
                                                                                                        end
                                                                                                               )))                                                                                                ,Cell.new(
                                                                                                
                                                                                                         ))))
                                                                                                   ))))                                                                                    ,Cell.new(
                                                                                    Cell.new(LispKeyword.new( "empty?" ),Cell.new(true))
                                                                                             ))))
                                                                                       ))))                                                                        ,Cell.new(
                                                                        
                                                                                 ))))
                                                                           ))))
                                                                     ))))                                                      ,Cell.new(
                                                        trampCall( self._cons_METHOD( 'cons',
                                                            begin
                                                              if @global_lisp_binding.has_key?('_cons') then
                                                                trampCall(@_cons)
                                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                              rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                            :"export"                                                            ,Cell.new(
                                                              trampCall( self._cons_METHOD( 'cons',
                                                                  begin
                                                                    if @global_lisp_binding.has_key?('_cons') then
                                                                      trampCall(@_cons)
                                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                    rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                    trampCall( self._make_MIMARKscheme_MIMARKname_METHOD( 'make-scheme-name',
                                                                        begin
                                                                            trampCall(_make_MIMARKscheme_MIMARKname)
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:153"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                        Cell.new(
                                                                          trampCall( self._car_METHOD( 'car',
                                                                              begin
                                                                                if @global_lisp_binding.has_key?('_car') then
                                                                                  trampCall(@_car)
                                                                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:153"] + __e.backtrace ) ; raise __e
                                                                              end                                                                            ,
                                                                              Cell.new(
                                                                                begin
                                                                                    trampCall(_elements)
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:153"] + __e.backtrace ) ; raise __e
                                                                                end
                                                                                       )))
                                                                                 )))                                                                  ,Cell.new(
                                                                  
                                                                           ))))
                                                                     ))))                                                      ,Cell.new(
                                                        begin
                                                            trampCall(_r)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:154"] + __e.backtrace ) ; raise __e
                                                        end
                                                               )))))
                                                         ))))
                                        end
                                    else
                                        if ( 
                                        true
                                         ) then
                                            begin
                                                trampCall( self._loop_METHOD( 'loop',
                                                    begin
                                                        trampCall(_loop)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:150"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      trampCall( self._cdr_METHOD( 'cdr',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_cdr') then
                                                              trampCall(@_cdr)
                                                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:150"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            begin
                                                                trampCall(_elements)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:153"] + __e.backtrace ) ; raise __e
                                                            end
                                                                   )))                                                    ,Cell.new(
                                                      trampCall( self._list_ASMARK_METHOD( 'list*',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_list_ASMARK') then
                                                              trampCall(@_list_ASMARK)
                                                            else raise NameError.new( "Error: undefined variable _list_ASMARK", "_list_ASMARK" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:151"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            trampCall( self._cons_METHOD( 'cons',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_cons') then
                                                                    trampCall(@_cons)
                                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                :"define"                                                                ,Cell.new(
                                                                  trampCall( self._cons_METHOD( 'cons',
                                                                      begin
                                                                        if @global_lisp_binding.has_key?('_cons') then
                                                                          trampCall(@_cons)
                                                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                      Cell.new(
                                                                        trampCall( self._make_MIMARKscheme_MIMARKname_METHOD( 'make-scheme-name',
                                                                            begin
                                                                                trampCall(_make_MIMARKscheme_MIMARKname)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:153"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                            Cell.new(
                                                                              trampCall( self._car_METHOD( 'car',
                                                                                  begin
                                                                                    if @global_lisp_binding.has_key?('_car') then
                                                                                      trampCall(@_car)
                                                                                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:153"] + __e.backtrace ) ; raise __e
                                                                                  end                                                                                ,
                                                                                  Cell.new(
                                                                                    begin
                                                                                        trampCall(_elements)
                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:153"] + __e.backtrace ) ; raise __e
                                                                                    end
                                                                                           )))
                                                                                     )))                                                                      ,Cell.new(
                                                                        trampCall( self._cons_METHOD( 'cons',
                                                                            begin
                                                                              if @global_lisp_binding.has_key?('_cons') then
                                                                                trampCall(@_cons)
                                                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                              rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                            Cell.new(
                                                                              trampCall( self._cons_METHOD( 'cons',
                                                                                  begin
                                                                                    if @global_lisp_binding.has_key?('_cons') then
                                                                                      trampCall(@_cons)
                                                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                    rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                  end                                                                                ,
                                                                                  Cell.new(
                                                                                  :"make-html-element"                                                                                  ,Cell.new(
                                                                                    trampCall( self._cons_METHOD( 'cons',
                                                                                        begin
                                                                                          if @global_lisp_binding.has_key?('_cons') then
                                                                                            trampCall(@_cons)
                                                                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                        end                                                                                      ,
                                                                                        Cell.new(
                                                                                          trampCall( self._cons_METHOD( 'cons',
                                                                                              begin
                                                                                                if @global_lisp_binding.has_key?('_cons') then
                                                                                                  trampCall(@_cons)
                                                                                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                              end                                                                                            ,
                                                                                              Cell.new(
                                                                                              :"quote"                                                                                              ,Cell.new(
                                                                                                trampCall( self._cons_METHOD( 'cons',
                                                                                                    begin
                                                                                                      if @global_lisp_binding.has_key?('_cons') then
                                                                                                        trampCall(@_cons)
                                                                                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                                    end                                                                                                  ,
                                                                                                    Cell.new(
                                                                                                      trampCall( self._car_METHOD( 'car',
                                                                                                          begin
                                                                                                            if @global_lisp_binding.has_key?('_car') then
                                                                                                              trampCall(@_car)
                                                                                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:153"] + __e.backtrace ) ; raise __e
                                                                                                          end                                                                                                        ,
                                                                                                          Cell.new(
                                                                                                            begin
                                                                                                                trampCall(_elements)
                                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:153"] + __e.backtrace ) ; raise __e
                                                                                                            end
                                                                                                                   )))                                                                                                    ,Cell.new(
                                                                                                    
                                                                                                             ))))
                                                                                                       ))))                                                                                        ,Cell.new(
                                                                                        
                                                                                                 ))))
                                                                                           ))))                                                                            ,Cell.new(
                                                                            
                                                                                     ))))
                                                                               ))))
                                                                         ))))                                                          ,Cell.new(
                                                            trampCall( self._cons_METHOD( 'cons',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_cons') then
                                                                    trampCall(@_cons)
                                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                :"export"                                                                ,Cell.new(
                                                                  trampCall( self._cons_METHOD( 'cons',
                                                                      begin
                                                                        if @global_lisp_binding.has_key?('_cons') then
                                                                          trampCall(@_cons)
                                                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                      Cell.new(
                                                                        trampCall( self._make_MIMARKscheme_MIMARKname_METHOD( 'make-scheme-name',
                                                                            begin
                                                                                trampCall(_make_MIMARKscheme_MIMARKname)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:153"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                            Cell.new(
                                                                              trampCall( self._car_METHOD( 'car',
                                                                                  begin
                                                                                    if @global_lisp_binding.has_key?('_car') then
                                                                                      trampCall(@_car)
                                                                                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:153"] + __e.backtrace ) ; raise __e
                                                                                  end                                                                                ,
                                                                                  Cell.new(
                                                                                    begin
                                                                                        trampCall(_elements)
                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:153"] + __e.backtrace ) ; raise __e
                                                                                    end
                                                                                           )))
                                                                                     )))                                                                      ,Cell.new(
                                                                      
                                                                               ))))
                                                                         ))))                                                          ,Cell.new(
                                                            begin
                                                                trampCall(_r)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:154"] + __e.backtrace ) ; raise __e
                                                            end
                                                                   )))))
                                                             ))))
                                            end
                                        else
                                          Nil.new
                                        end
                                    end
                                end
                            }
                          trampCall( self._loop_METHOD( 'loop',
                              begin
                                  trampCall(_loop)
                                rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:150"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    trampCall(_elements)
                                  rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:153"] + __e.backtrace ) ; raise __e
                                end                              ,Cell.new(
                              Cell.new()
                                       ))))
                      } ; ___lambda.call(
                      nil
                                 )
                    end
                } ; ___lambda.call(
                nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      begin
          def self._html_COMARKtt_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKtt'] = self.method( :_html_COMARKtt_METHOD )
        @_html_COMARKtt = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKtt_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKtt'] = self.method( :_html_COMARKtt_METHOD )
        @_html_COMARKtt = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"tt"
                           )))
        )
      end
      begin
          def self._html_COMARKi_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKi'] = self.method( :_html_COMARKi_METHOD )
        @_html_COMARKi = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKi_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKi'] = self.method( :_html_COMARKi_METHOD )
        @_html_COMARKi = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"i"
                           )))
        )
      end
      begin
          def self._html_COMARKb_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKb'] = self.method( :_html_COMARKb_METHOD )
        @_html_COMARKb = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKb_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKb'] = self.method( :_html_COMARKb_METHOD )
        @_html_COMARKb = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"b"
                           )))
        )
      end
      begin
          def self._html_COMARKbig_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKbig'] = self.method( :_html_COMARKbig_METHOD )
        @_html_COMARKbig = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKbig_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKbig'] = self.method( :_html_COMARKbig_METHOD )
        @_html_COMARKbig = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"big"
                           )))
        )
      end
      begin
          def self._html_COMARKsmall_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKsmall'] = self.method( :_html_COMARKsmall_METHOD )
        @_html_COMARKsmall = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKsmall_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKsmall'] = self.method( :_html_COMARKsmall_METHOD )
        @_html_COMARKsmall = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"small"
                           )))
        )
      end
  end
 )
#--------------------

trampCall( 
  begin
      begin
          def self._html_COMARKem_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKem'] = self.method( :_html_COMARKem_METHOD )
        @_html_COMARKem = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKem_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKem'] = self.method( :_html_COMARKem_METHOD )
        @_html_COMARKem = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"em"
                           )))
        )
      end
      begin
          def self._html_COMARKstrong_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKstrong'] = self.method( :_html_COMARKstrong_METHOD )
        @_html_COMARKstrong = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKstrong_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKstrong'] = self.method( :_html_COMARKstrong_METHOD )
        @_html_COMARKstrong = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"strong"
                           )))
        )
      end
      begin
          def self._html_COMARKdfn_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKdfn'] = self.method( :_html_COMARKdfn_METHOD )
        @_html_COMARKdfn = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKdfn_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKdfn'] = self.method( :_html_COMARKdfn_METHOD )
        @_html_COMARKdfn = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"dfn"
                           )))
        )
      end
      begin
          def self._html_COMARKcode_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKcode'] = self.method( :_html_COMARKcode_METHOD )
        @_html_COMARKcode = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKcode_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKcode'] = self.method( :_html_COMARKcode_METHOD )
        @_html_COMARKcode = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"code"
                           )))
        )
      end
      begin
          def self._html_COMARKsamp_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKsamp'] = self.method( :_html_COMARKsamp_METHOD )
        @_html_COMARKsamp = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKsamp_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKsamp'] = self.method( :_html_COMARKsamp_METHOD )
        @_html_COMARKsamp = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"samp"
                           )))
        )
      end
      begin
          def self._html_COMARKkbd_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKkbd'] = self.method( :_html_COMARKkbd_METHOD )
        @_html_COMARKkbd = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKkbd_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKkbd'] = self.method( :_html_COMARKkbd_METHOD )
        @_html_COMARKkbd = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"kbd"
                           )))
        )
      end
      begin
          def self._html_COMARKvar_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKvar'] = self.method( :_html_COMARKvar_METHOD )
        @_html_COMARKvar = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKvar_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKvar'] = self.method( :_html_COMARKvar_METHOD )
        @_html_COMARKvar = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"var"
                           )))
        )
      end
      begin
          def self._html_COMARKcite_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKcite'] = self.method( :_html_COMARKcite_METHOD )
        @_html_COMARKcite = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKcite_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKcite'] = self.method( :_html_COMARKcite_METHOD )
        @_html_COMARKcite = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"cite"
                           )))
        )
      end
      begin
          def self._html_COMARKabbr_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKabbr'] = self.method( :_html_COMARKabbr_METHOD )
        @_html_COMARKabbr = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKabbr_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKabbr'] = self.method( :_html_COMARKabbr_METHOD )
        @_html_COMARKabbr = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"abbr"
                           )))
        )
      end
      begin
          def self._html_COMARKacronym_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKacronym'] = self.method( :_html_COMARKacronym_METHOD )
        @_html_COMARKacronym = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKacronym_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKacronym'] = self.method( :_html_COMARKacronym_METHOD )
        @_html_COMARKacronym = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"acronym"
                           )))
        )
      end
  end
 )
#--------------------

trampCall( 
  begin
      begin
          def self._html_COMARKsub_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKsub'] = self.method( :_html_COMARKsub_METHOD )
        @_html_COMARKsub = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKsub_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKsub'] = self.method( :_html_COMARKsub_METHOD )
        @_html_COMARKsub = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"sub"
                           )))
        )
      end
      begin
          def self._html_COMARKsup_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKsup'] = self.method( :_html_COMARKsup_METHOD )
        @_html_COMARKsup = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKsup_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKsup'] = self.method( :_html_COMARKsup_METHOD )
        @_html_COMARKsup = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"sup"
                           )))
        )
      end
      begin
          def self._html_COMARKspan_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKspan'] = self.method( :_html_COMARKspan_METHOD )
        @_html_COMARKspan = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKspan_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKspan'] = self.method( :_html_COMARKspan_METHOD )
        @_html_COMARKspan = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"span"
                           )))
        )
      end
      begin
          def self._html_COMARKbdo_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKbdo'] = self.method( :_html_COMARKbdo_METHOD )
        @_html_COMARKbdo = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKbdo_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKbdo'] = self.method( :_html_COMARKbdo_METHOD )
        @_html_COMARKbdo = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"bdo"
                           )))
        )
      end
      begin
          def self._html_COMARKbr_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKbr'] = self.method( :_html_COMARKbr_METHOD )
        @_html_COMARKbr = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKbr_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKbr'] = self.method( :_html_COMARKbr_METHOD )
        @_html_COMARKbr = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"br"                  ,Cell.new(
                  LispKeyword.new( "empty?" )                  ,Cell.new(
                  true
                           )))))
        )
      end
  end
 )
#--------------------

trampCall( 
  begin
      begin
          def self._html_COMARKbody_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKbody'] = self.method( :_html_COMARKbody_METHOD )
        @_html_COMARKbody = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKbody_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKbody'] = self.method( :_html_COMARKbody_METHOD )
        @_html_COMARKbody = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"body"
                           )))
        )
      end
      begin
          def self._html_COMARKaddress_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKaddress'] = self.method( :_html_COMARKaddress_METHOD )
        @_html_COMARKaddress = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKaddress_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKaddress'] = self.method( :_html_COMARKaddress_METHOD )
        @_html_COMARKaddress = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"address"
                           )))
        )
      end
      begin
          def self._html_COMARKdiv_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKdiv'] = self.method( :_html_COMARKdiv_METHOD )
        @_html_COMARKdiv = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKdiv_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKdiv'] = self.method( :_html_COMARKdiv_METHOD )
        @_html_COMARKdiv = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"div"
                           )))
        )
      end
  end
 )
#--------------------

trampCall( 
  begin
      begin
          def self._html_COMARKa_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKa'] = self.method( :_html_COMARKa_METHOD )
        @_html_COMARKa = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKa_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKa'] = self.method( :_html_COMARKa_METHOD )
        @_html_COMARKa = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"a"
                           )))
        )
      end
  end
 )
#--------------------

trampCall( 
  begin
      begin
          def self._html_COMARKmap_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKmap'] = self.method( :_html_COMARKmap_METHOD )
        @_html_COMARKmap = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKmap_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKmap'] = self.method( :_html_COMARKmap_METHOD )
        @_html_COMARKmap = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"map"
                           )))
        )
      end
      begin
          def self._html_COMARKarea_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKarea'] = self.method( :_html_COMARKarea_METHOD )
        @_html_COMARKarea = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKarea_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKarea'] = self.method( :_html_COMARKarea_METHOD )
        @_html_COMARKarea = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"area"                  ,Cell.new(
                  LispKeyword.new( "empty?" )                  ,Cell.new(
                  true
                           )))))
        )
      end
  end
 )
#--------------------

trampCall( 
  begin
      begin
          def self._html_COMARKlink_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKlink'] = self.method( :_html_COMARKlink_METHOD )
        @_html_COMARKlink = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKlink_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKlink'] = self.method( :_html_COMARKlink_METHOD )
        @_html_COMARKlink = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"link"                  ,Cell.new(
                  LispKeyword.new( "empty?" )                  ,Cell.new(
                  true
                           )))))
        )
      end
  end
 )
#--------------------

trampCall( 
  begin
      begin
          def self._html_COMARKimg_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKimg'] = self.method( :_html_COMARKimg_METHOD )
        @_html_COMARKimg = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKimg_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKimg'] = self.method( :_html_COMARKimg_METHOD )
        @_html_COMARKimg = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"img"                  ,Cell.new(
                  LispKeyword.new( "empty?" )                  ,Cell.new(
                  true
                           )))))
        )
      end
  end
 )
#--------------------

trampCall( 
  begin
      begin
          def self._html_COMARKobject_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKobject'] = self.method( :_html_COMARKobject_METHOD )
        @_html_COMARKobject = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKobject_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKobject'] = self.method( :_html_COMARKobject_METHOD )
        @_html_COMARKobject = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"object"
                           )))
        )
      end
      begin
          def self._html_COMARKparam_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKparam'] = self.method( :_html_COMARKparam_METHOD )
        @_html_COMARKparam = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKparam_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKparam'] = self.method( :_html_COMARKparam_METHOD )
        @_html_COMARKparam = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"param"                  ,Cell.new(
                  LispKeyword.new( "empty?" )                  ,Cell.new(
                  true
                           )))))
        )
      end
  end
 )
#--------------------

trampCall( 
  begin
      begin
          def self._html_COMARKhr_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKhr'] = self.method( :_html_COMARKhr_METHOD )
        @_html_COMARKhr = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKhr_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKhr'] = self.method( :_html_COMARKhr_METHOD )
        @_html_COMARKhr = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"hr"                  ,Cell.new(
                  LispKeyword.new( "empty?" )                  ,Cell.new(
                  true
                           )))))
        )
      end
  end
 )
#--------------------

trampCall( 
  begin
      begin
          def self._html_COMARKp_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKp'] = self.method( :_html_COMARKp_METHOD )
        @_html_COMARKp = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKp_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKp'] = self.method( :_html_COMARKp_METHOD )
        @_html_COMARKp = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"p"
                           )))
        )
      end
  end
 )
#--------------------

trampCall( 
  begin
      begin
          def self._html_COMARKh1_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKh1'] = self.method( :_html_COMARKh1_METHOD )
        @_html_COMARKh1 = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKh1_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKh1'] = self.method( :_html_COMARKh1_METHOD )
        @_html_COMARKh1 = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"h1"
                           )))
        )
      end
      begin
          def self._html_COMARKh2_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKh2'] = self.method( :_html_COMARKh2_METHOD )
        @_html_COMARKh2 = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKh2_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKh2'] = self.method( :_html_COMARKh2_METHOD )
        @_html_COMARKh2 = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"h2"
                           )))
        )
      end
      begin
          def self._html_COMARKh3_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKh3'] = self.method( :_html_COMARKh3_METHOD )
        @_html_COMARKh3 = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKh3_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKh3'] = self.method( :_html_COMARKh3_METHOD )
        @_html_COMARKh3 = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"h3"
                           )))
        )
      end
      begin
          def self._html_COMARKh4_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKh4'] = self.method( :_html_COMARKh4_METHOD )
        @_html_COMARKh4 = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKh4_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKh4'] = self.method( :_html_COMARKh4_METHOD )
        @_html_COMARKh4 = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"h4"
                           )))
        )
      end
      begin
          def self._html_COMARKh5_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKh5'] = self.method( :_html_COMARKh5_METHOD )
        @_html_COMARKh5 = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKh5_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKh5'] = self.method( :_html_COMARKh5_METHOD )
        @_html_COMARKh5 = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"h5"
                           )))
        )
      end
      begin
          def self._html_COMARKh6_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKh6'] = self.method( :_html_COMARKh6_METHOD )
        @_html_COMARKh6 = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKh6_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKh6'] = self.method( :_html_COMARKh6_METHOD )
        @_html_COMARKh6 = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"h6"
                           )))
        )
      end
  end
 )
#--------------------

trampCall( 
  begin
      begin
          def self._html_COMARKpre_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKpre'] = self.method( :_html_COMARKpre_METHOD )
        @_html_COMARKpre = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKpre_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKpre'] = self.method( :_html_COMARKpre_METHOD )
        @_html_COMARKpre = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"pre"
                           )))
        )
      end
  end
 )
#--------------------

trampCall( 
  begin
      begin
          def self._html_COMARKq_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKq'] = self.method( :_html_COMARKq_METHOD )
        @_html_COMARKq = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKq_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKq'] = self.method( :_html_COMARKq_METHOD )
        @_html_COMARKq = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"q"
                           )))
        )
      end
  end
 )
#--------------------

trampCall( 
  begin
      begin
          def self._html_COMARKblockquote_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKblockquote'] = self.method( :_html_COMARKblockquote_METHOD )
        @_html_COMARKblockquote = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKblockquote_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKblockquote'] = self.method( :_html_COMARKblockquote_METHOD )
        @_html_COMARKblockquote = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"blockquote"
                           )))
        )
      end
  end
 )
#--------------------

trampCall( 
  begin
      begin
          def self._html_COMARKins_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKins'] = self.method( :_html_COMARKins_METHOD )
        @_html_COMARKins = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKins_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKins'] = self.method( :_html_COMARKins_METHOD )
        @_html_COMARKins = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"ins"
                           )))
        )
      end
      begin
          def self._html_COMARKdel_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKdel'] = self.method( :_html_COMARKdel_METHOD )
        @_html_COMARKdel = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKdel_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKdel'] = self.method( :_html_COMARKdel_METHOD )
        @_html_COMARKdel = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"del"
                           )))
        )
      end
  end
 )
#--------------------

trampCall( 
  begin
      begin
          def self._html_COMARKdl_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKdl'] = self.method( :_html_COMARKdl_METHOD )
        @_html_COMARKdl = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKdl_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKdl'] = self.method( :_html_COMARKdl_METHOD )
        @_html_COMARKdl = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"dl"
                           )))
        )
      end
      begin
          def self._html_COMARKdt_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKdt'] = self.method( :_html_COMARKdt_METHOD )
        @_html_COMARKdt = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKdt_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKdt'] = self.method( :_html_COMARKdt_METHOD )
        @_html_COMARKdt = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"dt"
                           )))
        )
      end
      begin
          def self._html_COMARKdd_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKdd'] = self.method( :_html_COMARKdd_METHOD )
        @_html_COMARKdd = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKdd_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKdd'] = self.method( :_html_COMARKdd_METHOD )
        @_html_COMARKdd = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"dd"
                           )))
        )
      end
      begin
          def self._html_COMARKol_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKol'] = self.method( :_html_COMARKol_METHOD )
        @_html_COMARKol = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKol_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKol'] = self.method( :_html_COMARKol_METHOD )
        @_html_COMARKol = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"ol"
                           )))
        )
      end
      begin
          def self._html_COMARKul_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKul'] = self.method( :_html_COMARKul_METHOD )
        @_html_COMARKul = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKul_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKul'] = self.method( :_html_COMARKul_METHOD )
        @_html_COMARKul = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"ul"
                           )))
        )
      end
      begin
          def self._html_COMARKli_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKli'] = self.method( :_html_COMARKli_METHOD )
        @_html_COMARKli = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKli_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKli'] = self.method( :_html_COMARKli_METHOD )
        @_html_COMARKli = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"li"
                           )))
        )
      end
  end
 )
#--------------------

trampCall( 
  begin
      begin
          def self._html_COMARKform_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKform'] = self.method( :_html_COMARKform_METHOD )
        @_html_COMARKform = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKform_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKform'] = self.method( :_html_COMARKform_METHOD )
        @_html_COMARKform = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"form"
                           )))
        )
      end
      begin
          def self._html_COMARKlabel_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKlabel'] = self.method( :_html_COMARKlabel_METHOD )
        @_html_COMARKlabel = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKlabel_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKlabel'] = self.method( :_html_COMARKlabel_METHOD )
        @_html_COMARKlabel = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"label"
                           )))
        )
      end
      begin
          def self._html_COMARKinput_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKinput'] = self.method( :_html_COMARKinput_METHOD )
        @_html_COMARKinput = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKinput_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKinput'] = self.method( :_html_COMARKinput_METHOD )
        @_html_COMARKinput = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"input"                  ,Cell.new(
                  LispKeyword.new( "empty?" )                  ,Cell.new(
                  true
                           )))))
        )
      end
      begin
          def self._html_COMARKselect_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKselect'] = self.method( :_html_COMARKselect_METHOD )
        @_html_COMARKselect = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKselect_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKselect'] = self.method( :_html_COMARKselect_METHOD )
        @_html_COMARKselect = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"select"
                           )))
        )
      end
      begin
          def self._html_COMARKoptgroup_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKoptgroup'] = self.method( :_html_COMARKoptgroup_METHOD )
        @_html_COMARKoptgroup = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKoptgroup_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKoptgroup'] = self.method( :_html_COMARKoptgroup_METHOD )
        @_html_COMARKoptgroup = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"optgroup"
                           )))
        )
      end
      begin
          def self._html_COMARKoption_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKoption'] = self.method( :_html_COMARKoption_METHOD )
        @_html_COMARKoption = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKoption_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKoption'] = self.method( :_html_COMARKoption_METHOD )
        @_html_COMARKoption = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"option"
                           )))
        )
      end
      begin
          def self._html_COMARKtextarea_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKtextarea'] = self.method( :_html_COMARKtextarea_METHOD )
        @_html_COMARKtextarea = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKtextarea_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKtextarea'] = self.method( :_html_COMARKtextarea_METHOD )
        @_html_COMARKtextarea = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"textarea"
                           )))
        )
      end
      begin
          def self._html_COMARKfieldset_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKfieldset'] = self.method( :_html_COMARKfieldset_METHOD )
        @_html_COMARKfieldset = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKfieldset_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKfieldset'] = self.method( :_html_COMARKfieldset_METHOD )
        @_html_COMARKfieldset = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"fieldset"
                           )))
        )
      end
      begin
          def self._html_COMARKlegend_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKlegend'] = self.method( :_html_COMARKlegend_METHOD )
        @_html_COMARKlegend = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKlegend_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKlegend'] = self.method( :_html_COMARKlegend_METHOD )
        @_html_COMARKlegend = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"legend"
                           )))
        )
      end
      begin
          def self._html_COMARKbutton_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKbutton'] = self.method( :_html_COMARKbutton_METHOD )
        @_html_COMARKbutton = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKbutton_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKbutton'] = self.method( :_html_COMARKbutton_METHOD )
        @_html_COMARKbutton = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"button"
                           )))
        )
      end
  end
 )
#--------------------

trampCall( 
  begin
      begin
          def self._html_COMARKtable_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKtable'] = self.method( :_html_COMARKtable_METHOD )
        @_html_COMARKtable = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKtable_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKtable'] = self.method( :_html_COMARKtable_METHOD )
        @_html_COMARKtable = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"table"
                           )))
        )
      end
      begin
          def self._html_COMARKcaption_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKcaption'] = self.method( :_html_COMARKcaption_METHOD )
        @_html_COMARKcaption = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKcaption_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKcaption'] = self.method( :_html_COMARKcaption_METHOD )
        @_html_COMARKcaption = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"caption"
                           )))
        )
      end
      begin
          def self._html_COMARKthead_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKthead'] = self.method( :_html_COMARKthead_METHOD )
        @_html_COMARKthead = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKthead_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKthead'] = self.method( :_html_COMARKthead_METHOD )
        @_html_COMARKthead = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"thead"
                           )))
        )
      end
      begin
          def self._html_COMARKtfoot_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKtfoot'] = self.method( :_html_COMARKtfoot_METHOD )
        @_html_COMARKtfoot = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKtfoot_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKtfoot'] = self.method( :_html_COMARKtfoot_METHOD )
        @_html_COMARKtfoot = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"tfoot"
                           )))
        )
      end
      begin
          def self._html_COMARKtbody_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKtbody'] = self.method( :_html_COMARKtbody_METHOD )
        @_html_COMARKtbody = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKtbody_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKtbody'] = self.method( :_html_COMARKtbody_METHOD )
        @_html_COMARKtbody = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"tbody"
                           )))
        )
      end
      begin
          def self._html_COMARKcolgroup_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKcolgroup'] = self.method( :_html_COMARKcolgroup_METHOD )
        @_html_COMARKcolgroup = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKcolgroup_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKcolgroup'] = self.method( :_html_COMARKcolgroup_METHOD )
        @_html_COMARKcolgroup = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"colgroup"
                           )))
        )
      end
      begin
          def self._html_COMARKcol_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKcol'] = self.method( :_html_COMARKcol_METHOD )
        @_html_COMARKcol = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKcol_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKcol'] = self.method( :_html_COMARKcol_METHOD )
        @_html_COMARKcol = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"col"                  ,Cell.new(
                  LispKeyword.new( "empty?" )                  ,Cell.new(
                  true
                           )))))
        )
      end
      begin
          def self._html_COMARKtr_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKtr'] = self.method( :_html_COMARKtr_METHOD )
        @_html_COMARKtr = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKtr_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKtr'] = self.method( :_html_COMARKtr_METHOD )
        @_html_COMARKtr = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"tr"
                           )))
        )
      end
      begin
          def self._html_COMARKth_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKth'] = self.method( :_html_COMARKth_METHOD )
        @_html_COMARKth = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKth_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKth'] = self.method( :_html_COMARKth_METHOD )
        @_html_COMARKth = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"th"
                           )))
        )
      end
      begin
          def self._html_COMARKtd_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKtd'] = self.method( :_html_COMARKtd_METHOD )
        @_html_COMARKtd = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKtd_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKtd'] = self.method( :_html_COMARKtd_METHOD )
        @_html_COMARKtd = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"td"
                           )))
        )
      end
  end
 )
#--------------------

trampCall( 
  begin
      begin
          def self._html_COMARKhead_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKhead'] = self.method( :_html_COMARKhead_METHOD )
        @_html_COMARKhead = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKhead_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKhead'] = self.method( :_html_COMARKhead_METHOD )
        @_html_COMARKhead = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"head"
                           )))
        )
      end
      begin
          def self._html_COMARKtitle_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKtitle'] = self.method( :_html_COMARKtitle_METHOD )
        @_html_COMARKtitle = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKtitle_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKtitle'] = self.method( :_html_COMARKtitle_METHOD )
        @_html_COMARKtitle = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"title"
                           )))
        )
      end
      begin
          def self._html_COMARKbase_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKbase'] = self.method( :_html_COMARKbase_METHOD )
        @_html_COMARKbase = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKbase_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKbase'] = self.method( :_html_COMARKbase_METHOD )
        @_html_COMARKbase = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"base"                  ,Cell.new(
                  LispKeyword.new( "empty?" )                  ,Cell.new(
                  true
                           )))))
        )
      end
      begin
          def self._html_COMARKmeta_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKmeta'] = self.method( :_html_COMARKmeta_METHOD )
        @_html_COMARKmeta = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKmeta_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKmeta'] = self.method( :_html_COMARKmeta_METHOD )
        @_html_COMARKmeta = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"meta"                  ,Cell.new(
                  LispKeyword.new( "empty?" )                  ,Cell.new(
                  true
                           )))))
        )
      end
      begin
          def self._html_COMARKstyle_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKstyle'] = self.method( :_html_COMARKstyle_METHOD )
        @_html_COMARKstyle = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKstyle_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKstyle'] = self.method( :_html_COMARKstyle_METHOD )
        @_html_COMARKstyle = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"style"
                           )))
        )
      end
      begin
          def self._html_COMARKscript_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKscript'] = self.method( :_html_COMARKscript_METHOD )
        @_html_COMARKscript = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKscript_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKscript'] = self.method( :_html_COMARKscript_METHOD )
        @_html_COMARKscript = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"script"
                           )))
        )
      end
      begin
          def self._html_COMARKnoscript_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKnoscript'] = self.method( :_html_COMARKnoscript_METHOD )
        @_html_COMARKnoscript = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKnoscript_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKnoscript'] = self.method( :_html_COMARKnoscript_METHOD )
        @_html_COMARKnoscript = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"noscript"
                           )))
        )
      end
  end
 )
#--------------------

trampCall( 
  begin
      begin
          def self._html_COMARKhtml_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKhtml'] = self.method( :_html_COMARKhtml_METHOD )
        @_html_COMARKhtml = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKhtml_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKhtml'] = self.method( :_html_COMARKhtml_METHOD )
        @_html_COMARKhtml = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"html"
                           )))
        )
      end
  end
 )
#--------------------

trampCall( 
  begin
      begin
          def self._html_COMARKframeset_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKframeset'] = self.method( :_html_COMARKframeset_METHOD )
        @_html_COMARKframeset = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKframeset_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKframeset'] = self.method( :_html_COMARKframeset_METHOD )
        @_html_COMARKframeset = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"frameset"
                           )))
        )
      end
      begin
          def self._html_COMARKframe_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKframe'] = self.method( :_html_COMARKframe_METHOD )
        @_html_COMARKframe = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKframe_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKframe'] = self.method( :_html_COMARKframe_METHOD )
        @_html_COMARKframe = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"frame"
                           )))
        )
      end
      begin
          def self._html_COMARKnoframes_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKnoframes'] = self.method( :_html_COMARKnoframes_METHOD )
        @_html_COMARKnoframes = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKnoframes_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKnoframes'] = self.method( :_html_COMARKnoframes_METHOD )
        @_html_COMARKnoframes = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"noframes"
                           )))
        )
      end
      begin
          def self._html_COMARKiframe_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKiframe'] = self.method( :_html_COMARKiframe_METHOD )
        @_html_COMARKiframe = 
        trampCall(
            nil
        )
      end
      begin
          def self._html_COMARKiframe_METHOD( origname, pred, args ) callProcedure( origname, pred, args ) end
          @global_lisp_binding['_html_COMARKiframe'] = self.method( :_html_COMARKiframe_METHOD )
        @_html_COMARKiframe = 
        trampCall(
              trampCall( self._make_MIMARKhtml_MIMARKelement_METHOD( 'make-html-element',
                  begin
                    if @global_lisp_binding.has_key?('_make_MIMARKhtml_MIMARKelement') then
                      trampCall(@_make_MIMARKhtml_MIMARKelement)
                    else raise NameError.new( "Error: undefined variable _make_MIMARKhtml_MIMARKelement", "_make_MIMARKhtml_MIMARKelement" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/text/html-lite.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"iframe"
                           )))
        )
      end
  end
 )


# -------------------------------------------------------
# [EOF]
# -------------------------------------------------------
