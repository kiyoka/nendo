#
#    This file is nendo's compiled library file. 
#    generated  "nendo -c src" command. 
# 

trampCall( 
  delayCall( '_load',  'load',
      begin
        if @global_lisp_binding.has_key?('_load') then
          trampCall(@_load)
        else raise NameError.new( "Error: undefined variable _load", "_load" ) end
        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
      end    ,
  [
      "srfi-1"
  ]
               )
 )
#--------------------

trampCall( 
  delayCall( '_load',  'load',
      begin
        if @global_lisp_binding.has_key?('_load') then
          trampCall(@_load)
        else raise NameError.new( "Error: undefined variable _load", "_load" ) end
        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
      end    ,
  [
      "srfi-26"
  ]
               )
 )
#--------------------

trampCall( 
  delayCall( '_load',  'load',
      begin
        if @global_lisp_binding.has_key?('_load') then
          trampCall(@_load)
        else raise NameError.new( "Error: undefined variable _load", "_load" ) end
        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
      end    ,
  [
      "util/match"
  ]
               )
 )
#--------------------

trampCall( 
  begin
      def self._but_MIMARKkth_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_but_MIMARKkth'] = self.method( :_but_MIMARKkth_METHOD )
    @_but_MIMARKkth = 
    trampCall(
          Proc.new { |_lis,_k| 
              begin
                ___lambda = lambda { |___gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81264| 
                    if ( 
                      begin
                        ___lambda = lambda { |___gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81270| 
                            if ( 
                              begin
                                  trampCall(___gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81270)
                                rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                              end
                             ) then
                                begin
                                    trampCall(___gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81270)
                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                end
                            else
                              false
                            end
                        } ; ___lambda.call(
                              trampCall( self._eqv_QUMARK_METHOD(  'eqv?',
                                  begin
                                    if @global_lisp_binding.has_key?('_eqv_QUMARK') then
                                      trampCall(@_eqv_QUMARK)
                                    else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:173"] + __e.backtrace ) ; raise __e
                                  end                                ,
                              [
                                  0                                  ,
                                    begin
                                        trampCall(___gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81264)
                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                    end
                              ]
                                           ))
                                   )
                      end
                     ) then
                        begin
                            delayCall( '_cdr',  'cdr',
                                begin
                                  if @global_lisp_binding.has_key?('_cdr') then
                                    trampCall(@_cdr)
                                  else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:37"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                  begin
                                      trampCall(_lis)
                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:36"] + __e.backtrace ) ; raise __e
                                  end
                            ]
                                         )
                        end
                    else
                        if ( 
                          begin
                            ___lambda = lambda { |___gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81271| 
                                if ( 
                                  begin
                                      trampCall(___gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81271)
                                    rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                  end
                                 ) then
                                    begin
                                        trampCall(___gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81271)
                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                    end
                                else
                                  false
                                end
                            } ; ___lambda.call(
                                  trampCall( self._eqv_QUMARK_METHOD(  'eqv?',
                                      begin
                                        if @global_lisp_binding.has_key?('_eqv_QUMARK') then
                                          trampCall(@_eqv_QUMARK)
                                        else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:173"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                      1                                      ,
                                        begin
                                            trampCall(___gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81264)
                                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                        end
                                  ]
                                               ))
                                       )
                          end
                         ) then
                            begin
                                delayCall( '_cons',  'cons',
                                    begin
                                      if @global_lisp_binding.has_key?('_cons') then
                                        trampCall(@_cons)
                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:33"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                [
                                      trampCall( self._car_METHOD(  'car',
                                          begin
                                            if @global_lisp_binding.has_key?('_car') then
                                              trampCall(@_car)
                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:35"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                      [
                                            begin
                                                trampCall(_lis)
                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:36"] + __e.backtrace ) ; raise __e
                                            end
                                      ]
                                                   ))                                    ,
                                      trampCall( self._cddr_METHOD(  'cddr',
                                          begin
                                            if @global_lisp_binding.has_key?('_cddr') then
                                              trampCall(@_cddr)
                                            else raise NameError.new( "Error: undefined variable _cddr", "_cddr" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:33"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                      [
                                            begin
                                                trampCall(_lis)
                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:36"] + __e.backtrace ) ; raise __e
                                            end
                                      ]
                                                   ))
                                ]
                                             )
                            end
                        else
                            if ( 
                              begin
                                ___lambda = lambda { |___gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81272| 
                                    if ( 
                                      begin
                                          trampCall(___gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81272)
                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                      end
                                     ) then
                                        begin
                                            trampCall(___gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81272)
                                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                        end
                                    else
                                      false
                                    end
                                } ; ___lambda.call(
                                      trampCall( self._eqv_QUMARK_METHOD(  'eqv?',
                                          begin
                                            if @global_lisp_binding.has_key?('_eqv_QUMARK') then
                                              trampCall(@_eqv_QUMARK)
                                            else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:173"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                      [
                                          2                                          ,
                                            begin
                                                trampCall(___gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81264)
                                              rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                            end
                                      ]
                                                   ))
                                           )
                              end
                             ) then
                                begin
                                    delayCall( '_list_ASMARK',  'list*',
                                        begin
                                          if @global_lisp_binding.has_key?('_list_ASMARK') then
                                            trampCall(@_list_ASMARK)
                                          else raise NameError.new( "Error: undefined variable _list_ASMARK", "_list_ASMARK" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:35"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                    [
                                          trampCall( self._car_METHOD(  'car',
                                              begin
                                                if @global_lisp_binding.has_key?('_car') then
                                                  trampCall(@_car)
                                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:35"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                          [
                                                begin
                                                    trampCall(_lis)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:36"] + __e.backtrace ) ; raise __e
                                                end
                                          ]
                                                       ))                                        ,
                                          trampCall( self._cadr_METHOD(  'cadr',
                                              begin
                                                if @global_lisp_binding.has_key?('_cadr') then
                                                  trampCall(@_cadr)
                                                else raise NameError.new( "Error: undefined variable _cadr", "_cadr" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:35"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                          [
                                                begin
                                                    trampCall(_lis)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:36"] + __e.backtrace ) ; raise __e
                                                end
                                          ]
                                                       ))                                        ,
                                          trampCall( self._cdddr_METHOD(  'cdddr',
                                              begin
                                                if @global_lisp_binding.has_key?('_cdddr') then
                                                  trampCall(@_cdddr)
                                                else raise NameError.new( "Error: undefined variable _cdddr", "_cdddr" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:34"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                          [
                                                begin
                                                    trampCall(_lis)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:36"] + __e.backtrace ) ; raise __e
                                                end
                                          ]
                                                       ))
                                    ]
                                                 )
                                end
                            else
                                if ( 
                                  begin
                                    ___lambda = lambda { |___gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81273| 
                                        if ( 
                                          begin
                                              trampCall(___gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81273)
                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                          end
                                         ) then
                                            begin
                                                trampCall(___gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81273)
                                              rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                            end
                                        else
                                          false
                                        end
                                    } ; ___lambda.call(
                                          trampCall( self._eqv_QUMARK_METHOD(  'eqv?',
                                              begin
                                                if @global_lisp_binding.has_key?('_eqv_QUMARK') then
                                                  trampCall(@_eqv_QUMARK)
                                                else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:173"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                          [
                                              3                                              ,
                                                begin
                                                    trampCall(___gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81264)
                                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                end
                                          ]
                                                       ))
                                               )
                                  end
                                 ) then
                                    begin
                                        delayCall( '_list_ASMARK',  'list*',
                                            begin
                                              if @global_lisp_binding.has_key?('_list_ASMARK') then
                                                trampCall(@_list_ASMARK)
                                              else raise NameError.new( "Error: undefined variable _list_ASMARK", "_list_ASMARK" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:35"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                        [
                                              trampCall( self._car_METHOD(  'car',
                                                  begin
                                                    if @global_lisp_binding.has_key?('_car') then
                                                      trampCall(@_car)
                                                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:35"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                              [
                                                    begin
                                                        trampCall(_lis)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:36"] + __e.backtrace ) ; raise __e
                                                    end
                                              ]
                                                           ))                                            ,
                                              trampCall( self._cadr_METHOD(  'cadr',
                                                  begin
                                                    if @global_lisp_binding.has_key?('_cadr') then
                                                      trampCall(@_cadr)
                                                    else raise NameError.new( "Error: undefined variable _cadr", "_cadr" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:35"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                              [
                                                    begin
                                                        trampCall(_lis)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:36"] + __e.backtrace ) ; raise __e
                                                    end
                                              ]
                                                           ))                                            ,
                                              trampCall( self._caddr_METHOD(  'caddr',
                                                  begin
                                                    if @global_lisp_binding.has_key?('_caddr') then
                                                      trampCall(@_caddr)
                                                    else raise NameError.new( "Error: undefined variable _caddr", "_caddr" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:35"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                              [
                                                    begin
                                                        trampCall(_lis)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:36"] + __e.backtrace ) ; raise __e
                                                    end
                                              ]
                                                           ))                                            ,
                                              trampCall( self._cddddr_METHOD(  'cddddr',
                                                  begin
                                                    if @global_lisp_binding.has_key?('_cddddr') then
                                                      trampCall(@_cddddr)
                                                    else raise NameError.new( "Error: undefined variable _cddddr", "_cddddr" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:35"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                              [
                                                    begin
                                                        trampCall(_lis)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:36"] + __e.backtrace ) ; raise __e
                                                    end
                                              ]
                                                           ))
                                        ]
                                                     )
                                    end
                                else
                                    if ( 
                                    true
                                     ) then
                                        begin
                                            delayCall( '_call_MIMARKwith_MIMARKvalues',  'call-with-values',
                                                begin
                                                  if @global_lisp_binding.has_key?('_call_MIMARKwith_MIMARKvalues') then
                                                    trampCall(@_call_MIMARKwith_MIMARKvalues)
                                                  else raise NameError.new( "Error: undefined variable _call_MIMARKwith_MIMARKvalues", "_call_MIMARKwith_MIMARKvalues" ) end
                                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                  Proc.new { || 
                                                      trampCall( self._split_MIMARKat_METHOD(  'split-at',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_split_MIMARKat') then
                                                              trampCall(@_split_MIMARKat)
                                                            else raise NameError.new( "Error: undefined variable _split_MIMARKat", "_split_MIMARKat" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:36"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                      [
                                                            begin
                                                                trampCall(_lis)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:36"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            begin
                                                                trampCall(_k)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:36"] + __e.backtrace ) ; raise __e
                                                            end
                                                      ]
                                                                   ))
                                                  }                                                ,
                                                  Proc.new { |_head,_tail| 
                                                      trampCall( self._append_EXMARK_METHOD(  'append!',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_append_EXMARK') then
                                                              trampCall(@_append_EXMARK)
                                                            else raise NameError.new( "Error: undefined variable _append_EXMARK", "_append_EXMARK" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:37"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                      [
                                                            begin
                                                                trampCall(_head)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:37"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            trampCall( self._cdr_METHOD(  'cdr',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_cdr') then
                                                                    trampCall(@_cdr)
                                                                  else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:37"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                            [
                                                                  begin
                                                                      trampCall(_tail)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:37"] + __e.backtrace ) ; raise __e
                                                                  end
                                                            ]
                                                                         ))
                                                      ]
                                                                   ))
                                                  }
                                            ]
                                                         )
                                        end
                                    else
                                        Cell.new()
                                    end
                                end
                            end
                        end
                    end
                } ; ___lambda.call(
                      begin
                          trampCall(_k)
                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:36"] + __e.backtrace ) ; raise __e
                      end
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._permutations_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_permutations'] = self.method( :_permutations_METHOD )
    @_permutations = 
    trampCall(
          Proc.new { |_set| 
              begin
                ___lambda = lambda { |__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81274| 
                    if ( 
                      trampCall( self._null_QUMARK_METHOD(  'null?',
                          begin
                            if @global_lisp_binding.has_key?('_null_QUMARK') then
                              trampCall(@_null_QUMARK)
                            else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:281"] + __e.backtrace ) ; raise __e
                          end                        ,
                      [
                            begin
                                trampCall(_set)
                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:56"] + __e.backtrace ) ; raise __e
                            end
                      ]
                                   ))
                     ) then
                        begin
                            delayCall( '_list',  'list',
                                begin
                                  if @global_lisp_binding.has_key?('_list') then
                                    trampCall(@_list)
                                  else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:44"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                Cell.new()
                            ]
                                         )
                        end
                    else
                        delayCall( '__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81274',  '_failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81274',
                            begin
                                trampCall(__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81274)
                              rescue => __e ; __e.set_backtrace( ["dynamic S-expression ( no source ):1"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                        ]
                                     )
                    end
                } ; ___lambda.call(
                      Proc.new { || 
                          begin
                            ___lambda = lambda { |__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81275| 
                                if ( 
                                  if ( 
                                    trampCall( self._not_METHOD(  'not',
                                        begin
                                          if @global_lisp_binding.has_key?('_not') then
                                            trampCall(@_not)
                                          else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:175"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                    [
                                          trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                              begin
                                                if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                  trampCall(@_eq_QUMARK)
                                                else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                          [
                                              false                                              ,
                                                trampCall( self._pair_QUMARK_METHOD(  'pair?',
                                                    begin
                                                      if @global_lisp_binding.has_key?('_pair_QUMARK') then
                                                        trampCall(@_pair_QUMARK)
                                                      else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                [
                                                      begin
                                                          trampCall(_set)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:56"] + __e.backtrace ) ; raise __e
                                                      end
                                                ]
                                                             ))
                                          ]
                                                       ))
                                    ]
                                                 ))
                                   ) then
                                      trampCall( self._null_QUMARK_METHOD(  'null?',
                                          begin
                                            if @global_lisp_binding.has_key?('_null_QUMARK') then
                                              trampCall(@_null_QUMARK)
                                            else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:281"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                      [
                                            trampCall( self._cdr_METHOD(  'cdr',
                                                begin
                                                  if @global_lisp_binding.has_key?('_cdr') then
                                                    trampCall(@_cdr)
                                                  else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:37"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                  begin
                                                      trampCall(_set)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:56"] + __e.backtrace ) ; raise __e
                                                  end
                                            ]
                                                         ))
                                      ]
                                                   ))
                                  else
                                    false
                                  end
                                 ) then
                                    begin
                                      ___lambda = lambda { |__w__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81277| 
                                          begin
                                              begin
                                                ___lambda = lambda { |_a| 
                                                    begin
                                                        delayCall( '_list',  'list',
                                                            begin
                                                              if @global_lisp_binding.has_key?('_list') then
                                                                trampCall(@_list)
                                                              else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:44"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                        [
                                                              begin
                                                                  trampCall(_set)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:56"] + __e.backtrace ) ; raise __e
                                                              end
                                                        ]
                                                                     )
                                                    end
                                                } ; ___lambda.call(
                                                    __w__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81277
                                                           )
                                              end
                                          end
                                      } ; ___lambda.call(
                                            trampCall( self._car_METHOD(  'car',
                                                begin
                                                  if @global_lisp_binding.has_key?('_car') then
                                                    trampCall(@_car)
                                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:35"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                  begin
                                                      trampCall(_set)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:56"] + __e.backtrace ) ; raise __e
                                                  end
                                            ]
                                                         ))
                                                 )
                                    end
                                else
                                    delayCall( '__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81275',  '_failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81275',
                                        begin
                                            trampCall(__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81275)
                                          rescue => __e ; __e.set_backtrace( ["dynamic S-expression ( no source ):1"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                    [
                                    ]
                                                 )
                                end
                            } ; ___lambda.call(
                                  Proc.new { || 
                                      begin
                                        ___lambda = lambda { |__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81276| 
                                            begin
                                                if ( 
                                                  trampCall( self._pair_QUMARK_METHOD(  'pair?',
                                                      begin
                                                        if @global_lisp_binding.has_key?('_pair_QUMARK') then
                                                          trampCall(@_pair_QUMARK)
                                                        else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                  [
                                                        begin
                                                            trampCall(_set)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:56"] + __e.backtrace ) ; raise __e
                                                        end
                                                  ]
                                                               ))
                                                 ) then
                                                    begin
                                                      ___lambda = lambda { |__w__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81346,__x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81347| 
                                                          begin
                                                              begin
                                                                ___lambda = lambda { |_a| 
                                                                    if ( 
                                                                      if ( 
                                                                        trampCall( self._not_METHOD(  'not',
                                                                            begin
                                                                              if @global_lisp_binding.has_key?('_not') then
                                                                                trampCall(@_not)
                                                                              else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:175"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                        [
                                                                              trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                                                                  begin
                                                                                    if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                                                      trampCall(@_eq_QUMARK)
                                                                                    else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                                                    rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                  end                                                                                ,
                                                                              [
                                                                                  false                                                                                  ,
                                                                                    trampCall( self._pair_QUMARK_METHOD(  'pair?',
                                                                                        begin
                                                                                          if @global_lisp_binding.has_key?('_pair_QUMARK') then
                                                                                            trampCall(@_pair_QUMARK)
                                                                                          else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                                                                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                        end                                                                                      ,
                                                                                    [
                                                                                        __x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81347
                                                                                    ]
                                                                                                 ))
                                                                              ]
                                                                                           ))
                                                                        ]
                                                                                     ))
                                                                       ) then
                                                                          trampCall( self._null_QUMARK_METHOD(  'null?',
                                                                              begin
                                                                                if @global_lisp_binding.has_key?('_null_QUMARK') then
                                                                                  trampCall(@_null_QUMARK)
                                                                                else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:281"] + __e.backtrace ) ; raise __e
                                                                              end                                                                            ,
                                                                          [
                                                                                trampCall( self._cdr_METHOD(  'cdr',
                                                                                    begin
                                                                                      if @global_lisp_binding.has_key?('_cdr') then
                                                                                        trampCall(@_cdr)
                                                                                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:37"] + __e.backtrace ) ; raise __e
                                                                                    end                                                                                  ,
                                                                                [
                                                                                    __x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81347
                                                                                ]
                                                                                             ))
                                                                          ]
                                                                                       ))
                                                                      else
                                                                        false
                                                                      end
                                                                     ) then
                                                                        begin
                                                                          ___lambda = lambda { |__w__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81476| 
                                                                              begin
                                                                                  begin
                                                                                    ___lambda = lambda { |_b| 
                                                                                        begin
                                                                                            delayCall( '_cons',  'cons',
                                                                                                begin
                                                                                                  if @global_lisp_binding.has_key?('_cons') then
                                                                                                    trampCall(@_cons)
                                                                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:53"] + __e.backtrace ) ; raise __e
                                                                                                end                                                                                              ,
                                                                                            [
                                                                                                  begin
                                                                                                      trampCall(_set)
                                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:56"] + __e.backtrace ) ; raise __e
                                                                                                  end                                                                                                ,
                                                                                                  trampCall( self._cons_METHOD(  'cons',
                                                                                                      begin
                                                                                                        if @global_lisp_binding.has_key?('_cons') then
                                                                                                          trampCall(@_cons)
                                                                                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:53"] + __e.backtrace ) ; raise __e
                                                                                                      end                                                                                                    ,
                                                                                                  [
                                                                                                        trampCall( self._cons_METHOD(  'cons',
                                                                                                            begin
                                                                                                              if @global_lisp_binding.has_key?('_cons') then
                                                                                                                trampCall(@_cons)
                                                                                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:53"] + __e.backtrace ) ; raise __e
                                                                                                            end                                                                                                          ,
                                                                                                        [
                                                                                                              begin
                                                                                                                  trampCall(_b)
                                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:47"] + __e.backtrace ) ; raise __e
                                                                                                              end                                                                                                            ,
                                                                                                              trampCall( self._cons_METHOD(  'cons',
                                                                                                                  begin
                                                                                                                    if @global_lisp_binding.has_key?('_cons') then
                                                                                                                      trampCall(@_cons)
                                                                                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:53"] + __e.backtrace ) ; raise __e
                                                                                                                  end                                                                                                                ,
                                                                                                              [
                                                                                                                    begin
                                                                                                                        trampCall(_a)
                                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:47"] + __e.backtrace ) ; raise __e
                                                                                                                    end                                                                                                                  ,
                                                                                                                  Cell.new()
                                                                                                              ]
                                                                                                                           ))
                                                                                                        ]
                                                                                                                     ))                                                                                                      ,
                                                                                                      Cell.new()
                                                                                                  ]
                                                                                                               ))
                                                                                            ]
                                                                                                         )
                                                                                        end
                                                                                    } ; ___lambda.call(
                                                                                        __w__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81476
                                                                                               )
                                                                                  end
                                                                              end
                                                                          } ; ___lambda.call(
                                                                                trampCall( self._car_METHOD(  'car',
                                                                                    begin
                                                                                      if @global_lisp_binding.has_key?('_car') then
                                                                                        trampCall(@_car)
                                                                                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:35"] + __e.backtrace ) ; raise __e
                                                                                    end                                                                                  ,
                                                                                [
                                                                                    __x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81347
                                                                                ]
                                                                                             ))
                                                                                     )
                                                                        end
                                                                    else
                                                                        delayCall( '__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81276',  '_failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81276',
                                                                            begin
                                                                                trampCall(__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81276)
                                                                              rescue => __e ; __e.set_backtrace( ["dynamic S-expression ( no source ):1"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                        [
                                                                        ]
                                                                                     )
                                                                    end
                                                                } ; ___lambda.call(
                                                                    __w__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81346
                                                                           )
                                                              end
                                                          end
                                                      } ; ___lambda.call(
                                                            trampCall( self._car_METHOD(  'car',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_car') then
                                                                    trampCall(@_car)
                                                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:35"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                            [
                                                                  begin
                                                                      trampCall(_set)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:56"] + __e.backtrace ) ; raise __e
                                                                  end
                                                            ]
                                                                         ))                                                          ,
                                                            trampCall( self._cdr_METHOD(  'cdr',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_cdr') then
                                                                    trampCall(@_cdr)
                                                                  else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:37"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                            [
                                                                  begin
                                                                      trampCall(_set)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:56"] + __e.backtrace ) ; raise __e
                                                                  end
                                                            ]
                                                                         ))
                                                                 )
                                                    end
                                                else
                                                    delayCall( '__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81276',  '_failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81276',
                                                        begin
                                                            trampCall(__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81276)
                                                          rescue => __e ; __e.set_backtrace( ["dynamic S-expression ( no source ):1"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                    [
                                                    ]
                                                                 )
                                                end
                                            end
                                        } ; ___lambda.call(
                                              Proc.new { || 
                                                  begin
                                                    ___lambda = lambda { |__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81278| 
                                                        begin
                                                            if ( 
                                                              trampCall( self._pair_QUMARK_METHOD(  'pair?',
                                                                  begin
                                                                    if @global_lisp_binding.has_key?('_pair_QUMARK') then
                                                                      trampCall(@_pair_QUMARK)
                                                                    else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                                                    rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                              [
                                                                    begin
                                                                        trampCall(_set)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:56"] + __e.backtrace ) ; raise __e
                                                                    end
                                                              ]
                                                                           ))
                                                             ) then
                                                                begin
                                                                  ___lambda = lambda { |__w__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81384,__x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81385| 
                                                                      begin
                                                                          begin
                                                                            ___lambda = lambda { |_a| 
                                                                                begin
                                                                                    if ( 
                                                                                      trampCall( self._pair_QUMARK_METHOD(  'pair?',
                                                                                          begin
                                                                                            if @global_lisp_binding.has_key?('_pair_QUMARK') then
                                                                                              trampCall(@_pair_QUMARK)
                                                                                            else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                                                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                          end                                                                                        ,
                                                                                      [
                                                                                          __x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81385
                                                                                      ]
                                                                                                   ))
                                                                                     ) then
                                                                                        begin
                                                                                          ___lambda = lambda { |__w__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81543,__x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81544| 
                                                                                              begin
                                                                                                  begin
                                                                                                    ___lambda = lambda { |_b| 
                                                                                                        if ( 
                                                                                                          if ( 
                                                                                                            trampCall( self._not_METHOD(  'not',
                                                                                                                begin
                                                                                                                  if @global_lisp_binding.has_key?('_not') then
                                                                                                                    trampCall(@_not)
                                                                                                                  else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:175"] + __e.backtrace ) ; raise __e
                                                                                                                end                                                                                                              ,
                                                                                                            [
                                                                                                                  trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                                                                                                      begin
                                                                                                                        if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                                                                                          trampCall(@_eq_QUMARK)
                                                                                                                        else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                                                                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                                                      end                                                                                                                    ,
                                                                                                                  [
                                                                                                                      false                                                                                                                      ,
                                                                                                                        trampCall( self._pair_QUMARK_METHOD(  'pair?',
                                                                                                                            begin
                                                                                                                              if @global_lisp_binding.has_key?('_pair_QUMARK') then
                                                                                                                                trampCall(@_pair_QUMARK)
                                                                                                                              else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                                                                                                              rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                                                            end                                                                                                                          ,
                                                                                                                        [
                                                                                                                            __x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81544
                                                                                                                        ]
                                                                                                                                     ))
                                                                                                                  ]
                                                                                                                               ))
                                                                                                            ]
                                                                                                                         ))
                                                                                                           ) then
                                                                                                              trampCall( self._null_QUMARK_METHOD(  'null?',
                                                                                                                  begin
                                                                                                                    if @global_lisp_binding.has_key?('_null_QUMARK') then
                                                                                                                      trampCall(@_null_QUMARK)
                                                                                                                    else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:281"] + __e.backtrace ) ; raise __e
                                                                                                                  end                                                                                                                ,
                                                                                                              [
                                                                                                                    trampCall( self._cdr_METHOD(  'cdr',
                                                                                                                        begin
                                                                                                                          if @global_lisp_binding.has_key?('_cdr') then
                                                                                                                            trampCall(@_cdr)
                                                                                                                          else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:37"] + __e.backtrace ) ; raise __e
                                                                                                                        end                                                                                                                      ,
                                                                                                                    [
                                                                                                                        __x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81544
                                                                                                                    ]
                                                                                                                                 ))
                                                                                                              ]
                                                                                                                           ))
                                                                                                          else
                                                                                                            false
                                                                                                          end
                                                                                                         ) then
                                                                                                            begin
                                                                                                              ___lambda = lambda { |__w__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81575| 
                                                                                                                  begin
                                                                                                                      begin
                                                                                                                        ___lambda = lambda { |_c| 
                                                                                                                            begin
                                                                                                                                delayCall( '_cons',  'cons',
                                                                                                                                    begin
                                                                                                                                      if @global_lisp_binding.has_key?('_cons') then
                                                                                                                                        trampCall(@_cons)
                                                                                                                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:53"] + __e.backtrace ) ; raise __e
                                                                                                                                    end                                                                                                                                  ,
                                                                                                                                [
                                                                                                                                      begin
                                                                                                                                          trampCall(_set)
                                                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:56"] + __e.backtrace ) ; raise __e
                                                                                                                                      end                                                                                                                                    ,
                                                                                                                                      trampCall( self._cons_METHOD(  'cons',
                                                                                                                                          begin
                                                                                                                                            if @global_lisp_binding.has_key?('_cons') then
                                                                                                                                              trampCall(@_cons)
                                                                                                                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:53"] + __e.backtrace ) ; raise __e
                                                                                                                                          end                                                                                                                                        ,
                                                                                                                                      [
                                                                                                                                            trampCall( self._cons_METHOD(  'cons',
                                                                                                                                                begin
                                                                                                                                                  if @global_lisp_binding.has_key?('_cons') then
                                                                                                                                                    trampCall(@_cons)
                                                                                                                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:53"] + __e.backtrace ) ; raise __e
                                                                                                                                                end                                                                                                                                              ,
                                                                                                                                            [
                                                                                                                                                  begin
                                                                                                                                                      trampCall(_a)
                                                                                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:47"] + __e.backtrace ) ; raise __e
                                                                                                                                                  end                                                                                                                                                ,
                                                                                                                                                  trampCall( self._cons_METHOD(  'cons',
                                                                                                                                                      begin
                                                                                                                                                        if @global_lisp_binding.has_key?('_cons') then
                                                                                                                                                          trampCall(@_cons)
                                                                                                                                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:53"] + __e.backtrace ) ; raise __e
                                                                                                                                                      end                                                                                                                                                    ,
                                                                                                                                                  [
                                                                                                                                                        begin
                                                                                                                                                            trampCall(_c)
                                                                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:47"] + __e.backtrace ) ; raise __e
                                                                                                                                                        end                                                                                                                                                      ,
                                                                                                                                                        trampCall( self._cons_METHOD(  'cons',
                                                                                                                                                            begin
                                                                                                                                                              if @global_lisp_binding.has_key?('_cons') then
                                                                                                                                                                trampCall(@_cons)
                                                                                                                                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:53"] + __e.backtrace ) ; raise __e
                                                                                                                                                            end                                                                                                                                                          ,
                                                                                                                                                        [
                                                                                                                                                              begin
                                                                                                                                                                  trampCall(_b)
                                                                                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:47"] + __e.backtrace ) ; raise __e
                                                                                                                                                              end                                                                                                                                                            ,
                                                                                                                                                            Cell.new()
                                                                                                                                                        ]
                                                                                                                                                                     ))
                                                                                                                                                  ]
                                                                                                                                                               ))
                                                                                                                                            ]
                                                                                                                                                         ))                                                                                                                                          ,
                                                                                                                                            trampCall( self._cons_METHOD(  'cons',
                                                                                                                                                begin
                                                                                                                                                  if @global_lisp_binding.has_key?('_cons') then
                                                                                                                                                    trampCall(@_cons)
                                                                                                                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:53"] + __e.backtrace ) ; raise __e
                                                                                                                                                end                                                                                                                                              ,
                                                                                                                                            [
                                                                                                                                                  trampCall( self._cons_METHOD(  'cons',
                                                                                                                                                      begin
                                                                                                                                                        if @global_lisp_binding.has_key?('_cons') then
                                                                                                                                                          trampCall(@_cons)
                                                                                                                                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:53"] + __e.backtrace ) ; raise __e
                                                                                                                                                      end                                                                                                                                                    ,
                                                                                                                                                  [
                                                                                                                                                        begin
                                                                                                                                                            trampCall(_b)
                                                                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:47"] + __e.backtrace ) ; raise __e
                                                                                                                                                        end                                                                                                                                                      ,
                                                                                                                                                        trampCall( self._cons_METHOD(  'cons',
                                                                                                                                                            begin
                                                                                                                                                              if @global_lisp_binding.has_key?('_cons') then
                                                                                                                                                                trampCall(@_cons)
                                                                                                                                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:53"] + __e.backtrace ) ; raise __e
                                                                                                                                                            end                                                                                                                                                          ,
                                                                                                                                                        [
                                                                                                                                                              begin
                                                                                                                                                                  trampCall(_a)
                                                                                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:47"] + __e.backtrace ) ; raise __e
                                                                                                                                                              end                                                                                                                                                            ,
                                                                                                                                                              trampCall( self._cons_METHOD(  'cons',
                                                                                                                                                                  begin
                                                                                                                                                                    if @global_lisp_binding.has_key?('_cons') then
                                                                                                                                                                      trampCall(@_cons)
                                                                                                                                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:53"] + __e.backtrace ) ; raise __e
                                                                                                                                                                  end                                                                                                                                                                ,
                                                                                                                                                              [
                                                                                                                                                                    begin
                                                                                                                                                                        trampCall(_c)
                                                                                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:47"] + __e.backtrace ) ; raise __e
                                                                                                                                                                    end                                                                                                                                                                  ,
                                                                                                                                                                  Cell.new()
                                                                                                                                                              ]
                                                                                                                                                                           ))
                                                                                                                                                        ]
                                                                                                                                                                     ))
                                                                                                                                                  ]
                                                                                                                                                               ))                                                                                                                                                ,
                                                                                                                                                  trampCall( self._cons_METHOD(  'cons',
                                                                                                                                                      begin
                                                                                                                                                        if @global_lisp_binding.has_key?('_cons') then
                                                                                                                                                          trampCall(@_cons)
                                                                                                                                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:53"] + __e.backtrace ) ; raise __e
                                                                                                                                                      end                                                                                                                                                    ,
                                                                                                                                                  [
                                                                                                                                                        trampCall( self._cons_METHOD(  'cons',
                                                                                                                                                            begin
                                                                                                                                                              if @global_lisp_binding.has_key?('_cons') then
                                                                                                                                                                trampCall(@_cons)
                                                                                                                                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:53"] + __e.backtrace ) ; raise __e
                                                                                                                                                            end                                                                                                                                                          ,
                                                                                                                                                        [
                                                                                                                                                              begin
                                                                                                                                                                  trampCall(_b)
                                                                                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:47"] + __e.backtrace ) ; raise __e
                                                                                                                                                              end                                                                                                                                                            ,
                                                                                                                                                              trampCall( self._cons_METHOD(  'cons',
                                                                                                                                                                  begin
                                                                                                                                                                    if @global_lisp_binding.has_key?('_cons') then
                                                                                                                                                                      trampCall(@_cons)
                                                                                                                                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:53"] + __e.backtrace ) ; raise __e
                                                                                                                                                                  end                                                                                                                                                                ,
                                                                                                                                                              [
                                                                                                                                                                    begin
                                                                                                                                                                        trampCall(_c)
                                                                                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:47"] + __e.backtrace ) ; raise __e
                                                                                                                                                                    end                                                                                                                                                                  ,
                                                                                                                                                                    trampCall( self._cons_METHOD(  'cons',
                                                                                                                                                                        begin
                                                                                                                                                                          if @global_lisp_binding.has_key?('_cons') then
                                                                                                                                                                            trampCall(@_cons)
                                                                                                                                                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:53"] + __e.backtrace ) ; raise __e
                                                                                                                                                                        end                                                                                                                                                                      ,
                                                                                                                                                                    [
                                                                                                                                                                          begin
                                                                                                                                                                              trampCall(_a)
                                                                                                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:47"] + __e.backtrace ) ; raise __e
                                                                                                                                                                          end                                                                                                                                                                        ,
                                                                                                                                                                        Cell.new()
                                                                                                                                                                    ]
                                                                                                                                                                                 ))
                                                                                                                                                              ]
                                                                                                                                                                           ))
                                                                                                                                                        ]
                                                                                                                                                                     ))                                                                                                                                                      ,
                                                                                                                                                        trampCall( self._cons_METHOD(  'cons',
                                                                                                                                                            begin
                                                                                                                                                              if @global_lisp_binding.has_key?('_cons') then
                                                                                                                                                                trampCall(@_cons)
                                                                                                                                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:53"] + __e.backtrace ) ; raise __e
                                                                                                                                                            end                                                                                                                                                          ,
                                                                                                                                                        [
                                                                                                                                                              trampCall( self._cons_METHOD(  'cons',
                                                                                                                                                                  begin
                                                                                                                                                                    if @global_lisp_binding.has_key?('_cons') then
                                                                                                                                                                      trampCall(@_cons)
                                                                                                                                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:53"] + __e.backtrace ) ; raise __e
                                                                                                                                                                  end                                                                                                                                                                ,
                                                                                                                                                              [
                                                                                                                                                                    begin
                                                                                                                                                                        trampCall(_c)
                                                                                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:47"] + __e.backtrace ) ; raise __e
                                                                                                                                                                    end                                                                                                                                                                  ,
                                                                                                                                                                    trampCall( self._cons_METHOD(  'cons',
                                                                                                                                                                        begin
                                                                                                                                                                          if @global_lisp_binding.has_key?('_cons') then
                                                                                                                                                                            trampCall(@_cons)
                                                                                                                                                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:53"] + __e.backtrace ) ; raise __e
                                                                                                                                                                        end                                                                                                                                                                      ,
                                                                                                                                                                    [
                                                                                                                                                                          begin
                                                                                                                                                                              trampCall(_a)
                                                                                                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:47"] + __e.backtrace ) ; raise __e
                                                                                                                                                                          end                                                                                                                                                                        ,
                                                                                                                                                                          trampCall( self._cons_METHOD(  'cons',
                                                                                                                                                                              begin
                                                                                                                                                                                if @global_lisp_binding.has_key?('_cons') then
                                                                                                                                                                                  trampCall(@_cons)
                                                                                                                                                                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:53"] + __e.backtrace ) ; raise __e
                                                                                                                                                                              end                                                                                                                                                                            ,
                                                                                                                                                                          [
                                                                                                                                                                                begin
                                                                                                                                                                                    trampCall(_b)
                                                                                                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:47"] + __e.backtrace ) ; raise __e
                                                                                                                                                                                end                                                                                                                                                                              ,
                                                                                                                                                                              Cell.new()
                                                                                                                                                                          ]
                                                                                                                                                                                       ))
                                                                                                                                                                    ]
                                                                                                                                                                                 ))
                                                                                                                                                              ]
                                                                                                                                                                           ))                                                                                                                                                            ,
                                                                                                                                                              trampCall( self._cons_METHOD(  'cons',
                                                                                                                                                                  begin
                                                                                                                                                                    if @global_lisp_binding.has_key?('_cons') then
                                                                                                                                                                      trampCall(@_cons)
                                                                                                                                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:53"] + __e.backtrace ) ; raise __e
                                                                                                                                                                  end                                                                                                                                                                ,
                                                                                                                                                              [
                                                                                                                                                                    trampCall( self._cons_METHOD(  'cons',
                                                                                                                                                                        begin
                                                                                                                                                                          if @global_lisp_binding.has_key?('_cons') then
                                                                                                                                                                            trampCall(@_cons)
                                                                                                                                                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:53"] + __e.backtrace ) ; raise __e
                                                                                                                                                                        end                                                                                                                                                                      ,
                                                                                                                                                                    [
                                                                                                                                                                          begin
                                                                                                                                                                              trampCall(_c)
                                                                                                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:47"] + __e.backtrace ) ; raise __e
                                                                                                                                                                          end                                                                                                                                                                        ,
                                                                                                                                                                          trampCall( self._cons_METHOD(  'cons',
                                                                                                                                                                              begin
                                                                                                                                                                                if @global_lisp_binding.has_key?('_cons') then
                                                                                                                                                                                  trampCall(@_cons)
                                                                                                                                                                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:53"] + __e.backtrace ) ; raise __e
                                                                                                                                                                              end                                                                                                                                                                            ,
                                                                                                                                                                          [
                                                                                                                                                                                begin
                                                                                                                                                                                    trampCall(_b)
                                                                                                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:47"] + __e.backtrace ) ; raise __e
                                                                                                                                                                                end                                                                                                                                                                              ,
                                                                                                                                                                                trampCall( self._cons_METHOD(  'cons',
                                                                                                                                                                                    begin
                                                                                                                                                                                      if @global_lisp_binding.has_key?('_cons') then
                                                                                                                                                                                        trampCall(@_cons)
                                                                                                                                                                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:53"] + __e.backtrace ) ; raise __e
                                                                                                                                                                                    end                                                                                                                                                                                  ,
                                                                                                                                                                                [
                                                                                                                                                                                      begin
                                                                                                                                                                                          trampCall(_a)
                                                                                                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:47"] + __e.backtrace ) ; raise __e
                                                                                                                                                                                      end                                                                                                                                                                                    ,
                                                                                                                                                                                    Cell.new()
                                                                                                                                                                                ]
                                                                                                                                                                                             ))
                                                                                                                                                                          ]
                                                                                                                                                                                       ))
                                                                                                                                                                    ]
                                                                                                                                                                                 ))                                                                                                                                                                  ,
                                                                                                                                                                  Cell.new()
                                                                                                                                                              ]
                                                                                                                                                                           ))
                                                                                                                                                        ]
                                                                                                                                                                     ))
                                                                                                                                                  ]
                                                                                                                                                               ))
                                                                                                                                            ]
                                                                                                                                                         ))
                                                                                                                                      ]
                                                                                                                                                   ))
                                                                                                                                ]
                                                                                                                                             )
                                                                                                                            end
                                                                                                                        } ; ___lambda.call(
                                                                                                                            __w__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81575
                                                                                                                                   )
                                                                                                                      end
                                                                                                                  end
                                                                                                              } ; ___lambda.call(
                                                                                                                    trampCall( self._car_METHOD(  'car',
                                                                                                                        begin
                                                                                                                          if @global_lisp_binding.has_key?('_car') then
                                                                                                                            trampCall(@_car)
                                                                                                                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:35"] + __e.backtrace ) ; raise __e
                                                                                                                        end                                                                                                                      ,
                                                                                                                    [
                                                                                                                        __x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81544
                                                                                                                    ]
                                                                                                                                 ))
                                                                                                                         )
                                                                                                            end
                                                                                                        else
                                                                                                            delayCall( '__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81278',  '_failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81278',
                                                                                                                begin
                                                                                                                    trampCall(__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81278)
                                                                                                                  rescue => __e ; __e.set_backtrace( ["dynamic S-expression ( no source ):1"] + __e.backtrace ) ; raise __e
                                                                                                                end                                                                                                              ,
                                                                                                            [
                                                                                                            ]
                                                                                                                         )
                                                                                                        end
                                                                                                    } ; ___lambda.call(
                                                                                                        __w__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81543
                                                                                                               )
                                                                                                  end
                                                                                              end
                                                                                          } ; ___lambda.call(
                                                                                                trampCall( self._car_METHOD(  'car',
                                                                                                    begin
                                                                                                      if @global_lisp_binding.has_key?('_car') then
                                                                                                        trampCall(@_car)
                                                                                                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:35"] + __e.backtrace ) ; raise __e
                                                                                                    end                                                                                                  ,
                                                                                                [
                                                                                                    __x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81385
                                                                                                ]
                                                                                                             ))                                                                                              ,
                                                                                                trampCall( self._cdr_METHOD(  'cdr',
                                                                                                    begin
                                                                                                      if @global_lisp_binding.has_key?('_cdr') then
                                                                                                        trampCall(@_cdr)
                                                                                                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:37"] + __e.backtrace ) ; raise __e
                                                                                                    end                                                                                                  ,
                                                                                                [
                                                                                                    __x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81385
                                                                                                ]
                                                                                                             ))
                                                                                                     )
                                                                                        end
                                                                                    else
                                                                                        delayCall( '__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81278',  '_failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81278',
                                                                                            begin
                                                                                                trampCall(__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81278)
                                                                                              rescue => __e ; __e.set_backtrace( ["dynamic S-expression ( no source ):1"] + __e.backtrace ) ; raise __e
                                                                                            end                                                                                          ,
                                                                                        [
                                                                                        ]
                                                                                                     )
                                                                                    end
                                                                                end
                                                                            } ; ___lambda.call(
                                                                                __w__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81384
                                                                                       )
                                                                          end
                                                                      end
                                                                  } ; ___lambda.call(
                                                                        trampCall( self._car_METHOD(  'car',
                                                                            begin
                                                                              if @global_lisp_binding.has_key?('_car') then
                                                                                trampCall(@_car)
                                                                              else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:35"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                        [
                                                                              begin
                                                                                  trampCall(_set)
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:56"] + __e.backtrace ) ; raise __e
                                                                              end
                                                                        ]
                                                                                     ))                                                                      ,
                                                                        trampCall( self._cdr_METHOD(  'cdr',
                                                                            begin
                                                                              if @global_lisp_binding.has_key?('_cdr') then
                                                                                trampCall(@_cdr)
                                                                              else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:37"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                        [
                                                                              begin
                                                                                  trampCall(_set)
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:56"] + __e.backtrace ) ; raise __e
                                                                              end
                                                                        ]
                                                                                     ))
                                                                             )
                                                                end
                                                            else
                                                                delayCall( '__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81278',  '_failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81278',
                                                                    begin
                                                                        trampCall(__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81278)
                                                                      rescue => __e ; __e.set_backtrace( ["dynamic S-expression ( no source ):1"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                [
                                                                ]
                                                                             )
                                                            end
                                                        end
                                                    } ; ___lambda.call(
                                                          Proc.new { || 
                                                              begin
                                                                ___lambda = lambda { |__failure__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81345| 
                                                                    begin
                                                                        begin
                                                                          ___lambda = lambda { |_else| 
                                                                              begin
                                                                                  delayCall( '_append_MIMARKmap',  'append-map',
                                                                                      begin
                                                                                        if @global_lisp_binding.has_key?('_append_MIMARKmap') then
                                                                                          trampCall(@_append_MIMARKmap)
                                                                                        else raise NameError.new( "Error: undefined variable _append_MIMARKmap", "_append_MIMARKmap" ) end
                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:49"] + __e.backtrace ) ; raise __e
                                                                                      end                                                                                    ,
                                                                                  [
                                                                                        Proc.new { |_ind,_head| 
                                                                                            trampCall( self._map_METHOD(  'map',
                                                                                                begin
                                                                                                  if @global_lisp_binding.has_key?('_map') then
                                                                                                    trampCall(@_map)
                                                                                                  else raise NameError.new( "Error: undefined variable _map", "_map" ) end
                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:51"] + __e.backtrace ) ; raise __e
                                                                                                end                                                                                              ,
                                                                                            [
                                                                                                  Proc.new { |_rest| 
                                                                                                      trampCall( self._cons_METHOD(  'cons',
                                                                                                          begin
                                                                                                            if @global_lisp_binding.has_key?('_cons') then
                                                                                                              trampCall(@_cons)
                                                                                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:53"] + __e.backtrace ) ; raise __e
                                                                                                          end                                                                                                        ,
                                                                                                      [
                                                                                                            begin
                                                                                                                trampCall(_head)
                                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:53"] + __e.backtrace ) ; raise __e
                                                                                                            end                                                                                                          ,
                                                                                                            begin
                                                                                                                trampCall(_rest)
                                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:53"] + __e.backtrace ) ; raise __e
                                                                                                            end
                                                                                                      ]
                                                                                                                   ))
                                                                                                  }                                                                                                ,
                                                                                                  trampCall( self._permutations_METHOD(  'permutations',
                                                                                                      begin
                                                                                                        if @global_lisp_binding.has_key?('_permutations') then
                                                                                                          trampCall(@_permutations)
                                                                                                        else raise NameError.new( "Error: undefined variable _permutations", "_permutations" ) end
                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:54"] + __e.backtrace ) ; raise __e
                                                                                                      end                                                                                                    ,
                                                                                                  [
                                                                                                        trampCall( self._but_MIMARKkth_METHOD(  'but-kth',
                                                                                                            begin
                                                                                                              if @global_lisp_binding.has_key?('_but_MIMARKkth') then
                                                                                                                trampCall(@_but_MIMARKkth)
                                                                                                              else raise NameError.new( "Error: undefined variable _but_MIMARKkth", "_but_MIMARKkth" ) end
                                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:54"] + __e.backtrace ) ; raise __e
                                                                                                            end                                                                                                          ,
                                                                                                        [
                                                                                                              begin
                                                                                                                  trampCall(_set)
                                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:56"] + __e.backtrace ) ; raise __e
                                                                                                              end                                                                                                            ,
                                                                                                              begin
                                                                                                                  trampCall(_ind)
                                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:54"] + __e.backtrace ) ; raise __e
                                                                                                              end
                                                                                                        ]
                                                                                                                     ))
                                                                                                  ]
                                                                                                               ))
                                                                                            ]
                                                                                                         ))
                                                                                        }                                                                                      ,
                                                                                        trampCall( self._iota_METHOD(  'iota',
                                                                                            begin
                                                                                              if @global_lisp_binding.has_key?('_iota') then
                                                                                                trampCall(@_iota)
                                                                                              else raise NameError.new( "Error: undefined variable _iota", "_iota" ) end
                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:55"] + __e.backtrace ) ; raise __e
                                                                                            end                                                                                          ,
                                                                                        [
                                                                                              trampCall( self._length_METHOD(  'length',
                                                                                                  begin
                                                                                                    if @global_lisp_binding.has_key?('_length') then
                                                                                                      trampCall(@_length)
                                                                                                    else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:55"] + __e.backtrace ) ; raise __e
                                                                                                  end                                                                                                ,
                                                                                              [
                                                                                                    begin
                                                                                                        trampCall(_set)
                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:56"] + __e.backtrace ) ; raise __e
                                                                                                    end
                                                                                              ]
                                                                                                           ))
                                                                                        ]
                                                                                                     ))                                                                                      ,
                                                                                        begin
                                                                                            trampCall(_set)
                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:56"] + __e.backtrace ) ; raise __e
                                                                                        end
                                                                                  ]
                                                                                               )
                                                                              end
                                                                          } ; ___lambda.call(
                                                                                begin
                                                                                    trampCall(_set)
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:56"] + __e.backtrace ) ; raise __e
                                                                                end
                                                                                     )
                                                                        end
                                                                    end
                                                                } ; ___lambda.call(
                                                                      Proc.new { || 
                                                                          begin raise RuntimeError, 
                                                                          "Error: match: no matching pattern"
                                                                          rescue => __e 
                                                                            __e.set_backtrace( [":1"] + __e.backtrace )
                                                                            raise __e
                                                                          end 
                                                                      }
                                                                           )
                                                              end
                                                          }
                                                               )
                                                  end
                                              }
                                                   )
                                      end
                                  }
                                       )
                          end
                      }
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._permutations_ASMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_permutations_ASMARK'] = self.method( :_permutations_ASMARK_METHOD )
    @_permutations_ASMARK = 
    trampCall(
          Proc.new { |_set,*__rest__| ___gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81606 = __rest__[0] ;  
              begin
                ___lambda = lambda { |_eq| 
                    if ( 
                      trampCall( self.__LTMARK_METHOD(  '<',
                          begin
                            if @global_lisp_binding.has_key?('__LTMARK') then
                              trampCall(@__LTMARK)
                            else raise NameError.new( "Error: undefined variable __LTMARK", "__LTMARK" ) end
                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                          end                        ,
                      [
                          0                          ,
                            trampCall( self._length_METHOD(  'length',
                                begin
                                  if @global_lisp_binding.has_key?('_length') then
                                    trampCall(@_length)
                                  else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:55"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                  begin
                                      trampCall(___gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81606)
                                    rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                  end
                            ]
                                         ))
                      ]
                                   ))
                     ) then
                        begin
                            begin
                              
                              _eq = 
                              trampCall(
                                    trampCall( self._nth_METHOD(  'nth',
                                        begin
                                          if @global_lisp_binding.has_key?('_nth') then
                                            trampCall(@_nth)
                                          else raise NameError.new( "Error: undefined variable _nth", "_nth" ) end
                                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                    [
                                        0                                        ,
                                          begin
                                              trampCall(___gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81606)
                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                          end
                                    ]
                                                 ))
                              )
                            end
                        end
                    end
                    begin
                        def self._rec_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
                        @global_lisp_binding['_rec'] = self.method( :_rec_METHOD )
                      @_rec = 
                      trampCall(
                            Proc.new { |_set| 
                                begin
                                  ___lambda = lambda { |__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81607| 
                                      if ( 
                                        trampCall( self._null_QUMARK_METHOD(  'null?',
                                            begin
                                              if @global_lisp_binding.has_key?('_null_QUMARK') then
                                                trampCall(@_null_QUMARK)
                                              else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:70"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                        [
                                              begin
                                                  trampCall(_set)
                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:79"] + __e.backtrace ) ; raise __e
                                              end
                                        ]
                                                     ))
                                       ) then
                                          begin
                                              trampCall( self._list_METHOD(  'list',
                                                  begin
                                                    if @global_lisp_binding.has_key?('_list') then
                                                      trampCall(@_list)
                                                    else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:64"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                              [
                                                  Cell.new()
                                              ]
                                                           ))
                                          end
                                      else
                                          trampCall( callProcedure(   '_failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81607',
                                              begin
                                                  trampCall(__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81607)
                                                rescue => __e ; __e.set_backtrace( ["dynamic S-expression ( no source ):1"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                          [
                                          ]
                                                       ))
                                      end
                                  } ; ___lambda.call(
                                        Proc.new { || 
                                            begin
                                              ___lambda = lambda { |__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81608| 
                                                  if ( 
                                                    if ( 
                                                      trampCall( self._not_METHOD(  'not',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_not') then
                                                              trampCall(@_not)
                                                            else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:175"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                      [
                                                            trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                                    trampCall(@_eq_QUMARK)
                                                                  else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                            [
                                                                false                                                                ,
                                                                  trampCall( self._pair_QUMARK_METHOD(  'pair?',
                                                                      begin
                                                                        if @global_lisp_binding.has_key?('_pair_QUMARK') then
                                                                          trampCall(@_pair_QUMARK)
                                                                        else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                  [
                                                                        begin
                                                                            trampCall(_set)
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:79"] + __e.backtrace ) ; raise __e
                                                                        end
                                                                  ]
                                                                               ))
                                                            ]
                                                                         ))
                                                      ]
                                                                   ))
                                                     ) then
                                                        trampCall( self._null_QUMARK_METHOD(  'null?',
                                                            begin
                                                              if @global_lisp_binding.has_key?('_null_QUMARK') then
                                                                trampCall(@_null_QUMARK)
                                                              else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:70"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                        [
                                                              trampCall( self._cdr_METHOD(  'cdr',
                                                                  begin
                                                                    if @global_lisp_binding.has_key?('_cdr') then
                                                                      trampCall(@_cdr)
                                                                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:75"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                              [
                                                                    begin
                                                                        trampCall(_set)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:79"] + __e.backtrace ) ; raise __e
                                                                    end
                                                              ]
                                                                           ))
                                                        ]
                                                                     ))
                                                    else
                                                      false
                                                    end
                                                   ) then
                                                      begin
                                                        ___lambda = lambda { |__w__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81610| 
                                                            begin
                                                                begin
                                                                  ___lambda = lambda { |_a| 
                                                                      begin
                                                                          trampCall( self._list_METHOD(  'list',
                                                                              begin
                                                                                if @global_lisp_binding.has_key?('_list') then
                                                                                  trampCall(@_list)
                                                                                else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:64"] + __e.backtrace ) ; raise __e
                                                                              end                                                                            ,
                                                                          [
                                                                                begin
                                                                                    trampCall(_set)
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:79"] + __e.backtrace ) ; raise __e
                                                                                end
                                                                          ]
                                                                                       ))
                                                                      end
                                                                  } ; ___lambda.call(
                                                                      __w__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81610
                                                                             )
                                                                end
                                                            end
                                                        } ; ___lambda.call(
                                                              trampCall( self._car_METHOD(  'car',
                                                                  begin
                                                                    if @global_lisp_binding.has_key?('_car') then
                                                                      trampCall(@_car)
                                                                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:76"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                              [
                                                                    begin
                                                                        trampCall(_set)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:79"] + __e.backtrace ) ; raise __e
                                                                    end
                                                              ]
                                                                           ))
                                                                   )
                                                      end
                                                  else
                                                      trampCall( callProcedure(   '_failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81608',
                                                          begin
                                                              trampCall(__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81608)
                                                            rescue => __e ; __e.set_backtrace( ["dynamic S-expression ( no source ):1"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                      [
                                                      ]
                                                                   ))
                                                  end
                                              } ; ___lambda.call(
                                                    Proc.new { || 
                                                        begin
                                                          ___lambda = lambda { |__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81609| 
                                                              begin
                                                                  if ( 
                                                                    trampCall( self._pair_QUMARK_METHOD(  'pair?',
                                                                        begin
                                                                          if @global_lisp_binding.has_key?('_pair_QUMARK') then
                                                                            trampCall(@_pair_QUMARK)
                                                                          else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                                                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                    [
                                                                          begin
                                                                              trampCall(_set)
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:79"] + __e.backtrace ) ; raise __e
                                                                          end
                                                                    ]
                                                                                 ))
                                                                   ) then
                                                                      begin
                                                                        ___lambda = lambda { |__w__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81678,__x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81679| 
                                                                            begin
                                                                                begin
                                                                                  ___lambda = lambda { |_a| 
                                                                                      if ( 
                                                                                        if ( 
                                                                                          trampCall( self._not_METHOD(  'not',
                                                                                              begin
                                                                                                if @global_lisp_binding.has_key?('_not') then
                                                                                                  trampCall(@_not)
                                                                                                else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:175"] + __e.backtrace ) ; raise __e
                                                                                              end                                                                                            ,
                                                                                          [
                                                                                                trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                                                                                    begin
                                                                                                      if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                                                                        trampCall(@_eq_QUMARK)
                                                                                                      else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                                                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                                    end                                                                                                  ,
                                                                                                [
                                                                                                    false                                                                                                    ,
                                                                                                      trampCall( self._pair_QUMARK_METHOD(  'pair?',
                                                                                                          begin
                                                                                                            if @global_lisp_binding.has_key?('_pair_QUMARK') then
                                                                                                              trampCall(@_pair_QUMARK)
                                                                                                            else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                                                                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                                          end                                                                                                        ,
                                                                                                      [
                                                                                                          __x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81679
                                                                                                      ]
                                                                                                                   ))
                                                                                                ]
                                                                                                             ))
                                                                                          ]
                                                                                                       ))
                                                                                         ) then
                                                                                            trampCall( self._null_QUMARK_METHOD(  'null?',
                                                                                                begin
                                                                                                  if @global_lisp_binding.has_key?('_null_QUMARK') then
                                                                                                    trampCall(@_null_QUMARK)
                                                                                                  else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:70"] + __e.backtrace ) ; raise __e
                                                                                                end                                                                                              ,
                                                                                            [
                                                                                                  trampCall( self._cdr_METHOD(  'cdr',
                                                                                                      begin
                                                                                                        if @global_lisp_binding.has_key?('_cdr') then
                                                                                                          trampCall(@_cdr)
                                                                                                        else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:75"] + __e.backtrace ) ; raise __e
                                                                                                      end                                                                                                    ,
                                                                                                  [
                                                                                                      __x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81679
                                                                                                  ]
                                                                                                               ))
                                                                                            ]
                                                                                                         ))
                                                                                        else
                                                                                          false
                                                                                        end
                                                                                       ) then
                                                                                          begin
                                                                                            ___lambda = lambda { |__w__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81743| 
                                                                                                begin
                                                                                                    begin
                                                                                                      ___lambda = lambda { |_b| 
                                                                                                          begin
                                                                                                              if ( 
                                                                                                                trampCall( callProcedure(   'eq',
                                                                                                                    begin
                                                                                                                        trampCall(_eq)
                                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:71"] + __e.backtrace ) ; raise __e
                                                                                                                    end                                                                                                                  ,
                                                                                                                [
                                                                                                                      begin
                                                                                                                          trampCall(_a)
                                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:64"] + __e.backtrace ) ; raise __e
                                                                                                                      end                                                                                                                    ,
                                                                                                                      begin
                                                                                                                          trampCall(_b)
                                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:64"] + __e.backtrace ) ; raise __e
                                                                                                                      end
                                                                                                                ]
                                                                                                                             ))
                                                                                                               ) then
                                                                                                                  trampCall( self._list_METHOD(  'list',
                                                                                                                      begin
                                                                                                                        if @global_lisp_binding.has_key?('_list') then
                                                                                                                          trampCall(@_list)
                                                                                                                        else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:64"] + __e.backtrace ) ; raise __e
                                                                                                                      end                                                                                                                    ,
                                                                                                                  [
                                                                                                                        begin
                                                                                                                            trampCall(_set)
                                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:79"] + __e.backtrace ) ; raise __e
                                                                                                                        end
                                                                                                                  ]
                                                                                                                               ))
                                                                                                              else
                                                                                                                  trampCall( self._cons_METHOD(  'cons',
                                                                                                                      begin
                                                                                                                        if @global_lisp_binding.has_key?('_cons') then
                                                                                                                          trampCall(@_cons)
                                                                                                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:74"] + __e.backtrace ) ; raise __e
                                                                                                                      end                                                                                                                    ,
                                                                                                                  [
                                                                                                                        begin
                                                                                                                            trampCall(_set)
                                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:79"] + __e.backtrace ) ; raise __e
                                                                                                                        end                                                                                                                      ,
                                                                                                                        trampCall( self._cons_METHOD(  'cons',
                                                                                                                            begin
                                                                                                                              if @global_lisp_binding.has_key?('_cons') then
                                                                                                                                trampCall(@_cons)
                                                                                                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:74"] + __e.backtrace ) ; raise __e
                                                                                                                            end                                                                                                                          ,
                                                                                                                        [
                                                                                                                              trampCall( self._cons_METHOD(  'cons',
                                                                                                                                  begin
                                                                                                                                    if @global_lisp_binding.has_key?('_cons') then
                                                                                                                                      trampCall(@_cons)
                                                                                                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:74"] + __e.backtrace ) ; raise __e
                                                                                                                                  end                                                                                                                                ,
                                                                                                                              [
                                                                                                                                    begin
                                                                                                                                        trampCall(_b)
                                                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:64"] + __e.backtrace ) ; raise __e
                                                                                                                                    end                                                                                                                                  ,
                                                                                                                                    trampCall( self._cons_METHOD(  'cons',
                                                                                                                                        begin
                                                                                                                                          if @global_lisp_binding.has_key?('_cons') then
                                                                                                                                            trampCall(@_cons)
                                                                                                                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:74"] + __e.backtrace ) ; raise __e
                                                                                                                                        end                                                                                                                                      ,
                                                                                                                                    [
                                                                                                                                          begin
                                                                                                                                              trampCall(_a)
                                                                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:64"] + __e.backtrace ) ; raise __e
                                                                                                                                          end                                                                                                                                        ,
                                                                                                                                        Cell.new()
                                                                                                                                    ]
                                                                                                                                                 ))
                                                                                                                              ]
                                                                                                                                           ))                                                                                                                            ,
                                                                                                                            Cell.new()
                                                                                                                        ]
                                                                                                                                     ))
                                                                                                                  ]
                                                                                                                               ))
                                                                                                              end
                                                                                                          end
                                                                                                      } ; ___lambda.call(
                                                                                                          __w__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81743
                                                                                                                 )
                                                                                                    end
                                                                                                end
                                                                                            } ; ___lambda.call(
                                                                                                  trampCall( self._car_METHOD(  'car',
                                                                                                      begin
                                                                                                        if @global_lisp_binding.has_key?('_car') then
                                                                                                          trampCall(@_car)
                                                                                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:76"] + __e.backtrace ) ; raise __e
                                                                                                      end                                                                                                    ,
                                                                                                  [
                                                                                                      __x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81679
                                                                                                  ]
                                                                                                               ))
                                                                                                       )
                                                                                          end
                                                                                      else
                                                                                          trampCall( callProcedure(   '_failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81609',
                                                                                              begin
                                                                                                  trampCall(__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81609)
                                                                                                rescue => __e ; __e.set_backtrace( ["dynamic S-expression ( no source ):1"] + __e.backtrace ) ; raise __e
                                                                                              end                                                                                            ,
                                                                                          [
                                                                                          ]
                                                                                                       ))
                                                                                      end
                                                                                  } ; ___lambda.call(
                                                                                      __w__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81678
                                                                                             )
                                                                                end
                                                                            end
                                                                        } ; ___lambda.call(
                                                                              trampCall( self._car_METHOD(  'car',
                                                                                  begin
                                                                                    if @global_lisp_binding.has_key?('_car') then
                                                                                      trampCall(@_car)
                                                                                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:76"] + __e.backtrace ) ; raise __e
                                                                                  end                                                                                ,
                                                                              [
                                                                                    begin
                                                                                        trampCall(_set)
                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:79"] + __e.backtrace ) ; raise __e
                                                                                    end
                                                                              ]
                                                                                           ))                                                                            ,
                                                                              trampCall( self._cdr_METHOD(  'cdr',
                                                                                  begin
                                                                                    if @global_lisp_binding.has_key?('_cdr') then
                                                                                      trampCall(@_cdr)
                                                                                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:75"] + __e.backtrace ) ; raise __e
                                                                                  end                                                                                ,
                                                                              [
                                                                                    begin
                                                                                        trampCall(_set)
                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:79"] + __e.backtrace ) ; raise __e
                                                                                    end
                                                                              ]
                                                                                           ))
                                                                                   )
                                                                      end
                                                                  else
                                                                      trampCall( callProcedure(   '_failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81609',
                                                                          begin
                                                                              trampCall(__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81609)
                                                                            rescue => __e ; __e.set_backtrace( ["dynamic S-expression ( no source ):1"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                      [
                                                                      ]
                                                                                   ))
                                                                  end
                                                              end
                                                          } ; ___lambda.call(
                                                                Proc.new { || 
                                                                    begin
                                                                      ___lambda = lambda { |__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81611| 
                                                                          begin
                                                                              begin
                                                                                ___lambda = lambda { |_else| 
                                                                                    begin
                                                                                        begin
                                                                                          ___lambda = lambda { |_loop| 
                                                                                              _loop                                                                                               = 
                                                                                                Proc.new { |_i,_seen,_p,_r| 
                                                                                                    if ( 
                                                                                                      trampCall( self._null_QUMARK_METHOD(  'null?',
                                                                                                          begin
                                                                                                            if @global_lisp_binding.has_key?('_null_QUMARK') then
                                                                                                              trampCall(@_null_QUMARK)
                                                                                                            else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:70"] + __e.backtrace ) ; raise __e
                                                                                                          end                                                                                                        ,
                                                                                                      [
                                                                                                            begin
                                                                                                                trampCall(_p)
                                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:76"] + __e.backtrace ) ; raise __e
                                                                                                            end
                                                                                                      ]
                                                                                                                   ))
                                                                                                     ) then
                                                                                                        begin
                                                                                                            trampCall( self._reverse_EXMARK_METHOD(  'reverse!',
                                                                                                                begin
                                                                                                                  if @global_lisp_binding.has_key?('_reverse_EXMARK') then
                                                                                                                    trampCall(@_reverse_EXMARK)
                                                                                                                  else raise NameError.new( "Error: undefined variable _reverse_EXMARK", "_reverse_EXMARK" ) end
                                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:70"] + __e.backtrace ) ; raise __e
                                                                                                                end                                                                                                              ,
                                                                                                            [
                                                                                                                  begin
                                                                                                                      trampCall(_r)
                                                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:77"] + __e.backtrace ) ; raise __e
                                                                                                                  end
                                                                                                            ]
                                                                                                                         ))
                                                                                                        end
                                                                                                    else
                                                                                                        if ( 
                                                                                                          trampCall( self._member_METHOD(  'member',
                                                                                                              begin
                                                                                                                if @global_lisp_binding.has_key?('_member') then
                                                                                                                  trampCall(@_member)
                                                                                                                else raise NameError.new( "Error: undefined variable _member", "_member" ) end
                                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:71"] + __e.backtrace ) ; raise __e
                                                                                                              end                                                                                                            ,
                                                                                                          [
                                                                                                                trampCall( self._car_METHOD(  'car',
                                                                                                                    begin
                                                                                                                      if @global_lisp_binding.has_key?('_car') then
                                                                                                                        trampCall(@_car)
                                                                                                                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:76"] + __e.backtrace ) ; raise __e
                                                                                                                    end                                                                                                                  ,
                                                                                                                [
                                                                                                                      begin
                                                                                                                          trampCall(_p)
                                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:76"] + __e.backtrace ) ; raise __e
                                                                                                                      end
                                                                                                                ]
                                                                                                                             ))                                                                                                              ,
                                                                                                                begin
                                                                                                                    trampCall(_seen)
                                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:74"] + __e.backtrace ) ; raise __e
                                                                                                                end                                                                                                              ,
                                                                                                                begin
                                                                                                                    trampCall(_eq)
                                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:71"] + __e.backtrace ) ; raise __e
                                                                                                                end
                                                                                                          ]
                                                                                                                       ))
                                                                                                         ) then
                                                                                                            begin
                                                                                                                trampCall( callProcedure(   'loop',
                                                                                                                    begin
                                                                                                                        trampCall(_loop)
                                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:73"] + __e.backtrace ) ; raise __e
                                                                                                                    end                                                                                                                  ,
                                                                                                                [
                                                                                                                      trampCall( self.__PLMARK_METHOD(  '+',
                                                                                                                          begin
                                                                                                                            if @global_lisp_binding.has_key?('__PLMARK') then
                                                                                                                              trampCall(@__PLMARK)
                                                                                                                            else raise NameError.new( "Error: undefined variable __PLMARK", "__PLMARK" ) end
                                                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:73"] + __e.backtrace ) ; raise __e
                                                                                                                          end                                                                                                                        ,
                                                                                                                      [
                                                                                                                            begin
                                                                                                                                trampCall(_i)
                                                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:78"] + __e.backtrace ) ; raise __e
                                                                                                                            end                                                                                                                          ,
                                                                                                                          1
                                                                                                                      ]
                                                                                                                                   ))                                                                                                                    ,
                                                                                                                      begin
                                                                                                                          trampCall(_seen)
                                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:74"] + __e.backtrace ) ; raise __e
                                                                                                                      end                                                                                                                    ,
                                                                                                                      trampCall( self._cdr_METHOD(  'cdr',
                                                                                                                          begin
                                                                                                                            if @global_lisp_binding.has_key?('_cdr') then
                                                                                                                              trampCall(@_cdr)
                                                                                                                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:75"] + __e.backtrace ) ; raise __e
                                                                                                                          end                                                                                                                        ,
                                                                                                                      [
                                                                                                                            begin
                                                                                                                                trampCall(_p)
                                                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:76"] + __e.backtrace ) ; raise __e
                                                                                                                            end
                                                                                                                      ]
                                                                                                                                   ))                                                                                                                    ,
                                                                                                                      begin
                                                                                                                          trampCall(_r)
                                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:77"] + __e.backtrace ) ; raise __e
                                                                                                                      end
                                                                                                                ]
                                                                                                                             ))
                                                                                                            end
                                                                                                        else
                                                                                                            if ( 
                                                                                                            true
                                                                                                             ) then
                                                                                                                begin
                                                                                                                    trampCall( callProcedure(   'loop',
                                                                                                                        begin
                                                                                                                            trampCall(_loop)
                                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:73"] + __e.backtrace ) ; raise __e
                                                                                                                        end                                                                                                                      ,
                                                                                                                    [
                                                                                                                          trampCall( self.__PLMARK_METHOD(  '+',
                                                                                                                              begin
                                                                                                                                if @global_lisp_binding.has_key?('__PLMARK') then
                                                                                                                                  trampCall(@__PLMARK)
                                                                                                                                else raise NameError.new( "Error: undefined variable __PLMARK", "__PLMARK" ) end
                                                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:73"] + __e.backtrace ) ; raise __e
                                                                                                                              end                                                                                                                            ,
                                                                                                                          [
                                                                                                                                begin
                                                                                                                                    trampCall(_i)
                                                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:78"] + __e.backtrace ) ; raise __e
                                                                                                                                end                                                                                                                              ,
                                                                                                                              1
                                                                                                                          ]
                                                                                                                                       ))                                                                                                                        ,
                                                                                                                          trampCall( self._cons_METHOD(  'cons',
                                                                                                                              begin
                                                                                                                                if @global_lisp_binding.has_key?('_cons') then
                                                                                                                                  trampCall(@_cons)
                                                                                                                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:74"] + __e.backtrace ) ; raise __e
                                                                                                                              end                                                                                                                            ,
                                                                                                                          [
                                                                                                                                trampCall( self._car_METHOD(  'car',
                                                                                                                                    begin
                                                                                                                                      if @global_lisp_binding.has_key?('_car') then
                                                                                                                                        trampCall(@_car)
                                                                                                                                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:76"] + __e.backtrace ) ; raise __e
                                                                                                                                    end                                                                                                                                  ,
                                                                                                                                [
                                                                                                                                      begin
                                                                                                                                          trampCall(_p)
                                                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:76"] + __e.backtrace ) ; raise __e
                                                                                                                                      end
                                                                                                                                ]
                                                                                                                                             ))                                                                                                                              ,
                                                                                                                                begin
                                                                                                                                    trampCall(_seen)
                                                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:74"] + __e.backtrace ) ; raise __e
                                                                                                                                end
                                                                                                                          ]
                                                                                                                                       ))                                                                                                                        ,
                                                                                                                          trampCall( self._cdr_METHOD(  'cdr',
                                                                                                                              begin
                                                                                                                                if @global_lisp_binding.has_key?('_cdr') then
                                                                                                                                  trampCall(@_cdr)
                                                                                                                                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:75"] + __e.backtrace ) ; raise __e
                                                                                                                              end                                                                                                                            ,
                                                                                                                          [
                                                                                                                                begin
                                                                                                                                    trampCall(_p)
                                                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:76"] + __e.backtrace ) ; raise __e
                                                                                                                                end
                                                                                                                          ]
                                                                                                                                       ))                                                                                                                        ,
                                                                                                                          trampCall( self._fold_METHOD(  'fold',
                                                                                                                              begin
                                                                                                                                if @global_lisp_binding.has_key?('_fold') then
                                                                                                                                  trampCall(@_fold)
                                                                                                                                else raise NameError.new( "Error: undefined variable _fold", "_fold" ) end
                                                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:76"] + __e.backtrace ) ; raise __e
                                                                                                                              end                                                                                                                            ,
                                                                                                                          [
                                                                                                                                Proc.new { |_subperm,_r| 
                                                                                                                                    trampCall( self._acons_METHOD(  'acons',
                                                                                                                                        begin
                                                                                                                                          if @global_lisp_binding.has_key?('_acons') then
                                                                                                                                            trampCall(@_acons)
                                                                                                                                          else raise NameError.new( "Error: undefined variable _acons", "_acons" ) end
                                                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:76"] + __e.backtrace ) ; raise __e
                                                                                                                                        end                                                                                                                                      ,
                                                                                                                                    [
                                                                                                                                          trampCall( self._car_METHOD(  'car',
                                                                                                                                              begin
                                                                                                                                                if @global_lisp_binding.has_key?('_car') then
                                                                                                                                                  trampCall(@_car)
                                                                                                                                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:76"] + __e.backtrace ) ; raise __e
                                                                                                                                              end                                                                                                                                            ,
                                                                                                                                          [
                                                                                                                                                begin
                                                                                                                                                    trampCall(_p)
                                                                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:76"] + __e.backtrace ) ; raise __e
                                                                                                                                                end
                                                                                                                                          ]
                                                                                                                                                       ))                                                                                                                                        ,
                                                                                                                                          begin
                                                                                                                                              trampCall(_subperm)
                                                                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:76"] + __e.backtrace ) ; raise __e
                                                                                                                                          end                                                                                                                                        ,
                                                                                                                                          begin
                                                                                                                                              trampCall(_r)
                                                                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:77"] + __e.backtrace ) ; raise __e
                                                                                                                                          end
                                                                                                                                    ]
                                                                                                                                                 ))
                                                                                                                                }                                                                                                                              ,
                                                                                                                                begin
                                                                                                                                    trampCall(_r)
                                                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:77"] + __e.backtrace ) ; raise __e
                                                                                                                                end                                                                                                                              ,
                                                                                                                                trampCall( self._rec_METHOD(  'rec',
                                                                                                                                    begin
                                                                                                                                      if @global_lisp_binding.has_key?('_rec') then
                                                                                                                                        trampCall(@_rec)
                                                                                                                                      else raise NameError.new( "Error: undefined variable _rec", "_rec" ) end
                                                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:79"] + __e.backtrace ) ; raise __e
                                                                                                                                    end                                                                                                                                  ,
                                                                                                                                [
                                                                                                                                      trampCall( self._but_MIMARKkth_METHOD(  'but-kth',
                                                                                                                                          begin
                                                                                                                                            if @global_lisp_binding.has_key?('_but_MIMARKkth') then
                                                                                                                                              trampCall(@_but_MIMARKkth)
                                                                                                                                            else raise NameError.new( "Error: undefined variable _but_MIMARKkth", "_but_MIMARKkth" ) end
                                                                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:78"] + __e.backtrace ) ; raise __e
                                                                                                                                          end                                                                                                                                        ,
                                                                                                                                      [
                                                                                                                                            begin
                                                                                                                                                trampCall(_set)
                                                                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:79"] + __e.backtrace ) ; raise __e
                                                                                                                                            end                                                                                                                                          ,
                                                                                                                                            begin
                                                                                                                                                trampCall(_i)
                                                                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:78"] + __e.backtrace ) ; raise __e
                                                                                                                                            end
                                                                                                                                      ]
                                                                                                                                                   ))
                                                                                                                                ]
                                                                                                                                             ))
                                                                                                                          ]
                                                                                                                                       ))
                                                                                                                    ]
                                                                                                                                 ))
                                                                                                                end
                                                                                                            else
                                                                                                                Cell.new()
                                                                                                            end
                                                                                                        end
                                                                                                    end
                                                                                                }
                                                                                              trampCall( callProcedure(   'loop',
                                                                                                  begin
                                                                                                      trampCall(_loop)
                                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:73"] + __e.backtrace ) ; raise __e
                                                                                                  end                                                                                                ,
                                                                                              [
                                                                                                  0                                                                                                  ,
                                                                                                  Cell.new()                                                                                                  ,
                                                                                                    begin
                                                                                                        trampCall(_set)
                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:79"] + __e.backtrace ) ; raise __e
                                                                                                    end                                                                                                  ,
                                                                                                  Cell.new()
                                                                                              ]
                                                                                                           ))
                                                                                          } ; ___lambda.call(
                                                                                          nil
                                                                                                     )
                                                                                        end
                                                                                    end
                                                                                } ; ___lambda.call(
                                                                                      begin
                                                                                          trampCall(_set)
                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:79"] + __e.backtrace ) ; raise __e
                                                                                      end
                                                                                           )
                                                                              end
                                                                          end
                                                                      } ; ___lambda.call(
                                                                            Proc.new { || 
                                                                                begin raise RuntimeError, 
                                                                                "Error: match: no matching pattern"
                                                                                rescue => __e 
                                                                                  __e.set_backtrace( [":1"] + __e.backtrace )
                                                                                  raise __e
                                                                                end 
                                                                            }
                                                                                 )
                                                                    end
                                                                }
                                                                     )
                                                        end
                                                    }
                                                         )
                                            end
                                        }
                                             )
                                end
                            }
                      )
                    end
                    delayCall( '_rec',  'rec',
                        begin
                          if @global_lisp_binding.has_key?('_rec') then
                            trampCall(@_rec)
                          else raise NameError.new( "Error: undefined variable _rec", "_rec" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:79"] + __e.backtrace ) ; raise __e
                        end                      ,
                    [
                          begin
                              trampCall(_set)
                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:79"] + __e.backtrace ) ; raise __e
                          end
                    ]
                                 )
                } ; ___lambda.call(
                      begin
                        if @global_lisp_binding.has_key?('_eqv_QUMARK') then
                          trampCall(@_eqv_QUMARK)
                        else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:59"] + __e.backtrace ) ; raise __e
                      end
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._p_SLMARKeach3_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_p_SLMARKeach3'] = self.method( :_p_SLMARKeach3_METHOD )
    @_p_SLMARKeach3 = 
    trampCall(
          Proc.new { |_proc,_x1,_x2,_x3| 
              trampCall( callProcedure(   'proc',
                  begin
                      trampCall(_proc)
                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:86"] + __e.backtrace ) ; raise __e
                  end                ,
              [
                    trampCall( self._cons_METHOD(  'cons',
                        begin
                          if @global_lisp_binding.has_key?('_cons') then
                            trampCall(@_cons)
                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:74"] + __e.backtrace ) ; raise __e
                        end                      ,
                    [
                          begin
                              trampCall(_x1)
                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:86"] + __e.backtrace ) ; raise __e
                          end                        ,
                          trampCall( self._cons_METHOD(  'cons',
                              begin
                                if @global_lisp_binding.has_key?('_cons') then
                                  trampCall(@_cons)
                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:74"] + __e.backtrace ) ; raise __e
                              end                            ,
                          [
                                begin
                                    trampCall(_x2)
                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:86"] + __e.backtrace ) ; raise __e
                                end                              ,
                                trampCall( self._cons_METHOD(  'cons',
                                    begin
                                      if @global_lisp_binding.has_key?('_cons') then
                                        trampCall(@_cons)
                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:74"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                [
                                      begin
                                          trampCall(_x3)
                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:86"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                    Cell.new()
                                ]
                                             ))
                          ]
                                       ))
                    ]
                                 ))
              ]
                           ))
              trampCall( callProcedure(   'proc',
                  begin
                      trampCall(_proc)
                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:86"] + __e.backtrace ) ; raise __e
                  end                ,
              [
                    trampCall( self._cons_METHOD(  'cons',
                        begin
                          if @global_lisp_binding.has_key?('_cons') then
                            trampCall(@_cons)
                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:74"] + __e.backtrace ) ; raise __e
                        end                      ,
                    [
                          begin
                              trampCall(_x1)
                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:86"] + __e.backtrace ) ; raise __e
                          end                        ,
                          trampCall( self._cons_METHOD(  'cons',
                              begin
                                if @global_lisp_binding.has_key?('_cons') then
                                  trampCall(@_cons)
                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:74"] + __e.backtrace ) ; raise __e
                              end                            ,
                          [
                                begin
                                    trampCall(_x3)
                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:86"] + __e.backtrace ) ; raise __e
                                end                              ,
                                trampCall( self._cons_METHOD(  'cons',
                                    begin
                                      if @global_lisp_binding.has_key?('_cons') then
                                        trampCall(@_cons)
                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:74"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                [
                                      begin
                                          trampCall(_x2)
                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:86"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                    Cell.new()
                                ]
                                             ))
                          ]
                                       ))
                    ]
                                 ))
              ]
                           ))
              trampCall( callProcedure(   'proc',
                  begin
                      trampCall(_proc)
                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:86"] + __e.backtrace ) ; raise __e
                  end                ,
              [
                    trampCall( self._cons_METHOD(  'cons',
                        begin
                          if @global_lisp_binding.has_key?('_cons') then
                            trampCall(@_cons)
                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:74"] + __e.backtrace ) ; raise __e
                        end                      ,
                    [
                          begin
                              trampCall(_x2)
                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:86"] + __e.backtrace ) ; raise __e
                          end                        ,
                          trampCall( self._cons_METHOD(  'cons',
                              begin
                                if @global_lisp_binding.has_key?('_cons') then
                                  trampCall(@_cons)
                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:74"] + __e.backtrace ) ; raise __e
                              end                            ,
                          [
                                begin
                                    trampCall(_x1)
                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:86"] + __e.backtrace ) ; raise __e
                                end                              ,
                                trampCall( self._cons_METHOD(  'cons',
                                    begin
                                      if @global_lisp_binding.has_key?('_cons') then
                                        trampCall(@_cons)
                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:74"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                [
                                      begin
                                          trampCall(_x3)
                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:86"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                    Cell.new()
                                ]
                                             ))
                          ]
                                       ))
                    ]
                                 ))
              ]
                           ))
              trampCall( callProcedure(   'proc',
                  begin
                      trampCall(_proc)
                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:86"] + __e.backtrace ) ; raise __e
                  end                ,
              [
                    trampCall( self._cons_METHOD(  'cons',
                        begin
                          if @global_lisp_binding.has_key?('_cons') then
                            trampCall(@_cons)
                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:74"] + __e.backtrace ) ; raise __e
                        end                      ,
                    [
                          begin
                              trampCall(_x2)
                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:86"] + __e.backtrace ) ; raise __e
                          end                        ,
                          trampCall( self._cons_METHOD(  'cons',
                              begin
                                if @global_lisp_binding.has_key?('_cons') then
                                  trampCall(@_cons)
                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:74"] + __e.backtrace ) ; raise __e
                              end                            ,
                          [
                                begin
                                    trampCall(_x3)
                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:86"] + __e.backtrace ) ; raise __e
                                end                              ,
                                trampCall( self._cons_METHOD(  'cons',
                                    begin
                                      if @global_lisp_binding.has_key?('_cons') then
                                        trampCall(@_cons)
                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:74"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                [
                                      begin
                                          trampCall(_x1)
                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:86"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                    Cell.new()
                                ]
                                             ))
                          ]
                                       ))
                    ]
                                 ))
              ]
                           ))
              trampCall( callProcedure(   'proc',
                  begin
                      trampCall(_proc)
                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:86"] + __e.backtrace ) ; raise __e
                  end                ,
              [
                    trampCall( self._cons_METHOD(  'cons',
                        begin
                          if @global_lisp_binding.has_key?('_cons') then
                            trampCall(@_cons)
                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:74"] + __e.backtrace ) ; raise __e
                        end                      ,
                    [
                          begin
                              trampCall(_x3)
                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:86"] + __e.backtrace ) ; raise __e
                          end                        ,
                          trampCall( self._cons_METHOD(  'cons',
                              begin
                                if @global_lisp_binding.has_key?('_cons') then
                                  trampCall(@_cons)
                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:74"] + __e.backtrace ) ; raise __e
                              end                            ,
                          [
                                begin
                                    trampCall(_x1)
                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:86"] + __e.backtrace ) ; raise __e
                                end                              ,
                                trampCall( self._cons_METHOD(  'cons',
                                    begin
                                      if @global_lisp_binding.has_key?('_cons') then
                                        trampCall(@_cons)
                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:74"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                [
                                      begin
                                          trampCall(_x2)
                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:86"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                    Cell.new()
                                ]
                                             ))
                          ]
                                       ))
                    ]
                                 ))
              ]
                           ))
              delayCall( '_proc',  'proc',
                  begin
                      trampCall(_proc)
                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:86"] + __e.backtrace ) ; raise __e
                  end                ,
              [
                    trampCall( self._cons_METHOD(  'cons',
                        begin
                          if @global_lisp_binding.has_key?('_cons') then
                            trampCall(@_cons)
                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:74"] + __e.backtrace ) ; raise __e
                        end                      ,
                    [
                          begin
                              trampCall(_x3)
                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:86"] + __e.backtrace ) ; raise __e
                          end                        ,
                          trampCall( self._cons_METHOD(  'cons',
                              begin
                                if @global_lisp_binding.has_key?('_cons') then
                                  trampCall(@_cons)
                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:74"] + __e.backtrace ) ; raise __e
                              end                            ,
                          [
                                begin
                                    trampCall(_x2)
                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:86"] + __e.backtrace ) ; raise __e
                                end                              ,
                                trampCall( self._cons_METHOD(  'cons',
                                    begin
                                      if @global_lisp_binding.has_key?('_cons') then
                                        trampCall(@_cons)
                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:74"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                [
                                      begin
                                          trampCall(_x1)
                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:86"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                    Cell.new()
                                ]
                                             ))
                          ]
                                       ))
                    ]
                                 ))
              ]
                           )
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._p_SLMARKeach4_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_p_SLMARKeach4'] = self.method( :_p_SLMARKeach4_METHOD )
    @_p_SLMARKeach4 = 
    trampCall(
          Proc.new { |_proc,_x1,_x2,_x3,_x4| 
              trampCall( self._p_SLMARKeach3_METHOD(  'p/each3',
                  begin
                    if @global_lisp_binding.has_key?('_p_SLMARKeach3') then
                      trampCall(@_p_SLMARKeach3)
                    else raise NameError.new( "Error: undefined variable _p_SLMARKeach3", "_p_SLMARKeach3" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:91"] + __e.backtrace ) ; raise __e
                  end                ,
              [
                    Proc.new { |_xs| 
                        trampCall( callProcedure(   'proc',
                            begin
                                trampCall(_proc)
                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:91"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              trampCall( self._cons_METHOD(  'cons',
                                  begin
                                    if @global_lisp_binding.has_key?('_cons') then
                                      trampCall(@_cons)
                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:91"] + __e.backtrace ) ; raise __e
                                  end                                ,
                              [
                                    begin
                                        trampCall(_x1)
                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:91"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    begin
                                        trampCall(_xs)
                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:91"] + __e.backtrace ) ; raise __e
                                    end
                              ]
                                           ))
                        ]
                                     ))
                    }                  ,
                    begin
                        trampCall(_x2)
                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:91"] + __e.backtrace ) ; raise __e
                    end                  ,
                    begin
                        trampCall(_x3)
                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:91"] + __e.backtrace ) ; raise __e
                    end                  ,
                    begin
                        trampCall(_x4)
                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:91"] + __e.backtrace ) ; raise __e
                    end
              ]
                           ))
              trampCall( self._p_SLMARKeach3_METHOD(  'p/each3',
                  begin
                    if @global_lisp_binding.has_key?('_p_SLMARKeach3') then
                      trampCall(@_p_SLMARKeach3)
                    else raise NameError.new( "Error: undefined variable _p_SLMARKeach3", "_p_SLMARKeach3" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:91"] + __e.backtrace ) ; raise __e
                  end                ,
              [
                    Proc.new { |_xs| 
                        trampCall( callProcedure(   'proc',
                            begin
                                trampCall(_proc)
                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:91"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              trampCall( self._cons_METHOD(  'cons',
                                  begin
                                    if @global_lisp_binding.has_key?('_cons') then
                                      trampCall(@_cons)
                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:91"] + __e.backtrace ) ; raise __e
                                  end                                ,
                              [
                                    begin
                                        trampCall(_x2)
                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:91"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    begin
                                        trampCall(_xs)
                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:91"] + __e.backtrace ) ; raise __e
                                    end
                              ]
                                           ))
                        ]
                                     ))
                    }                  ,
                    begin
                        trampCall(_x1)
                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:91"] + __e.backtrace ) ; raise __e
                    end                  ,
                    begin
                        trampCall(_x3)
                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:91"] + __e.backtrace ) ; raise __e
                    end                  ,
                    begin
                        trampCall(_x4)
                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:91"] + __e.backtrace ) ; raise __e
                    end
              ]
                           ))
              trampCall( self._p_SLMARKeach3_METHOD(  'p/each3',
                  begin
                    if @global_lisp_binding.has_key?('_p_SLMARKeach3') then
                      trampCall(@_p_SLMARKeach3)
                    else raise NameError.new( "Error: undefined variable _p_SLMARKeach3", "_p_SLMARKeach3" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:91"] + __e.backtrace ) ; raise __e
                  end                ,
              [
                    Proc.new { |_xs| 
                        trampCall( callProcedure(   'proc',
                            begin
                                trampCall(_proc)
                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:91"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              trampCall( self._cons_METHOD(  'cons',
                                  begin
                                    if @global_lisp_binding.has_key?('_cons') then
                                      trampCall(@_cons)
                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:91"] + __e.backtrace ) ; raise __e
                                  end                                ,
                              [
                                    begin
                                        trampCall(_x3)
                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:91"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    begin
                                        trampCall(_xs)
                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:91"] + __e.backtrace ) ; raise __e
                                    end
                              ]
                                           ))
                        ]
                                     ))
                    }                  ,
                    begin
                        trampCall(_x1)
                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:91"] + __e.backtrace ) ; raise __e
                    end                  ,
                    begin
                        trampCall(_x2)
                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:91"] + __e.backtrace ) ; raise __e
                    end                  ,
                    begin
                        trampCall(_x4)
                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:91"] + __e.backtrace ) ; raise __e
                    end
              ]
                           ))
              delayCall( '_p_SLMARKeach3',  'p/each3',
                  begin
                    if @global_lisp_binding.has_key?('_p_SLMARKeach3') then
                      trampCall(@_p_SLMARKeach3)
                    else raise NameError.new( "Error: undefined variable _p_SLMARKeach3", "_p_SLMARKeach3" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:91"] + __e.backtrace ) ; raise __e
                  end                ,
              [
                    Proc.new { |_xs| 
                        trampCall( callProcedure(   'proc',
                            begin
                                trampCall(_proc)
                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:91"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              trampCall( self._cons_METHOD(  'cons',
                                  begin
                                    if @global_lisp_binding.has_key?('_cons') then
                                      trampCall(@_cons)
                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:91"] + __e.backtrace ) ; raise __e
                                  end                                ,
                              [
                                    begin
                                        trampCall(_x4)
                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:91"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    begin
                                        trampCall(_xs)
                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:91"] + __e.backtrace ) ; raise __e
                                    end
                              ]
                                           ))
                        ]
                                     ))
                    }                  ,
                    begin
                        trampCall(_x1)
                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:91"] + __e.backtrace ) ; raise __e
                    end                  ,
                    begin
                        trampCall(_x2)
                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:91"] + __e.backtrace ) ; raise __e
                    end                  ,
                    begin
                        trampCall(_x3)
                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:91"] + __e.backtrace ) ; raise __e
                    end
              ]
                           )
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._p_SLMARKeach_ASMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_p_SLMARKeach_ASMARK'] = self.method( :_p_SLMARKeach_ASMARK_METHOD )
    @_p_SLMARKeach_ASMARK = 
    trampCall(
          Proc.new { |_proc,_len,_xs| 
              if ( 
                trampCall( self.__EQMARK_METHOD(  '=',
                    begin
                      if @global_lisp_binding.has_key?('__EQMARK') then
                        trampCall(@__EQMARK)
                      else raise NameError.new( "Error: undefined variable __EQMARK", "__EQMARK" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:93"] + __e.backtrace ) ; raise __e
                    end                  ,
                [
                      begin
                          trampCall(_len)
                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:95"] + __e.backtrace ) ; raise __e
                      end                    ,
                    4
                ]
                             ))
               ) then
                  delayCall( '_apply',  'apply',
                      begin
                        if @global_lisp_binding.has_key?('_apply') then
                          trampCall(@_apply)
                        else raise NameError.new( "Error: undefined variable _apply", "_apply" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:94"] + __e.backtrace ) ; raise __e
                      end                    ,
                  [
                        begin
                          if @global_lisp_binding.has_key?('_p_SLMARKeach4') then
                            trampCall(@_p_SLMARKeach4)
                          else raise NameError.new( "Error: undefined variable _p_SLMARKeach4", "_p_SLMARKeach4" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:94"] + __e.backtrace ) ; raise __e
                        end                      ,
                        begin
                            trampCall(_proc)
                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:98"] + __e.backtrace ) ; raise __e
                        end                      ,
                        begin
                            trampCall(_xs)
                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:101"] + __e.backtrace ) ; raise __e
                        end
                  ]
                               )
              else
                  begin
                    ___lambda = lambda { |_len1| 
                        delayCall( '_for_MIMARKeach_MIMARKwith_MIMARKindex',  'for-each-with-index',
                            begin
                              if @global_lisp_binding.has_key?('_for_MIMARKeach_MIMARKwith_MIMARKindex') then
                                trampCall(@_for_MIMARKeach_MIMARKwith_MIMARKindex)
                              else raise NameError.new( "Error: undefined variable _for_MIMARKeach_MIMARKwith_MIMARKindex", "_for_MIMARKeach_MIMARKwith_MIMARKindex" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:96"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              Proc.new { |_ind,_elt| 
                                  trampCall( self._p_SLMARKeach_ASMARK_METHOD(  'p/each*',
                                      begin
                                        if @global_lisp_binding.has_key?('_p_SLMARKeach_ASMARK') then
                                          trampCall(@_p_SLMARKeach_ASMARK)
                                        else raise NameError.new( "Error: undefined variable _p_SLMARKeach_ASMARK", "_p_SLMARKeach_ASMARK" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:98"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        Proc.new { |_subperm| 
                                            trampCall( callProcedure(   'proc',
                                                begin
                                                    trampCall(_proc)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:98"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                  trampCall( self._cons_METHOD(  'cons',
                                                      begin
                                                        if @global_lisp_binding.has_key?('_cons') then
                                                          trampCall(@_cons)
                                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:98"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                  [
                                                        begin
                                                            trampCall(_elt)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:98"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        begin
                                                            trampCall(_subperm)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:98"] + __e.backtrace ) ; raise __e
                                                        end
                                                  ]
                                                               ))
                                            ]
                                                         ))
                                        }                                      ,
                                        begin
                                            trampCall(_len1)
                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:99"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        trampCall( self._but_MIMARKkth_METHOD(  'but-kth',
                                            begin
                                              if @global_lisp_binding.has_key?('_but_MIMARKkth') then
                                                trampCall(@_but_MIMARKkth)
                                              else raise NameError.new( "Error: undefined variable _but_MIMARKkth", "_but_MIMARKkth" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:100"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                        [
                                              begin
                                                  trampCall(_xs)
                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:101"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              begin
                                                  trampCall(_ind)
                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:100"] + __e.backtrace ) ; raise __e
                                              end
                                        ]
                                                     ))
                                  ]
                                               ))
                              }                            ,
                              begin
                                  trampCall(_xs)
                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:101"] + __e.backtrace ) ; raise __e
                              end
                        ]
                                     )
                    } ; ___lambda.call(
                          trampCall( self.__MIMARK_METHOD(  '-',
                              begin
                                if @global_lisp_binding.has_key?('__MIMARK') then
                                  trampCall(@__MIMARK)
                                else raise NameError.new( "Error: undefined variable __MIMARK", "__MIMARK" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:95"] + __e.backtrace ) ; raise __e
                              end                            ,
                          [
                                begin
                                    trampCall(_len)
                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:95"] + __e.backtrace ) ; raise __e
                                end                              ,
                              1
                          ]
                                       ))
                               )
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._permutations_MIMARKfor_MIMARKeach_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_permutations_MIMARKfor_MIMARKeach'] = self.method( :_permutations_MIMARKfor_MIMARKeach_METHOD )
    @_permutations_MIMARKfor_MIMARKeach = 
    trampCall(
          Proc.new { |_proc,_set| 
              begin
                ___lambda = lambda { |__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81774| 
                    if ( 
                      trampCall( self._null_QUMARK_METHOD(  'null?',
                          begin
                            if @global_lisp_binding.has_key?('_null_QUMARK') then
                              trampCall(@_null_QUMARK)
                            else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:70"] + __e.backtrace ) ; raise __e
                          end                        ,
                      [
                            begin
                                trampCall(_set)
                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:109"] + __e.backtrace ) ; raise __e
                            end
                      ]
                                   ))
                     ) then
                        begin
                          nil
                        end
                    else
                        delayCall( '__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81774',  '_failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81774',
                            begin
                                trampCall(__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81774)
                              rescue => __e ; __e.set_backtrace( ["dynamic S-expression ( no source ):1"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                        ]
                                     )
                    end
                } ; ___lambda.call(
                      Proc.new { || 
                          begin
                            ___lambda = lambda { |__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81775| 
                                if ( 
                                  if ( 
                                    trampCall( self._not_METHOD(  'not',
                                        begin
                                          if @global_lisp_binding.has_key?('_not') then
                                            trampCall(@_not)
                                          else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:175"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                    [
                                          trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                              begin
                                                if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                  trampCall(@_eq_QUMARK)
                                                else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                          [
                                              false                                              ,
                                                trampCall( self._pair_QUMARK_METHOD(  'pair?',
                                                    begin
                                                      if @global_lisp_binding.has_key?('_pair_QUMARK') then
                                                        trampCall(@_pair_QUMARK)
                                                      else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                [
                                                      begin
                                                          trampCall(_set)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:109"] + __e.backtrace ) ; raise __e
                                                      end
                                                ]
                                                             ))
                                          ]
                                                       ))
                                    ]
                                                 ))
                                   ) then
                                      trampCall( self._null_QUMARK_METHOD(  'null?',
                                          begin
                                            if @global_lisp_binding.has_key?('_null_QUMARK') then
                                              trampCall(@_null_QUMARK)
                                            else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:70"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                      [
                                            trampCall( self._cdr_METHOD(  'cdr',
                                                begin
                                                  if @global_lisp_binding.has_key?('_cdr') then
                                                    trampCall(@_cdr)
                                                  else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:75"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                  begin
                                                      trampCall(_set)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:109"] + __e.backtrace ) ; raise __e
                                                  end
                                            ]
                                                         ))
                                      ]
                                                   ))
                                  else
                                    false
                                  end
                                 ) then
                                    begin
                                      ___lambda = lambda { |__w__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81777| 
                                          begin
                                              begin
                                                ___lambda = lambda { |_x| 
                                                    begin
                                                        delayCall( '_proc',  'proc',
                                                            begin
                                                                trampCall(_proc)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:109"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                        [
                                                              begin
                                                                  trampCall(_set)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:109"] + __e.backtrace ) ; raise __e
                                                              end
                                                        ]
                                                                     )
                                                    end
                                                } ; ___lambda.call(
                                                    __w__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81777
                                                           )
                                              end
                                          end
                                      } ; ___lambda.call(
                                            trampCall( self._car_METHOD(  'car',
                                                begin
                                                  if @global_lisp_binding.has_key?('_car') then
                                                    trampCall(@_car)
                                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:76"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                  begin
                                                      trampCall(_set)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:109"] + __e.backtrace ) ; raise __e
                                                  end
                                            ]
                                                         ))
                                                 )
                                    end
                                else
                                    delayCall( '__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81775',  '_failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81775',
                                        begin
                                            trampCall(__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81775)
                                          rescue => __e ; __e.set_backtrace( ["dynamic S-expression ( no source ):1"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                    [
                                    ]
                                                 )
                                end
                            } ; ___lambda.call(
                                  Proc.new { || 
                                      begin
                                        ___lambda = lambda { |__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81776| 
                                            begin
                                                if ( 
                                                  trampCall( self._pair_QUMARK_METHOD(  'pair?',
                                                      begin
                                                        if @global_lisp_binding.has_key?('_pair_QUMARK') then
                                                          trampCall(@_pair_QUMARK)
                                                        else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                  [
                                                        begin
                                                            trampCall(_set)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:109"] + __e.backtrace ) ; raise __e
                                                        end
                                                  ]
                                                               ))
                                                 ) then
                                                    begin
                                                      ___lambda = lambda { |__w__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81846,__x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81847| 
                                                          begin
                                                              begin
                                                                ___lambda = lambda { |_x1| 
                                                                    if ( 
                                                                      if ( 
                                                                        trampCall( self._not_METHOD(  'not',
                                                                            begin
                                                                              if @global_lisp_binding.has_key?('_not') then
                                                                                trampCall(@_not)
                                                                              else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:175"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                        [
                                                                              trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                                                                  begin
                                                                                    if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                                                      trampCall(@_eq_QUMARK)
                                                                                    else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                                                    rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                  end                                                                                ,
                                                                              [
                                                                                  false                                                                                  ,
                                                                                    trampCall( self._pair_QUMARK_METHOD(  'pair?',
                                                                                        begin
                                                                                          if @global_lisp_binding.has_key?('_pair_QUMARK') then
                                                                                            trampCall(@_pair_QUMARK)
                                                                                          else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                                                                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                        end                                                                                      ,
                                                                                    [
                                                                                        __x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81847
                                                                                    ]
                                                                                                 ))
                                                                              ]
                                                                                           ))
                                                                        ]
                                                                                     ))
                                                                       ) then
                                                                          trampCall( self._null_QUMARK_METHOD(  'null?',
                                                                              begin
                                                                                if @global_lisp_binding.has_key?('_null_QUMARK') then
                                                                                  trampCall(@_null_QUMARK)
                                                                                else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:70"] + __e.backtrace ) ; raise __e
                                                                              end                                                                            ,
                                                                          [
                                                                                trampCall( self._cdr_METHOD(  'cdr',
                                                                                    begin
                                                                                      if @global_lisp_binding.has_key?('_cdr') then
                                                                                        trampCall(@_cdr)
                                                                                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:75"] + __e.backtrace ) ; raise __e
                                                                                    end                                                                                  ,
                                                                                [
                                                                                    __x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81847
                                                                                ]
                                                                                             ))
                                                                          ]
                                                                                       ))
                                                                      else
                                                                        false
                                                                      end
                                                                     ) then
                                                                        begin
                                                                          ___lambda = lambda { |__w__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81990| 
                                                                              begin
                                                                                  begin
                                                                                    ___lambda = lambda { |_x2| 
                                                                                        begin
                                                                                            trampCall( callProcedure(   'proc',
                                                                                                begin
                                                                                                    trampCall(_proc)
                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:109"] + __e.backtrace ) ; raise __e
                                                                                                end                                                                                              ,
                                                                                            [
                                                                                                  trampCall( self._cons_METHOD(  'cons',
                                                                                                      begin
                                                                                                        if @global_lisp_binding.has_key?('_cons') then
                                                                                                          trampCall(@_cons)
                                                                                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:98"] + __e.backtrace ) ; raise __e
                                                                                                      end                                                                                                    ,
                                                                                                  [
                                                                                                        begin
                                                                                                            trampCall(_x1)
                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:108"] + __e.backtrace ) ; raise __e
                                                                                                        end                                                                                                      ,
                                                                                                        trampCall( self._cons_METHOD(  'cons',
                                                                                                            begin
                                                                                                              if @global_lisp_binding.has_key?('_cons') then
                                                                                                                trampCall(@_cons)
                                                                                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:98"] + __e.backtrace ) ; raise __e
                                                                                                            end                                                                                                          ,
                                                                                                        [
                                                                                                              begin
                                                                                                                  trampCall(_x2)
                                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:108"] + __e.backtrace ) ; raise __e
                                                                                                              end                                                                                                            ,
                                                                                                            Cell.new()
                                                                                                        ]
                                                                                                                     ))
                                                                                                  ]
                                                                                                               ))
                                                                                            ]
                                                                                                         ))
                                                                                            delayCall( '_proc',  'proc',
                                                                                                begin
                                                                                                    trampCall(_proc)
                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:109"] + __e.backtrace ) ; raise __e
                                                                                                end                                                                                              ,
                                                                                            [
                                                                                                  trampCall( self._cons_METHOD(  'cons',
                                                                                                      begin
                                                                                                        if @global_lisp_binding.has_key?('_cons') then
                                                                                                          trampCall(@_cons)
                                                                                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:98"] + __e.backtrace ) ; raise __e
                                                                                                      end                                                                                                    ,
                                                                                                  [
                                                                                                        begin
                                                                                                            trampCall(_x2)
                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:108"] + __e.backtrace ) ; raise __e
                                                                                                        end                                                                                                      ,
                                                                                                        trampCall( self._cons_METHOD(  'cons',
                                                                                                            begin
                                                                                                              if @global_lisp_binding.has_key?('_cons') then
                                                                                                                trampCall(@_cons)
                                                                                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:98"] + __e.backtrace ) ; raise __e
                                                                                                            end                                                                                                          ,
                                                                                                        [
                                                                                                              begin
                                                                                                                  trampCall(_x1)
                                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:108"] + __e.backtrace ) ; raise __e
                                                                                                              end                                                                                                            ,
                                                                                                            Cell.new()
                                                                                                        ]
                                                                                                                     ))
                                                                                                  ]
                                                                                                               ))
                                                                                            ]
                                                                                                         )
                                                                                        end
                                                                                    } ; ___lambda.call(
                                                                                        __w__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81990
                                                                                               )
                                                                                  end
                                                                              end
                                                                          } ; ___lambda.call(
                                                                                trampCall( self._car_METHOD(  'car',
                                                                                    begin
                                                                                      if @global_lisp_binding.has_key?('_car') then
                                                                                        trampCall(@_car)
                                                                                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:76"] + __e.backtrace ) ; raise __e
                                                                                    end                                                                                  ,
                                                                                [
                                                                                    __x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81847
                                                                                ]
                                                                                             ))
                                                                                     )
                                                                        end
                                                                    else
                                                                        delayCall( '__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81776',  '_failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81776',
                                                                            begin
                                                                                trampCall(__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81776)
                                                                              rescue => __e ; __e.set_backtrace( ["dynamic S-expression ( no source ):1"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                        [
                                                                        ]
                                                                                     )
                                                                    end
                                                                } ; ___lambda.call(
                                                                    __w__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81846
                                                                           )
                                                              end
                                                          end
                                                      } ; ___lambda.call(
                                                            trampCall( self._car_METHOD(  'car',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_car') then
                                                                    trampCall(@_car)
                                                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:76"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                            [
                                                                  begin
                                                                      trampCall(_set)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:109"] + __e.backtrace ) ; raise __e
                                                                  end
                                                            ]
                                                                         ))                                                          ,
                                                            trampCall( self._cdr_METHOD(  'cdr',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_cdr') then
                                                                    trampCall(@_cdr)
                                                                  else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:75"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                            [
                                                                  begin
                                                                      trampCall(_set)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:109"] + __e.backtrace ) ; raise __e
                                                                  end
                                                            ]
                                                                         ))
                                                                 )
                                                    end
                                                else
                                                    delayCall( '__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81776',  '_failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81776',
                                                        begin
                                                            trampCall(__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81776)
                                                          rescue => __e ; __e.set_backtrace( ["dynamic S-expression ( no source ):1"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                    [
                                                    ]
                                                                 )
                                                end
                                            end
                                        } ; ___lambda.call(
                                              Proc.new { || 
                                                  begin
                                                    ___lambda = lambda { |__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81778| 
                                                        begin
                                                            if ( 
                                                              trampCall( self._pair_QUMARK_METHOD(  'pair?',
                                                                  begin
                                                                    if @global_lisp_binding.has_key?('_pair_QUMARK') then
                                                                      trampCall(@_pair_QUMARK)
                                                                    else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                                                    rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                              [
                                                                    begin
                                                                        trampCall(_set)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:109"] + __e.backtrace ) ; raise __e
                                                                    end
                                                              ]
                                                                           ))
                                                             ) then
                                                                begin
                                                                  ___lambda = lambda { |__w__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81885,__x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81886| 
                                                                      begin
                                                                          begin
                                                                            ___lambda = lambda { |_x1| 
                                                                                begin
                                                                                    if ( 
                                                                                      trampCall( self._pair_QUMARK_METHOD(  'pair?',
                                                                                          begin
                                                                                            if @global_lisp_binding.has_key?('_pair_QUMARK') then
                                                                                              trampCall(@_pair_QUMARK)
                                                                                            else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                                                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                          end                                                                                        ,
                                                                                      [
                                                                                          __x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81886
                                                                                      ]
                                                                                                   ))
                                                                                     ) then
                                                                                        begin
                                                                                          ___lambda = lambda { |__w__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_82112,__x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_82113| 
                                                                                              begin
                                                                                                  begin
                                                                                                    ___lambda = lambda { |_x2| 
                                                                                                        if ( 
                                                                                                          if ( 
                                                                                                            trampCall( self._not_METHOD(  'not',
                                                                                                                begin
                                                                                                                  if @global_lisp_binding.has_key?('_not') then
                                                                                                                    trampCall(@_not)
                                                                                                                  else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:175"] + __e.backtrace ) ; raise __e
                                                                                                                end                                                                                                              ,
                                                                                                            [
                                                                                                                  trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                                                                                                      begin
                                                                                                                        if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                                                                                          trampCall(@_eq_QUMARK)
                                                                                                                        else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                                                                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                                                      end                                                                                                                    ,
                                                                                                                  [
                                                                                                                      false                                                                                                                      ,
                                                                                                                        trampCall( self._pair_QUMARK_METHOD(  'pair?',
                                                                                                                            begin
                                                                                                                              if @global_lisp_binding.has_key?('_pair_QUMARK') then
                                                                                                                                trampCall(@_pair_QUMARK)
                                                                                                                              else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                                                                                                              rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                                                            end                                                                                                                          ,
                                                                                                                        [
                                                                                                                            __x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_82113
                                                                                                                        ]
                                                                                                                                     ))
                                                                                                                  ]
                                                                                                                               ))
                                                                                                            ]
                                                                                                                         ))
                                                                                                           ) then
                                                                                                              trampCall( self._null_QUMARK_METHOD(  'null?',
                                                                                                                  begin
                                                                                                                    if @global_lisp_binding.has_key?('_null_QUMARK') then
                                                                                                                      trampCall(@_null_QUMARK)
                                                                                                                    else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:70"] + __e.backtrace ) ; raise __e
                                                                                                                  end                                                                                                                ,
                                                                                                              [
                                                                                                                    trampCall( self._cdr_METHOD(  'cdr',
                                                                                                                        begin
                                                                                                                          if @global_lisp_binding.has_key?('_cdr') then
                                                                                                                            trampCall(@_cdr)
                                                                                                                          else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:75"] + __e.backtrace ) ; raise __e
                                                                                                                        end                                                                                                                      ,
                                                                                                                    [
                                                                                                                        __x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_82113
                                                                                                                    ]
                                                                                                                                 ))
                                                                                                              ]
                                                                                                                           ))
                                                                                                          else
                                                                                                            false
                                                                                                          end
                                                                                                         ) then
                                                                                                            begin
                                                                                                              ___lambda = lambda { |__w__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_82212| 
                                                                                                                  begin
                                                                                                                      begin
                                                                                                                        ___lambda = lambda { |_x3| 
                                                                                                                            begin
                                                                                                                                delayCall( '_p_SLMARKeach3',  'p/each3',
                                                                                                                                    begin
                                                                                                                                      if @global_lisp_binding.has_key?('_p_SLMARKeach3') then
                                                                                                                                        trampCall(@_p_SLMARKeach3)
                                                                                                                                      else raise NameError.new( "Error: undefined variable _p_SLMARKeach3", "_p_SLMARKeach3" ) end
                                                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:107"] + __e.backtrace ) ; raise __e
                                                                                                                                    end                                                                                                                                  ,
                                                                                                                                [
                                                                                                                                      begin
                                                                                                                                          trampCall(_proc)
                                                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:109"] + __e.backtrace ) ; raise __e
                                                                                                                                      end                                                                                                                                    ,
                                                                                                                                      begin
                                                                                                                                          trampCall(_x1)
                                                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:108"] + __e.backtrace ) ; raise __e
                                                                                                                                      end                                                                                                                                    ,
                                                                                                                                      begin
                                                                                                                                          trampCall(_x2)
                                                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:108"] + __e.backtrace ) ; raise __e
                                                                                                                                      end                                                                                                                                    ,
                                                                                                                                      begin
                                                                                                                                          trampCall(_x3)
                                                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:108"] + __e.backtrace ) ; raise __e
                                                                                                                                      end
                                                                                                                                ]
                                                                                                                                             )
                                                                                                                            end
                                                                                                                        } ; ___lambda.call(
                                                                                                                            __w__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_82212
                                                                                                                                   )
                                                                                                                      end
                                                                                                                  end
                                                                                                              } ; ___lambda.call(
                                                                                                                    trampCall( self._car_METHOD(  'car',
                                                                                                                        begin
                                                                                                                          if @global_lisp_binding.has_key?('_car') then
                                                                                                                            trampCall(@_car)
                                                                                                                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:76"] + __e.backtrace ) ; raise __e
                                                                                                                        end                                                                                                                      ,
                                                                                                                    [
                                                                                                                        __x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_82113
                                                                                                                    ]
                                                                                                                                 ))
                                                                                                                         )
                                                                                                            end
                                                                                                        else
                                                                                                            delayCall( '__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81778',  '_failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81778',
                                                                                                                begin
                                                                                                                    trampCall(__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81778)
                                                                                                                  rescue => __e ; __e.set_backtrace( ["dynamic S-expression ( no source ):1"] + __e.backtrace ) ; raise __e
                                                                                                                end                                                                                                              ,
                                                                                                            [
                                                                                                            ]
                                                                                                                         )
                                                                                                        end
                                                                                                    } ; ___lambda.call(
                                                                                                        __w__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_82112
                                                                                                               )
                                                                                                  end
                                                                                              end
                                                                                          } ; ___lambda.call(
                                                                                                trampCall( self._car_METHOD(  'car',
                                                                                                    begin
                                                                                                      if @global_lisp_binding.has_key?('_car') then
                                                                                                        trampCall(@_car)
                                                                                                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:76"] + __e.backtrace ) ; raise __e
                                                                                                    end                                                                                                  ,
                                                                                                [
                                                                                                    __x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81886
                                                                                                ]
                                                                                                             ))                                                                                              ,
                                                                                                trampCall( self._cdr_METHOD(  'cdr',
                                                                                                    begin
                                                                                                      if @global_lisp_binding.has_key?('_cdr') then
                                                                                                        trampCall(@_cdr)
                                                                                                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:75"] + __e.backtrace ) ; raise __e
                                                                                                    end                                                                                                  ,
                                                                                                [
                                                                                                    __x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81886
                                                                                                ]
                                                                                                             ))
                                                                                                     )
                                                                                        end
                                                                                    else
                                                                                        delayCall( '__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81778',  '_failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81778',
                                                                                            begin
                                                                                                trampCall(__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81778)
                                                                                              rescue => __e ; __e.set_backtrace( ["dynamic S-expression ( no source ):1"] + __e.backtrace ) ; raise __e
                                                                                            end                                                                                          ,
                                                                                        [
                                                                                        ]
                                                                                                     )
                                                                                    end
                                                                                end
                                                                            } ; ___lambda.call(
                                                                                __w__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81885
                                                                                       )
                                                                          end
                                                                      end
                                                                  } ; ___lambda.call(
                                                                        trampCall( self._car_METHOD(  'car',
                                                                            begin
                                                                              if @global_lisp_binding.has_key?('_car') then
                                                                                trampCall(@_car)
                                                                              else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:76"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                        [
                                                                              begin
                                                                                  trampCall(_set)
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:109"] + __e.backtrace ) ; raise __e
                                                                              end
                                                                        ]
                                                                                     ))                                                                      ,
                                                                        trampCall( self._cdr_METHOD(  'cdr',
                                                                            begin
                                                                              if @global_lisp_binding.has_key?('_cdr') then
                                                                                trampCall(@_cdr)
                                                                              else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:75"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                        [
                                                                              begin
                                                                                  trampCall(_set)
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:109"] + __e.backtrace ) ; raise __e
                                                                              end
                                                                        ]
                                                                                     ))
                                                                             )
                                                                end
                                                            else
                                                                delayCall( '__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81778',  '_failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81778',
                                                                    begin
                                                                        trampCall(__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_81778)
                                                                      rescue => __e ; __e.set_backtrace( ["dynamic S-expression ( no source ):1"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                [
                                                                ]
                                                                             )
                                                            end
                                                        end
                                                    } ; ___lambda.call(
                                                          Proc.new { || 
                                                              begin
                                                                ___lambda = lambda { |__failure__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81845| 
                                                                    begin
                                                                        if ( 
                                                                          trampCall( self._pair_QUMARK_METHOD(  'pair?',
                                                                              begin
                                                                                if @global_lisp_binding.has_key?('_pair_QUMARK') then
                                                                                  trampCall(@_pair_QUMARK)
                                                                                else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                                                                rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                              end                                                                            ,
                                                                          [
                                                                                begin
                                                                                    trampCall(_set)
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:109"] + __e.backtrace ) ; raise __e
                                                                                end
                                                                          ]
                                                                                       ))
                                                                         ) then
                                                                            begin
                                                                              ___lambda = lambda { |__w__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81953,__x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81954| 
                                                                                  begin
                                                                                      begin
                                                                                        ___lambda = lambda { |_x1| 
                                                                                            begin
                                                                                                if ( 
                                                                                                  trampCall( self._pair_QUMARK_METHOD(  'pair?',
                                                                                                      begin
                                                                                                        if @global_lisp_binding.has_key?('_pair_QUMARK') then
                                                                                                          trampCall(@_pair_QUMARK)
                                                                                                        else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                                                                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                                      end                                                                                                    ,
                                                                                                  [
                                                                                                      __x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81954
                                                                                                  ]
                                                                                                               ))
                                                                                                 ) then
                                                                                                    begin
                                                                                                      ___lambda = lambda { |__w__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_82150,__x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_82151| 
                                                                                                          begin
                                                                                                              begin
                                                                                                                ___lambda = lambda { |_x2| 
                                                                                                                    begin
                                                                                                                        if ( 
                                                                                                                          trampCall( self._pair_QUMARK_METHOD(  'pair?',
                                                                                                                              begin
                                                                                                                                if @global_lisp_binding.has_key?('_pair_QUMARK') then
                                                                                                                                  trampCall(@_pair_QUMARK)
                                                                                                                                else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                                                                                                                rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                                                              end                                                                                                                            ,
                                                                                                                          [
                                                                                                                              __x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_82151
                                                                                                                          ]
                                                                                                                                       ))
                                                                                                                         ) then
                                                                                                                            begin
                                                                                                                              ___lambda = lambda { |__w__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_82279,__x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_82280| 
                                                                                                                                  begin
                                                                                                                                      begin
                                                                                                                                        ___lambda = lambda { |_x3| 
                                                                                                                                            if ( 
                                                                                                                                              if ( 
                                                                                                                                                trampCall( self._not_METHOD(  'not',
                                                                                                                                                    begin
                                                                                                                                                      if @global_lisp_binding.has_key?('_not') then
                                                                                                                                                        trampCall(@_not)
                                                                                                                                                      else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:175"] + __e.backtrace ) ; raise __e
                                                                                                                                                    end                                                                                                                                                  ,
                                                                                                                                                [
                                                                                                                                                      trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                                                                                                                                          begin
                                                                                                                                                            if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                                                                                                                              trampCall(@_eq_QUMARK)
                                                                                                                                                            else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                                                                                                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                                                                                          end                                                                                                                                                        ,
                                                                                                                                                      [
                                                                                                                                                          false                                                                                                                                                          ,
                                                                                                                                                            trampCall( self._pair_QUMARK_METHOD(  'pair?',
                                                                                                                                                                begin
                                                                                                                                                                  if @global_lisp_binding.has_key?('_pair_QUMARK') then
                                                                                                                                                                    trampCall(@_pair_QUMARK)
                                                                                                                                                                  else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                                                                                                                                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                                                                                                end                                                                                                                                                              ,
                                                                                                                                                            [
                                                                                                                                                                __x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_82280
                                                                                                                                                            ]
                                                                                                                                                                         ))
                                                                                                                                                      ]
                                                                                                                                                                   ))
                                                                                                                                                ]
                                                                                                                                                             ))
                                                                                                                                               ) then
                                                                                                                                                  trampCall( self._null_QUMARK_METHOD(  'null?',
                                                                                                                                                      begin
                                                                                                                                                        if @global_lisp_binding.has_key?('_null_QUMARK') then
                                                                                                                                                          trampCall(@_null_QUMARK)
                                                                                                                                                        else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                                                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:70"] + __e.backtrace ) ; raise __e
                                                                                                                                                      end                                                                                                                                                    ,
                                                                                                                                                  [
                                                                                                                                                        trampCall( self._cdr_METHOD(  'cdr',
                                                                                                                                                            begin
                                                                                                                                                              if @global_lisp_binding.has_key?('_cdr') then
                                                                                                                                                                trampCall(@_cdr)
                                                                                                                                                              else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:75"] + __e.backtrace ) ; raise __e
                                                                                                                                                            end                                                                                                                                                          ,
                                                                                                                                                        [
                                                                                                                                                            __x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_82280
                                                                                                                                                        ]
                                                                                                                                                                     ))
                                                                                                                                                  ]
                                                                                                                                                               ))
                                                                                                                                              else
                                                                                                                                                false
                                                                                                                                              end
                                                                                                                                             ) then
                                                                                                                                                begin
                                                                                                                                                  ___lambda = lambda { |__w__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_82311| 
                                                                                                                                                      begin
                                                                                                                                                          begin
                                                                                                                                                            ___lambda = lambda { |_x4| 
                                                                                                                                                                begin
                                                                                                                                                                    delayCall( '_p_SLMARKeach4',  'p/each4',
                                                                                                                                                                        begin
                                                                                                                                                                          if @global_lisp_binding.has_key?('_p_SLMARKeach4') then
                                                                                                                                                                            trampCall(@_p_SLMARKeach4)
                                                                                                                                                                          else raise NameError.new( "Error: undefined variable _p_SLMARKeach4", "_p_SLMARKeach4" ) end
                                                                                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:108"] + __e.backtrace ) ; raise __e
                                                                                                                                                                        end                                                                                                                                                                      ,
                                                                                                                                                                    [
                                                                                                                                                                          begin
                                                                                                                                                                              trampCall(_proc)
                                                                                                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:109"] + __e.backtrace ) ; raise __e
                                                                                                                                                                          end                                                                                                                                                                        ,
                                                                                                                                                                          begin
                                                                                                                                                                              trampCall(_x1)
                                                                                                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:108"] + __e.backtrace ) ; raise __e
                                                                                                                                                                          end                                                                                                                                                                        ,
                                                                                                                                                                          begin
                                                                                                                                                                              trampCall(_x2)
                                                                                                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:108"] + __e.backtrace ) ; raise __e
                                                                                                                                                                          end                                                                                                                                                                        ,
                                                                                                                                                                          begin
                                                                                                                                                                              trampCall(_x3)
                                                                                                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:108"] + __e.backtrace ) ; raise __e
                                                                                                                                                                          end                                                                                                                                                                        ,
                                                                                                                                                                          begin
                                                                                                                                                                              trampCall(_x4)
                                                                                                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:108"] + __e.backtrace ) ; raise __e
                                                                                                                                                                          end
                                                                                                                                                                    ]
                                                                                                                                                                                 )
                                                                                                                                                                end
                                                                                                                                                            } ; ___lambda.call(
                                                                                                                                                                __w__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_82311
                                                                                                                                                                       )
                                                                                                                                                          end
                                                                                                                                                      end
                                                                                                                                                  } ; ___lambda.call(
                                                                                                                                                        trampCall( self._car_METHOD(  'car',
                                                                                                                                                            begin
                                                                                                                                                              if @global_lisp_binding.has_key?('_car') then
                                                                                                                                                                trampCall(@_car)
                                                                                                                                                              else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:76"] + __e.backtrace ) ; raise __e
                                                                                                                                                            end                                                                                                                                                          ,
                                                                                                                                                        [
                                                                                                                                                            __x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_82280
                                                                                                                                                        ]
                                                                                                                                                                     ))
                                                                                                                                                             )
                                                                                                                                                end
                                                                                                                                            else
                                                                                                                                                delayCall( '__failure__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81845',  '_failure__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81845',
                                                                                                                                                    begin
                                                                                                                                                        trampCall(__failure__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81845)
                                                                                                                                                      rescue => __e ; __e.set_backtrace( ["dynamic S-expression ( no source ):1"] + __e.backtrace ) ; raise __e
                                                                                                                                                    end                                                                                                                                                  ,
                                                                                                                                                [
                                                                                                                                                ]
                                                                                                                                                             )
                                                                                                                                            end
                                                                                                                                        } ; ___lambda.call(
                                                                                                                                            __w__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_82279
                                                                                                                                                   )
                                                                                                                                      end
                                                                                                                                  end
                                                                                                                              } ; ___lambda.call(
                                                                                                                                    trampCall( self._car_METHOD(  'car',
                                                                                                                                        begin
                                                                                                                                          if @global_lisp_binding.has_key?('_car') then
                                                                                                                                            trampCall(@_car)
                                                                                                                                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:76"] + __e.backtrace ) ; raise __e
                                                                                                                                        end                                                                                                                                      ,
                                                                                                                                    [
                                                                                                                                        __x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_82151
                                                                                                                                    ]
                                                                                                                                                 ))                                                                                                                                  ,
                                                                                                                                    trampCall( self._cdr_METHOD(  'cdr',
                                                                                                                                        begin
                                                                                                                                          if @global_lisp_binding.has_key?('_cdr') then
                                                                                                                                            trampCall(@_cdr)
                                                                                                                                          else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:75"] + __e.backtrace ) ; raise __e
                                                                                                                                        end                                                                                                                                      ,
                                                                                                                                    [
                                                                                                                                        __x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_82151
                                                                                                                                    ]
                                                                                                                                                 ))
                                                                                                                                         )
                                                                                                                            end
                                                                                                                        else
                                                                                                                            delayCall( '__failure__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81845',  '_failure__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81845',
                                                                                                                                begin
                                                                                                                                    trampCall(__failure__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81845)
                                                                                                                                  rescue => __e ; __e.set_backtrace( ["dynamic S-expression ( no source ):1"] + __e.backtrace ) ; raise __e
                                                                                                                                end                                                                                                                              ,
                                                                                                                            [
                                                                                                                            ]
                                                                                                                                         )
                                                                                                                        end
                                                                                                                    end
                                                                                                                } ; ___lambda.call(
                                                                                                                    __w__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_82150
                                                                                                                           )
                                                                                                              end
                                                                                                          end
                                                                                                      } ; ___lambda.call(
                                                                                                            trampCall( self._car_METHOD(  'car',
                                                                                                                begin
                                                                                                                  if @global_lisp_binding.has_key?('_car') then
                                                                                                                    trampCall(@_car)
                                                                                                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:76"] + __e.backtrace ) ; raise __e
                                                                                                                end                                                                                                              ,
                                                                                                            [
                                                                                                                __x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81954
                                                                                                            ]
                                                                                                                         ))                                                                                                          ,
                                                                                                            trampCall( self._cdr_METHOD(  'cdr',
                                                                                                                begin
                                                                                                                  if @global_lisp_binding.has_key?('_cdr') then
                                                                                                                    trampCall(@_cdr)
                                                                                                                  else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:75"] + __e.backtrace ) ; raise __e
                                                                                                                end                                                                                                              ,
                                                                                                            [
                                                                                                                __x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81954
                                                                                                            ]
                                                                                                                         ))
                                                                                                                 )
                                                                                                    end
                                                                                                else
                                                                                                    delayCall( '__failure__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81845',  '_failure__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81845',
                                                                                                        begin
                                                                                                            trampCall(__failure__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81845)
                                                                                                          rescue => __e ; __e.set_backtrace( ["dynamic S-expression ( no source ):1"] + __e.backtrace ) ; raise __e
                                                                                                        end                                                                                                      ,
                                                                                                    [
                                                                                                    ]
                                                                                                                 )
                                                                                                end
                                                                                            end
                                                                                        } ; ___lambda.call(
                                                                                            __w__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81953
                                                                                                   )
                                                                                      end
                                                                                  end
                                                                              } ; ___lambda.call(
                                                                                    trampCall( self._car_METHOD(  'car',
                                                                                        begin
                                                                                          if @global_lisp_binding.has_key?('_car') then
                                                                                            trampCall(@_car)
                                                                                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:76"] + __e.backtrace ) ; raise __e
                                                                                        end                                                                                      ,
                                                                                    [
                                                                                          begin
                                                                                              trampCall(_set)
                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:109"] + __e.backtrace ) ; raise __e
                                                                                          end
                                                                                    ]
                                                                                                 ))                                                                                  ,
                                                                                    trampCall( self._cdr_METHOD(  'cdr',
                                                                                        begin
                                                                                          if @global_lisp_binding.has_key?('_cdr') then
                                                                                            trampCall(@_cdr)
                                                                                          else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:75"] + __e.backtrace ) ; raise __e
                                                                                        end                                                                                      ,
                                                                                    [
                                                                                          begin
                                                                                              trampCall(_set)
                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:109"] + __e.backtrace ) ; raise __e
                                                                                          end
                                                                                    ]
                                                                                                 ))
                                                                                         )
                                                                            end
                                                                        else
                                                                            delayCall( '__failure__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81845',  '_failure__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81845',
                                                                                begin
                                                                                    trampCall(__failure__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81845)
                                                                                  rescue => __e ; __e.set_backtrace( ["dynamic S-expression ( no source ):1"] + __e.backtrace ) ; raise __e
                                                                                end                                                                              ,
                                                                            [
                                                                            ]
                                                                                         )
                                                                        end
                                                                    end
                                                                } ; ___lambda.call(
                                                                      Proc.new { || 
                                                                          begin
                                                                            ___lambda = lambda { |__failure__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_81884| 
                                                                                begin
                                                                                    begin
                                                                                      ___lambda = lambda { |_else| 
                                                                                          begin
                                                                                              delayCall( '_p_SLMARKeach_ASMARK',  'p/each*',
                                                                                                  begin
                                                                                                    if @global_lisp_binding.has_key?('_p_SLMARKeach_ASMARK') then
                                                                                                      trampCall(@_p_SLMARKeach_ASMARK)
                                                                                                    else raise NameError.new( "Error: undefined variable _p_SLMARKeach_ASMARK", "_p_SLMARKeach_ASMARK" ) end
                                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:109"] + __e.backtrace ) ; raise __e
                                                                                                  end                                                                                                ,
                                                                                              [
                                                                                                    begin
                                                                                                        trampCall(_proc)
                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:109"] + __e.backtrace ) ; raise __e
                                                                                                    end                                                                                                  ,
                                                                                                    trampCall( self._length_METHOD(  'length',
                                                                                                        begin
                                                                                                          if @global_lisp_binding.has_key?('_length') then
                                                                                                            trampCall(@_length)
                                                                                                          else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:109"] + __e.backtrace ) ; raise __e
                                                                                                        end                                                                                                      ,
                                                                                                    [
                                                                                                          begin
                                                                                                              trampCall(_set)
                                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:109"] + __e.backtrace ) ; raise __e
                                                                                                          end
                                                                                                    ]
                                                                                                                 ))                                                                                                  ,
                                                                                                    begin
                                                                                                        trampCall(_set)
                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:109"] + __e.backtrace ) ; raise __e
                                                                                                    end
                                                                                              ]
                                                                                                           )
                                                                                          end
                                                                                      } ; ___lambda.call(
                                                                                            begin
                                                                                                trampCall(_set)
                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:109"] + __e.backtrace ) ; raise __e
                                                                                            end
                                                                                                 )
                                                                                    end
                                                                                end
                                                                            } ; ___lambda.call(
                                                                                  Proc.new { || 
                                                                                      begin raise RuntimeError, 
                                                                                      "Error: match: no matching pattern"
                                                                                      rescue => __e 
                                                                                        __e.set_backtrace( [":1"] + __e.backtrace )
                                                                                        raise __e
                                                                                      end 
                                                                                  }
                                                                                       )
                                                                          end
                                                                      }
                                                                           )
                                                              end
                                                          }
                                                               )
                                                  end
                                              }
                                                   )
                                      end
                                  }
                                       )
                          end
                      }
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._permutations_ASMARK_MIMARKfor_MIMARKeach_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_permutations_ASMARK_MIMARKfor_MIMARKeach'] = self.method( :_permutations_ASMARK_MIMARKfor_MIMARKeach_METHOD )
    @_permutations_ASMARK_MIMARKfor_MIMARKeach = 
    trampCall(
          Proc.new { |_proc,_set,*__rest__| ___gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_82342 = __rest__[0] ;  
              begin
                ___lambda = lambda { |_eq| 
                    if ( 
                      trampCall( self.__LTMARK_METHOD(  '<',
                          begin
                            if @global_lisp_binding.has_key?('__LTMARK') then
                              trampCall(@__LTMARK)
                            else raise NameError.new( "Error: undefined variable __LTMARK", "__LTMARK" ) end
                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                          end                        ,
                      [
                          0                          ,
                            trampCall( self._length_METHOD(  'length',
                                begin
                                  if @global_lisp_binding.has_key?('_length') then
                                    trampCall(@_length)
                                  else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:109"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                  begin
                                      trampCall(___gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_82342)
                                    rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                  end
                            ]
                                         ))
                      ]
                                   ))
                     ) then
                        begin
                            begin
                              
                              _eq = 
                              trampCall(
                                    trampCall( self._nth_METHOD(  'nth',
                                        begin
                                          if @global_lisp_binding.has_key?('_nth') then
                                            trampCall(@_nth)
                                          else raise NameError.new( "Error: undefined variable _nth", "_nth" ) end
                                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                    [
                                        0                                        ,
                                          begin
                                              trampCall(___gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_82342)
                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                          end
                                    ]
                                                 ))
                              )
                            end
                        end
                    end
                    begin
                        def self._rec_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
                        @global_lisp_binding['_rec'] = self.method( :_rec_METHOD )
                      @_rec = 
                      trampCall(
                            Proc.new { |_proc,_set| 
                                begin
                                  ___lambda = lambda { |__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_82343| 
                                      if ( 
                                        trampCall( self._null_QUMARK_METHOD(  'null?',
                                            begin
                                              if @global_lisp_binding.has_key?('_null_QUMARK') then
                                                trampCall(@_null_QUMARK)
                                              else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:122"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                        [
                                              begin
                                                  trampCall(_set)
                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:127"] + __e.backtrace ) ; raise __e
                                              end
                                        ]
                                                     ))
                                       ) then
                                          begin
                                            nil
                                          end
                                      else
                                          trampCall( callProcedure(   '_failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_82343',
                                              begin
                                                  trampCall(__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_82343)
                                                rescue => __e ; __e.set_backtrace( ["dynamic S-expression ( no source ):1"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                          [
                                          ]
                                                       ))
                                      end
                                  } ; ___lambda.call(
                                        Proc.new { || 
                                            begin
                                              ___lambda = lambda { |__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_82344| 
                                                  if ( 
                                                    if ( 
                                                      trampCall( self._not_METHOD(  'not',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_not') then
                                                              trampCall(@_not)
                                                            else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:175"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                      [
                                                            trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                                    trampCall(@_eq_QUMARK)
                                                                  else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                            [
                                                                false                                                                ,
                                                                  trampCall( self._pair_QUMARK_METHOD(  'pair?',
                                                                      begin
                                                                        if @global_lisp_binding.has_key?('_pair_QUMARK') then
                                                                          trampCall(@_pair_QUMARK)
                                                                        else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                  [
                                                                        begin
                                                                            trampCall(_set)
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:127"] + __e.backtrace ) ; raise __e
                                                                        end
                                                                  ]
                                                                               ))
                                                            ]
                                                                         ))
                                                      ]
                                                                   ))
                                                     ) then
                                                        trampCall( self._null_QUMARK_METHOD(  'null?',
                                                            begin
                                                              if @global_lisp_binding.has_key?('_null_QUMARK') then
                                                                trampCall(@_null_QUMARK)
                                                              else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:122"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                        [
                                                              trampCall( self._cdr_METHOD(  'cdr',
                                                                  begin
                                                                    if @global_lisp_binding.has_key?('_cdr') then
                                                                      trampCall(@_cdr)
                                                                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:126"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                              [
                                                                    begin
                                                                        trampCall(_set)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:127"] + __e.backtrace ) ; raise __e
                                                                    end
                                                              ]
                                                                           ))
                                                        ]
                                                                     ))
                                                    else
                                                      false
                                                    end
                                                   ) then
                                                      begin
                                                        ___lambda = lambda { |__w__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_82346| 
                                                            begin
                                                                begin
                                                                  ___lambda = lambda { |_a| 
                                                                      begin
                                                                          trampCall( callProcedure(   'proc',
                                                                              begin
                                                                                  trampCall(_proc)
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:127"] + __e.backtrace ) ; raise __e
                                                                              end                                                                            ,
                                                                          [
                                                                                begin
                                                                                    trampCall(_set)
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:127"] + __e.backtrace ) ; raise __e
                                                                                end
                                                                          ]
                                                                                       ))
                                                                      end
                                                                  } ; ___lambda.call(
                                                                      __w__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_82346
                                                                             )
                                                                end
                                                            end
                                                        } ; ___lambda.call(
                                                              trampCall( self._car_METHOD(  'car',
                                                                  begin
                                                                    if @global_lisp_binding.has_key?('_car') then
                                                                      trampCall(@_car)
                                                                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:126"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                              [
                                                                    begin
                                                                        trampCall(_set)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:127"] + __e.backtrace ) ; raise __e
                                                                    end
                                                              ]
                                                                           ))
                                                                   )
                                                      end
                                                  else
                                                      trampCall( callProcedure(   '_failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_82344',
                                                          begin
                                                              trampCall(__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_82344)
                                                            rescue => __e ; __e.set_backtrace( ["dynamic S-expression ( no source ):1"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                      [
                                                      ]
                                                                   ))
                                                  end
                                              } ; ___lambda.call(
                                                    Proc.new { || 
                                                        begin
                                                          ___lambda = lambda { |__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_82345| 
                                                              begin
                                                                  if ( 
                                                                    trampCall( self._pair_QUMARK_METHOD(  'pair?',
                                                                        begin
                                                                          if @global_lisp_binding.has_key?('_pair_QUMARK') then
                                                                            trampCall(@_pair_QUMARK)
                                                                          else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                                                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                    [
                                                                          begin
                                                                              trampCall(_set)
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:127"] + __e.backtrace ) ; raise __e
                                                                          end
                                                                    ]
                                                                                 ))
                                                                   ) then
                                                                      begin
                                                                        ___lambda = lambda { |__w__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_82414,__x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_82415| 
                                                                            begin
                                                                                begin
                                                                                  ___lambda = lambda { |_a| 
                                                                                      if ( 
                                                                                        if ( 
                                                                                          trampCall( self._not_METHOD(  'not',
                                                                                              begin
                                                                                                if @global_lisp_binding.has_key?('_not') then
                                                                                                  trampCall(@_not)
                                                                                                else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:175"] + __e.backtrace ) ; raise __e
                                                                                              end                                                                                            ,
                                                                                          [
                                                                                                trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                                                                                    begin
                                                                                                      if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                                                                        trampCall(@_eq_QUMARK)
                                                                                                      else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                                                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                                    end                                                                                                  ,
                                                                                                [
                                                                                                    false                                                                                                    ,
                                                                                                      trampCall( self._pair_QUMARK_METHOD(  'pair?',
                                                                                                          begin
                                                                                                            if @global_lisp_binding.has_key?('_pair_QUMARK') then
                                                                                                              trampCall(@_pair_QUMARK)
                                                                                                            else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                                                                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                                          end                                                                                                        ,
                                                                                                      [
                                                                                                          __x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_82415
                                                                                                      ]
                                                                                                                   ))
                                                                                                ]
                                                                                                             ))
                                                                                          ]
                                                                                                       ))
                                                                                         ) then
                                                                                            trampCall( self._null_QUMARK_METHOD(  'null?',
                                                                                                begin
                                                                                                  if @global_lisp_binding.has_key?('_null_QUMARK') then
                                                                                                    trampCall(@_null_QUMARK)
                                                                                                  else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:122"] + __e.backtrace ) ; raise __e
                                                                                                end                                                                                              ,
                                                                                            [
                                                                                                  trampCall( self._cdr_METHOD(  'cdr',
                                                                                                      begin
                                                                                                        if @global_lisp_binding.has_key?('_cdr') then
                                                                                                          trampCall(@_cdr)
                                                                                                        else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:126"] + __e.backtrace ) ; raise __e
                                                                                                      end                                                                                                    ,
                                                                                                  [
                                                                                                      __x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_82415
                                                                                                  ]
                                                                                                               ))
                                                                                            ]
                                                                                                         ))
                                                                                        else
                                                                                          false
                                                                                        end
                                                                                       ) then
                                                                                          begin
                                                                                            ___lambda = lambda { |__w__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_82479| 
                                                                                                begin
                                                                                                    begin
                                                                                                      ___lambda = lambda { |_b| 
                                                                                                          begin
                                                                                                              if ( 
                                                                                                                trampCall( callProcedure(   'eq',
                                                                                                                    begin
                                                                                                                        trampCall(_eq)
                                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:123"] + __e.backtrace ) ; raise __e
                                                                                                                    end                                                                                                                  ,
                                                                                                                [
                                                                                                                      begin
                                                                                                                          trampCall(_a)
                                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:117"] + __e.backtrace ) ; raise __e
                                                                                                                      end                                                                                                                    ,
                                                                                                                      begin
                                                                                                                          trampCall(_b)
                                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:117"] + __e.backtrace ) ; raise __e
                                                                                                                      end
                                                                                                                ]
                                                                                                                             ))
                                                                                                               ) then
                                                                                                                  begin
                                                                                                                      trampCall( callProcedure(   'proc',
                                                                                                                          begin
                                                                                                                              trampCall(_proc)
                                                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:127"] + __e.backtrace ) ; raise __e
                                                                                                                          end                                                                                                                        ,
                                                                                                                      [
                                                                                                                            begin
                                                                                                                                trampCall(_set)
                                                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:127"] + __e.backtrace ) ; raise __e
                                                                                                                            end
                                                                                                                      ]
                                                                                                                                   ))
                                                                                                                  end
                                                                                                              else
                                                                                                                  if ( 
                                                                                                                  true
                                                                                                                   ) then
                                                                                                                      begin
                                                                                                                          trampCall( callProcedure(   'proc',
                                                                                                                              begin
                                                                                                                                  trampCall(_proc)
                                                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:127"] + __e.backtrace ) ; raise __e
                                                                                                                              end                                                                                                                            ,
                                                                                                                          [
                                                                                                                                begin
                                                                                                                                    trampCall(_set)
                                                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:127"] + __e.backtrace ) ; raise __e
                                                                                                                                end
                                                                                                                          ]
                                                                                                                                       ))
                                                                                                                          trampCall( callProcedure(   'proc',
                                                                                                                              begin
                                                                                                                                  trampCall(_proc)
                                                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:127"] + __e.backtrace ) ; raise __e
                                                                                                                              end                                                                                                                            ,
                                                                                                                          [
                                                                                                                                trampCall( self._cons_METHOD(  'cons',
                                                                                                                                    begin
                                                                                                                                      if @global_lisp_binding.has_key?('_cons') then
                                                                                                                                        trampCall(@_cons)
                                                                                                                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:126"] + __e.backtrace ) ; raise __e
                                                                                                                                    end                                                                                                                                  ,
                                                                                                                                [
                                                                                                                                      begin
                                                                                                                                          trampCall(_b)
                                                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:117"] + __e.backtrace ) ; raise __e
                                                                                                                                      end                                                                                                                                    ,
                                                                                                                                      trampCall( self._cons_METHOD(  'cons',
                                                                                                                                          begin
                                                                                                                                            if @global_lisp_binding.has_key?('_cons') then
                                                                                                                                              trampCall(@_cons)
                                                                                                                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:126"] + __e.backtrace ) ; raise __e
                                                                                                                                          end                                                                                                                                        ,
                                                                                                                                      [
                                                                                                                                            begin
                                                                                                                                                trampCall(_a)
                                                                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:117"] + __e.backtrace ) ; raise __e
                                                                                                                                            end                                                                                                                                          ,
                                                                                                                                          Cell.new()
                                                                                                                                      ]
                                                                                                                                                   ))
                                                                                                                                ]
                                                                                                                                             ))
                                                                                                                          ]
                                                                                                                                       ))
                                                                                                                      end
                                                                                                                  else
                                                                                                                      Cell.new()
                                                                                                                  end
                                                                                                              end
                                                                                                          end
                                                                                                      } ; ___lambda.call(
                                                                                                          __w__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_82479
                                                                                                                 )
                                                                                                    end
                                                                                                end
                                                                                            } ; ___lambda.call(
                                                                                                  trampCall( self._car_METHOD(  'car',
                                                                                                      begin
                                                                                                        if @global_lisp_binding.has_key?('_car') then
                                                                                                          trampCall(@_car)
                                                                                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:126"] + __e.backtrace ) ; raise __e
                                                                                                      end                                                                                                    ,
                                                                                                  [
                                                                                                      __x__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_82415
                                                                                                  ]
                                                                                                               ))
                                                                                                       )
                                                                                          end
                                                                                      else
                                                                                          trampCall( callProcedure(   '_failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_82345',
                                                                                              begin
                                                                                                  trampCall(__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_82345)
                                                                                                rescue => __e ; __e.set_backtrace( ["dynamic S-expression ( no source ):1"] + __e.backtrace ) ; raise __e
                                                                                              end                                                                                            ,
                                                                                          [
                                                                                          ]
                                                                                                       ))
                                                                                      end
                                                                                  } ; ___lambda.call(
                                                                                      __w__gensym__16b2635cc60d2744f1ec64942b9115d129949ee3_82414
                                                                                             )
                                                                                end
                                                                            end
                                                                        } ; ___lambda.call(
                                                                              trampCall( self._car_METHOD(  'car',
                                                                                  begin
                                                                                    if @global_lisp_binding.has_key?('_car') then
                                                                                      trampCall(@_car)
                                                                                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:126"] + __e.backtrace ) ; raise __e
                                                                                  end                                                                                ,
                                                                              [
                                                                                    begin
                                                                                        trampCall(_set)
                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:127"] + __e.backtrace ) ; raise __e
                                                                                    end
                                                                              ]
                                                                                           ))                                                                            ,
                                                                              trampCall( self._cdr_METHOD(  'cdr',
                                                                                  begin
                                                                                    if @global_lisp_binding.has_key?('_cdr') then
                                                                                      trampCall(@_cdr)
                                                                                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:126"] + __e.backtrace ) ; raise __e
                                                                                  end                                                                                ,
                                                                              [
                                                                                    begin
                                                                                        trampCall(_set)
                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:127"] + __e.backtrace ) ; raise __e
                                                                                    end
                                                                              ]
                                                                                           ))
                                                                                   )
                                                                      end
                                                                  else
                                                                      trampCall( callProcedure(   '_failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_82345',
                                                                          begin
                                                                              trampCall(__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_82345)
                                                                            rescue => __e ; __e.set_backtrace( ["dynamic S-expression ( no source ):1"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                      [
                                                                      ]
                                                                                   ))
                                                                  end
                                                              end
                                                          } ; ___lambda.call(
                                                                Proc.new { || 
                                                                    begin
                                                                      ___lambda = lambda { |__failure__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_82347| 
                                                                          begin
                                                                              begin
                                                                                ___lambda = lambda { |_else| 
                                                                                    begin
                                                                                        begin
                                                                                          ___lambda = lambda { |_loop| 
                                                                                              _loop                                                                                               = 
                                                                                                Proc.new { |_i,_seen,_p| 
                                                                                                    if ( 
                                                                                                      trampCall( self._null_QUMARK_METHOD(  'null?',
                                                                                                          begin
                                                                                                            if @global_lisp_binding.has_key?('_null_QUMARK') then
                                                                                                              trampCall(@_null_QUMARK)
                                                                                                            else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:122"] + __e.backtrace ) ; raise __e
                                                                                                          end                                                                                                        ,
                                                                                                      [
                                                                                                            begin
                                                                                                                trampCall(_p)
                                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:126"] + __e.backtrace ) ; raise __e
                                                                                                            end
                                                                                                      ]
                                                                                                                   ))
                                                                                                     ) then
                                                                                                        begin
                                                                                                          true
                                                                                                        end
                                                                                                    else
                                                                                                        if ( 
                                                                                                          trampCall( self._member_METHOD(  'member',
                                                                                                              begin
                                                                                                                if @global_lisp_binding.has_key?('_member') then
                                                                                                                  trampCall(@_member)
                                                                                                                else raise NameError.new( "Error: undefined variable _member", "_member" ) end
                                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:123"] + __e.backtrace ) ; raise __e
                                                                                                              end                                                                                                            ,
                                                                                                          [
                                                                                                                trampCall( self._car_METHOD(  'car',
                                                                                                                    begin
                                                                                                                      if @global_lisp_binding.has_key?('_car') then
                                                                                                                        trampCall(@_car)
                                                                                                                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:126"] + __e.backtrace ) ; raise __e
                                                                                                                    end                                                                                                                  ,
                                                                                                                [
                                                                                                                      begin
                                                                                                                          trampCall(_p)
                                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:126"] + __e.backtrace ) ; raise __e
                                                                                                                      end
                                                                                                                ]
                                                                                                                             ))                                                                                                              ,
                                                                                                                begin
                                                                                                                    trampCall(_seen)
                                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:126"] + __e.backtrace ) ; raise __e
                                                                                                                end                                                                                                              ,
                                                                                                                begin
                                                                                                                    trampCall(_eq)
                                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:123"] + __e.backtrace ) ; raise __e
                                                                                                                end
                                                                                                          ]
                                                                                                                       ))
                                                                                                         ) then
                                                                                                            begin
                                                                                                                trampCall( callProcedure(   'loop',
                                                                                                                    begin
                                                                                                                        trampCall(_loop)
                                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:126"] + __e.backtrace ) ; raise __e
                                                                                                                    end                                                                                                                  ,
                                                                                                                [
                                                                                                                      trampCall( self.__PLMARK_METHOD(  '+',
                                                                                                                          begin
                                                                                                                            if @global_lisp_binding.has_key?('__PLMARK') then
                                                                                                                              trampCall(@__PLMARK)
                                                                                                                            else raise NameError.new( "Error: undefined variable __PLMARK", "__PLMARK" ) end
                                                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:126"] + __e.backtrace ) ; raise __e
                                                                                                                          end                                                                                                                        ,
                                                                                                                      [
                                                                                                                            begin
                                                                                                                                trampCall(_i)
                                                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:126"] + __e.backtrace ) ; raise __e
                                                                                                                            end                                                                                                                          ,
                                                                                                                          1
                                                                                                                      ]
                                                                                                                                   ))                                                                                                                    ,
                                                                                                                      begin
                                                                                                                          trampCall(_seen)
                                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:126"] + __e.backtrace ) ; raise __e
                                                                                                                      end                                                                                                                    ,
                                                                                                                      trampCall( self._cdr_METHOD(  'cdr',
                                                                                                                          begin
                                                                                                                            if @global_lisp_binding.has_key?('_cdr') then
                                                                                                                              trampCall(@_cdr)
                                                                                                                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:126"] + __e.backtrace ) ; raise __e
                                                                                                                          end                                                                                                                        ,
                                                                                                                      [
                                                                                                                            begin
                                                                                                                                trampCall(_p)
                                                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:126"] + __e.backtrace ) ; raise __e
                                                                                                                            end
                                                                                                                      ]
                                                                                                                                   ))
                                                                                                                ]
                                                                                                                             ))
                                                                                                            end
                                                                                                        else
                                                                                                            if ( 
                                                                                                            true
                                                                                                             ) then
                                                                                                                begin
                                                                                                                    trampCall( self._rec_METHOD(  'rec',
                                                                                                                        begin
                                                                                                                          if @global_lisp_binding.has_key?('_rec') then
                                                                                                                            trampCall(@_rec)
                                                                                                                          else raise NameError.new( "Error: undefined variable _rec", "_rec" ) end
                                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:127"] + __e.backtrace ) ; raise __e
                                                                                                                        end                                                                                                                      ,
                                                                                                                    [
                                                                                                                          Proc.new { |_subperm| 
                                                                                                                              trampCall( callProcedure(   'proc',
                                                                                                                                  begin
                                                                                                                                      trampCall(_proc)
                                                                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:127"] + __e.backtrace ) ; raise __e
                                                                                                                                  end                                                                                                                                ,
                                                                                                                              [
                                                                                                                                    trampCall( self._cons_METHOD(  'cons',
                                                                                                                                        begin
                                                                                                                                          if @global_lisp_binding.has_key?('_cons') then
                                                                                                                                            trampCall(@_cons)
                                                                                                                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:126"] + __e.backtrace ) ; raise __e
                                                                                                                                        end                                                                                                                                      ,
                                                                                                                                    [
                                                                                                                                          trampCall( self._car_METHOD(  'car',
                                                                                                                                              begin
                                                                                                                                                if @global_lisp_binding.has_key?('_car') then
                                                                                                                                                  trampCall(@_car)
                                                                                                                                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:126"] + __e.backtrace ) ; raise __e
                                                                                                                                              end                                                                                                                                            ,
                                                                                                                                          [
                                                                                                                                                begin
                                                                                                                                                    trampCall(_p)
                                                                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:126"] + __e.backtrace ) ; raise __e
                                                                                                                                                end
                                                                                                                                          ]
                                                                                                                                                       ))                                                                                                                                        ,
                                                                                                                                          begin
                                                                                                                                              trampCall(_subperm)
                                                                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:124"] + __e.backtrace ) ; raise __e
                                                                                                                                          end
                                                                                                                                    ]
                                                                                                                                                 ))
                                                                                                                              ]
                                                                                                                                           ))
                                                                                                                          }                                                                                                                        ,
                                                                                                                          trampCall( self._but_MIMARKkth_METHOD(  'but-kth',
                                                                                                                              begin
                                                                                                                                if @global_lisp_binding.has_key?('_but_MIMARKkth') then
                                                                                                                                  trampCall(@_but_MIMARKkth)
                                                                                                                                else raise NameError.new( "Error: undefined variable _but_MIMARKkth", "_but_MIMARKkth" ) end
                                                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:125"] + __e.backtrace ) ; raise __e
                                                                                                                              end                                                                                                                            ,
                                                                                                                          [
                                                                                                                                begin
                                                                                                                                    trampCall(_set)
                                                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:127"] + __e.backtrace ) ; raise __e
                                                                                                                                end                                                                                                                              ,
                                                                                                                                begin
                                                                                                                                    trampCall(_i)
                                                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:126"] + __e.backtrace ) ; raise __e
                                                                                                                                end
                                                                                                                          ]
                                                                                                                                       ))
                                                                                                                    ]
                                                                                                                                 ))
                                                                                                                    trampCall( callProcedure(   'loop',
                                                                                                                        begin
                                                                                                                            trampCall(_loop)
                                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:126"] + __e.backtrace ) ; raise __e
                                                                                                                        end                                                                                                                      ,
                                                                                                                    [
                                                                                                                          trampCall( self.__PLMARK_METHOD(  '+',
                                                                                                                              begin
                                                                                                                                if @global_lisp_binding.has_key?('__PLMARK') then
                                                                                                                                  trampCall(@__PLMARK)
                                                                                                                                else raise NameError.new( "Error: undefined variable __PLMARK", "__PLMARK" ) end
                                                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:126"] + __e.backtrace ) ; raise __e
                                                                                                                              end                                                                                                                            ,
                                                                                                                          [
                                                                                                                                begin
                                                                                                                                    trampCall(_i)
                                                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:126"] + __e.backtrace ) ; raise __e
                                                                                                                                end                                                                                                                              ,
                                                                                                                              1
                                                                                                                          ]
                                                                                                                                       ))                                                                                                                        ,
                                                                                                                          trampCall( self._cons_METHOD(  'cons',
                                                                                                                              begin
                                                                                                                                if @global_lisp_binding.has_key?('_cons') then
                                                                                                                                  trampCall(@_cons)
                                                                                                                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:126"] + __e.backtrace ) ; raise __e
                                                                                                                              end                                                                                                                            ,
                                                                                                                          [
                                                                                                                                trampCall( self._car_METHOD(  'car',
                                                                                                                                    begin
                                                                                                                                      if @global_lisp_binding.has_key?('_car') then
                                                                                                                                        trampCall(@_car)
                                                                                                                                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:126"] + __e.backtrace ) ; raise __e
                                                                                                                                    end                                                                                                                                  ,
                                                                                                                                [
                                                                                                                                      begin
                                                                                                                                          trampCall(_p)
                                                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:126"] + __e.backtrace ) ; raise __e
                                                                                                                                      end
                                                                                                                                ]
                                                                                                                                             ))                                                                                                                              ,
                                                                                                                                begin
                                                                                                                                    trampCall(_seen)
                                                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:126"] + __e.backtrace ) ; raise __e
                                                                                                                                end
                                                                                                                          ]
                                                                                                                                       ))                                                                                                                        ,
                                                                                                                          trampCall( self._cdr_METHOD(  'cdr',
                                                                                                                              begin
                                                                                                                                if @global_lisp_binding.has_key?('_cdr') then
                                                                                                                                  trampCall(@_cdr)
                                                                                                                                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:126"] + __e.backtrace ) ; raise __e
                                                                                                                              end                                                                                                                            ,
                                                                                                                          [
                                                                                                                                begin
                                                                                                                                    trampCall(_p)
                                                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:126"] + __e.backtrace ) ; raise __e
                                                                                                                                end
                                                                                                                          ]
                                                                                                                                       ))
                                                                                                                    ]
                                                                                                                                 ))
                                                                                                                end
                                                                                                            else
                                                                                                                Cell.new()
                                                                                                            end
                                                                                                        end
                                                                                                    end
                                                                                                }
                                                                                              trampCall( callProcedure(   'loop',
                                                                                                  begin
                                                                                                      trampCall(_loop)
                                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:126"] + __e.backtrace ) ; raise __e
                                                                                                  end                                                                                                ,
                                                                                              [
                                                                                                  0                                                                                                  ,
                                                                                                  Cell.new()                                                                                                  ,
                                                                                                    begin
                                                                                                        trampCall(_set)
                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:127"] + __e.backtrace ) ; raise __e
                                                                                                    end
                                                                                              ]
                                                                                                           ))
                                                                                          } ; ___lambda.call(
                                                                                          nil
                                                                                                     )
                                                                                        end
                                                                                    end
                                                                                } ; ___lambda.call(
                                                                                      begin
                                                                                          trampCall(_set)
                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:127"] + __e.backtrace ) ; raise __e
                                                                                      end
                                                                                           )
                                                                              end
                                                                          end
                                                                      } ; ___lambda.call(
                                                                            Proc.new { || 
                                                                                begin raise RuntimeError, 
                                                                                "Error: match: no matching pattern"
                                                                                rescue => __e 
                                                                                  __e.set_backtrace( [":1"] + __e.backtrace )
                                                                                  raise __e
                                                                                end 
                                                                            }
                                                                                 )
                                                                    end
                                                                }
                                                                     )
                                                        end
                                                    }
                                                         )
                                            end
                                        }
                                             )
                                end
                            }
                      )
                    end
                    delayCall( '_rec',  'rec',
                        begin
                          if @global_lisp_binding.has_key?('_rec') then
                            trampCall(@_rec)
                          else raise NameError.new( "Error: undefined variable _rec", "_rec" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:127"] + __e.backtrace ) ; raise __e
                        end                      ,
                    [
                          begin
                              trampCall(_proc)
                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:127"] + __e.backtrace ) ; raise __e
                          end                        ,
                          begin
                              trampCall(_set)
                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:127"] + __e.backtrace ) ; raise __e
                          end
                    ]
                                 )
                } ; ___lambda.call(
                      begin
                        if @global_lisp_binding.has_key?('_eqv_QUMARK') then
                          trampCall(@_eqv_QUMARK)
                        else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:112"] + __e.backtrace ) ; raise __e
                      end
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._combinations_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_combinations'] = self.method( :_combinations_METHOD )
    @_combinations = 
    trampCall(
          Proc.new { |_set,_n| 
              if ( 
                trampCall( self._not_METHOD(  'not',
                    begin
                      if @global_lisp_binding.has_key?('_not') then
                        trampCall(@_not)
                      else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:134"] + __e.backtrace ) ; raise __e
                    end                  ,
                [
                      trampCall( self._positive_QUMARK_METHOD(  'positive?',
                          begin
                            if @global_lisp_binding.has_key?('_positive_QUMARK') then
                              trampCall(@_positive_QUMARK)
                            else raise NameError.new( "Error: undefined variable _positive_QUMARK", "_positive_QUMARK" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:134"] + __e.backtrace ) ; raise __e
                          end                        ,
                      [
                            begin
                                trampCall(_n)
                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:140"] + __e.backtrace ) ; raise __e
                            end
                      ]
                                   ))
                ]
                             ))
               ) then
                  delayCall( '_list',  'list',
                      begin
                        if @global_lisp_binding.has_key?('_list') then
                          trampCall(@_list)
                        else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:135"] + __e.backtrace ) ; raise __e
                      end                    ,
                  [
                      Cell.new()
                  ]
                               )
              else
                  delayCall( '_pair_MIMARKfold_MIMARKright',  'pair-fold-right',
                      begin
                        if @global_lisp_binding.has_key?('_pair_MIMARKfold_MIMARKright') then
                          trampCall(@_pair_MIMARKfold_MIMARKright)
                        else raise NameError.new( "Error: undefined variable _pair_MIMARKfold_MIMARKright", "_pair_MIMARKfold_MIMARKright" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:136"] + __e.backtrace ) ; raise __e
                      end                    ,
                  [
                        Proc.new { |_pr,_acc| 
                            trampCall( self._fold_MIMARKright_METHOD(  'fold-right',
                                begin
                                  if @global_lisp_binding.has_key?('_fold_MIMARKright') then
                                    trampCall(@_fold_MIMARKright)
                                  else raise NameError.new( "Error: undefined variable _fold_MIMARKright", "_fold_MIMARKright" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:138"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                  begin
                                    ___lambda = lambda { |__tmp__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_82512| 
                                        Proc.new { |__tmp__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_82513,__tmp__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_82514| 
                                            trampCall( self._acons_METHOD(  'acons',
                                                begin
                                                  if @global_lisp_binding.has_key?('_acons') then
                                                    trampCall(@_acons)
                                                  else raise NameError.new( "Error: undefined variable _acons", "_acons" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:138"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                __tmp__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_82512                                                ,
                                                __tmp__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_82513                                                ,
                                                __tmp__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_82514
                                            ]
                                                         ))
                                        }
                                    } ; ___lambda.call(
                                          trampCall( self._car_METHOD(  'car',
                                              begin
                                                if @global_lisp_binding.has_key?('_car') then
                                                  trampCall(@_car)
                                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:138"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                          [
                                                begin
                                                    trampCall(_pr)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:140"] + __e.backtrace ) ; raise __e
                                                end
                                          ]
                                                       ))
                                               )
                                  end                                ,
                                  begin
                                      trampCall(_acc)
                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:139"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  trampCall( self._combinations_METHOD(  'combinations',
                                      begin
                                        if @global_lisp_binding.has_key?('_combinations') then
                                          trampCall(@_combinations)
                                        else raise NameError.new( "Error: undefined variable _combinations", "_combinations" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:140"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        trampCall( self._cdr_METHOD(  'cdr',
                                            begin
                                              if @global_lisp_binding.has_key?('_cdr') then
                                                trampCall(@_cdr)
                                              else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:140"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                        [
                                              begin
                                                  trampCall(_pr)
                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:140"] + __e.backtrace ) ; raise __e
                                              end
                                        ]
                                                     ))                                      ,
                                        trampCall( self.__MIMARK_METHOD(  '-',
                                            begin
                                              if @global_lisp_binding.has_key?('__MIMARK') then
                                                trampCall(@__MIMARK)
                                              else raise NameError.new( "Error: undefined variable __MIMARK", "__MIMARK" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:140"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                        [
                                              begin
                                                  trampCall(_n)
                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:140"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                            1
                                        ]
                                                     ))
                                  ]
                                               ))
                            ]
                                         ))
                        }                      ,
                      Cell.new()                      ,
                        begin
                            trampCall(_set)
                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:142"] + __e.backtrace ) ; raise __e
                        end
                  ]
                               )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._combinations_ASMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_combinations_ASMARK'] = self.method( :_combinations_ASMARK_METHOD )
    @_combinations_ASMARK = 
    trampCall(
          Proc.new { |_set,_n,*__rest__| ___gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_82515 = __rest__[0] ;  
              begin
                ___lambda = lambda { |_eq| 
                    if ( 
                      trampCall( self.__LTMARK_METHOD(  '<',
                          begin
                            if @global_lisp_binding.has_key?('__LTMARK') then
                              trampCall(@__LTMARK)
                            else raise NameError.new( "Error: undefined variable __LTMARK", "__LTMARK" ) end
                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                          end                        ,
                      [
                          0                          ,
                            trampCall( self._length_METHOD(  'length',
                                begin
                                  if @global_lisp_binding.has_key?('_length') then
                                    trampCall(@_length)
                                  else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:109"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                  begin
                                      trampCall(___gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_82515)
                                    rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                  end
                            ]
                                         ))
                      ]
                                   ))
                     ) then
                        begin
                            begin
                              
                              _eq = 
                              trampCall(
                                    trampCall( self._nth_METHOD(  'nth',
                                        begin
                                          if @global_lisp_binding.has_key?('_nth') then
                                            trampCall(@_nth)
                                          else raise NameError.new( "Error: undefined variable _nth", "_nth" ) end
                                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                    [
                                        0                                        ,
                                          begin
                                              trampCall(___gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_82515)
                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                          end
                                    ]
                                                 ))
                              )
                            end
                        end
                    end
                    begin
                        def self._rec_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
                        @global_lisp_binding['_rec'] = self.method( :_rec_METHOD )
                      @_rec = 
                      trampCall(
                            Proc.new { |_set,_n| 
                                if ( 
                                  trampCall( self._not_METHOD(  'not',
                                      begin
                                        if @global_lisp_binding.has_key?('_not') then
                                          trampCall(@_not)
                                        else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:146"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        trampCall( self._positive_QUMARK_METHOD(  'positive?',
                                            begin
                                              if @global_lisp_binding.has_key?('_positive_QUMARK') then
                                                trampCall(@_positive_QUMARK)
                                              else raise NameError.new( "Error: undefined variable _positive_QUMARK", "_positive_QUMARK" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:146"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                        [
                                              begin
                                                  trampCall(_n)
                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:160"] + __e.backtrace ) ; raise __e
                                              end
                                        ]
                                                     ))
                                  ]
                                               ))
                                 ) then
                                    trampCall( self._list_METHOD(  'list',
                                        begin
                                          if @global_lisp_binding.has_key?('_list') then
                                            trampCall(@_list)
                                          else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:147"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                    [
                                        Cell.new()
                                    ]
                                                 ))
                                else
                                    begin
                                      ___lambda = lambda { |_loop| 
                                          _loop                                           = 
                                            Proc.new { |_p,_seen,_r| 
                                                if ( 
                                                  trampCall( self._null_QUMARK_METHOD(  'null?',
                                                      begin
                                                        if @global_lisp_binding.has_key?('_null_QUMARK') then
                                                          trampCall(@_null_QUMARK)
                                                        else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:151"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                  [
                                                        begin
                                                            trampCall(_p)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:158"] + __e.backtrace ) ; raise __e
                                                        end
                                                  ]
                                                               ))
                                                 ) then
                                                    begin
                                                        trampCall( self._reverse_EXMARK_METHOD(  'reverse!',
                                                            begin
                                                              if @global_lisp_binding.has_key?('_reverse_EXMARK') then
                                                                trampCall(@_reverse_EXMARK)
                                                              else raise NameError.new( "Error: undefined variable _reverse_EXMARK", "_reverse_EXMARK" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:151"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                        [
                                                              begin
                                                                  trampCall(_r)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:157"] + __e.backtrace ) ; raise __e
                                                              end
                                                        ]
                                                                     ))
                                                    end
                                                else
                                                    if ( 
                                                      trampCall( self._member_METHOD(  'member',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_member') then
                                                              trampCall(@_member)
                                                            else raise NameError.new( "Error: undefined variable _member", "_member" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:152"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                      [
                                                            trampCall( self._car_METHOD(  'car',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_car') then
                                                                    trampCall(@_car)
                                                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:156"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                            [
                                                                  begin
                                                                      trampCall(_p)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:158"] + __e.backtrace ) ; raise __e
                                                                  end
                                                            ]
                                                                         ))                                                          ,
                                                            begin
                                                                trampCall(_seen)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:158"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            begin
                                                                trampCall(_eq)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:158"] + __e.backtrace ) ; raise __e
                                                            end
                                                      ]
                                                                   ))
                                                     ) then
                                                        begin
                                                            trampCall( callProcedure(   'loop',
                                                                begin
                                                                    trampCall(_loop)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:154"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                            [
                                                                  trampCall( self._cdr_METHOD(  'cdr',
                                                                      begin
                                                                        if @global_lisp_binding.has_key?('_cdr') then
                                                                          trampCall(@_cdr)
                                                                        else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:158"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                  [
                                                                        begin
                                                                            trampCall(_p)
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:158"] + __e.backtrace ) ; raise __e
                                                                        end
                                                                  ]
                                                                               ))                                                                ,
                                                                  begin
                                                                      trampCall(_seen)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:158"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  begin
                                                                      trampCall(_r)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:157"] + __e.backtrace ) ; raise __e
                                                                  end
                                                            ]
                                                                         ))
                                                        end
                                                    else
                                                        if ( 
                                                        true
                                                         ) then
                                                            begin
                                                                trampCall( callProcedure(   'loop',
                                                                    begin
                                                                        trampCall(_loop)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:154"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                [
                                                                      trampCall( self._cdr_METHOD(  'cdr',
                                                                          begin
                                                                            if @global_lisp_binding.has_key?('_cdr') then
                                                                              trampCall(@_cdr)
                                                                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:158"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                      [
                                                                            begin
                                                                                trampCall(_p)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:158"] + __e.backtrace ) ; raise __e
                                                                            end
                                                                      ]
                                                                                   ))                                                                    ,
                                                                      trampCall( self._cons_METHOD(  'cons',
                                                                          begin
                                                                            if @global_lisp_binding.has_key?('_cons') then
                                                                              trampCall(@_cons)
                                                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:155"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                      [
                                                                            trampCall( self._car_METHOD(  'car',
                                                                                begin
                                                                                  if @global_lisp_binding.has_key?('_car') then
                                                                                    trampCall(@_car)
                                                                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:156"] + __e.backtrace ) ; raise __e
                                                                                end                                                                              ,
                                                                            [
                                                                                  begin
                                                                                      trampCall(_p)
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:158"] + __e.backtrace ) ; raise __e
                                                                                  end
                                                                            ]
                                                                                         ))                                                                          ,
                                                                            begin
                                                                                trampCall(_seen)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:158"] + __e.backtrace ) ; raise __e
                                                                            end
                                                                      ]
                                                                                   ))                                                                    ,
                                                                      trampCall( self._fold_METHOD(  'fold',
                                                                          begin
                                                                            if @global_lisp_binding.has_key?('_fold') then
                                                                              trampCall(@_fold)
                                                                            else raise NameError.new( "Error: undefined variable _fold", "_fold" ) end
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:156"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                      [
                                                                            begin
                                                                              ___lambda = lambda { |__tmp__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_82519| 
                                                                                  Proc.new { |__tmp__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_82520,__tmp__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_82521| 
                                                                                      trampCall( self._acons_METHOD(  'acons',
                                                                                          begin
                                                                                            if @global_lisp_binding.has_key?('_acons') then
                                                                                              trampCall(@_acons)
                                                                                            else raise NameError.new( "Error: undefined variable _acons", "_acons" ) end
                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:156"] + __e.backtrace ) ; raise __e
                                                                                          end                                                                                        ,
                                                                                      [
                                                                                          __tmp__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_82519                                                                                          ,
                                                                                          __tmp__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_82520                                                                                          ,
                                                                                          __tmp__gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_82521
                                                                                      ]
                                                                                                   ))
                                                                                  }
                                                                              } ; ___lambda.call(
                                                                                    trampCall( self._car_METHOD(  'car',
                                                                                        begin
                                                                                          if @global_lisp_binding.has_key?('_car') then
                                                                                            trampCall(@_car)
                                                                                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:156"] + __e.backtrace ) ; raise __e
                                                                                        end                                                                                      ,
                                                                                    [
                                                                                          begin
                                                                                              trampCall(_p)
                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:158"] + __e.backtrace ) ; raise __e
                                                                                          end
                                                                                    ]
                                                                                                 ))
                                                                                         )
                                                                            end                                                                          ,
                                                                            begin
                                                                                trampCall(_r)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:157"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                            trampCall( self._rec_METHOD(  'rec',
                                                                                begin
                                                                                  if @global_lisp_binding.has_key?('_rec') then
                                                                                    trampCall(@_rec)
                                                                                  else raise NameError.new( "Error: undefined variable _rec", "_rec" ) end
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:160"] + __e.backtrace ) ; raise __e
                                                                                end                                                                              ,
                                                                            [
                                                                                  trampCall( self._lset_MIMARKdifference_METHOD(  'lset-difference',
                                                                                      begin
                                                                                        if @global_lisp_binding.has_key?('_lset_MIMARKdifference') then
                                                                                          trampCall(@_lset_MIMARKdifference)
                                                                                        else raise NameError.new( "Error: undefined variable _lset_MIMARKdifference", "_lset_MIMARKdifference" ) end
                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:158"] + __e.backtrace ) ; raise __e
                                                                                      end                                                                                    ,
                                                                                  [
                                                                                        begin
                                                                                            trampCall(_eq)
                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:158"] + __e.backtrace ) ; raise __e
                                                                                        end                                                                                      ,
                                                                                        trampCall( self._cdr_METHOD(  'cdr',
                                                                                            begin
                                                                                              if @global_lisp_binding.has_key?('_cdr') then
                                                                                                trampCall(@_cdr)
                                                                                              else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:158"] + __e.backtrace ) ; raise __e
                                                                                            end                                                                                          ,
                                                                                        [
                                                                                              begin
                                                                                                  trampCall(_p)
                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:158"] + __e.backtrace ) ; raise __e
                                                                                              end
                                                                                        ]
                                                                                                     ))                                                                                      ,
                                                                                        begin
                                                                                            trampCall(_seen)
                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:158"] + __e.backtrace ) ; raise __e
                                                                                        end
                                                                                  ]
                                                                                               ))                                                                                ,
                                                                                  trampCall( self.__MIMARK_METHOD(  '-',
                                                                                      begin
                                                                                        if @global_lisp_binding.has_key?('__MIMARK') then
                                                                                          trampCall(@__MIMARK)
                                                                                        else raise NameError.new( "Error: undefined variable __MIMARK", "__MIMARK" ) end
                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:158"] + __e.backtrace ) ; raise __e
                                                                                      end                                                                                    ,
                                                                                  [
                                                                                        begin
                                                                                            trampCall(_n)
                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:160"] + __e.backtrace ) ; raise __e
                                                                                        end                                                                                      ,
                                                                                      1
                                                                                  ]
                                                                                               ))
                                                                            ]
                                                                                         ))
                                                                      ]
                                                                                   ))
                                                                ]
                                                                             ))
                                                            end
                                                        else
                                                            Cell.new()
                                                        end
                                                    end
                                                end
                                            }
                                          trampCall( callProcedure(   'loop',
                                              begin
                                                  trampCall(_loop)
                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:154"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                          [
                                                begin
                                                    trampCall(_set)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:160"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                              Cell.new()                                              ,
                                              Cell.new()
                                          ]
                                                       ))
                                      } ; ___lambda.call(
                                      nil
                                                 )
                                    end
                                end
                            }
                      )
                    end
                    delayCall( '_rec',  'rec',
                        begin
                          if @global_lisp_binding.has_key?('_rec') then
                            trampCall(@_rec)
                          else raise NameError.new( "Error: undefined variable _rec", "_rec" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:160"] + __e.backtrace ) ; raise __e
                        end                      ,
                    [
                          begin
                              trampCall(_set)
                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:160"] + __e.backtrace ) ; raise __e
                          end                        ,
                          begin
                              trampCall(_n)
                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:160"] + __e.backtrace ) ; raise __e
                          end
                    ]
                                 )
                } ; ___lambda.call(
                      begin
                        if @global_lisp_binding.has_key?('_eqv_QUMARK') then
                          trampCall(@_eqv_QUMARK)
                        else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:144"] + __e.backtrace ) ; raise __e
                      end
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._combinations_MIMARKfor_MIMARKeach_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_combinations_MIMARKfor_MIMARKeach'] = self.method( :_combinations_MIMARKfor_MIMARKeach_METHOD )
    @_combinations_MIMARKfor_MIMARKeach = 
    trampCall(
          Proc.new { |_proc,_set,_n| 
              if ( 
                trampCall( self._not_METHOD(  'not',
                    begin
                      if @global_lisp_binding.has_key?('_not') then
                        trampCall(@_not)
                      else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:163"] + __e.backtrace ) ; raise __e
                    end                  ,
                [
                      trampCall( self._positive_QUMARK_METHOD(  'positive?',
                          begin
                            if @global_lisp_binding.has_key?('_positive_QUMARK') then
                              trampCall(@_positive_QUMARK)
                            else raise NameError.new( "Error: undefined variable _positive_QUMARK", "_positive_QUMARK" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:163"] + __e.backtrace ) ; raise __e
                          end                        ,
                      [
                            begin
                                trampCall(_n)
                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:170"] + __e.backtrace ) ; raise __e
                            end
                      ]
                                   ))
                ]
                             ))
               ) then
                  delayCall( '_proc',  'proc',
                      begin
                          trampCall(_proc)
                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:168"] + __e.backtrace ) ; raise __e
                      end                    ,
                  [
                      Cell.new()
                  ]
                               )
              else
                  delayCall( '_pair_MIMARKfor_MIMARKeach',  'pair-for-each',
                      begin
                        if @global_lisp_binding.has_key?('_pair_MIMARKfor_MIMARKeach') then
                          trampCall(@_pair_MIMARKfor_MIMARKeach)
                        else raise NameError.new( "Error: undefined variable _pair_MIMARKfor_MIMARKeach", "_pair_MIMARKfor_MIMARKeach" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:165"] + __e.backtrace ) ; raise __e
                      end                    ,
                  [
                        Proc.new { |_pr| 
                            trampCall( self._combinations_MIMARKfor_MIMARKeach_METHOD(  'combinations-for-each',
                                begin
                                  if @global_lisp_binding.has_key?('_combinations_MIMARKfor_MIMARKeach') then
                                    trampCall(@_combinations_MIMARKfor_MIMARKeach)
                                  else raise NameError.new( "Error: undefined variable _combinations_MIMARKfor_MIMARKeach", "_combinations_MIMARKfor_MIMARKeach" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:167"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                  Proc.new { |_sub_MIMARKcomb| 
                                      trampCall( callProcedure(   'proc',
                                          begin
                                              trampCall(_proc)
                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:168"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                      [
                                            trampCall( self._cons_METHOD(  'cons',
                                                begin
                                                  if @global_lisp_binding.has_key?('_cons') then
                                                    trampCall(@_cons)
                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:168"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                  trampCall( self._car_METHOD(  'car',
                                                      begin
                                                        if @global_lisp_binding.has_key?('_car') then
                                                          trampCall(@_car)
                                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:168"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                  [
                                                        begin
                                                            trampCall(_pr)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:169"] + __e.backtrace ) ; raise __e
                                                        end
                                                  ]
                                                               ))                                                ,
                                                  begin
                                                      trampCall(_sub_MIMARKcomb)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:168"] + __e.backtrace ) ; raise __e
                                                  end
                                            ]
                                                         ))
                                      ]
                                                   ))
                                  }                                ,
                                  trampCall( self._cdr_METHOD(  'cdr',
                                      begin
                                        if @global_lisp_binding.has_key?('_cdr') then
                                          trampCall(@_cdr)
                                        else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:169"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        begin
                                            trampCall(_pr)
                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:169"] + __e.backtrace ) ; raise __e
                                        end
                                  ]
                                               ))                                ,
                                  trampCall( self.__MIMARK_METHOD(  '-',
                                      begin
                                        if @global_lisp_binding.has_key?('__MIMARK') then
                                          trampCall(@__MIMARK)
                                        else raise NameError.new( "Error: undefined variable __MIMARK", "__MIMARK" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:170"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        begin
                                            trampCall(_n)
                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:170"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                      1
                                  ]
                                               ))
                            ]
                                         ))
                        }                      ,
                        begin
                            trampCall(_set)
                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:171"] + __e.backtrace ) ; raise __e
                        end
                  ]
                               )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._combinations_ASMARK_MIMARKfor_MIMARKeach_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_combinations_ASMARK_MIMARKfor_MIMARKeach'] = self.method( :_combinations_ASMARK_MIMARKfor_MIMARKeach_METHOD )
    @_combinations_ASMARK_MIMARKfor_MIMARKeach = 
    trampCall(
          Proc.new { |_proc,_set,_n,*__rest__| ___gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_82522 = __rest__[0] ;  
              begin
                ___lambda = lambda { |_eq| 
                    if ( 
                      trampCall( self.__LTMARK_METHOD(  '<',
                          begin
                            if @global_lisp_binding.has_key?('__LTMARK') then
                              trampCall(@__LTMARK)
                            else raise NameError.new( "Error: undefined variable __LTMARK", "__LTMARK" ) end
                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                          end                        ,
                      [
                          0                          ,
                            trampCall( self._length_METHOD(  'length',
                                begin
                                  if @global_lisp_binding.has_key?('_length') then
                                    trampCall(@_length)
                                  else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:109"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                  begin
                                      trampCall(___gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_82522)
                                    rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                  end
                            ]
                                         ))
                      ]
                                   ))
                     ) then
                        begin
                            begin
                              
                              _eq = 
                              trampCall(
                                    trampCall( self._nth_METHOD(  'nth',
                                        begin
                                          if @global_lisp_binding.has_key?('_nth') then
                                            trampCall(@_nth)
                                          else raise NameError.new( "Error: undefined variable _nth", "_nth" ) end
                                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                    [
                                        0                                        ,
                                          begin
                                              trampCall(___gensym__b9d6aeda230459e5cf994edb81d822212fdcaf01_82522)
                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                          end
                                    ]
                                                 ))
                              )
                            end
                        end
                    end
                    begin
                        def self._rec_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
                        @global_lisp_binding['_rec'] = self.method( :_rec_METHOD )
                      @_rec = 
                      trampCall(
                            Proc.new { |_proc,_set,_n| 
                                if ( 
                                  trampCall( self._not_METHOD(  'not',
                                      begin
                                        if @global_lisp_binding.has_key?('_not') then
                                          trampCall(@_not)
                                        else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:175"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        trampCall( self._positive_QUMARK_METHOD(  'positive?',
                                            begin
                                              if @global_lisp_binding.has_key?('_positive_QUMARK') then
                                                trampCall(@_positive_QUMARK)
                                              else raise NameError.new( "Error: undefined variable _positive_QUMARK", "_positive_QUMARK" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:175"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                        [
                                              begin
                                                  trampCall(_n)
                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:186"] + __e.backtrace ) ; raise __e
                                              end
                                        ]
                                                     ))
                                  ]
                                               ))
                                 ) then
                                    trampCall( callProcedure(   'proc',
                                        begin
                                            trampCall(_proc)
                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:186"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                    [
                                        Cell.new()
                                    ]
                                                 ))
                                else
                                    begin
                                      ___lambda = lambda { |_loop| 
                                          _loop                                           = 
                                            Proc.new { |_p,_seen| 
                                                if ( 
                                                  trampCall( self._null_QUMARK_METHOD(  'null?',
                                                      begin
                                                        if @global_lisp_binding.has_key?('_null_QUMARK') then
                                                          trampCall(@_null_QUMARK)
                                                        else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:179"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                  [
                                                        begin
                                                            trampCall(_p)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:185"] + __e.backtrace ) ; raise __e
                                                        end
                                                  ]
                                                               ))
                                                 ) then
                                                    begin
                                                      true
                                                    end
                                                else
                                                    if ( 
                                                      trampCall( self._member_METHOD(  'member',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_member') then
                                                              trampCall(@_member)
                                                            else raise NameError.new( "Error: undefined variable _member", "_member" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:180"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                      [
                                                            trampCall( self._car_METHOD(  'car',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_car') then
                                                                    trampCall(@_car)
                                                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:185"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                            [
                                                                  begin
                                                                      trampCall(_p)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:185"] + __e.backtrace ) ; raise __e
                                                                  end
                                                            ]
                                                                         ))                                                          ,
                                                            begin
                                                                trampCall(_seen)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:185"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            begin
                                                                trampCall(_eq)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:183"] + __e.backtrace ) ; raise __e
                                                            end
                                                      ]
                                                                   ))
                                                     ) then
                                                        begin
                                                            trampCall( callProcedure(   'loop',
                                                                begin
                                                                    trampCall(_loop)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:185"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                            [
                                                                  trampCall( self._cdr_METHOD(  'cdr',
                                                                      begin
                                                                        if @global_lisp_binding.has_key?('_cdr') then
                                                                          trampCall(@_cdr)
                                                                        else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:185"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                  [
                                                                        begin
                                                                            trampCall(_p)
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:185"] + __e.backtrace ) ; raise __e
                                                                        end
                                                                  ]
                                                                               ))                                                                ,
                                                                  begin
                                                                      trampCall(_seen)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:185"] + __e.backtrace ) ; raise __e
                                                                  end
                                                            ]
                                                                         ))
                                                        end
                                                    else
                                                        if ( 
                                                        true
                                                         ) then
                                                            begin
                                                                trampCall( self._rec_METHOD(  'rec',
                                                                    begin
                                                                      if @global_lisp_binding.has_key?('_rec') then
                                                                        trampCall(@_rec)
                                                                      else raise NameError.new( "Error: undefined variable _rec", "_rec" ) end
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:186"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                [
                                                                      Proc.new { |_sub_MIMARKcomb| 
                                                                          trampCall( callProcedure(   'proc',
                                                                              begin
                                                                                  trampCall(_proc)
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:186"] + __e.backtrace ) ; raise __e
                                                                              end                                                                            ,
                                                                          [
                                                                                trampCall( self._cons_METHOD(  'cons',
                                                                                    begin
                                                                                      if @global_lisp_binding.has_key?('_cons') then
                                                                                        trampCall(@_cons)
                                                                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:185"] + __e.backtrace ) ; raise __e
                                                                                    end                                                                                  ,
                                                                                [
                                                                                      trampCall( self._car_METHOD(  'car',
                                                                                          begin
                                                                                            if @global_lisp_binding.has_key?('_car') then
                                                                                              trampCall(@_car)
                                                                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:185"] + __e.backtrace ) ; raise __e
                                                                                          end                                                                                        ,
                                                                                      [
                                                                                            begin
                                                                                                trampCall(_p)
                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:185"] + __e.backtrace ) ; raise __e
                                                                                            end
                                                                                      ]
                                                                                                   ))                                                                                    ,
                                                                                      begin
                                                                                          trampCall(_sub_MIMARKcomb)
                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:182"] + __e.backtrace ) ; raise __e
                                                                                      end
                                                                                ]
                                                                                             ))
                                                                          ]
                                                                                       ))
                                                                      }                                                                    ,
                                                                      trampCall( self._lset_MIMARKdifference_METHOD(  'lset-difference',
                                                                          begin
                                                                            if @global_lisp_binding.has_key?('_lset_MIMARKdifference') then
                                                                              trampCall(@_lset_MIMARKdifference)
                                                                            else raise NameError.new( "Error: undefined variable _lset_MIMARKdifference", "_lset_MIMARKdifference" ) end
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:183"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                      [
                                                                            begin
                                                                                trampCall(_eq)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:183"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                            trampCall( self._cdr_METHOD(  'cdr',
                                                                                begin
                                                                                  if @global_lisp_binding.has_key?('_cdr') then
                                                                                    trampCall(@_cdr)
                                                                                  else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:185"] + __e.backtrace ) ; raise __e
                                                                                end                                                                              ,
                                                                            [
                                                                                  begin
                                                                                      trampCall(_p)
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:185"] + __e.backtrace ) ; raise __e
                                                                                  end
                                                                            ]
                                                                                         ))                                                                          ,
                                                                            begin
                                                                                trampCall(_seen)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:185"] + __e.backtrace ) ; raise __e
                                                                            end
                                                                      ]
                                                                                   ))                                                                    ,
                                                                      trampCall( self.__MIMARK_METHOD(  '-',
                                                                          begin
                                                                            if @global_lisp_binding.has_key?('__MIMARK') then
                                                                              trampCall(@__MIMARK)
                                                                            else raise NameError.new( "Error: undefined variable __MIMARK", "__MIMARK" ) end
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:184"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                      [
                                                                            begin
                                                                                trampCall(_n)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:186"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                          1
                                                                      ]
                                                                                   ))
                                                                ]
                                                                             ))
                                                                trampCall( callProcedure(   'loop',
                                                                    begin
                                                                        trampCall(_loop)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:185"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                [
                                                                      trampCall( self._cdr_METHOD(  'cdr',
                                                                          begin
                                                                            if @global_lisp_binding.has_key?('_cdr') then
                                                                              trampCall(@_cdr)
                                                                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:185"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                      [
                                                                            begin
                                                                                trampCall(_p)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:185"] + __e.backtrace ) ; raise __e
                                                                            end
                                                                      ]
                                                                                   ))                                                                    ,
                                                                      trampCall( self._cons_METHOD(  'cons',
                                                                          begin
                                                                            if @global_lisp_binding.has_key?('_cons') then
                                                                              trampCall(@_cons)
                                                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:185"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                      [
                                                                            trampCall( self._car_METHOD(  'car',
                                                                                begin
                                                                                  if @global_lisp_binding.has_key?('_car') then
                                                                                    trampCall(@_car)
                                                                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:185"] + __e.backtrace ) ; raise __e
                                                                                end                                                                              ,
                                                                            [
                                                                                  begin
                                                                                      trampCall(_p)
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:185"] + __e.backtrace ) ; raise __e
                                                                                  end
                                                                            ]
                                                                                         ))                                                                          ,
                                                                            begin
                                                                                trampCall(_seen)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:185"] + __e.backtrace ) ; raise __e
                                                                            end
                                                                      ]
                                                                                   ))
                                                                ]
                                                                             ))
                                                            end
                                                        else
                                                            Cell.new()
                                                        end
                                                    end
                                                end
                                            }
                                          trampCall( callProcedure(   'loop',
                                              begin
                                                  trampCall(_loop)
                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:185"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                          [
                                                begin
                                                    trampCall(_set)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:186"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                              Cell.new()
                                          ]
                                                       ))
                                      } ; ___lambda.call(
                                      nil
                                                 )
                                    end
                                end
                            }
                      )
                    end
                    delayCall( '_rec',  'rec',
                        begin
                          if @global_lisp_binding.has_key?('_rec') then
                            trampCall(@_rec)
                          else raise NameError.new( "Error: undefined variable _rec", "_rec" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:186"] + __e.backtrace ) ; raise __e
                        end                      ,
                    [
                          begin
                              trampCall(_proc)
                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:186"] + __e.backtrace ) ; raise __e
                          end                        ,
                          begin
                              trampCall(_set)
                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:186"] + __e.backtrace ) ; raise __e
                          end                        ,
                          begin
                              trampCall(_n)
                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:186"] + __e.backtrace ) ; raise __e
                          end
                    ]
                                 )
                } ; ___lambda.call(
                      begin
                        if @global_lisp_binding.has_key?('_eqv_QUMARK') then
                          trampCall(@_eqv_QUMARK)
                        else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:173"] + __e.backtrace ) ; raise __e
                      end
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._power_MIMARKset_MIMARKbinary_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_power_MIMARKset_MIMARKbinary'] = self.method( :_power_MIMARKset_MIMARKbinary_METHOD )
    @_power_MIMARKset_MIMARKbinary = 
    trampCall(
          Proc.new { |_set| 
              if ( 
                trampCall( self._null_QUMARK_METHOD(  'null?',
                    begin
                      if @global_lisp_binding.has_key?('_null_QUMARK') then
                        trampCall(@_null_QUMARK)
                      else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:194"] + __e.backtrace ) ; raise __e
                    end                  ,
                [
                      begin
                          trampCall(_set)
                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:197"] + __e.backtrace ) ; raise __e
                      end
                ]
                             ))
               ) then
                  delayCall( '_list',  'list',
                      begin
                        if @global_lisp_binding.has_key?('_list') then
                          trampCall(@_list)
                        else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:195"] + __e.backtrace ) ; raise __e
                      end                    ,
                  [
                      Cell.new()
                  ]
                               )
              else
                  begin
                    ___lambda = lambda { |_x,_rest| 
                        delayCall( '_append',  'append',
                            begin
                              if @global_lisp_binding.has_key?('_append') then
                                trampCall(@_append)
                              else raise NameError.new( "Error: undefined variable _append", "_append" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:198"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              begin
                                  trampCall(_rest)
                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:198"] + __e.backtrace ) ; raise __e
                              end                            ,
                              trampCall( self._map_METHOD(  'map',
                                  begin
                                    if @global_lisp_binding.has_key?('_map') then
                                      trampCall(@_map)
                                    else raise NameError.new( "Error: undefined variable _map", "_map" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:198"] + __e.backtrace ) ; raise __e
                                  end                                ,
                              [
                                    Proc.new { |_s| 
                                        trampCall( self._cons_METHOD(  'cons',
                                            begin
                                              if @global_lisp_binding.has_key?('_cons') then
                                                trampCall(@_cons)
                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:198"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                        [
                                              begin
                                                  trampCall(_x)
                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:198"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              begin
                                                  trampCall(_s)
                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:198"] + __e.backtrace ) ; raise __e
                                              end
                                        ]
                                                     ))
                                    }                                  ,
                                    begin
                                        trampCall(_rest)
                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:198"] + __e.backtrace ) ; raise __e
                                    end
                              ]
                                           ))
                        ]
                                     )
                    } ; ___lambda.call(
                          trampCall( self._car_METHOD(  'car',
                              begin
                                if @global_lisp_binding.has_key?('_car') then
                                  trampCall(@_car)
                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:196"] + __e.backtrace ) ; raise __e
                              end                            ,
                          [
                                begin
                                    trampCall(_set)
                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:197"] + __e.backtrace ) ; raise __e
                                end
                          ]
                                       ))                        ,
                          trampCall( self._power_MIMARKset_MIMARKbinary_METHOD(  'power-set-binary',
                              begin
                                if @global_lisp_binding.has_key?('_power_MIMARKset_MIMARKbinary') then
                                  trampCall(@_power_MIMARKset_MIMARKbinary)
                                else raise NameError.new( "Error: undefined variable _power_MIMARKset_MIMARKbinary", "_power_MIMARKset_MIMARKbinary" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:197"] + __e.backtrace ) ; raise __e
                              end                            ,
                          [
                                trampCall( self._cdr_METHOD(  'cdr',
                                    begin
                                      if @global_lisp_binding.has_key?('_cdr') then
                                        trampCall(@_cdr)
                                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:197"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                [
                                      begin
                                          trampCall(_set)
                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:197"] + __e.backtrace ) ; raise __e
                                      end
                                ]
                                             ))
                          ]
                                       ))
                               )
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._power_MIMARKset_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_power_MIMARKset'] = self.method( :_power_MIMARKset_METHOD )
    @_power_MIMARKset = 
    trampCall(
          Proc.new { |_set| 
              begin
                ___lambda = lambda { |_size| 
                    begin
                      ___lambda = lambda { |_loop| 
                          _loop                           = 
                            Proc.new { |_i| 
                                if ( 
                                  trampCall( self.__GTMARK_METHOD(  '>',
                                      begin
                                        if @global_lisp_binding.has_key?('__GTMARK') then
                                          trampCall(@__GTMARK)
                                        else raise NameError.new( "Error: undefined variable __GTMARK", "__GTMARK" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:204"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        begin
                                            trampCall(_i)
                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:207"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        begin
                                            trampCall(_size)
                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:204"] + __e.backtrace ) ; raise __e
                                        end
                                  ]
                                               ))
                                 ) then
                                  Cell.new()
                                else
                                    delayCall( '_append_EXMARK',  'append!',
                                        begin
                                          if @global_lisp_binding.has_key?('_append_EXMARK') then
                                            trampCall(@_append_EXMARK)
                                          else raise NameError.new( "Error: undefined variable _append_EXMARK", "_append_EXMARK" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:206"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                    [
                                          trampCall( self._combinations_METHOD(  'combinations',
                                              begin
                                                if @global_lisp_binding.has_key?('_combinations') then
                                                  trampCall(@_combinations)
                                                else raise NameError.new( "Error: undefined variable _combinations", "_combinations" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:206"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                          [
                                                begin
                                                    trampCall(_set)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:206"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                begin
                                                    trampCall(_i)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:207"] + __e.backtrace ) ; raise __e
                                                end
                                          ]
                                                       ))                                        ,
                                          trampCall( callProcedure(   'loop',
                                              begin
                                                  trampCall(_loop)
                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:207"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                          [
                                                trampCall( self.__PLMARK_METHOD(  '+',
                                                    begin
                                                      if @global_lisp_binding.has_key?('__PLMARK') then
                                                        trampCall(@__PLMARK)
                                                      else raise NameError.new( "Error: undefined variable __PLMARK", "__PLMARK" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:207"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                [
                                                      begin
                                                          trampCall(_i)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:207"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                    1
                                                ]
                                                             ))
                                          ]
                                                       ))
                                    ]
                                                 )
                                end
                            }
                          delayCall( '_loop',  'loop',
                              begin
                                  trampCall(_loop)
                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:207"] + __e.backtrace ) ; raise __e
                              end                            ,
                          [
                              0
                          ]
                                       )
                      } ; ___lambda.call(
                      nil
                                 )
                    end
                } ; ___lambda.call(
                      trampCall( self._length_METHOD(  'length',
                          begin
                            if @global_lisp_binding.has_key?('_length') then
                              trampCall(@_length)
                            else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:202"] + __e.backtrace ) ; raise __e
                          end                        ,
                      [
                            begin
                                trampCall(_set)
                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:206"] + __e.backtrace ) ; raise __e
                            end
                      ]
                                   ))
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._power_MIMARKset_MIMARKfor_MIMARKeach_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_power_MIMARKset_MIMARKfor_MIMARKeach'] = self.method( :_power_MIMARKset_MIMARKfor_MIMARKeach_METHOD )
    @_power_MIMARKset_MIMARKfor_MIMARKeach = 
    trampCall(
          Proc.new { |_proc,_set| 
              begin
                ___lambda = lambda { |_size| 
                    begin
                      ___lambda = lambda { |_loop| 
                          _loop                           = 
                            Proc.new { |_i| 
                                if ( 
                                  trampCall( self.__GTMARK_METHOD(  '>',
                                      begin
                                        if @global_lisp_binding.has_key?('__GTMARK') then
                                          trampCall(@__GTMARK)
                                        else raise NameError.new( "Error: undefined variable __GTMARK", "__GTMARK" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:213"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        begin
                                            trampCall(_i)
                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:217"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        begin
                                            trampCall(_size)
                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:213"] + __e.backtrace ) ; raise __e
                                        end
                                  ]
                                               ))
                                 ) then
                                  Cell.new()
                                else
                                    begin
                                        trampCall( self._combinations_MIMARKfor_MIMARKeach_METHOD(  'combinations-for-each',
                                            begin
                                              if @global_lisp_binding.has_key?('_combinations_MIMARKfor_MIMARKeach') then
                                                trampCall(@_combinations_MIMARKfor_MIMARKeach)
                                              else raise NameError.new( "Error: undefined variable _combinations_MIMARKfor_MIMARKeach", "_combinations_MIMARKfor_MIMARKeach" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:216"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                        [
                                              begin
                                                  trampCall(_proc)
                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:216"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              begin
                                                  trampCall(_set)
                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:216"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              begin
                                                  trampCall(_i)
                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:217"] + __e.backtrace ) ; raise __e
                                              end
                                        ]
                                                     ))
                                        delayCall( '_loop',  'loop',
                                            begin
                                                trampCall(_loop)
                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:217"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                        [
                                              trampCall( self.__PLMARK_METHOD(  '+',
                                                  begin
                                                    if @global_lisp_binding.has_key?('__PLMARK') then
                                                      trampCall(@__PLMARK)
                                                    else raise NameError.new( "Error: undefined variable __PLMARK", "__PLMARK" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:217"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                              [
                                                    begin
                                                        trampCall(_i)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:217"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                  1
                                              ]
                                                           ))
                                        ]
                                                     )
                                    end
                                end
                            }
                          delayCall( '_loop',  'loop',
                              begin
                                  trampCall(_loop)
                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:217"] + __e.backtrace ) ; raise __e
                              end                            ,
                          [
                              0
                          ]
                                       )
                      } ; ___lambda.call(
                      nil
                                 )
                    end
                } ; ___lambda.call(
                      trampCall( self._length_METHOD(  'length',
                          begin
                            if @global_lisp_binding.has_key?('_length') then
                              trampCall(@_length)
                            else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:211"] + __e.backtrace ) ; raise __e
                          end                        ,
                      [
                            begin
                                trampCall(_set)
                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:216"] + __e.backtrace ) ; raise __e
                            end
                      ]
                                   ))
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._power_MIMARKset_ASMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_power_MIMARKset_ASMARK'] = self.method( :_power_MIMARKset_ASMARK_METHOD )
    @_power_MIMARKset_ASMARK = 
    trampCall(
          Proc.new { |_set,*__rest__| _maybe_MIMARKeq = __rest__[0] ;  
              begin
                ___lambda = lambda { |_size| 
                    begin
                      ___lambda = lambda { |_loop| 
                          _loop                           = 
                            Proc.new { |_i| 
                                if ( 
                                  trampCall( self.__GTMARK_METHOD(  '>',
                                      begin
                                        if @global_lisp_binding.has_key?('__GTMARK') then
                                          trampCall(@__GTMARK)
                                        else raise NameError.new( "Error: undefined variable __GTMARK", "__GTMARK" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:223"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        begin
                                            trampCall(_i)
                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:226"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        begin
                                            trampCall(_size)
                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:223"] + __e.backtrace ) ; raise __e
                                        end
                                  ]
                                               ))
                                 ) then
                                  Cell.new()
                                else
                                    delayCall( '_append_EXMARK',  'append!',
                                        begin
                                          if @global_lisp_binding.has_key?('_append_EXMARK') then
                                            trampCall(@_append_EXMARK)
                                          else raise NameError.new( "Error: undefined variable _append_EXMARK", "_append_EXMARK" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:225"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                    [
                                          trampCall( self._apply_METHOD(  'apply',
                                              begin
                                                if @global_lisp_binding.has_key?('_apply') then
                                                  trampCall(@_apply)
                                                else raise NameError.new( "Error: undefined variable _apply", "_apply" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:225"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                          [
                                                begin
                                                  if @global_lisp_binding.has_key?('_combinations_ASMARK') then
                                                    trampCall(@_combinations_ASMARK)
                                                  else raise NameError.new( "Error: undefined variable _combinations_ASMARK", "_combinations_ASMARK" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:225"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                begin
                                                    trampCall(_set)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:225"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                begin
                                                    trampCall(_i)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:226"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                begin
                                                    trampCall(_maybe_MIMARKeq)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:225"] + __e.backtrace ) ; raise __e
                                                end
                                          ]
                                                       ))                                        ,
                                          trampCall( callProcedure(   'loop',
                                              begin
                                                  trampCall(_loop)
                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:226"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                          [
                                                trampCall( self.__PLMARK_METHOD(  '+',
                                                    begin
                                                      if @global_lisp_binding.has_key?('__PLMARK') then
                                                        trampCall(@__PLMARK)
                                                      else raise NameError.new( "Error: undefined variable __PLMARK", "__PLMARK" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:226"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                [
                                                      begin
                                                          trampCall(_i)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:226"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                    1
                                                ]
                                                             ))
                                          ]
                                                       ))
                                    ]
                                                 )
                                end
                            }
                          delayCall( '_loop',  'loop',
                              begin
                                  trampCall(_loop)
                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:226"] + __e.backtrace ) ; raise __e
                              end                            ,
                          [
                              0
                          ]
                                       )
                      } ; ___lambda.call(
                      nil
                                 )
                    end
                } ; ___lambda.call(
                      trampCall( self._length_METHOD(  'length',
                          begin
                            if @global_lisp_binding.has_key?('_length') then
                              trampCall(@_length)
                            else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:221"] + __e.backtrace ) ; raise __e
                          end                        ,
                      [
                            begin
                                trampCall(_set)
                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:225"] + __e.backtrace ) ; raise __e
                            end
                      ]
                                   ))
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._power_MIMARKset_ASMARK_MIMARKfor_MIMARKeach_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_power_MIMARKset_ASMARK_MIMARKfor_MIMARKeach'] = self.method( :_power_MIMARKset_ASMARK_MIMARKfor_MIMARKeach_METHOD )
    @_power_MIMARKset_ASMARK_MIMARKfor_MIMARKeach = 
    trampCall(
          Proc.new { |_proc,_set,*__rest__| _maybe_MIMARKeq = __rest__[0] ;  
              begin
                ___lambda = lambda { |_size| 
                    begin
                      ___lambda = lambda { |_loop| 
                          _loop                           = 
                            Proc.new { |_i| 
                                if ( 
                                  trampCall( self.__GTMARK_METHOD(  '>',
                                      begin
                                        if @global_lisp_binding.has_key?('__GTMARK') then
                                          trampCall(@__GTMARK)
                                        else raise NameError.new( "Error: undefined variable __GTMARK", "__GTMARK" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:231"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        begin
                                            trampCall(_i)
                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:235"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        begin
                                            trampCall(_size)
                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:231"] + __e.backtrace ) ; raise __e
                                        end
                                  ]
                                               ))
                                 ) then
                                  Cell.new()
                                else
                                    begin
                                        trampCall( self._apply_METHOD(  'apply',
                                            begin
                                              if @global_lisp_binding.has_key?('_apply') then
                                                trampCall(@_apply)
                                              else raise NameError.new( "Error: undefined variable _apply", "_apply" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:234"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                        [
                                              begin
                                                if @global_lisp_binding.has_key?('_combinations_ASMARK_MIMARKfor_MIMARKeach') then
                                                  trampCall(@_combinations_ASMARK_MIMARKfor_MIMARKeach)
                                                else raise NameError.new( "Error: undefined variable _combinations_ASMARK_MIMARKfor_MIMARKeach", "_combinations_ASMARK_MIMARKfor_MIMARKeach" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:234"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              begin
                                                  trampCall(_proc)
                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:234"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              begin
                                                  trampCall(_set)
                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:234"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              begin
                                                  trampCall(_i)
                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:235"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              begin
                                                  trampCall(_maybe_MIMARKeq)
                                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:234"] + __e.backtrace ) ; raise __e
                                              end
                                        ]
                                                     ))
                                        delayCall( '_loop',  'loop',
                                            begin
                                                trampCall(_loop)
                                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:235"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                        [
                                              trampCall( self.__PLMARK_METHOD(  '+',
                                                  begin
                                                    if @global_lisp_binding.has_key?('__PLMARK') then
                                                      trampCall(@__PLMARK)
                                                    else raise NameError.new( "Error: undefined variable __PLMARK", "__PLMARK" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:235"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                              [
                                                    begin
                                                        trampCall(_i)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:235"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                  1
                                              ]
                                                           ))
                                        ]
                                                     )
                                    end
                                end
                            }
                          delayCall( '_loop',  'loop',
                              begin
                                  trampCall(_loop)
                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:235"] + __e.backtrace ) ; raise __e
                              end                            ,
                          [
                              0
                          ]
                                       )
                      } ; ___lambda.call(
                      nil
                                 )
                    end
                } ; ___lambda.call(
                      trampCall( self._length_METHOD(  'length',
                          begin
                            if @global_lisp_binding.has_key?('_length') then
                              trampCall(@_length)
                            else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:229"] + __e.backtrace ) ; raise __e
                          end                        ,
                      [
                            begin
                                trampCall(_set)
                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:234"] + __e.backtrace ) ; raise __e
                            end
                      ]
                                   ))
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._cartesian_MIMARKproduct_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_cartesian_MIMARKproduct'] = self.method( :_cartesian_MIMARKproduct_METHOD )
    @_cartesian_MIMARKproduct = 
    trampCall(
          Proc.new { |_lol| 
              if ( 
                trampCall( self._null_QUMARK_METHOD(  'null?',
                    begin
                      if @global_lisp_binding.has_key?('_null_QUMARK') then
                        trampCall(@_null_QUMARK)
                      else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:242"] + __e.backtrace ) ; raise __e
                    end                  ,
                [
                      begin
                          trampCall(_lol)
                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:245"] + __e.backtrace ) ; raise __e
                      end
                ]
                             ))
               ) then
                  delayCall( '_list',  'list',
                      begin
                        if @global_lisp_binding.has_key?('_list') then
                          trampCall(@_list)
                        else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:243"] + __e.backtrace ) ; raise __e
                      end                    ,
                  [
                      Cell.new()
                  ]
                               )
              else
                  begin
                    ___lambda = lambda { |_l,_rest| 
                        delayCall( '_append_MIMARKmap_EXMARK',  'append-map!',
                            begin
                              if @global_lisp_binding.has_key?('_append_MIMARKmap_EXMARK') then
                                trampCall(@_append_MIMARKmap_EXMARK)
                              else raise NameError.new( "Error: undefined variable _append_MIMARKmap_EXMARK", "_append_MIMARKmap_EXMARK" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:246"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              Proc.new { |_x| 
                                  trampCall( self._map_METHOD(  'map',
                                      begin
                                        if @global_lisp_binding.has_key?('_map') then
                                          trampCall(@_map)
                                        else raise NameError.new( "Error: undefined variable _map", "_map" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:248"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        Proc.new { |_sub_MIMARKprod| 
                                            trampCall( self._cons_METHOD(  'cons',
                                                begin
                                                  if @global_lisp_binding.has_key?('_cons') then
                                                    trampCall(@_cons)
                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:248"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                  begin
                                                      trampCall(_x)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:248"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  begin
                                                      trampCall(_sub_MIMARKprod)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:248"] + __e.backtrace ) ; raise __e
                                                  end
                                            ]
                                                         ))
                                        }                                      ,
                                        begin
                                            trampCall(_rest)
                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:248"] + __e.backtrace ) ; raise __e
                                        end
                                  ]
                                               ))
                              }                            ,
                              begin
                                  trampCall(_l)
                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:249"] + __e.backtrace ) ; raise __e
                              end
                        ]
                                     )
                    } ; ___lambda.call(
                          trampCall( self._car_METHOD(  'car',
                              begin
                                if @global_lisp_binding.has_key?('_car') then
                                  trampCall(@_car)
                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:244"] + __e.backtrace ) ; raise __e
                              end                            ,
                          [
                                begin
                                    trampCall(_lol)
                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:245"] + __e.backtrace ) ; raise __e
                                end
                          ]
                                       ))                        ,
                          trampCall( self._cartesian_MIMARKproduct_METHOD(  'cartesian-product',
                              begin
                                if @global_lisp_binding.has_key?('_cartesian_MIMARKproduct') then
                                  trampCall(@_cartesian_MIMARKproduct)
                                else raise NameError.new( "Error: undefined variable _cartesian_MIMARKproduct", "_cartesian_MIMARKproduct" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:245"] + __e.backtrace ) ; raise __e
                              end                            ,
                          [
                                trampCall( self._cdr_METHOD(  'cdr',
                                    begin
                                      if @global_lisp_binding.has_key?('_cdr') then
                                        trampCall(@_cdr)
                                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:245"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                [
                                      begin
                                          trampCall(_lol)
                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:245"] + __e.backtrace ) ; raise __e
                                      end
                                ]
                                             ))
                          ]
                                       ))
                               )
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._cartesian_MIMARKproduct_MIMARKfor_MIMARKeach_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_cartesian_MIMARKproduct_MIMARKfor_MIMARKeach'] = self.method( :_cartesian_MIMARKproduct_MIMARKfor_MIMARKeach_METHOD )
    @_cartesian_MIMARKproduct_MIMARKfor_MIMARKeach = 
    trampCall(
          Proc.new { |_proc,_lol| 
              if ( 
                trampCall( self._null_QUMARK_METHOD(  'null?',
                    begin
                      if @global_lisp_binding.has_key?('_null_QUMARK') then
                        trampCall(@_null_QUMARK)
                      else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:252"] + __e.backtrace ) ; raise __e
                    end                  ,
                [
                      begin
                          trampCall(_lol)
                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:260"] + __e.backtrace ) ; raise __e
                      end
                ]
                             ))
               ) then
                  delayCall( '_proc',  'proc',
                      begin
                          trampCall(_proc)
                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:258"] + __e.backtrace ) ; raise __e
                      end                    ,
                  [
                      Cell.new()
                  ]
                               )
              else
                  delayCall( '_for_MIMARKeach',  'for-each',
                      begin
                        if @global_lisp_binding.has_key?('_for_MIMARKeach') then
                          trampCall(@_for_MIMARKeach)
                        else raise NameError.new( "Error: undefined variable _for_MIMARKeach", "_for_MIMARKeach" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:254"] + __e.backtrace ) ; raise __e
                      end                    ,
                  [
                        Proc.new { |_x| 
                            trampCall( self._cartesian_MIMARKproduct_MIMARKfor_MIMARKeach_METHOD(  'cartesian-product-for-each',
                                begin
                                  if @global_lisp_binding.has_key?('_cartesian_MIMARKproduct_MIMARKfor_MIMARKeach') then
                                    trampCall(@_cartesian_MIMARKproduct_MIMARKfor_MIMARKeach)
                                  else raise NameError.new( "Error: undefined variable _cartesian_MIMARKproduct_MIMARKfor_MIMARKeach", "_cartesian_MIMARKproduct_MIMARKfor_MIMARKeach" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:256"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                  Proc.new { |_sub_MIMARKprod| 
                                      trampCall( callProcedure(   'proc',
                                          begin
                                              trampCall(_proc)
                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:258"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                      [
                                            trampCall( self._cons_METHOD(  'cons',
                                                begin
                                                  if @global_lisp_binding.has_key?('_cons') then
                                                    trampCall(@_cons)
                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:258"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                  begin
                                                      trampCall(_x)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:258"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  begin
                                                      trampCall(_sub_MIMARKprod)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:258"] + __e.backtrace ) ; raise __e
                                                  end
                                            ]
                                                         ))
                                      ]
                                                   ))
                                  }                                ,
                                  trampCall( self._cdr_METHOD(  'cdr',
                                      begin
                                        if @global_lisp_binding.has_key?('_cdr') then
                                          trampCall(@_cdr)
                                        else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:259"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        begin
                                            trampCall(_lol)
                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:260"] + __e.backtrace ) ; raise __e
                                        end
                                  ]
                                               ))
                            ]
                                         ))
                        }                      ,
                        trampCall( self._car_METHOD(  'car',
                            begin
                              if @global_lisp_binding.has_key?('_car') then
                                trampCall(@_car)
                              else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:260"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              begin
                                  trampCall(_lol)
                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:260"] + __e.backtrace ) ; raise __e
                              end
                        ]
                                     ))
                  ]
                               )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._cartesian_MIMARKproduct_MIMARKright_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_cartesian_MIMARKproduct_MIMARKright'] = self.method( :_cartesian_MIMARKproduct_MIMARKright_METHOD )
    @_cartesian_MIMARKproduct_MIMARKright = 
    trampCall(
          Proc.new { |_lol| 
              if ( 
                trampCall( self._null_QUMARK_METHOD(  'null?',
                    begin
                      if @global_lisp_binding.has_key?('_null_QUMARK') then
                        trampCall(@_null_QUMARK)
                      else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:271"] + __e.backtrace ) ; raise __e
                    end                  ,
                [
                      begin
                          trampCall(_lol)
                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:274"] + __e.backtrace ) ; raise __e
                      end
                ]
                             ))
               ) then
                  delayCall( '_list',  'list',
                      begin
                        if @global_lisp_binding.has_key?('_list') then
                          trampCall(@_list)
                        else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:272"] + __e.backtrace ) ; raise __e
                      end                    ,
                  [
                      Cell.new()
                  ]
                               )
              else
                  begin
                    ___lambda = lambda { |_l,_rest| 
                        delayCall( '_append_MIMARKmap_EXMARK',  'append-map!',
                            begin
                              if @global_lisp_binding.has_key?('_append_MIMARKmap_EXMARK') then
                                trampCall(@_append_MIMARKmap_EXMARK)
                              else raise NameError.new( "Error: undefined variable _append_MIMARKmap_EXMARK", "_append_MIMARKmap_EXMARK" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:275"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              Proc.new { |_sub_MIMARKprod| 
                                  trampCall( self._map_METHOD(  'map',
                                      begin
                                        if @global_lisp_binding.has_key?('_map') then
                                          trampCall(@_map)
                                        else raise NameError.new( "Error: undefined variable _map", "_map" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:277"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        Proc.new { |_x| 
                                            trampCall( self._cons_METHOD(  'cons',
                                                begin
                                                  if @global_lisp_binding.has_key?('_cons') then
                                                    trampCall(@_cons)
                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:277"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                  begin
                                                      trampCall(_x)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:277"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  begin
                                                      trampCall(_sub_MIMARKprod)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:277"] + __e.backtrace ) ; raise __e
                                                  end
                                            ]
                                                         ))
                                        }                                      ,
                                        begin
                                            trampCall(_l)
                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:277"] + __e.backtrace ) ; raise __e
                                        end
                                  ]
                                               ))
                              }                            ,
                              begin
                                  trampCall(_rest)
                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:278"] + __e.backtrace ) ; raise __e
                              end
                        ]
                                     )
                    } ; ___lambda.call(
                          trampCall( self._car_METHOD(  'car',
                              begin
                                if @global_lisp_binding.has_key?('_car') then
                                  trampCall(@_car)
                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:273"] + __e.backtrace ) ; raise __e
                              end                            ,
                          [
                                begin
                                    trampCall(_lol)
                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:274"] + __e.backtrace ) ; raise __e
                                end
                          ]
                                       ))                        ,
                          trampCall( self._cartesian_MIMARKproduct_METHOD(  'cartesian-product',
                              begin
                                if @global_lisp_binding.has_key?('_cartesian_MIMARKproduct') then
                                  trampCall(@_cartesian_MIMARKproduct)
                                else raise NameError.new( "Error: undefined variable _cartesian_MIMARKproduct", "_cartesian_MIMARKproduct" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:274"] + __e.backtrace ) ; raise __e
                              end                            ,
                          [
                                trampCall( self._cdr_METHOD(  'cdr',
                                    begin
                                      if @global_lisp_binding.has_key?('_cdr') then
                                        trampCall(@_cdr)
                                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:274"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                [
                                      begin
                                          trampCall(_lol)
                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:274"] + __e.backtrace ) ; raise __e
                                      end
                                ]
                                             ))
                          ]
                                       ))
                               )
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._cartesian_MIMARKproduct_MIMARKright_MIMARKfor_MIMARKeach_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_cartesian_MIMARKproduct_MIMARKright_MIMARKfor_MIMARKeach'] = self.method( :_cartesian_MIMARKproduct_MIMARKright_MIMARKfor_MIMARKeach_METHOD )
    @_cartesian_MIMARKproduct_MIMARKright_MIMARKfor_MIMARKeach = 
    trampCall(
          Proc.new { |_proc,_lol| 
              if ( 
                trampCall( self._null_QUMARK_METHOD(  'null?',
                    begin
                      if @global_lisp_binding.has_key?('_null_QUMARK') then
                        trampCall(@_null_QUMARK)
                      else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:281"] + __e.backtrace ) ; raise __e
                    end                  ,
                [
                      begin
                          trampCall(_lol)
                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:286"] + __e.backtrace ) ; raise __e
                      end
                ]
                             ))
               ) then
                  delayCall( '_proc',  'proc',
                      begin
                          trampCall(_proc)
                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:285"] + __e.backtrace ) ; raise __e
                      end                    ,
                  [
                      Cell.new()
                  ]
                               )
              else
                  delayCall( '_cartesian_MIMARKproduct_MIMARKright_MIMARKfor_MIMARKeach',  'cartesian-product-right-for-each',
                      begin
                        if @global_lisp_binding.has_key?('_cartesian_MIMARKproduct_MIMARKright_MIMARKfor_MIMARKeach') then
                          trampCall(@_cartesian_MIMARKproduct_MIMARKright_MIMARKfor_MIMARKeach)
                        else raise NameError.new( "Error: undefined variable _cartesian_MIMARKproduct_MIMARKright_MIMARKfor_MIMARKeach", "_cartesian_MIMARKproduct_MIMARKright_MIMARKfor_MIMARKeach" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:283"] + __e.backtrace ) ; raise __e
                      end                    ,
                  [
                        Proc.new { |_sub_MIMARKprod| 
                            trampCall( self._for_MIMARKeach_METHOD(  'for-each',
                                begin
                                  if @global_lisp_binding.has_key?('_for_MIMARKeach') then
                                    trampCall(@_for_MIMARKeach)
                                  else raise NameError.new( "Error: undefined variable _for_MIMARKeach", "_for_MIMARKeach" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:285"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                  Proc.new { |_x| 
                                      trampCall( callProcedure(   'proc',
                                          begin
                                              trampCall(_proc)
                                            rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:285"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                      [
                                            trampCall( self._cons_METHOD(  'cons',
                                                begin
                                                  if @global_lisp_binding.has_key?('_cons') then
                                                    trampCall(@_cons)
                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:285"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                  begin
                                                      trampCall(_x)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:285"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  begin
                                                      trampCall(_sub_MIMARKprod)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:285"] + __e.backtrace ) ; raise __e
                                                  end
                                            ]
                                                         ))
                                      ]
                                                   ))
                                  }                                ,
                                  trampCall( self._car_METHOD(  'car',
                                      begin
                                        if @global_lisp_binding.has_key?('_car') then
                                          trampCall(@_car)
                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:285"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        begin
                                            trampCall(_lol)
                                          rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:286"] + __e.backtrace ) ; raise __e
                                        end
                                  ]
                                               ))
                            ]
                                         ))
                        }                      ,
                        trampCall( self._cdr_METHOD(  'cdr',
                            begin
                              if @global_lisp_binding.has_key?('_cdr') then
                                trampCall(@_cdr)
                              else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:286"] + __e.backtrace ) ; raise __e
                            end                          ,
                        [
                              begin
                                  trampCall(_lol)
                                rescue => __e ; __e.set_backtrace( ["./lib/util/combinations.nnd:286"] + __e.backtrace ) ; raise __e
                              end
                        ]
                                     ))
                  ]
                               )
              end
          }
    )
  end
 )


# -------------------------------------------------------
# [EOF]
# -------------------------------------------------------
