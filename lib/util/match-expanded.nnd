(define-syntax match-syntax-error (er-macro-transformer (lambda (expr rename compare) ((lambda (tmp) (if tmp tmp (error "no expansion for" (strip-syntactic-closures expr)))) ((lambda (v_1) (if (null? v_1) (cons (rename (quote match-syntax-error)) (cons "invalid match-syntax-error usage" (quote ()))) #f)) (cdr expr))))))

(define-syntax match (er-macro-transformer (lambda (expr rename compare) ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp (error "no expansion for" (strip-syntactic-closures expr)))) ((lambda (v_20) (if (pair? v_20) ((lambda (v_21) ((lambda (atom) ((lambda (v_22) ((lambda () (define lp #f) (set! lp (lambda (v_23 pat-ls body-ls) (if (null? v_23) ((lambda (pat body) (cons (rename (quote match-next)) (cons atom (cons (cons atom (cons (cons (rename (quote set!)) (cons atom (quote ()))) (quote ()))) (map (lambda (pat body) (cons pat body)) pat body))))) (reverse pat-ls) (reverse body-ls)) (if (pair? v_23) ((lambda (v_24) (if (pair? v_24) ((lambda (v_25) ((lambda (pat) ((lambda (v_26) ((lambda (body) (lp (cdr v_23) (cons pat pat-ls) (cons body body-ls))) v_26)) (cdr v_24))) v_25)) (car v_24)) #f)) (car v_23)) #f)))) nil (lp v_22 () ())))) (cdr v_20))) v_21)) (car v_20)) #f)) (cdr expr))))) ((lambda (v_12) (if (pair? v_12) ((lambda (v_13) (if (vector? v_13) ((lambda (v_14) (if (list? v_14) ((lambda (vec) ((lambda (v_15) ((lambda () (define lp #f) (set! lp (lambda (v_16 pat-ls body-ls) (if (null? v_16) ((lambda (pat body) (cons (rename (quote let)) (cons (cons (cons (rename (quote v)) (cons (list->vector (map (lambda (vec) vec) vec)) (quote ()))) (quote ())) (cons (cons (rename (quote match-next)) (cons (rename (quote v)) (cons (cons (rename (quote v)) (cons (cons (rename (quote set!)) (cons (rename (quote v)) (quote ()))) (quote ()))) (map (lambda (pat body) (cons pat body)) pat body)))) (quote ()))))) (reverse pat-ls) (reverse body-ls)) (if (pair? v_16) ((lambda (v_17) (if (pair? v_17) ((lambda (v_18) ((lambda (pat) ((lambda (v_19) ((lambda (body) (lp (cdr v_16) (cons pat pat-ls) (cons body body-ls))) v_19)) (cdr v_17))) v_18)) (car v_17)) #f)) (car v_16)) #f)))) nil (lp v_15 () ())))) (cdr v_12))) v_14) #f)) (vector->list v_13)) #f)) (car v_12)) #f)) (cdr expr))))) ((lambda (v_5) (if (pair? v_5) ((lambda (v_6) (if (list? v_6) ((lambda (app) ((lambda (v_7) ((lambda () (define lp #f) (set! lp (lambda (v_8 pat-ls body-ls) (if (null? v_8) ((lambda (pat body) (cons (rename (quote let)) (cons (cons (cons (rename (quote v)) (cons (map (lambda (app) app) app) (quote ()))) (quote ())) (cons (cons (rename (quote match-next)) (cons (rename (quote v)) (cons (cons (map (lambda (app) app) app) (cons (cons (rename (quote set!)) (cons (map (lambda (app) app) app) (quote ()))) (quote ()))) (map (lambda (pat body) (cons pat body)) pat body)))) (quote ()))))) (reverse pat-ls) (reverse body-ls)) (if (pair? v_8) ((lambda (v_9) (if (pair? v_9) ((lambda (v_10) ((lambda (pat) ((lambda (v_11) ((lambda (body) (lp (cdr v_8) (cons pat pat-ls) (cons body body-ls))) v_11)) (cdr v_9))) v_10)) (car v_9)) #f)) (car v_8)) #f)))) nil (lp v_7 () ())))) (cdr v_5))) v_6) #f)) (car v_5)) #f)) (cdr expr))))) ((lambda (v_2) (if (pair? v_2) ((lambda (v_3) ((lambda (atom) ((lambda (v_4) (if (null? v_4) (cons (rename (quote match-syntax-error)) (cons "no match clauses" (quote ()))) #f)) (cdr v_2))) v_3)) (car v_2)) #f)) (cdr expr))))) ((lambda (v_1) (if (null? v_1) (cons (rename (quote match-syntax-error)) (cons "missing match expression" (quote ()))) #f)) (cdr expr))))))

(define-syntax match-next (er-macro-transformer (lambda (expr rename compare) ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp (error "no expansion for" (strip-syntactic-closures expr)))) ((lambda (v_21) (if (pair? v_21) ((lambda (v_22) ((lambda (v) ((lambda (v_23) (if (pair? v_23) ((lambda (v_24) ((lambda (g+s) ((lambda (v_25) (if (pair? v_25) ((lambda (v_26) (if (pair? v_26) ((lambda (v_27) ((lambda (pat) ((lambda (v_28) ((lambda (body) ((lambda (v_29) ((lambda (rest) (cons (rename (quote match-next)) (cons v (cons g+s (cons (cons pat (cons (cons (rename (quote =>)) (cons (rename (quote failure)) (quote ()))) body)) rest))))) v_29)) (cdr v_25))) v_28)) (cdr v_26))) v_27)) (car v_26)) #f)) (car v_25)) #f)) (cdr v_23))) v_24)) (car v_23)) #f)) (cdr v_21))) v_22)) (car v_21)) #f)) (cdr expr))))) ((lambda (v_6) (if (pair? v_6) ((lambda (v_7) ((lambda (v) ((lambda (v_8) (if (pair? v_8) ((lambda (v_9) ((lambda (g+s) ((lambda (v_10) (if (pair? v_10) ((lambda (v_11) (if (pair? v_11) ((lambda (v_12) ((lambda (pat) ((lambda (v_13) (if (pair? v_13) ((lambda (v_14) (if (pair? v_14) ((lambda (v_15) (if (compare v_15 (quote =>)) ((lambda (v_16) (if (pair? v_16) ((lambda (v_17) ((lambda (failure) ((lambda (v_18) (if (null? v_18) ((lambda (v_19) ((lambda (body) ((lambda (v_20) ((lambda (rest) (cons (rename (quote let)) (cons (cons (cons failure (cons (cons (rename (quote lambda)) (cons (quote ()) (cons (cons (rename (quote match-next)) (cons v (cons g+s rest))) (quote ())))) (quote ()))) (quote ())) (cons (cons (rename (quote match-one)) (cons v (cons pat (cons g+s (cons (cons (rename (quote match-drop-ids)) (cons (cons (rename (quote begin)) body) (quote ()))) (cons (cons failure (quote ())) (cons (quote ()) (quote ())))))))) (quote ()))))) v_20)) (cdr v_10))) v_19)) (cdr v_13)) #f)) (cdr v_16))) v_17)) (car v_16)) #f)) (cdr v_14)) #f)) (car v_14)) #f)) (car v_13)) #f)) (cdr v_11))) v_12)) (car v_11)) #f)) (car v_10)) #f)) (cdr v_8))) v_9)) (car v_8)) #f)) (cdr v_6))) v_7)) (car v_6)) #f)) (cdr expr))))) ((lambda (v_1) (if (pair? v_1) ((lambda (v_2) ((lambda (v) ((lambda (v_3) (if (pair? v_3) ((lambda (v_4) ((lambda (g+s) ((lambda (v_5) (if (null? v_5) (cons (rename (quote error)) (cons "Error: match: no matching pattern" (quote ()))) #f)) (cdr v_3))) v_4)) (car v_3)) #f)) (cdr v_1))) v_2)) (car v_1)) #f)) (cdr expr))))))

(define-syntax match-one (er-macro-transformer (lambda (expr rename compare) ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp (error "no expansion for" (strip-syntactic-closures expr)))) ((lambda (v_18) ((lambda (x) (cons (rename (quote match-two)) x)) v_18)) (cdr expr))))) ((lambda (v_1) (if (pair? v_1) ((lambda (v_2) ((lambda (v) ((lambda (v_3) (if (pair? v_3) ((lambda (v_4) (if (pair? v_4) ((lambda (v_5) ((lambda (p) ((lambda (v_6) (if (pair? v_6) ((lambda (v_7) ((lambda (q) ((lambda (v_8) ((lambda (r) ((lambda (v_9) (if (pair? v_9) ((lambda (v_10) ((lambda (g+s) ((lambda (v_11) (if (pair? v_11) ((lambda (v_12) ((lambda (sk) ((lambda (v_13) (if (pair? v_13) ((lambda (v_14) ((lambda (fk) ((lambda (v_15) (if (pair? v_15) ((lambda (v_16) ((lambda (i) ((lambda (v_17) (if (null? v_17) (cons (rename (quote match-check-ellipse)) (cons q (cons (cons (rename (quote match-extract-vars)) (cons p (cons (cons (rename (quote match-gen-ellipses)) (cons v (cons p (cons r (cons g+s (cons sk (cons fk (cons i (quote ()))))))))) (cons i (cons (quote ()) (quote ())))))) (cons (cons (rename (quote match-two)) (cons v (cons (cons p (cons q r)) (cons g+s (cons sk (cons fk (cons i (quote ())))))))) (quote ()))))) #f)) (cdr v_15))) v_16)) (car v_15)) #f)) (cdr v_13))) v_14)) (car v_13)) #f)) (cdr v_11))) v_12)) (car v_11)) #f)) (cdr v_9))) v_10)) (car v_9)) #f)) (cdr v_3))) v_8)) (cdr v_6))) v_7)) (car v_6)) #f)) (cdr v_4))) v_5)) (car v_4)) #f)) (car v_3)) #f)) (cdr v_1))) v_2)) (car v_1)) #f)) (cdr expr))))))

(define-syntax match-two (er-macro-transformer (lambda (expr rename compare) ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp (error "no expansion for" (strip-syntactic-closures expr)))) ((lambda (v_302) (if (pair? v_302) ((lambda (v_303) ((lambda (v) ((lambda (v_304) (if (pair? v_304) ((lambda (v_305) ((lambda (x) ((lambda (v_306) (if (pair? v_306) ((lambda (v_307) ((lambda (g+s) ((lambda (v_308) (if (pair? v_308) ((lambda (v_309) (if (list? v_309) ((lambda (sk) ((lambda (v_310) (if (pair? v_310) ((lambda (v_311) ((lambda (fk) ((lambda (v_312) (if (pair? v_312) ((lambda (v_313) (if (list? v_313) ((lambda (id) ((lambda (v_314) (if (null? v_314) (cons (rename (quote let-syntax)) (cons (cons (cons (rename (quote new-sym?)) (cons (cons (rename (quote syntax-rules)) (cons (map (lambda (id) id) id) (cons (cons (cons (rename (quote new-sym?)) (cons x (cons (rename (quote sk2)) (cons (rename (quote fk2)) (quote ()))))) (cons (rename (quote sk2)) (quote ()))) (cons (cons (cons (rename (quote new-sym?)) (cons (rename (quote y)) (cons (rename (quote sk2)) (cons (rename (quote fk2)) (quote ()))))) (cons (rename (quote fk2)) (quote ()))) (quote ()))))) (quote ()))) (quote ())) (cons (cons (rename (quote new-sym?)) (cons (rename (quote random-sym-to-match)) (cons (cons (rename (quote let)) (cons (cons (cons x (cons v (quote ()))) (quote ())) (cons (append (map (lambda (sk) sk) sk) (cons (append (map (lambda (id) id) id) (cons x (quote ()))) (quote ()))) (quote ())))) (cons (cons (rename (quote if)) (cons (cons (rename (quote equal?)) (cons v (cons x (quote ())))) (cons (append (map (lambda (sk) sk) sk) (cons (map (lambda (id) id) id) (quote ()))) (cons fk (quote ()))))) (quote ()))))) (quote ())))) #f)) (cdr v_312))) v_313) #f)) (car v_312)) #f)) (cdr v_310))) v_311)) (car v_310)) #f)) (cdr v_308))) v_309) #f)) (car v_308)) #f)) (cdr v_306))) v_307)) (car v_306)) #f)) (cdr v_304))) v_305)) (car v_304)) #f)) (cdr v_302))) v_303)) (car v_302)) #f)) (cdr expr))))) ((lambda (v_289) (if (pair? v_289) ((lambda (v_290) ((lambda (v) ((lambda (v_291) (if (pair? v_291) ((lambda (v_292) (if (compare v_292 (quote _)) ((lambda (v_293) (if (pair? v_293) ((lambda (v_294) ((lambda (g+s) ((lambda (v_295) (if (pair? v_295) ((lambda (v_296) (if (list? v_296) ((lambda (sk) ((lambda (v_297) (if (pair? v_297) ((lambda (v_298) ((lambda (fk) ((lambda (v_299) (if (pair? v_299) ((lambda (v_300) ((lambda (i) ((lambda (v_301) (if (null? v_301) (append (map (lambda (sk) sk) sk) (cons i (quote ()))) #f)) (cdr v_299))) v_300)) (car v_299)) #f)) (cdr v_297))) v_298)) (car v_297)) #f)) (cdr v_295))) v_296) #f)) (car v_295)) #f)) (cdr v_293))) v_294)) (car v_293)) #f)) (cdr v_291)) #f)) (car v_291)) #f)) (cdr v_289))) v_290)) (car v_289)) #f)) (cdr expr))))) ((lambda (v_281) (if (pair? v_281) ((lambda (v_282) ((lambda (v) ((lambda (v_283) (if (pair? v_283) ((lambda (v_284) (if (vector? v_284) ((lambda (v_285) (if (list? v_285) ((lambda (p) ((lambda (v_286) (if (pair? v_286) ((lambda (v_287) ((lambda (g+s) ((lambda (v_288) ((lambda (x) (cons (rename (quote match-vector)) (cons v (cons 0 (cons (quote ()) (cons (map (lambda (p) p) p) x)))))) v_288)) (cdr v_286))) v_287)) (car v_286)) #f)) (cdr v_283))) v_285) #f)) (vector->list v_284)) #f)) (car v_283)) #f)) (cdr v_281))) v_282)) (car v_281)) #f)) (cdr expr))))) ((lambda (v_266) (if (pair? v_266) ((lambda (v_267) ((lambda (v) ((lambda (v_268) (if (pair? v_268) ((lambda (v_269) (if (pair? v_269) ((lambda (v_270) ((lambda (p) ((lambda (v_271) ((lambda (q) ((lambda (v_272) (if (pair? v_272) ((lambda (v_273) ((lambda (g+s) ((lambda (v_274) (if (pair? v_274) ((lambda (v_275) ((lambda (sk) ((lambda (v_276) (if (pair? v_276) ((lambda (v_277) ((lambda (fk) ((lambda (v_278) (if (pair? v_278) ((lambda (v_279) ((lambda (i) ((lambda (v_280) (if (null? v_280) (cons (rename (quote if)) (cons (cons (rename (quote pair?)) (cons v (quote ()))) (cons (cons (rename (quote let)) (cons (cons (cons (rename (quote w)) (cons (cons (rename (quote car)) (cons v (quote ()))) (quote ()))) (cons (cons (rename (quote x)) (cons (cons (rename (quote cdr)) (cons v (quote ()))) (quote ()))) (quote ()))) (cons (cons (rename (quote match-one)) (cons (rename (quote w)) (cons p (cons (cons (cons (rename (quote car)) (cons v (quote ()))) (cons (cons (rename (quote set-car!)) (cons v (quote ()))) (quote ()))) (cons (cons (rename (quote match-one)) (cons (rename (quote x)) (cons q (cons (cons (cons (rename (quote cdr)) (cons v (quote ()))) (cons (cons (rename (quote set-cdr!)) (cons v (quote ()))) (quote ()))) (cons sk (cons fk (quote ()))))))) (cons fk (cons i (quote ())))))))) (quote ())))) (cons fk (quote ()))))) #f)) (cdr v_278))) v_279)) (car v_278)) #f)) (cdr v_276))) v_277)) (car v_276)) #f)) (cdr v_274))) v_275)) (car v_274)) #f)) (cdr v_272))) v_273)) (car v_272)) #f)) (cdr v_268))) v_271)) (cdr v_269))) v_270)) (car v_269)) #f)) (car v_268)) #f)) (cdr v_266))) v_267)) (car v_266)) #f)) (cdr expr))))) ((lambda (v_249) (if (pair? v_249) ((lambda (v_250) ((lambda (v) ((lambda (v_251) (if (pair? v_251) ((lambda (v_252) (if (pair? v_252) ((lambda (v_253) ((lambda (p) ((lambda (v_254) (if (pair? v_254) ((lambda (v_255) (if (compare v_255 (quote ***)) ((lambda (v_256) ((lambda (q) ((lambda (v_257) (if (pair? v_257) ((lambda (v_258) ((lambda (g+s) ((lambda (v_259) (if (pair? v_259) ((lambda (v_260) ((lambda (sk) ((lambda (v_261) (if (pair? v_261) ((lambda (v_262) ((lambda (fk) ((lambda (v_263) (if (pair? v_263) ((lambda (v_264) ((lambda (i) ((lambda (v_265) (if (null? v_265) (cons (rename (quote match-syntax-error)) (cons "invalid use of ***" (cons (cons p (cons (rename (quote ***)) q)) (quote ())))) #f)) (cdr v_263))) v_264)) (car v_263)) #f)) (cdr v_261))) v_262)) (car v_261)) #f)) (cdr v_259))) v_260)) (car v_259)) #f)) (cdr v_257))) v_258)) (car v_257)) #f)) (cdr v_251))) v_256)) (cdr v_254)) #f)) (car v_254)) #f)) (cdr v_252))) v_253)) (car v_252)) #f)) (car v_251)) #f)) (cdr v_249))) v_250)) (car v_249)) #f)) (cdr expr))))) ((lambda (v_230) (if (pair? v_230) ((lambda (v_231) ((lambda (v) ((lambda (v_232) (if (pair? v_232) ((lambda (v_233) (if (pair? v_233) ((lambda (v_234) ((lambda (p) ((lambda (v_235) (if (pair? v_235) ((lambda (v_236) (if (compare v_236 (quote ***)) ((lambda (v_237) (if (pair? v_237) ((lambda (v_238) ((lambda (q) ((lambda (v_239) (if (null? v_239) ((lambda (v_240) (if (pair? v_240) ((lambda (v_241) ((lambda (g+s) ((lambda (v_242) (if (pair? v_242) ((lambda (v_243) ((lambda (sk) ((lambda (v_244) (if (pair? v_244) ((lambda (v_245) ((lambda (fk) ((lambda (v_246) (if (pair? v_246) ((lambda (v_247) ((lambda (i) ((lambda (v_248) (if (null? v_248) (cons (rename (quote match-extract-vars)) (cons p (cons (cons (rename (quote match-gen-search)) (cons v (cons p (cons q (cons g+s (cons sk (cons fk (cons i (quote ()))))))))) (cons i (cons (quote ()) (quote ())))))) #f)) (cdr v_246))) v_247)) (car v_246)) #f)) (cdr v_244))) v_245)) (car v_244)) #f)) (cdr v_242))) v_243)) (car v_242)) #f)) (cdr v_240))) v_241)) (car v_240)) #f)) (cdr v_232)) #f)) (cdr v_237))) v_238)) (car v_237)) #f)) (cdr v_235)) #f)) (car v_235)) #f)) (cdr v_233))) v_234)) (car v_233)) #f)) (car v_232)) #f)) (cdr v_230))) v_231)) (car v_230)) #f)) (cdr expr))))) ((lambda (v_215) (if (pair? v_215) ((lambda (v_216) ((lambda (v) ((lambda (v_217) (if (pair? v_217) ((lambda (v_218) (if (pair? v_218) ((lambda (v_219) ((lambda (p) ((lambda (v_220) (if (null? v_220) ((lambda (v_221) (if (pair? v_221) ((lambda (v_222) ((lambda (g+s) ((lambda (v_223) (if (pair? v_223) ((lambda (v_224) ((lambda (sk) ((lambda (v_225) (if (pair? v_225) ((lambda (v_226) ((lambda (fk) ((lambda (v_227) (if (pair? v_227) ((lambda (v_228) ((lambda (i) ((lambda (v_229) (if (null? v_229) (cons (rename (quote if)) (cons (cons (rename (quote and)) (cons (cons (rename (quote pair?)) (cons v (quote ()))) (cons (cons (rename (quote null?)) (cons (cons (rename (quote cdr)) (cons v (quote ()))) (quote ()))) (quote ())))) (cons (cons (rename (quote let)) (cons (cons (cons (rename (quote w)) (cons (cons (rename (quote car)) (cons v (quote ()))) (quote ()))) (quote ())) (cons (cons (rename (quote match-one)) (cons (rename (quote w)) (cons p (cons (cons (cons (rename (quote car)) (cons v (quote ()))) (cons (cons (rename (quote set-car!)) (cons v (quote ()))) (quote ()))) (cons sk (cons fk (cons i (quote ())))))))) (quote ())))) (cons fk (quote ()))))) #f)) (cdr v_227))) v_228)) (car v_227)) #f)) (cdr v_225))) v_226)) (car v_225)) #f)) (cdr v_223))) v_224)) (car v_223)) #f)) (cdr v_221))) v_222)) (car v_221)) #f)) (cdr v_217)) #f)) (cdr v_218))) v_219)) (car v_218)) #f)) (car v_217)) #f)) (cdr v_215))) v_216)) (car v_215)) #f)) (cdr expr))))) ((lambda (v_198) (if (pair? v_198) ((lambda (v_199) ((lambda (v) ((lambda (v_200) (if (pair? v_200) ((lambda (v_201) (if (pair? v_201) ((lambda (v_202) ((lambda (p) ((lambda (v_203) (if (pair? v_203) ((lambda (v_204) (if (compare v_204 (quote ___)) ((lambda (v_205) ((lambda (r) ((lambda (v_206) (if (pair? v_206) ((lambda (v_207) ((lambda (g+s) ((lambda (v_208) (if (pair? v_208) ((lambda (v_209) ((lambda (sk) ((lambda (v_210) (if (pair? v_210) ((lambda (v_211) ((lambda (fk) ((lambda (v_212) (if (pair? v_212) ((lambda (v_213) ((lambda (i) ((lambda (v_214) (if (null? v_214) (cons (rename (quote match-extract-vars)) (cons p (cons (cons (rename (quote match-gen-ellipses)) (cons v (cons p (cons r (cons g+s (cons sk (cons fk (cons i (quote ()))))))))) (cons i (cons (quote ()) (quote ())))))) #f)) (cdr v_212))) v_213)) (car v_212)) #f)) (cdr v_210))) v_211)) (car v_210)) #f)) (cdr v_208))) v_209)) (car v_208)) #f)) (cdr v_206))) v_207)) (car v_206)) #f)) (cdr v_200))) v_205)) (cdr v_203)) #f)) (car v_203)) #f)) (cdr v_201))) v_202)) (car v_201)) #f)) (car v_200)) #f)) (cdr v_198))) v_199)) (car v_198)) #f)) (cdr expr))))) ((lambda (v_187) (if (pair? v_187) ((lambda (v_188) ((lambda (v) ((lambda (v_189) (if (pair? v_189) ((lambda (v_190) (if (pair? v_190) ((lambda (v_191) (if (compare v_191 (quote =)) ((lambda (v_192) (if (pair? v_192) ((lambda (v_193) ((lambda (proc) ((lambda (v_194) (if (pair? v_194) ((lambda (v_195) ((lambda (p) ((lambda (v_196) (if (null? v_196) ((lambda (v_197) ((lambda (x) (cons (rename (quote let)) (cons (cons (cons (rename (quote w)) (cons (cons proc (cons v (quote ()))) (quote ()))) (quote ())) (cons (cons (rename (quote match-one)) (cons (rename (quote w)) (cons p x))) (quote ()))))) v_197)) (cdr v_189)) #f)) (cdr v_194))) v_195)) (car v_194)) #f)) (cdr v_192))) v_193)) (car v_192)) #f)) (cdr v_190)) #f)) (car v_190)) #f)) (car v_189)) #f)) (cdr v_187))) v_188)) (car v_187)) #f)) (cdr expr))))) ((lambda (v_170) (if (pair? v_170) ((lambda (v_171) ((lambda (v) ((lambda (v_172) (if (pair? v_172) ((lambda (v_173) (if (pair? v_173) ((lambda (v_174) (if (compare v_174 (quote ?)) ((lambda (v_175) (if (pair? v_175) ((lambda (v_176) ((lambda (pred) ((lambda (v_177) ((lambda (p) ((lambda (v_178) (if (pair? v_178) ((lambda (v_179) ((lambda (g+s) ((lambda (v_180) (if (pair? v_180) ((lambda (v_181) ((lambda (sk) ((lambda (v_182) (if (pair? v_182) ((lambda (v_183) ((lambda (fk) ((lambda (v_184) (if (pair? v_184) ((lambda (v_185) ((lambda (i) ((lambda (v_186) (if (null? v_186) (cons (rename (quote if)) (cons (cons pred (cons v (quote ()))) (cons (cons (rename (quote match-one)) (cons v (cons (cons (rename (quote and)) p) (cons g+s (cons sk (cons fk (cons i (quote ())))))))) (cons fk (quote ()))))) #f)) (cdr v_184))) v_185)) (car v_184)) #f)) (cdr v_182))) v_183)) (car v_182)) #f)) (cdr v_180))) v_181)) (car v_180)) #f)) (cdr v_178))) v_179)) (car v_178)) #f)) (cdr v_172))) v_177)) (cdr v_175))) v_176)) (car v_175)) #f)) (cdr v_173)) #f)) (car v_173)) #f)) (car v_172)) #f)) (cdr v_170))) v_171)) (car v_170)) #f)) (cdr expr))))) ((lambda (v_149) (if (pair? v_149) ((lambda (v_150) ((lambda (v) ((lambda (v_151) (if (pair? v_151) ((lambda (v_152) (if (pair? v_152) ((lambda (v_153) (if (compare v_153 (quote set!)) ((lambda (v_154) (if (pair? v_154) ((lambda (v_155) ((lambda (setter) ((lambda (v_156) (if (null? v_156) ((lambda (v_157) (if (pair? v_157) ((lambda (v_158) (if (pair? v_158) ((lambda (v_159) ((lambda (g) ((lambda (v_160) (if (pair? v_160) ((lambda (v_161) (if (list? v_161) ((lambda (s) ((lambda (v_162) (if (null? v_162) ((lambda (v_163) (if (pair? v_163) ((lambda (v_164) (if (list? v_164) ((lambda (sk) ((lambda (v_165) (if (pair? v_165) ((lambda (v_166) ((lambda (fk) ((lambda (v_167) (if (pair? v_167) ((lambda (v_168) ((lambda (i) ((lambda (v_169) (if (null? v_169) (cons (rename (quote let)) (cons (cons (cons setter (cons (cons (rename (quote lambda)) (cons (cons (rename (quote x)) (quote ())) (cons (append (map (lambda (s) s) s) (cons (rename (quote x)) (quote ()))) (quote ())))) (quote ()))) (quote ())) (cons (append (map (lambda (sk) sk) sk) (cons i (quote ()))) (quote ())))) #f)) (cdr v_167))) v_168)) (car v_167)) #f)) (cdr v_165))) v_166)) (car v_165)) #f)) (cdr v_163))) v_164) #f)) (car v_163)) #f)) (cdr v_157)) #f)) (cdr v_160))) v_161) #f)) (car v_160)) #f)) (cdr v_158))) v_159)) (car v_158)) #f)) (car v_157)) #f)) (cdr v_151)) #f)) (cdr v_154))) v_155)) (car v_154)) #f)) (cdr v_152)) #f)) (car v_152)) #f)) (car v_151)) #f)) (cdr v_149))) v_150)) (car v_149)) #f)) (cdr expr))))) ((lambda (v_128) (if (pair? v_128) ((lambda (v_129) ((lambda (v) ((lambda (v_130) (if (pair? v_130) ((lambda (v_131) (if (pair? v_131) ((lambda (v_132) (if (compare v_132 (quote get!)) ((lambda (v_133) (if (pair? v_133) ((lambda (v_134) ((lambda (getter) ((lambda (v_135) (if (null? v_135) ((lambda (v_136) (if (pair? v_136) ((lambda (v_137) (if (pair? v_137) ((lambda (v_138) ((lambda (g) ((lambda (v_139) (if (pair? v_139) ((lambda (v_140) ((lambda (s) ((lambda (v_141) (if (null? v_141) ((lambda (v_142) (if (pair? v_142) ((lambda (v_143) (if (list? v_143) ((lambda (sk) ((lambda (v_144) (if (pair? v_144) ((lambda (v_145) ((lambda (fk) ((lambda (v_146) (if (pair? v_146) ((lambda (v_147) ((lambda (i) ((lambda (v_148) (if (null? v_148) (cons (rename (quote let)) (cons (cons (cons getter (cons (cons (rename (quote lambda)) (cons (quote ()) (cons g (quote ())))) (quote ()))) (quote ())) (cons (append (map (lambda (sk) sk) sk) (cons i (quote ()))) (quote ())))) #f)) (cdr v_146))) v_147)) (car v_146)) #f)) (cdr v_144))) v_145)) (car v_144)) #f)) (cdr v_142))) v_143) #f)) (car v_142)) #f)) (cdr v_136)) #f)) (cdr v_139))) v_140)) (car v_139)) #f)) (cdr v_137))) v_138)) (car v_137)) #f)) (car v_136)) #f)) (cdr v_130)) #f)) (cdr v_133))) v_134)) (car v_133)) #f)) (cdr v_131)) #f)) (car v_131)) #f)) (car v_130)) #f)) (cdr v_128))) v_129)) (car v_128)) #f)) (cdr expr))))) ((lambda (v_111) (if (pair? v_111) ((lambda (v_112) ((lambda (v) ((lambda (v_113) (if (pair? v_113) ((lambda (v_114) (if (pair? v_114) ((lambda (v_115) (if (compare v_115 (quote not)) ((lambda (v_116) (if (pair? v_116) ((lambda (v_117) ((lambda (p) ((lambda (v_118) (if (null? v_118) ((lambda (v_119) (if (pair? v_119) ((lambda (v_120) ((lambda (g+s) ((lambda (v_121) (if (pair? v_121) ((lambda (v_122) (if (list? v_122) ((lambda (sk) ((lambda (v_123) (if (pair? v_123) ((lambda (v_124) ((lambda (fk) ((lambda (v_125) (if (pair? v_125) ((lambda (v_126) ((lambda (i) ((lambda (v_127) (if (null? v_127) (cons (rename (quote match-one)) (cons v (cons p (cons g+s (cons (cons (rename (quote match-drop-ids)) (cons fk (quote ()))) (cons (append (map (lambda (sk) sk) sk) (cons i (quote ()))) (cons i (quote ())))))))) #f)) (cdr v_125))) v_126)) (car v_125)) #f)) (cdr v_123))) v_124)) (car v_123)) #f)) (cdr v_121))) v_122) #f)) (car v_121)) #f)) (cdr v_119))) v_120)) (car v_119)) #f)) (cdr v_113)) #f)) (cdr v_116))) v_117)) (car v_116)) #f)) (cdr v_114)) #f)) (car v_114)) #f)) (car v_113)) #f)) (cdr v_111))) v_112)) (car v_111)) #f)) (cdr expr))))) ((lambda (v_96) (if (pair? v_96) ((lambda (v_97) ((lambda (v) ((lambda (v_98) (if (pair? v_98) ((lambda (v_99) (if (pair? v_99) ((lambda (v_100) (if (compare v_100 (quote or)) ((lambda (v_101) (if (list? v_101) ((lambda (p) ((lambda (v_102) (if (pair? v_102) ((lambda (v_103) ((lambda (g+s) ((lambda (v_104) (if (pair? v_104) ((lambda (v_105) ((lambda (sk) ((lambda (v_106) (if (pair? v_106) ((lambda (v_107) ((lambda (fk) ((lambda (v_108) (if (pair? v_108) ((lambda (v_109) ((lambda (i) ((lambda (v_110) (if (null? v_110) (cons (rename (quote match-extract-vars)) (cons (cons (rename (quote or)) (map (lambda (p) p) p)) (cons (cons (rename (quote match-gen-or)) (cons v (cons (map (lambda (p) p) p) (cons g+s (cons sk (cons fk (cons i (quote ())))))))) (cons i (cons (quote ()) (quote ())))))) #f)) (cdr v_108))) v_109)) (car v_108)) #f)) (cdr v_106))) v_107)) (car v_106)) #f)) (cdr v_104))) v_105)) (car v_104)) #f)) (cdr v_102))) v_103)) (car v_102)) #f)) (cdr v_98))) v_101) #f)) (cdr v_99)) #f)) (car v_99)) #f)) (car v_98)) #f)) (cdr v_96))) v_97)) (car v_96)) #f)) (cdr expr))))) ((lambda (v_87) (if (pair? v_87) ((lambda (v_88) ((lambda (v) ((lambda (v_89) (if (pair? v_89) ((lambda (v_90) (if (pair? v_90) ((lambda (v_91) (if (compare v_91 (quote or)) ((lambda (v_92) (if (pair? v_92) ((lambda (v_93) ((lambda (p) ((lambda (v_94) (if (null? v_94) ((lambda (v_95) ((lambda (x) (cons (rename (quote match-one)) (cons v (cons p x)))) v_95)) (cdr v_89)) #f)) (cdr v_92))) v_93)) (car v_92)) #f)) (cdr v_90)) #f)) (car v_90)) #f)) (car v_89)) #f)) (cdr v_87))) v_88)) (car v_87)) #f)) (cdr expr))))) ((lambda (v_72) (if (pair? v_72) ((lambda (v_73) ((lambda (v) ((lambda (v_74) (if (pair? v_74) ((lambda (v_75) (if (pair? v_75) ((lambda (v_76) (if (compare v_76 (quote or)) ((lambda (v_77) (if (null? v_77) ((lambda (v_78) (if (pair? v_78) ((lambda (v_79) ((lambda (g+s) ((lambda (v_80) (if (pair? v_80) ((lambda (v_81) ((lambda (sk) ((lambda (v_82) (if (pair? v_82) ((lambda (v_83) ((lambda (fk) ((lambda (v_84) (if (pair? v_84) ((lambda (v_85) ((lambda (i) ((lambda (v_86) (if (null? v_86) fk #f)) (cdr v_84))) v_85)) (car v_84)) #f)) (cdr v_82))) v_83)) (car v_82)) #f)) (cdr v_80))) v_81)) (car v_80)) #f)) (cdr v_78))) v_79)) (car v_78)) #f)) (cdr v_74)) #f)) (cdr v_75)) #f)) (car v_75)) #f)) (car v_74)) #f)) (cdr v_72))) v_73)) (car v_72)) #f)) (cdr expr))))) ((lambda (v_55) (if (pair? v_55) ((lambda (v_56) ((lambda (v) ((lambda (v_57) (if (pair? v_57) ((lambda (v_58) (if (pair? v_58) ((lambda (v_59) (if (compare v_59 (quote and)) ((lambda (v_60) (if (pair? v_60) ((lambda (v_61) ((lambda (p) ((lambda (v_62) (if (list? v_62) ((lambda (q) ((lambda (v_63) (if (pair? v_63) ((lambda (v_64) ((lambda (g+s) ((lambda (v_65) (if (pair? v_65) ((lambda (v_66) ((lambda (sk) ((lambda (v_67) (if (pair? v_67) ((lambda (v_68) ((lambda (fk) ((lambda (v_69) (if (pair? v_69) ((lambda (v_70) ((lambda (i) ((lambda (v_71) (if (null? v_71) (cons (rename (quote match-one)) (cons v (cons p (cons g+s (cons (cons (rename (quote match-one)) (cons v (cons (cons (rename (quote and)) (map (lambda (q) q) q)) (cons g+s (cons sk (cons fk (quote ()))))))) (cons fk (cons i (quote ())))))))) #f)) (cdr v_69))) v_70)) (car v_69)) #f)) (cdr v_67))) v_68)) (car v_67)) #f)) (cdr v_65))) v_66)) (car v_65)) #f)) (cdr v_63))) v_64)) (car v_63)) #f)) (cdr v_57))) v_62) #f)) (cdr v_60))) v_61)) (car v_60)) #f)) (cdr v_58)) #f)) (car v_58)) #f)) (car v_57)) #f)) (cdr v_55))) v_56)) (car v_55)) #f)) (cdr expr))))) ((lambda (v_40) (if (pair? v_40) ((lambda (v_41) ((lambda (v) ((lambda (v_42) (if (pair? v_42) ((lambda (v_43) (if (pair? v_43) ((lambda (v_44) (if (compare v_44 (quote and)) ((lambda (v_45) (if (null? v_45) ((lambda (v_46) (if (pair? v_46) ((lambda (v_47) ((lambda (g+s) ((lambda (v_48) (if (pair? v_48) ((lambda (v_49) (if (list? v_49) ((lambda (sk) ((lambda (v_50) (if (pair? v_50) ((lambda (v_51) ((lambda (fk) ((lambda (v_52) (if (pair? v_52) ((lambda (v_53) ((lambda (i) ((lambda (v_54) (if (null? v_54) (append (map (lambda (sk) sk) sk) (cons i (quote ()))) #f)) (cdr v_52))) v_53)) (car v_52)) #f)) (cdr v_50))) v_51)) (car v_50)) #f)) (cdr v_48))) v_49) #f)) (car v_48)) #f)) (cdr v_46))) v_47)) (car v_46)) #f)) (cdr v_42)) #f)) (cdr v_43)) #f)) (car v_43)) #f)) (car v_42)) #f)) (cdr v_40))) v_41)) (car v_40)) #f)) (cdr expr))))) ((lambda (v_31) (if (pair? v_31) ((lambda (v_32) ((lambda (v) ((lambda (v_33) (if (pair? v_33) ((lambda (v_34) (if (pair? v_34) ((lambda (v_35) (if (compare v_35 (quote quasiquote)) ((lambda (v_36) (if (pair? v_36) ((lambda (v_37) ((lambda (p) ((lambda (v_38) (if (null? v_38) ((lambda (v_39) ((lambda (x) (cons (rename (quote match-quasiquote)) (cons v (cons p x)))) v_39)) (cdr v_33)) #f)) (cdr v_36))) v_37)) (car v_36)) #f)) (cdr v_34)) #f)) (car v_34)) #f)) (car v_33)) #f)) (cdr v_31))) v_32)) (car v_31)) #f)) (cdr expr))))) ((lambda (v_14) (if (pair? v_14) ((lambda (v_15) ((lambda (v) ((lambda (v_16) (if (pair? v_16) ((lambda (v_17) (if (pair? v_17) ((lambda (v_18) (if (compare v_18 (quote quote)) ((lambda (v_19) (if (pair? v_19) ((lambda (v_20) ((lambda (p) ((lambda (v_21) (if (null? v_21) ((lambda (v_22) (if (pair? v_22) ((lambda (v_23) ((lambda (g+s) ((lambda (v_24) (if (pair? v_24) ((lambda (v_25) (if (list? v_25) ((lambda (sk) ((lambda (v_26) (if (pair? v_26) ((lambda (v_27) ((lambda (fk) ((lambda (v_28) (if (pair? v_28) ((lambda (v_29) ((lambda (i) ((lambda (v_30) (if (null? v_30) (cons (rename (quote if)) (cons (cons (rename (quote equal?)) (cons v (cons (cons (rename (quote quote)) (cons p (quote ()))) (quote ())))) (cons (append (map (lambda (sk) sk) sk) (cons i (quote ()))) (cons fk (quote ()))))) #f)) (cdr v_28))) v_29)) (car v_28)) #f)) (cdr v_26))) v_27)) (car v_26)) #f)) (cdr v_24))) v_25) #f)) (car v_24)) #f)) (cdr v_22))) v_23)) (car v_22)) #f)) (cdr v_16)) #f)) (cdr v_19))) v_20)) (car v_19)) #f)) (cdr v_17)) #f)) (car v_17)) #f)) (car v_16)) #f)) (cdr v_14))) v_15)) (car v_14)) #f)) (cdr expr))))) ((lambda (v_1) (if (pair? v_1) ((lambda (v_2) ((lambda (v) ((lambda (v_3) (if (pair? v_3) ((lambda (v_4) (if (null? v_4) ((lambda (v_5) (if (pair? v_5) ((lambda (v_6) ((lambda (g+s) ((lambda (v_7) (if (pair? v_7) ((lambda (v_8) (if (list? v_8) ((lambda (sk) ((lambda (v_9) (if (pair? v_9) ((lambda (v_10) ((lambda (fk) ((lambda (v_11) (if (pair? v_11) ((lambda (v_12) ((lambda (i) ((lambda (v_13) (if (null? v_13) (cons (rename (quote if)) (cons (cons (rename (quote null?)) (cons v (quote ()))) (cons (append (map (lambda (sk) sk) sk) (cons i (quote ()))) (cons fk (quote ()))))) #f)) (cdr v_11))) v_12)) (car v_11)) #f)) (cdr v_9))) v_10)) (car v_9)) #f)) (cdr v_7))) v_8) #f)) (car v_7)) #f)) (cdr v_5))) v_6)) (car v_5)) #f)) (cdr v_3)) #f)) (car v_3)) #f)) (cdr v_1))) v_2)) (car v_1)) #f)) (cdr expr))))))

(define-syntax match-quasiquote (er-macro-transformer (lambda (expr rename compare) ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp (error "no expansion for" (strip-syntactic-closures expr)))) ((lambda (v_121) (if (pair? v_121) ((lambda (v_122) ((lambda (v) ((lambda (v_123) (if (pair? v_123) ((lambda (v_124) ((lambda (x) ((lambda (v_125) (if (pair? v_125) ((lambda (v_126) ((lambda (g+s) ((lambda (v_127) (if (pair? v_127) ((lambda (v_128) ((lambda (sk) ((lambda (v_129) (if (pair? v_129) ((lambda (v_130) ((lambda (fk) ((lambda (v_131) (if (pair? v_131) ((lambda (v_132) ((lambda (i) ((lambda (v_133) ((lambda (depth) (cons (rename (quote match-one)) (cons v (cons (cons (rename (quote quote)) (cons x (quote ()))) (cons g+s (cons sk (cons fk (cons i (quote ()))))))))) v_133)) (cdr v_131))) v_132)) (car v_131)) #f)) (cdr v_129))) v_130)) (car v_129)) #f)) (cdr v_127))) v_128)) (car v_127)) #f)) (cdr v_125))) v_126)) (car v_125)) #f)) (cdr v_123))) v_124)) (car v_123)) #f)) (cdr v_121))) v_122)) (car v_121)) #f)) (cdr expr))))) ((lambda (v_107) (if (pair? v_107) ((lambda (v_108) ((lambda (v) ((lambda (v_109) (if (pair? v_109) ((lambda (v_110) (if (vector? v_110) ((lambda (v_111) (if (list? v_111) ((lambda (elt) ((lambda (v_112) (if (pair? v_112) ((lambda (v_113) ((lambda (g+s) ((lambda (v_114) (if (pair? v_114) ((lambda (v_115) ((lambda (sk) ((lambda (v_116) (if (pair? v_116) ((lambda (v_117) ((lambda (fk) ((lambda (v_118) (if (pair? v_118) ((lambda (v_119) ((lambda (i) ((lambda (v_120) ((lambda (depth) (cons (rename (quote if)) (cons (cons (rename (quote vector?)) (cons v (quote ()))) (cons (cons (rename (quote let)) (cons (cons (cons (rename (quote ls)) (cons (cons (rename (quote vector->list)) (cons v (quote ()))) (quote ()))) (quote ())) (cons (cons (rename (quote match-quasiquote)) (cons (rename (quote ls)) (cons (map (lambda (elt) elt) elt) (cons g+s (cons sk (cons fk (cons i depth))))))) (quote ())))) (cons fk (quote ())))))) v_120)) (cdr v_118))) v_119)) (car v_118)) #f)) (cdr v_116))) v_117)) (car v_116)) #f)) (cdr v_114))) v_115)) (car v_114)) #f)) (cdr v_112))) v_113)) (car v_112)) #f)) (cdr v_109))) v_111) #f)) (vector->list v_110)) #f)) (car v_109)) #f)) (cdr v_107))) v_108)) (car v_107)) #f)) (cdr expr))))) ((lambda (v_92) (if (pair? v_92) ((lambda (v_93) ((lambda (v) ((lambda (v_94) (if (pair? v_94) ((lambda (v_95) (if (pair? v_95) ((lambda (v_96) ((lambda (p) ((lambda (v_97) ((lambda (q) ((lambda (v_98) (if (pair? v_98) ((lambda (v_99) ((lambda (g+s) ((lambda (v_100) (if (pair? v_100) ((lambda (v_101) ((lambda (sk) ((lambda (v_102) (if (pair? v_102) ((lambda (v_103) ((lambda (fk) ((lambda (v_104) (if (pair? v_104) ((lambda (v_105) ((lambda (i) ((lambda (v_106) ((lambda (depth) (cons (rename (quote if)) (cons (cons (rename (quote pair?)) (cons v (quote ()))) (cons (cons (rename (quote let)) (cons (cons (cons (rename (quote w)) (cons (cons (rename (quote car)) (cons v (quote ()))) (quote ()))) (cons (cons (rename (quote x)) (cons (cons (rename (quote cdr)) (cons v (quote ()))) (quote ()))) (quote ()))) (cons (cons (rename (quote match-quasiquote)) (cons (rename (quote w)) (cons p (cons g+s (cons (cons (rename (quote match-quasiquote-step)) (cons (rename (quote x)) (cons q (cons g+s (cons sk (cons fk (cons depth (quote ())))))))) (cons fk (cons i depth))))))) (quote ())))) (cons fk (quote ())))))) v_106)) (cdr v_104))) v_105)) (car v_104)) #f)) (cdr v_102))) v_103)) (car v_102)) #f)) (cdr v_100))) v_101)) (car v_100)) #f)) (cdr v_98))) v_99)) (car v_98)) #f)) (cdr v_94))) v_97)) (cdr v_95))) v_96)) (car v_95)) #f)) (car v_94)) #f)) (cdr v_92))) v_93)) (car v_92)) #f)) (cdr expr))))) ((lambda (v_73) (if (pair? v_73) ((lambda (v_74) ((lambda (v) ((lambda (v_75) (if (pair? v_75) ((lambda (v_76) (if (pair? v_76) ((lambda (v_77) (if (compare v_77 (quote unquote-splicing)) ((lambda (v_78) (if (pair? v_78) ((lambda (v_79) ((lambda (p) ((lambda (v_80) (if (null? v_80) ((lambda (v_81) (if (pair? v_81) ((lambda (v_82) ((lambda (g+s) ((lambda (v_83) (if (pair? v_83) ((lambda (v_84) ((lambda (sk) ((lambda (v_85) (if (pair? v_85) ((lambda (v_86) ((lambda (fk) ((lambda (v_87) (if (pair? v_87) ((lambda (v_88) ((lambda (i) ((lambda (v_89) (if (pair? v_89) ((lambda (v_90) ((lambda (x) ((lambda (v_91) ((lambda (depth) (cons (rename (quote match-quasiquote)) (cons v (cons p (cons g+s (cons sk (cons fk (cons i depth)))))))) v_91)) (cdr v_89))) v_90)) (car v_89)) #f)) (cdr v_87))) v_88)) (car v_87)) #f)) (cdr v_85))) v_86)) (car v_85)) #f)) (cdr v_83))) v_84)) (car v_83)) #f)) (cdr v_81))) v_82)) (car v_81)) #f)) (cdr v_75)) #f)) (cdr v_78))) v_79)) (car v_78)) #f)) (cdr v_76)) #f)) (car v_76)) #f)) (car v_75)) #f)) (cdr v_73))) v_74)) (car v_73)) #f)) (cdr expr))))) ((lambda (v_54) (if (pair? v_54) ((lambda (v_55) ((lambda (v) ((lambda (v_56) (if (pair? v_56) ((lambda (v_57) (if (pair? v_57) ((lambda (v_58) (if (compare v_58 (quote unquote)) ((lambda (v_59) (if (pair? v_59) ((lambda (v_60) ((lambda (p) ((lambda (v_61) (if (null? v_61) ((lambda (v_62) (if (pair? v_62) ((lambda (v_63) ((lambda (g+s) ((lambda (v_64) (if (pair? v_64) ((lambda (v_65) ((lambda (sk) ((lambda (v_66) (if (pair? v_66) ((lambda (v_67) ((lambda (fk) ((lambda (v_68) (if (pair? v_68) ((lambda (v_69) ((lambda (i) ((lambda (v_70) (if (pair? v_70) ((lambda (v_71) ((lambda (x) ((lambda (v_72) ((lambda (depth) (cons (rename (quote match-quasiquote)) (cons v (cons p (cons g+s (cons sk (cons fk (cons i depth)))))))) v_72)) (cdr v_70))) v_71)) (car v_70)) #f)) (cdr v_68))) v_69)) (car v_68)) #f)) (cdr v_66))) v_67)) (car v_66)) #f)) (cdr v_64))) v_65)) (car v_64)) #f)) (cdr v_62))) v_63)) (car v_62)) #f)) (cdr v_56)) #f)) (cdr v_59))) v_60)) (car v_59)) #f)) (cdr v_57)) #f)) (car v_57)) #f)) (car v_56)) #f)) (cdr v_54))) v_55)) (car v_54)) #f)) (cdr expr))))) ((lambda (v_37) (if (pair? v_37) ((lambda (v_38) ((lambda (v) ((lambda (v_39) (if (pair? v_39) ((lambda (v_40) (if (pair? v_40) ((lambda (v_41) (if (compare v_41 (quote quasiquote)) ((lambda (v_42) (if (pair? v_42) ((lambda (v_43) ((lambda (p) ((lambda (v_44) (if (null? v_44) ((lambda (v_45) (if (pair? v_45) ((lambda (v_46) ((lambda (g+s) ((lambda (v_47) (if (pair? v_47) ((lambda (v_48) ((lambda (sk) ((lambda (v_49) (if (pair? v_49) ((lambda (v_50) ((lambda (fk) ((lambda (v_51) (if (pair? v_51) ((lambda (v_52) ((lambda (i) ((lambda (v_53) ((lambda (depth) (cons (rename (quote match-quasiquote)) (cons v (cons p (cons g+s (cons sk (cons fk (cons i (cons #f depth))))))))) v_53)) (cdr v_51))) v_52)) (car v_51)) #f)) (cdr v_49))) v_50)) (car v_49)) #f)) (cdr v_47))) v_48)) (car v_47)) #f)) (cdr v_45))) v_46)) (car v_45)) #f)) (cdr v_39)) #f)) (cdr v_42))) v_43)) (car v_42)) #f)) (cdr v_40)) #f)) (car v_40)) #f)) (car v_39)) #f)) (cdr v_37))) v_38)) (car v_37)) #f)) (cdr expr))))) ((lambda (v_18) (if (pair? v_18) ((lambda (v_19) ((lambda (v) ((lambda (v_20) (if (pair? v_20) ((lambda (v_21) (if (pair? v_21) ((lambda (v_22) (if (pair? v_22) ((lambda (v_23) (if (compare v_23 (quote unquote-splicing)) ((lambda (v_24) (if (pair? v_24) ((lambda (v_25) ((lambda (p) ((lambda (v_26) (if (null? v_26) ((lambda (v_27) ((lambda (rest) ((lambda (v_28) (if (pair? v_28) ((lambda (v_29) ((lambda (g+s) ((lambda (v_30) (if (pair? v_30) ((lambda (v_31) ((lambda (sk) ((lambda (v_32) (if (pair? v_32) ((lambda (v_33) ((lambda (fk) ((lambda (v_34) (if (pair? v_34) ((lambda (v_35) ((lambda (i) ((lambda (v_36) (if (null? v_36) (cons (rename (quote if)) (cons (cons (rename (quote pair?)) (cons v (quote ()))) (cons (cons (rename (quote match-one)) (cons v (cons (cons p (rename (quote tmp))) (cons (cons (rename (quote match-quasiquote)) (cons (rename (quote tmp)) (cons rest (cons g+s (cons sk (cons fk (quote ()))))))) (cons fk (cons i (quote ()))))))) (cons fk (quote ()))))) #f)) (cdr v_34))) v_35)) (car v_34)) #f)) (cdr v_32))) v_33)) (car v_32)) #f)) (cdr v_30))) v_31)) (car v_30)) #f)) (cdr v_28))) v_29)) (car v_28)) #f)) (cdr v_20))) v_27)) (cdr v_21)) #f)) (cdr v_24))) v_25)) (car v_24)) #f)) (cdr v_22)) #f)) (car v_22)) #f)) (car v_21)) #f)) (car v_20)) #f)) (cdr v_18))) v_19)) (car v_18)) #f)) (cdr expr))))) ((lambda (v_1) (if (pair? v_1) ((lambda (v_2) ((lambda (v) ((lambda (v_3) (if (pair? v_3) ((lambda (v_4) (if (pair? v_4) ((lambda (v_5) (if (compare v_5 (quote unquote)) ((lambda (v_6) (if (pair? v_6) ((lambda (v_7) ((lambda (p) ((lambda (v_8) (if (null? v_8) ((lambda (v_9) (if (pair? v_9) ((lambda (v_10) ((lambda (g+s) ((lambda (v_11) (if (pair? v_11) ((lambda (v_12) ((lambda (sk) ((lambda (v_13) (if (pair? v_13) ((lambda (v_14) ((lambda (fk) ((lambda (v_15) (if (pair? v_15) ((lambda (v_16) ((lambda (i) ((lambda (v_17) (if (null? v_17) (cons (rename (quote match-one)) (cons v (cons p (cons g+s (cons sk (cons fk (cons i (quote ())))))))) #f)) (cdr v_15))) v_16)) (car v_15)) #f)) (cdr v_13))) v_14)) (car v_13)) #f)) (cdr v_11))) v_12)) (car v_11)) #f)) (cdr v_9))) v_10)) (car v_9)) #f)) (cdr v_3)) #f)) (cdr v_6))) v_7)) (car v_6)) #f)) (cdr v_4)) #f)) (car v_4)) #f)) (car v_3)) #f)) (cdr v_1))) v_2)) (car v_1)) #f)) (cdr expr))))))

(define-syntax match-quasiquote-step (er-macro-transformer (lambda (expr rename compare) ((lambda (tmp) (if tmp tmp (error "no expansion for" (strip-syntactic-closures expr)))) ((lambda (v_1) (if (pair? v_1) ((lambda (v_2) ((lambda (x) ((lambda (v_3) (if (pair? v_3) ((lambda (v_4) ((lambda (q) ((lambda (v_5) (if (pair? v_5) ((lambda (v_6) ((lambda (g+s) ((lambda (v_7) (if (pair? v_7) ((lambda (v_8) ((lambda (sk) ((lambda (v_9) (if (pair? v_9) ((lambda (v_10) ((lambda (fk) ((lambda (v_11) (if (pair? v_11) ((lambda (v_12) ((lambda (depth) ((lambda (v_13) (if (pair? v_13) ((lambda (v_14) ((lambda (i) ((lambda (v_15) (if (null? v_15) (cons (rename (quote match-quasiquote)) (cons x (cons q (cons g+s (cons sk (cons fk (cons i depth))))))) #f)) (cdr v_13))) v_14)) (car v_13)) #f)) (cdr v_11))) v_12)) (car v_11)) #f)) (cdr v_9))) v_10)) (car v_9)) #f)) (cdr v_7))) v_8)) (car v_7)) #f)) (cdr v_5))) v_6)) (car v_5)) #f)) (cdr v_3))) v_4)) (car v_3)) #f)) (cdr v_1))) v_2)) (car v_1)) #f)) (cdr expr))))))

(define-syntax match-drop-ids (er-macro-transformer (lambda (expr rename compare) ((lambda (tmp) (if tmp tmp (error "no expansion for" (strip-syntactic-closures expr)))) ((lambda (v_1) (if (pair? v_1) ((lambda (v_2) ((lambda (expr) ((lambda (v_3) (if (list? v_3) ((lambda (ids) expr) v_3) #f)) (cdr v_1))) v_2)) (car v_1)) #f)) (cdr expr))))))

(define-syntax match-drop-first-arg (er-macro-transformer (lambda (expr rename compare) ((lambda (tmp) (if tmp tmp (error "no expansion for" (strip-syntactic-closures expr)))) ((lambda (v_1) (if (pair? v_1) ((lambda (v_2) ((lambda (arg) ((lambda (v_3) (if (pair? v_3) ((lambda (v_4) ((lambda (expr) ((lambda (v_5) (if (null? v_5) expr #f)) (cdr v_3))) v_4)) (car v_3)) #f)) (cdr v_1))) v_2)) (car v_1)) #f)) (cdr expr))))))

(define-syntax match-gen-or (er-macro-transformer (lambda (expr rename compare) ((lambda (tmp) (if tmp tmp (error "no expansion for" (strip-syntactic-closures expr)))) ((lambda (v_1) (if (pair? v_1) ((lambda (v_2) ((lambda (v) ((lambda (v_3) (if (pair? v_3) ((lambda (v_4) ((lambda (p) ((lambda (v_5) (if (pair? v_5) ((lambda (v_6) ((lambda (g+s) ((lambda (v_7) (if (pair? v_7) ((lambda (v_8) (if (list? v_8) ((lambda (sk) ((lambda (v_9) (if (pair? v_9) ((lambda (v_10) ((lambda (fk) ((lambda (v_11) (if (pair? v_11) ((lambda (v_12) (if (list? v_12) ((lambda (i) ((lambda (v_13) (if (pair? v_13) ((lambda (v_14) ((lambda () (define lp #f) (set! lp (lambda (v_15 id-ls id-ls-ls) (if (null? v_15) ((lambda (id id-ls) ((lambda (v_21) (if (null? v_21) (cons (rename (quote let)) (cons (cons (cons (rename (quote sk2)) (cons (cons (rename (quote lambda)) (cons (map (lambda (id) id) id) (cons (append (map (lambda (sk) sk) sk) (cons (append (map (lambda (i) i) i) (map (lambda (id) id) id)) (quote ()))) (quote ())))) (quote ()))) (quote ())) (cons (cons (rename (quote match-gen-or-step)) (cons v (cons p (cons g+s (cons (cons (rename (quote match-drop-ids)) (cons (cons (rename (quote sk2)) (map (lambda (id) id) id)) (quote ()))) (cons fk (cons (map (lambda (i) i) i) (quote ())))))))) (quote ())))) #f)) (cdr v_13))) (reverse id-ls) (reverse id-ls-ls)) (if (pair? v_15) ((lambda (v_16) (if (pair? v_16) ((lambda (v_17) ((lambda (id) ((lambda (v_18) (if (pair? v_18) ((lambda (v_19) ((lambda (id-ls_1) ((lambda (v_20) (if (null? v_20) (lp (cdr v_15) (cons id id-ls) (cons id-ls_1 id-ls-ls)) #f)) (cdr v_18))) v_19)) (car v_18)) #f)) (cdr v_16))) v_17)) (car v_16)) #f)) (car v_15)) #f)))) nil (lp v_14 () ())))) (car v_13)) #f)) (cdr v_11))) v_12) #f)) (car v_11)) #f)) (cdr v_9))) v_10)) (car v_9)) #f)) (cdr v_7))) v_8) #f)) (car v_7)) #f)) (cdr v_5))) v_6)) (car v_5)) #f)) (cdr v_3))) v_4)) (car v_3)) #f)) (cdr v_1))) v_2)) (car v_1)) #f)) (cdr expr))))))

(define-syntax match-gen-or-step (er-macro-transformer (lambda (expr rename compare) ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp (error "no expansion for" (strip-syntactic-closures expr)))) ((lambda (v_19) (if (pair? v_19) ((lambda (v_20) ((lambda (v) ((lambda (v_21) (if (pair? v_21) ((lambda (v_22) (if (pair? v_22) ((lambda (v_23) ((lambda (p) ((lambda (v_24) ((lambda (q) ((lambda (v_25) (if (pair? v_25) ((lambda (v_26) ((lambda (g+s) ((lambda (v_27) (if (pair? v_27) ((lambda (v_28) ((lambda (sk) ((lambda (v_29) (if (pair? v_29) ((lambda (v_30) ((lambda (fk) ((lambda (v_31) (if (pair? v_31) ((lambda (v_32) ((lambda (i) ((lambda (v_33) (if (null? v_33) (cons (rename (quote match-one)) (cons v (cons p (cons g+s (cons sk (cons (cons (rename (quote match-gen-or-step)) (cons v (cons q (cons g+s (cons sk (cons fk (cons i (quote ())))))))) (cons i (quote ())))))))) #f)) (cdr v_31))) v_32)) (car v_31)) #f)) (cdr v_29))) v_30)) (car v_29)) #f)) (cdr v_27))) v_28)) (car v_27)) #f)) (cdr v_25))) v_26)) (car v_25)) #f)) (cdr v_21))) v_24)) (cdr v_22))) v_23)) (car v_22)) #f)) (car v_21)) #f)) (cdr v_19))) v_20)) (car v_19)) #f)) (cdr expr))))) ((lambda (v_12) (if (pair? v_12) ((lambda (v_13) ((lambda (v) ((lambda (v_14) (if (pair? v_14) ((lambda (v_15) (if (pair? v_15) ((lambda (v_16) ((lambda (p) ((lambda (v_17) (if (null? v_17) ((lambda (v_18) ((lambda (x) (cons (rename (quote match-one)) (cons v (cons p x)))) v_18)) (cdr v_14)) #f)) (cdr v_15))) v_16)) (car v_15)) #f)) (car v_14)) #f)) (cdr v_12))) v_13)) (car v_12)) #f)) (cdr expr))))) ((lambda (v_1) (if (pair? v_1) ((lambda (v_2) ((lambda (v) ((lambda (v_3) (if (pair? v_3) ((lambda (v_4) (if (null? v_4) ((lambda (v_5) (if (pair? v_5) ((lambda (v_6) ((lambda (g+s) ((lambda (v_7) (if (pair? v_7) ((lambda (v_8) ((lambda (sk) ((lambda (v_9) (if (pair? v_9) ((lambda (v_10) ((lambda (fk) ((lambda (v_11) ((lambda (x) fk) v_11)) (cdr v_9))) v_10)) (car v_9)) #f)) (cdr v_7))) v_8)) (car v_7)) #f)) (cdr v_5))) v_6)) (car v_5)) #f)) (cdr v_3)) #f)) (car v_3)) #f)) (cdr v_1))) v_2)) (car v_1)) #f)) (cdr expr))))))

(define-syntax match-gen-ellipses (er-macro-transformer (lambda (expr rename compare) ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp (error "no expansion for" (strip-syntactic-closures expr)))) ((lambda (v_24) (if (pair? v_24) ((lambda (v_25) ((lambda (v) ((lambda (v_26) (if (pair? v_26) ((lambda (v_27) ((lambda (p) ((lambda (v_28) (if (pair? v_28) ((lambda (v_29) ((lambda (r) ((lambda (v_30) (if (pair? v_30) ((lambda (v_31) ((lambda (g+s) ((lambda (v_32) (if (pair? v_32) ((lambda (v_33) (if (list? v_33) ((lambda (sk) ((lambda (v_34) (if (pair? v_34) ((lambda (v_35) ((lambda (fk) ((lambda (v_36) (if (pair? v_36) ((lambda (v_37) ((lambda (i) ((lambda (v_38) (if (pair? v_38) ((lambda (v_39) ((lambda () (define lp #f) (set! lp (lambda (v_40 id-ls id-ls-ls) (if (null? v_40) ((lambda (id id-ls) ((lambda (v_46) (if (null? v_46) (cons (rename (quote match-verify-no-ellipses)) (cons r (cons (cons (rename (quote let*)) (cons (cons (cons (rename (quote tail-len)) (cons (cons (rename (quote length)) (cons (cons (rename (quote quote)) (cons r (quote ()))) (quote ()))) (quote ()))) (cons (cons (rename (quote ls)) (cons v (quote ()))) (cons (cons (rename (quote len)) (cons (cons (rename (quote length)) (cons (rename (quote ls)) (quote ()))) (quote ()))) (quote ())))) (cons (cons (rename (quote if)) (cons (cons (rename (quote <)) (cons (rename (quote len)) (cons (rename (quote tail-len)) (quote ())))) (cons fk (cons (cons (rename (quote let)) (cons (rename (quote loop)) (cons (cons (cons (rename (quote ls)) (cons (rename (quote ls)) (quote ()))) (cons (cons (rename (quote n)) (cons (rename (quote len)) (quote ()))) (map (lambda (id-ls) (cons id-ls (cons (cons (rename (quote quote)) (cons (quote ()) (quote ()))) (quote ())))) id-ls))) (cons (cons (rename (quote cond)) (cons (cons (cons (rename (quote =)) (cons (rename (quote n)) (cons (rename (quote tail-len)) (quote ())))) (cons (cons (rename (quote let)) (cons (map (lambda (id id-ls) (cons id (cons (cons (rename (quote reverse)) (cons id-ls (quote ()))) (quote ())))) id id-ls) (cons (cons (rename (quote match-one)) (cons (rename (quote ls)) (cons r (cons (cons #f (cons #f (quote ()))) (cons (append (map (lambda (sk) sk) sk) (cons i (quote ()))) (cons fk (cons i (quote ())))))))) (quote ())))) (quote ()))) (cons (cons (cons (rename (quote pair?)) (cons (rename (quote ls)) (quote ()))) (cons (cons (rename (quote let)) (cons (cons (cons (rename (quote w)) (cons (cons (rename (quote car)) (cons (rename (quote ls)) (quote ()))) (quote ()))) (quote ())) (cons (cons (rename (quote match-one)) (cons (rename (quote w)) (cons p (cons (cons (cons (rename (quote car)) (cons (rename (quote ls)) (quote ()))) (cons (cons (rename (quote set-car!)) (cons (rename (quote ls)) (quote ()))) (quote ()))) (cons (cons (rename (quote match-drop-ids)) (cons (cons (rename (quote loop)) (cons (cons (rename (quote cdr)) (cons (rename (quote ls)) (quote ()))) (cons (cons (rename (quote -)) (cons (rename (quote n)) (cons 1 (quote ())))) (map (lambda (id id-ls) (cons (rename (quote cons)) (cons id (cons id-ls (quote ()))))) id id-ls)))) (quote ()))) (cons fk (cons i (quote ())))))))) (quote ())))) (quote ()))) (cons (cons (rename (quote else)) (cons fk (quote ()))) (quote ()))))) (quote ()))))) (quote ()))))) (quote ())))) (quote ())))) #f)) (cdr v_38))) (reverse id-ls) (reverse id-ls-ls)) (if (pair? v_40) ((lambda (v_41) (if (pair? v_41) ((lambda (v_42) ((lambda (id) ((lambda (v_43) (if (pair? v_43) ((lambda (v_44) ((lambda (id-ls_1) ((lambda (v_45) (if (null? v_45) (lp (cdr v_40) (cons id id-ls) (cons id-ls_1 id-ls-ls)) #f)) (cdr v_43))) v_44)) (car v_43)) #f)) (cdr v_41))) v_42)) (car v_41)) #f)) (car v_40)) #f)))) nil (lp v_39 () ())))) (car v_38)) #f)) (cdr v_36))) v_37)) (car v_36)) #f)) (cdr v_34))) v_35)) (car v_34)) #f)) (cdr v_32))) v_33) #f)) (car v_32)) #f)) (cdr v_30))) v_31)) (car v_30)) #f)) (cdr v_28))) v_29)) (car v_28)) #f)) (cdr v_26))) v_27)) (car v_26)) #f)) (cdr v_24))) v_25)) (car v_24)) #f)) (cdr expr))))) ((lambda (v_1) (if (pair? v_1) ((lambda (v_2) ((lambda (v) ((lambda (v_3) (if (pair? v_3) ((lambda (v_4) ((lambda (p) ((lambda (v_5) (if (pair? v_5) ((lambda (v_6) (if (null? v_6) ((lambda (v_7) (if (pair? v_7) ((lambda (v_8) ((lambda (g+s) ((lambda (v_9) (if (pair? v_9) ((lambda (v_10) (if (list? v_10) ((lambda (sk) ((lambda (v_11) (if (pair? v_11) ((lambda (v_12) ((lambda (fk) ((lambda (v_13) (if (pair? v_13) ((lambda (v_14) ((lambda (i) ((lambda (v_15) (if (pair? v_15) ((lambda (v_16) ((lambda () (define lp #f) (set! lp (lambda (v_17 id-ls id-ls-ls) (if (null? v_17) ((lambda (id id-ls) ((lambda (v_23) (if (null? v_23) (cons (rename (quote match-check-identifier)) (cons p (cons (cons (rename (quote let)) (cons (cons (cons p (cons v (quote ()))) (quote ())) (cons (cons (rename (quote if)) (cons (cons (rename (quote list?)) (cons p (quote ()))) (cons (append (map (lambda (sk) sk) sk) (cons i (quote ()))) (cons fk (quote ()))))) (quote ())))) (cons (cons (rename (quote let)) (cons (rename (quote loop)) (cons (cons (cons (rename (quote ls)) (cons v (quote ()))) (map (lambda (id-ls) (cons id-ls (cons (cons (rename (quote quote)) (cons (quote ()) (quote ()))) (quote ())))) id-ls)) (cons (cons (rename (quote cond)) (cons (cons (cons (rename (quote null?)) (cons (rename (quote ls)) (quote ()))) (cons (cons (rename (quote let)) (cons (map (lambda (id id-ls) (cons id (cons (cons (rename (quote reverse)) (cons id-ls (quote ()))) (quote ())))) id id-ls) (cons (append (map (lambda (sk) sk) sk) (cons i (quote ()))) (quote ())))) (quote ()))) (cons (cons (cons (rename (quote pair?)) (cons (rename (quote ls)) (quote ()))) (cons (cons (rename (quote let)) (cons (cons (cons (rename (quote w)) (cons (cons (rename (quote car)) (cons (rename (quote ls)) (quote ()))) (quote ()))) (quote ())) (cons (cons (rename (quote match-one)) (cons (rename (quote w)) (cons p (cons (cons (cons (rename (quote car)) (cons (rename (quote ls)) (quote ()))) (cons (cons (rename (quote set-car!)) (cons (rename (quote ls)) (quote ()))) (quote ()))) (cons (cons (rename (quote match-drop-ids)) (cons (cons (rename (quote loop)) (cons (cons (rename (quote cdr)) (cons (rename (quote ls)) (quote ()))) (map (lambda (id id-ls) (cons (rename (quote cons)) (cons id (cons id-ls (quote ()))))) id id-ls))) (quote ()))) (cons fk (cons i (quote ())))))))) (quote ())))) (quote ()))) (cons (cons (rename (quote else)) (cons fk (quote ()))) (quote ()))))) (quote ()))))) (quote ()))))) #f)) (cdr v_15))) (reverse id-ls) (reverse id-ls-ls)) (if (pair? v_17) ((lambda (v_18) (if (pair? v_18) ((lambda (v_19) ((lambda (id) ((lambda (v_20) (if (pair? v_20) ((lambda (v_21) ((lambda (id-ls_2) ((lambda (v_22) (if (null? v_22) (lp (cdr v_17) (cons id id-ls) (cons id-ls_2 id-ls-ls)) #f)) (cdr v_20))) v_21)) (car v_20)) #f)) (cdr v_18))) v_19)) (car v_18)) #f)) (car v_17)) #f)))) nil (lp v_16 () ())))) (car v_15)) #f)) (cdr v_13))) v_14)) (car v_13)) #f)) (cdr v_11))) v_12)) (car v_11)) #f)) (cdr v_9))) v_10) #f)) (car v_9)) #f)) (cdr v_7))) v_8)) (car v_7)) #f)) (cdr v_5)) #f)) (car v_5)) #f)) (cdr v_3))) v_4)) (car v_3)) #f)) (cdr v_1))) v_2)) (car v_1)) #f)) (cdr expr))))))

(define-syntax match-verify-no-ellipses (er-macro-transformer (lambda (expr rename compare) ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp (error "no expansion for" (strip-syntactic-closures expr)))) ((lambda (v_13) (if (pair? v_13) ((lambda (v_14) ((lambda (x) ((lambda (v_15) (if (pair? v_15) ((lambda (v_16) ((lambda (sk) ((lambda (v_17) (if (null? v_17) (cons (rename (quote match-syntax-error)) (cons "dotted tail not allowed after ellipse" (cons x (quote ())))) #f)) (cdr v_15))) v_16)) (car v_15)) #f)) (cdr v_13))) v_14)) (car v_13)) #f)) (cdr expr))))) ((lambda (v_8) (if (pair? v_8) ((lambda (v_9) (if (null? v_9) ((lambda (v_10) (if (pair? v_10) ((lambda (v_11) ((lambda (sk) ((lambda (v_12) (if (null? v_12) sk #f)) (cdr v_10))) v_11)) (car v_10)) #f)) (cdr v_8)) #f)) (car v_8)) #f)) (cdr expr))))) ((lambda (v_1) (if (pair? v_1) ((lambda (v_2) (if (pair? v_2) ((lambda (v_3) ((lambda (x) ((lambda (v_4) ((lambda (y) ((lambda (v_5) (if (pair? v_5) ((lambda (v_6) ((lambda (sk) ((lambda (v_7) (if (null? v_7) (cons (rename (quote match-check-ellipse)) (cons x (cons (cons (rename (quote match-syntax-error)) (cons "multiple ellipse patterns not allowed at same level" (quote ()))) (cons (cons (rename (quote match-verify-no-ellipses)) (cons y (cons sk (quote ())))) (quote ()))))) #f)) (cdr v_5))) v_6)) (car v_5)) #f)) (cdr v_1))) v_4)) (cdr v_2))) v_3)) (car v_2)) #f)) (car v_1)) #f)) (cdr expr))))))

(define-syntax match-gen-search (er-macro-transformer (lambda (expr rename compare) ((lambda (tmp) (if tmp tmp (error "no expansion for" (strip-syntactic-closures expr)))) ((lambda (v_1) (if (pair? v_1) ((lambda (v_2) ((lambda (v) ((lambda (v_3) (if (pair? v_3) ((lambda (v_4) ((lambda (p) ((lambda (v_5) (if (pair? v_5) ((lambda (v_6) ((lambda (q) ((lambda (v_7) (if (pair? v_7) ((lambda (v_8) ((lambda (g+s) ((lambda (v_9) (if (pair? v_9) ((lambda (v_10) ((lambda (sk) ((lambda (v_11) (if (pair? v_11) ((lambda (v_12) ((lambda (fk) ((lambda (v_13) (if (pair? v_13) ((lambda (v_14) ((lambda (i) ((lambda (v_15) (if (pair? v_15) ((lambda (v_16) ((lambda () (define lp #f) (set! lp (lambda (v_17 id-ls id-ls-ls) (if (null? v_17) ((lambda (id id-ls) ((lambda (v_23) (if (null? v_23) (cons (rename (quote letrec)) (cons (cons (cons (rename (quote try)) (cons (cons (rename (quote lambda)) (cons (cons (rename (quote w)) (cons (rename (quote fail)) (map (lambda (id-ls) id-ls) id-ls))) (cons (cons (rename (quote match-one)) (cons (rename (quote w)) (cons q (cons g+s (cons (cons (rename (quote match-drop-ids)) (cons (cons (rename (quote let)) (cons (map (lambda (id id-ls) (cons id (cons (cons (rename (quote reverse)) (cons id-ls (quote ()))) (quote ())))) id id-ls) (cons sk (quote ())))) (quote ()))) (cons (cons (rename (quote next)) (cons (rename (quote w)) (cons (rename (quote fail)) (map (lambda (id-ls) id-ls) id-ls)))) (cons i (quote ())))))))) (quote ())))) (quote ()))) (cons (cons (rename (quote next)) (cons (cons (rename (quote lambda)) (cons (cons (rename (quote w)) (cons (rename (quote fail)) (map (lambda (id-ls) id-ls) id-ls))) (cons (cons (rename (quote if)) (cons (cons (rename (quote not)) (cons (cons (rename (quote pair?)) (cons (rename (quote w)) (quote ()))) (quote ()))) (cons (cons (rename (quote fail)) (quote ())) (cons (cons (rename (quote let)) (cons (cons (cons (rename (quote u)) (cons (cons (rename (quote car)) (cons (rename (quote w)) (quote ()))) (quote ()))) (quote ())) (cons (cons (rename (quote match-one)) (cons (rename (quote u)) (cons p (cons (cons (cons (rename (quote car)) (cons (rename (quote w)) (quote ()))) (cons (cons (rename (quote set-car!)) (cons (rename (quote w)) (quote ()))) (quote ()))) (cons (cons (rename (quote match-drop-ids)) (cons (cons (rename (quote let)) (cons (map (lambda (id id-ls) (cons id-ls (cons (cons (rename (quote cons)) (cons id (cons id-ls (quote ())))) (quote ())))) id id-ls) (cons (cons (rename (quote let)) (cons (rename (quote lp)) (cons (cons (cons (rename (quote ls)) (cons (cons (rename (quote cdr)) (cons (rename (quote w)) (quote ()))) (quote ()))) (quote ())) (cons (cons (rename (quote if)) (cons (cons (rename (quote pair?)) (cons (rename (quote ls)) (quote ()))) (cons (cons (rename (quote try)) (cons (cons (rename (quote car)) (cons (rename (quote ls)) (quote ()))) (cons (cons (rename (quote lambda)) (cons (quote ()) (cons (cons (rename (quote lp)) (cons (cons (rename (quote cdr)) (cons (rename (quote ls)) (quote ()))) (quote ()))) (quote ())))) (map (lambda (id-ls) id-ls) id-ls)))) (cons (cons (rename (quote fail)) (quote ())) (quote ()))))) (quote ()))))) (quote ())))) (quote ()))) (cons (cons (rename (quote fail)) (quote ())) (cons i (quote ())))))))) (quote ())))) (quote ()))))) (quote ())))) (quote ()))) (quote ()))) (cons (cons (rename (quote let)) (cons (map (lambda (id-ls) (cons id-ls (cons (cons (rename (quote quote)) (cons (quote ()) (quote ()))) (quote ())))) id-ls) (cons (cons (rename (quote try)) (cons v (cons (cons (rename (quote lambda)) (cons (quote ()) (cons fk (quote ())))) (map (lambda (id-ls) id-ls) id-ls)))) (quote ())))) (quote ())))) #f)) (cdr v_15))) (reverse id-ls) (reverse id-ls-ls)) (if (pair? v_17) ((lambda (v_18) (if (pair? v_18) ((lambda (v_19) ((lambda (id) ((lambda (v_20) (if (pair? v_20) ((lambda (v_21) ((lambda (id-ls_1) ((lambda (v_22) (if (null? v_22) (lp (cdr v_17) (cons id id-ls) (cons id-ls_1 id-ls-ls)) #f)) (cdr v_20))) v_21)) (car v_20)) #f)) (cdr v_18))) v_19)) (car v_18)) #f)) (car v_17)) #f)))) nil (lp v_16 () ())))) (car v_15)) #f)) (cdr v_13))) v_14)) (car v_13)) #f)) (cdr v_11))) v_12)) (car v_11)) #f)) (cdr v_9))) v_10)) (car v_9)) #f)) (cdr v_7))) v_8)) (car v_7)) #f)) (cdr v_5))) v_6)) (car v_5)) #f)) (cdr v_3))) v_4)) (car v_3)) #f)) (cdr v_1))) v_2)) (car v_1)) #f)) (cdr expr))))))

(define-syntax match-vector (er-macro-transformer (lambda (expr rename compare) ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp (error "no expansion for" (strip-syntactic-closures expr)))) ((lambda (v_33) ((lambda (x) (cons (rename (quote match-vector-two)) x)) v_33)) (cdr expr))))) ((lambda (v_14) (if (pair? v_14) ((lambda (v_15) ((lambda (v) ((lambda (v_16) (if (pair? v_16) ((lambda (v_17) ((lambda (n) ((lambda (v_18) (if (pair? v_18) ((lambda (v_19) ((lambda (pats) ((lambda (v_20) (if (pair? v_20) ((lambda (v_21) (if (pair? v_21) ((lambda (v_22) ((lambda (p) ((lambda (v_23) (if (pair? v_23) ((lambda (v_24) (if (compare v_24 (quote ___)) ((lambda (v_25) (if (null? v_25) ((lambda (v_26) (if (pair? v_26) ((lambda (v_27) ((lambda (sk) ((lambda (v_28) (if (pair? v_28) ((lambda (v_29) ((lambda (fk) ((lambda (v_30) (if (pair? v_30) ((lambda (v_31) ((lambda (i) ((lambda (v_32) (if (null? v_32) (cons (rename (quote match-gen-vector-ellipses)) (cons v (cons n (cons pats (cons p (cons sk (cons fk (cons i (quote ()))))))))) #f)) (cdr v_30))) v_31)) (car v_30)) #f)) (cdr v_28))) v_29)) (car v_28)) #f)) (cdr v_26))) v_27)) (car v_26)) #f)) (cdr v_20)) #f)) (cdr v_23)) #f)) (car v_23)) #f)) (cdr v_21))) v_22)) (car v_21)) #f)) (car v_20)) #f)) (cdr v_18))) v_19)) (car v_18)) #f)) (cdr v_16))) v_17)) (car v_16)) #f)) (cdr v_14))) v_15)) (car v_14)) #f)) (cdr expr))))) ((lambda (v_1) (if (pair? v_1) ((lambda (v_2) ((lambda (v) ((lambda (v_3) (if (pair? v_3) ((lambda (v_4) ((lambda (n) ((lambda (v_5) (if (pair? v_5) ((lambda (v_6) ((lambda (pats) ((lambda (v_7) (if (pair? v_7) ((lambda (v_8) (if (pair? v_8) ((lambda (v_9) ((lambda (p) ((lambda (v_10) (if (pair? v_10) ((lambda (v_11) ((lambda (q) ((lambda (v_12) (if (null? v_12) ((lambda (v_13) ((lambda (x) (cons (rename (quote match-check-ellipse)) (cons q (cons (cons (rename (quote match-gen-vector-ellipses)) (cons v (cons n (cons pats (cons p x))))) (cons (cons (rename (quote match-vector-two)) (cons v (cons n (cons pats (cons (cons p (cons q (quote ()))) x))))) (quote ())))))) v_13)) (cdr v_7)) #f)) (cdr v_10))) v_11)) (car v_10)) #f)) (cdr v_8))) v_9)) (car v_8)) #f)) (car v_7)) #f)) (cdr v_5))) v_6)) (car v_5)) #f)) (cdr v_3))) v_4)) (car v_3)) #f)) (cdr v_1))) v_2)) (car v_1)) #f)) (cdr expr))))))

(define-syntax match-vector-two (er-macro-transformer (lambda (expr rename compare) ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp (error "no expansion for" (strip-syntactic-closures expr)))) ((lambda (v_22) (if (pair? v_22) ((lambda (v_23) ((lambda (v) ((lambda (v_24) (if (pair? v_24) ((lambda (v_25) ((lambda (n) ((lambda (v_26) (if (pair? v_26) ((lambda (v_27) (if (list? v_27) ((lambda (pats) ((lambda (v_28) (if (pair? v_28) ((lambda (v_29) (if (pair? v_29) ((lambda (v_30) ((lambda (p) ((lambda (v_31) ((lambda (q) ((lambda (v_32) ((lambda (x) (cons (rename (quote match-vector)) (cons v (cons (cons (rename (quote +)) (cons n (cons 1 (quote ())))) (cons (append (map (lambda (pats) pats) pats) (cons (cons p (cons n (quote ()))) (quote ()))) (cons q x)))))) v_32)) (cdr v_28))) v_31)) (cdr v_29))) v_30)) (car v_29)) #f)) (car v_28)) #f)) (cdr v_26))) v_27) #f)) (car v_26)) #f)) (cdr v_24))) v_25)) (car v_24)) #f)) (cdr v_22))) v_23)) (car v_22)) #f)) (cdr expr))))) ((lambda (v_1) (if (pair? v_1) ((lambda (v_2) ((lambda (v) ((lambda (v_3) (if (pair? v_3) ((lambda (v_4) ((lambda (n) ((lambda (v_5) (if (pair? v_5) ((lambda (v_6) ((lambda () (define lp #f) (set! lp (lambda (v_7 pat-ls index-ls) (if (null? v_7) ((lambda (pat index) ((lambda (v_13) (if (pair? v_13) ((lambda (v_14) (if (null? v_14) ((lambda (v_15) (if (pair? v_15) ((lambda (v_16) ((lambda (sk) ((lambda (v_17) (if (pair? v_17) ((lambda (v_18) ((lambda (fk) ((lambda (v_19) (if (pair? v_19) ((lambda (v_20) ((lambda (i) ((lambda (v_21) (if (null? v_21) (cons (rename (quote if)) (cons (cons (rename (quote vector?)) (cons v (quote ()))) (cons (cons (rename (quote let)) (cons (cons (cons (rename (quote len)) (cons (cons (rename (quote vector-length)) (cons v (quote ()))) (quote ()))) (quote ())) (cons (cons (rename (quote if)) (cons (cons (rename (quote =)) (cons (rename (quote len)) (cons n (quote ())))) (cons (cons (rename (quote match-vector-step)) (cons v (cons (map (lambda (pat index) (cons pat (cons index (quote ())))) pat index) (cons sk (cons fk (cons i (quote ()))))))) (cons fk (quote ()))))) (quote ())))) (cons fk (quote ()))))) #f)) (cdr v_19))) v_20)) (car v_19)) #f)) (cdr v_17))) v_18)) (car v_17)) #f)) (cdr v_15))) v_16)) (car v_15)) #f)) (cdr v_13)) #f)) (car v_13)) #f)) (cdr v_5))) (reverse pat-ls) (reverse index-ls)) (if (pair? v_7) ((lambda (v_8) (if (pair? v_8) ((lambda (v_9) ((lambda (pat) ((lambda (v_10) (if (pair? v_10) ((lambda (v_11) ((lambda (index) ((lambda (v_12) (if (null? v_12) (lp (cdr v_7) (cons pat pat-ls) (cons index index-ls)) #f)) (cdr v_10))) v_11)) (car v_10)) #f)) (cdr v_8))) v_9)) (car v_8)) #f)) (car v_7)) #f)))) nil (lp v_6 () ())))) (car v_5)) #f)) (cdr v_3))) v_4)) (car v_3)) #f)) (cdr v_1))) v_2)) (car v_1)) #f)) (cdr expr))))))

(define-syntax match-vector-step (er-macro-transformer (lambda (expr rename compare) ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp (error "no expansion for" (strip-syntactic-closures expr)))) ((lambda (v_12) (if (pair? v_12) ((lambda (v_13) ((lambda (v) ((lambda (v_14) (if (pair? v_14) ((lambda (v_15) (if (pair? v_15) ((lambda (v_16) (if (pair? v_16) ((lambda (v_17) ((lambda (pat) ((lambda (v_18) (if (pair? v_18) ((lambda (v_19) ((lambda (index) ((lambda (v_20) (if (null? v_20) ((lambda (v_21) ((lambda (rest) ((lambda (v_22) (if (pair? v_22) ((lambda (v_23) ((lambda (sk) ((lambda (v_24) (if (pair? v_24) ((lambda (v_25) ((lambda (fk) ((lambda (v_26) (if (pair? v_26) ((lambda (v_27) ((lambda (i) ((lambda (v_28) (if (null? v_28) (cons (rename (quote let)) (cons (cons (cons (rename (quote w)) (cons (cons (rename (quote vector-ref)) (cons v (cons index (quote ())))) (quote ()))) (quote ())) (cons (cons (rename (quote match-one)) (cons (rename (quote w)) (cons pat (cons (cons (cons (rename (quote vector-ref)) (cons v (cons index (quote ())))) (cons (cons (rename (quote vector-set!)) (cons v (cons index (quote ())))) (quote ()))) (cons (cons (rename (quote match-vector-step)) (cons v (cons rest (cons sk (cons fk (quote ())))))) (cons fk (cons i (quote ())))))))) (quote ())))) #f)) (cdr v_26))) v_27)) (car v_26)) #f)) (cdr v_24))) v_25)) (car v_24)) #f)) (cdr v_22))) v_23)) (car v_22)) #f)) (cdr v_14))) v_21)) (cdr v_15)) #f)) (cdr v_18))) v_19)) (car v_18)) #f)) (cdr v_16))) v_17)) (car v_16)) #f)) (car v_15)) #f)) (car v_14)) #f)) (cdr v_12))) v_13)) (car v_12)) #f)) (cdr expr))))) ((lambda (v_1) (if (pair? v_1) ((lambda (v_2) ((lambda (v) ((lambda (v_3) (if (pair? v_3) ((lambda (v_4) (if (null? v_4) ((lambda (v_5) (if (pair? v_5) ((lambda (v_6) (if (list? v_6) ((lambda (sk) ((lambda (v_7) (if (pair? v_7) ((lambda (v_8) ((lambda (fk) ((lambda (v_9) (if (pair? v_9) ((lambda (v_10) ((lambda (i) ((lambda (v_11) (if (null? v_11) (append (map (lambda (sk) sk) sk) (cons i (quote ()))) #f)) (cdr v_9))) v_10)) (car v_9)) #f)) (cdr v_7))) v_8)) (car v_7)) #f)) (cdr v_5))) v_6) #f)) (car v_5)) #f)) (cdr v_3)) #f)) (car v_3)) #f)) (cdr v_1))) v_2)) (car v_1)) #f)) (cdr expr))))))

(define-syntax match-gen-vector-ellipses (er-macro-transformer (lambda (expr rename compare) ((lambda (tmp) (if tmp tmp (error "no expansion for" (strip-syntactic-closures expr)))) ((lambda (v_1) (if (pair? v_1) ((lambda (v_2) ((lambda (v) ((lambda (v_3) (if (pair? v_3) ((lambda (v_4) ((lambda (n) ((lambda (v_5) (if (pair? v_5) ((lambda (v_6) ((lambda () (define lp #f) (set! lp (lambda (v_7 pat-ls index-ls) (if (null? v_7) ((lambda (pat index) ((lambda (v_13) (if (pair? v_13) ((lambda (v_14) ((lambda (p) ((lambda (v_15) (if (pair? v_15) ((lambda (v_16) ((lambda (sk) ((lambda (v_17) (if (pair? v_17) ((lambda (v_18) ((lambda (fk) ((lambda (v_19) (if (pair? v_19) ((lambda (v_20) ((lambda (i) ((lambda (v_21) (if (null? v_21) (cons (rename (quote if)) (cons (cons (rename (quote vector?)) (cons v (quote ()))) (cons (cons (rename (quote let)) (cons (cons (cons (rename (quote len)) (cons (cons (rename (quote vector-length)) (cons v (quote ()))) (quote ()))) (quote ())) (cons (cons (rename (quote if)) (cons (cons (rename (quote >=)) (cons (rename (quote len)) (cons n (quote ())))) (cons (cons (rename (quote match-vector-step)) (cons v (cons (map (lambda (pat index) (cons pat (cons index (quote ())))) pat index) (cons (cons (rename (quote match-vector-tail)) (cons v (cons p (cons n (cons (rename (quote len)) (cons sk (cons fk (quote ())))))))) (cons fk (cons i (quote ()))))))) (cons fk (quote ()))))) (quote ())))) (cons fk (quote ()))))) #f)) (cdr v_19))) v_20)) (car v_19)) #f)) (cdr v_17))) v_18)) (car v_17)) #f)) (cdr v_15))) v_16)) (car v_15)) #f)) (cdr v_13))) v_14)) (car v_13)) #f)) (cdr v_5))) (reverse pat-ls) (reverse index-ls)) (if (pair? v_7) ((lambda (v_8) (if (pair? v_8) ((lambda (v_9) ((lambda (pat) ((lambda (v_10) (if (pair? v_10) ((lambda (v_11) ((lambda (index) ((lambda (v_12) (if (null? v_12) (lp (cdr v_7) (cons pat pat-ls) (cons index index-ls)) #f)) (cdr v_10))) v_11)) (car v_10)) #f)) (cdr v_8))) v_9)) (car v_8)) #f)) (car v_7)) #f)))) nil (lp v_6 () ())))) (car v_5)) #f)) (cdr v_3))) v_4)) (car v_3)) #f)) (cdr v_1))) v_2)) (car v_1)) #f)) (cdr expr))))))

(define-syntax match-vector-tail (er-macro-transformer (lambda (expr rename compare) ((lambda (tmp) (if tmp tmp (error "no expansion for" (strip-syntactic-closures expr)))) ((lambda (v_1) (if (pair? v_1) ((lambda (v_2) ((lambda (v) ((lambda (v_3) (if (pair? v_3) ((lambda (v_4) ((lambda (p) ((lambda (v_5) (if (pair? v_5) ((lambda (v_6) ((lambda (n) ((lambda (v_7) (if (pair? v_7) ((lambda (v_8) ((lambda (len) ((lambda (v_9) (if (pair? v_9) ((lambda (v_10) ((lambda (sk) ((lambda (v_11) (if (pair? v_11) ((lambda (v_12) ((lambda (fk) ((lambda (v_13) (if (pair? v_13) ((lambda (v_14) ((lambda (i) ((lambda (v_15) (if (null? v_15) (cons (rename (quote match-extract-vars)) (cons p (cons (cons (rename (quote match-vector-tail-two)) (cons v (cons p (cons n (cons len (cons sk (cons fk (cons i (quote ()))))))))) (cons i (cons (quote ()) (quote ())))))) #f)) (cdr v_13))) v_14)) (car v_13)) #f)) (cdr v_11))) v_12)) (car v_11)) #f)) (cdr v_9))) v_10)) (car v_9)) #f)) (cdr v_7))) v_8)) (car v_7)) #f)) (cdr v_5))) v_6)) (car v_5)) #f)) (cdr v_3))) v_4)) (car v_3)) #f)) (cdr v_1))) v_2)) (car v_1)) #f)) (cdr expr))))))

(define-syntax match-vector-tail-two (er-macro-transformer (lambda (expr rename compare) ((lambda (tmp) (if tmp tmp (error "no expansion for" (strip-syntactic-closures expr)))) ((lambda (v_1) (if (pair? v_1) ((lambda (v_2) ((lambda (v) ((lambda (v_3) (if (pair? v_3) ((lambda (v_4) ((lambda (p) ((lambda (v_5) (if (pair? v_5) ((lambda (v_6) ((lambda (n) ((lambda (v_7) (if (pair? v_7) ((lambda (v_8) ((lambda (len) ((lambda (v_9) (if (pair? v_9) ((lambda (v_10) (if (list? v_10) ((lambda (sk) ((lambda (v_11) (if (pair? v_11) ((lambda (v_12) ((lambda (fk) ((lambda (v_13) (if (pair? v_13) ((lambda (v_14) ((lambda (i) ((lambda (v_15) (if (pair? v_15) ((lambda (v_16) ((lambda () (define lp #f) (set! lp (lambda (v_17 id-ls id-ls-ls) (if (null? v_17) ((lambda (id id-ls) ((lambda (v_23) (if (null? v_23) (cons (rename (quote let)) (cons (rename (quote loop)) (cons (cons (cons (rename (quote j)) (cons n (quote ()))) (map (lambda (id-ls) (cons id-ls (cons (cons (rename (quote quote)) (cons (quote ()) (quote ()))) (quote ())))) id-ls)) (cons (cons (rename (quote if)) (cons (cons (rename (quote >=)) (cons (rename (quote j)) (cons len (quote ())))) (cons (cons (rename (quote let)) (cons (map (lambda (id id-ls) (cons id (cons (cons (rename (quote reverse)) (cons id-ls (quote ()))) (quote ())))) id id-ls) (cons (append (map (lambda (sk) sk) sk) (cons i (quote ()))) (quote ())))) (cons (cons (rename (quote let)) (cons (cons (cons (rename (quote w)) (cons (cons (rename (quote vector-ref)) (cons v (cons (rename (quote j)) (quote ())))) (quote ()))) (quote ())) (cons (cons (rename (quote match-one)) (cons (rename (quote w)) (cons p (cons (cons (cons (rename (quote vector-ref)) (cons v (cons (rename (quote j)) (quote ())))) (cons (cons (rename (quote vetor-set!)) (cons v (cons (rename (quote j)) (quote ())))) (quote ()))) (cons (cons (rename (quote match-drop-ids)) (cons (cons (rename (quote loop)) (cons (cons (rename (quote +)) (cons (rename (quote j)) (cons 1 (quote ())))) (map (lambda (id id-ls) (cons (rename (quote cons)) (cons id (cons id-ls (quote ()))))) id id-ls))) (quote ()))) (cons fk (cons i (quote ())))))))) (quote ())))) (quote ()))))) (quote ()))))) #f)) (cdr v_15))) (reverse id-ls) (reverse id-ls-ls)) (if (pair? v_17) ((lambda (v_18) (if (pair? v_18) ((lambda (v_19) ((lambda (id) ((lambda (v_20) (if (pair? v_20) ((lambda (v_21) ((lambda (id-ls_1) ((lambda (v_22) (if (null? v_22) (lp (cdr v_17) (cons id id-ls) (cons id-ls_1 id-ls-ls)) #f)) (cdr v_20))) v_21)) (car v_20)) #f)) (cdr v_18))) v_19)) (car v_18)) #f)) (car v_17)) #f)))) nil (lp v_16 () ())))) (car v_15)) #f)) (cdr v_13))) v_14)) (car v_13)) #f)) (cdr v_11))) v_12)) (car v_11)) #f)) (cdr v_9))) v_10) #f)) (car v_9)) #f)) (cdr v_7))) v_8)) (car v_7)) #f)) (cdr v_5))) v_6)) (car v_5)) #f)) (cdr v_3))) v_4)) (car v_3)) #f)) (cdr v_1))) v_2)) (car v_1)) #f)) (cdr expr))))))

(define-syntax match-extract-vars (er-macro-transformer (lambda (expr rename compare) ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp (error "no expansion for" (strip-syntactic-closures expr)))) ((lambda (v_120) (if (pair? v_120) ((lambda (v_121) ((lambda (p) ((lambda (v_122) (if (pair? v_122) ((lambda (v_123) (if (list? v_123) ((lambda (k) ((lambda (v_124) (if (pair? v_124) ((lambda (v_125) (if (list? v_125) ((lambda (i) ((lambda (v_126) (if (pair? v_126) ((lambda (v_127) ((lambda (v) ((lambda (v_128) (if (null? v_128) (cons (rename (quote let-syntax)) (cons (cons (cons (rename (quote new-sym?)) (cons (cons (rename (quote syntax-rules)) (cons (map (lambda (i) i) i) (cons (cons (cons (rename (quote new-sym?)) (cons p (cons (rename (quote sk)) (cons (rename (quote fk)) (quote ()))))) (cons (rename (quote sk)) (quote ()))) (cons (cons (cons (rename (quote new-sym?)) (cons (rename (quote x)) (cons (rename (quote sk)) (cons (rename (quote fk)) (quote ()))))) (cons (rename (quote fk)) (quote ()))) (quote ()))))) (quote ()))) (quote ())) (cons (cons (rename (quote new-sym?)) (cons (rename (quote random-sym-to-match)) (cons (append (map (lambda (k) k) k) (cons (cons (cons p (cons (rename (quote p-ls)) (quote ()))) v) (quote ()))) (cons (append (map (lambda (k) k) k) (cons v (quote ()))) (quote ()))))) (quote ())))) #f)) (cdr v_126))) v_127)) (car v_126)) #f)) (cdr v_124))) v_125) #f)) (car v_124)) #f)) (cdr v_122))) v_123) #f)) (car v_122)) #f)) (cdr v_120))) v_121)) (car v_120)) #f)) (cdr expr))))) ((lambda (v_111) (if (pair? v_111) ((lambda (v_112) (if (compare v_112 (quote ***)) ((lambda (v_113) (if (pair? v_113) ((lambda (v_114) (if (list? v_114) ((lambda (k) ((lambda (v_115) (if (pair? v_115) ((lambda (v_116) ((lambda (i) ((lambda (v_117) (if (pair? v_117) ((lambda (v_118) ((lambda (v) ((lambda (v_119) (if (null? v_119) (append (map (lambda (k) k) k) (cons v (quote ()))) #f)) (cdr v_117))) v_118)) (car v_117)) #f)) (cdr v_115))) v_116)) (car v_115)) #f)) (cdr v_113))) v_114) #f)) (car v_113)) #f)) (cdr v_111)) #f)) (car v_111)) #f)) (cdr expr))))) ((lambda (v_102) (if (pair? v_102) ((lambda (v_103) (if (compare v_103 (quote ___)) ((lambda (v_104) (if (pair? v_104) ((lambda (v_105) (if (list? v_105) ((lambda (k) ((lambda (v_106) (if (pair? v_106) ((lambda (v_107) ((lambda (i) ((lambda (v_108) (if (pair? v_108) ((lambda (v_109) ((lambda (v) ((lambda (v_110) (if (null? v_110) (append (map (lambda (k) k) k) (cons v (quote ()))) #f)) (cdr v_108))) v_109)) (car v_108)) #f)) (cdr v_106))) v_107)) (car v_106)) #f)) (cdr v_104))) v_105) #f)) (car v_104)) #f)) (cdr v_102)) #f)) (car v_102)) #f)) (cdr expr))))) ((lambda (v_93) (if (pair? v_93) ((lambda (v_94) (if (compare v_94 (quote _)) ((lambda (v_95) (if (pair? v_95) ((lambda (v_96) (if (list? v_96) ((lambda (k) ((lambda (v_97) (if (pair? v_97) ((lambda (v_98) ((lambda (i) ((lambda (v_99) (if (pair? v_99) ((lambda (v_100) ((lambda (v) ((lambda (v_101) (if (null? v_101) (append (map (lambda (k) k) k) (cons v (quote ()))) #f)) (cdr v_99))) v_100)) (car v_99)) #f)) (cdr v_97))) v_98)) (car v_97)) #f)) (cdr v_95))) v_96) #f)) (car v_95)) #f)) (cdr v_93)) #f)) (car v_93)) #f)) (cdr expr))))) ((lambda (v_89) (if (pair? v_89) ((lambda (v_90) (if (vector? v_90) ((lambda (v_91) (if (list? v_91) ((lambda (p) ((lambda (v_92) ((lambda (x) (cons (rename (quote match-extract-vars)) (cons (map (lambda (p) p) p) x))) v_92)) (cdr v_89))) v_91) #f)) (vector->list v_90)) #f)) (car v_89)) #f)) (cdr expr))))) ((lambda (v_78) (if (pair? v_78) ((lambda (v_79) (if (pair? v_79) ((lambda (v_80) ((lambda (p) ((lambda (v_81) ((lambda (q) ((lambda (v_82) (if (pair? v_82) ((lambda (v_83) ((lambda (k) ((lambda (v_84) (if (pair? v_84) ((lambda (v_85) ((lambda (i) ((lambda (v_86) (if (pair? v_86) ((lambda (v_87) ((lambda (v) ((lambda (v_88) (if (null? v_88) (cons (rename (quote match-extract-vars)) (cons p (cons (cons (rename (quote match-extract-vars-step)) (cons q (cons k (cons i (cons v (quote ())))))) (cons i (cons (quote ()) (quote ())))))) #f)) (cdr v_86))) v_87)) (car v_86)) #f)) (cdr v_84))) v_85)) (car v_84)) #f)) (cdr v_82))) v_83)) (car v_82)) #f)) (cdr v_78))) v_81)) (cdr v_79))) v_80)) (car v_79)) #f)) (car v_78)) #f)) (cdr expr))))) ((lambda (v_65) (if (pair? v_65) ((lambda (v_66) (if (pair? v_66) ((lambda (v_67) ((lambda (p) ((lambda (v_68) (if (pair? v_68) ((lambda (v_69) ((lambda (q) ((lambda (v_70) ((lambda (r) ((lambda (v_71) (if (pair? v_71) ((lambda (v_72) ((lambda (k) ((lambda (v_73) (if (pair? v_73) ((lambda (v_74) ((lambda (i) ((lambda (v_75) (if (pair? v_75) ((lambda (v_76) ((lambda (v) ((lambda (v_77) (if (null? v_77) (cons (rename (quote match-check-ellipse)) (cons q (cons (cons (rename (quote match-extract-vars)) (cons (cons p r) (cons k (cons i (cons v (quote ())))))) (cons (cons (rename (quote match-extract-vars)) (cons p (cons (cons (rename (quote match-extract-vars-step)) (cons (cons q r) (cons k (cons i (cons v (quote ())))))) (cons i (cons (quote ()) (quote ())))))) (quote ()))))) #f)) (cdr v_75))) v_76)) (car v_75)) #f)) (cdr v_73))) v_74)) (car v_73)) #f)) (cdr v_71))) v_72)) (car v_71)) #f)) (cdr v_65))) v_70)) (cdr v_68))) v_69)) (car v_68)) #f)) (cdr v_66))) v_67)) (car v_66)) #f)) (car v_65)) #f)) (cdr expr))))) ((lambda (v_60) (if (pair? v_60) ((lambda (v_61) (if (pair? v_61) ((lambda (v_62) (if (compare v_62 (quote not)) ((lambda (v_63) ((lambda (p) ((lambda (v_64) ((lambda (x) (cons (rename (quote match-extract-vars)) (cons p x))) v_64)) (cdr v_60))) v_63)) (cdr v_61)) #f)) (car v_61)) #f)) (car v_60)) #f)) (cdr expr))))) ((lambda (v_55) (if (pair? v_55) ((lambda (v_56) (if (pair? v_56) ((lambda (v_57) (if (compare v_57 (quote or)) ((lambda (v_58) ((lambda (p) ((lambda (v_59) ((lambda (x) (cons (rename (quote match-extract-vars)) (cons p x))) v_59)) (cdr v_55))) v_58)) (cdr v_56)) #f)) (car v_56)) #f)) (car v_55)) #f)) (cdr expr))))) ((lambda (v_50) (if (pair? v_50) ((lambda (v_51) (if (pair? v_51) ((lambda (v_52) (if (compare v_52 (quote and)) ((lambda (v_53) ((lambda (p) ((lambda (v_54) ((lambda (x) (cons (rename (quote match-extract-vars)) (cons p x))) v_54)) (cdr v_50))) v_53)) (cdr v_51)) #f)) (car v_51)) #f)) (car v_50)) #f)) (cdr expr))))) ((lambda (v_37) (if (pair? v_37) ((lambda (v_38) (if (pair? v_38) ((lambda (v_39) (if (compare v_39 (quote quasiquote)) ((lambda (v_40) (if (pair? v_40) ((lambda (v_41) ((lambda (x) ((lambda (v_42) (if (null? v_42) ((lambda (v_43) (if (pair? v_43) ((lambda (v_44) ((lambda (k) ((lambda (v_45) (if (pair? v_45) ((lambda (v_46) ((lambda (i) ((lambda (v_47) (if (pair? v_47) ((lambda (v_48) ((lambda (v) ((lambda (v_49) (if (null? v_49) (cons (rename (quote match-extract-quasiquote-vars)) (cons x (cons k (cons i (cons v (cons (cons #t (quote ())) (quote ()))))))) #f)) (cdr v_47))) v_48)) (car v_47)) #f)) (cdr v_45))) v_46)) (car v_45)) #f)) (cdr v_43))) v_44)) (car v_43)) #f)) (cdr v_37)) #f)) (cdr v_40))) v_41)) (car v_40)) #f)) (cdr v_38)) #f)) (car v_38)) #f)) (car v_37)) #f)) (cdr expr))))) ((lambda (v_24) (if (pair? v_24) ((lambda (v_25) (if (pair? v_25) ((lambda (v_26) (if (compare v_26 (quote quote)) ((lambda (v_27) (if (pair? v_27) ((lambda (v_28) ((lambda (x) ((lambda (v_29) (if (null? v_29) ((lambda (v_30) (if (pair? v_30) ((lambda (v_31) (if (list? v_31) ((lambda (k) ((lambda (v_32) (if (pair? v_32) ((lambda (v_33) ((lambda (i) ((lambda (v_34) (if (pair? v_34) ((lambda (v_35) ((lambda (v) ((lambda (v_36) (if (null? v_36) (append (map (lambda (k) k) k) (cons v (quote ()))) #f)) (cdr v_34))) v_35)) (car v_34)) #f)) (cdr v_32))) v_33)) (car v_32)) #f)) (cdr v_30))) v_31) #f)) (car v_30)) #f)) (cdr v_24)) #f)) (cdr v_27))) v_28)) (car v_27)) #f)) (cdr v_25)) #f)) (car v_25)) #f)) (car v_24)) #f)) (cdr expr))))) ((lambda (v_15) (if (pair? v_15) ((lambda (v_16) (if (pair? v_16) ((lambda (v_17) (if (compare v_17 (quote =)) ((lambda (v_18) (if (pair? v_18) ((lambda (v_19) ((lambda (proc) ((lambda (v_20) (if (pair? v_20) ((lambda (v_21) ((lambda (p) ((lambda (v_22) (if (null? v_22) ((lambda (v_23) ((lambda (x) (cons (rename (quote match-extract-vars)) (cons p x))) v_23)) (cdr v_15)) #f)) (cdr v_20))) v_21)) (car v_20)) #f)) (cdr v_18))) v_19)) (car v_18)) #f)) (cdr v_16)) #f)) (car v_16)) #f)) (car v_15)) #f)) (cdr expr))))) ((lambda (v_8) (if (pair? v_8) ((lambda (v_9) (if (pair? v_9) ((lambda (v_10) (if (compare v_10 (quote $)) ((lambda (v_11) (if (pair? v_11) ((lambda (v_12) ((lambda (rec) ((lambda (v_13) ((lambda (p) ((lambda (v_14) ((lambda (x) (cons (rename (quote match-extract-vars)) (cons p x))) v_14)) (cdr v_8))) v_13)) (cdr v_11))) v_12)) (car v_11)) #f)) (cdr v_9)) #f)) (car v_9)) #f)) (car v_8)) #f)) (cdr expr))))) ((lambda (v_1) (if (pair? v_1) ((lambda (v_2) (if (pair? v_2) ((lambda (v_3) (if (compare v_3 (quote ?)) ((lambda (v_4) (if (pair? v_4) ((lambda (v_5) ((lambda (pred) ((lambda (v_6) ((lambda (p) ((lambda (v_7) ((lambda (x) (cons (rename (quote match-extract-vars)) (cons p x))) v_7)) (cdr v_1))) v_6)) (cdr v_4))) v_5)) (car v_4)) #f)) (cdr v_2)) #f)) (car v_2)) #f)) (car v_1)) #f)) (cdr expr))))))

(define-syntax match-extract-vars-step (er-macro-transformer (lambda (expr rename compare) ((lambda (tmp) (if tmp tmp (error "no expansion for" (strip-syntactic-closures expr)))) ((lambda (v_1) (if (pair? v_1) ((lambda (v_2) ((lambda (p) ((lambda (v_3) (if (pair? v_3) ((lambda (v_4) ((lambda (k) ((lambda (v_5) (if (pair? v_5) ((lambda (v_6) ((lambda (i) ((lambda (v_7) (if (pair? v_7) ((lambda (v_8) ((lambda (v) ((lambda (v_9) (if (pair? v_9) ((lambda (v_10) ((lambda () (define lp #f) (set! lp (lambda (v_11 v2-ls v2-ls-ls) (if (null? v_11) ((lambda (v2 v2-ls) ((lambda (v_17) (if (null? v_17) (cons (rename (quote match-extract-vars)) (cons p (cons k (cons (append (map (lambda (v2) v2) v2) i) (cons (append (map (lambda (v2 v2-ls) (cons v2 (cons v2-ls (quote ())))) v2 v2-ls) v) (quote ())))))) #f)) (cdr v_9))) (reverse v2-ls) (reverse v2-ls-ls)) (if (pair? v_11) ((lambda (v_12) (if (pair? v_12) ((lambda (v_13) ((lambda (v2) ((lambda (v_14) (if (pair? v_14) ((lambda (v_15) ((lambda (v2-ls_1) ((lambda (v_16) (if (null? v_16) (lp (cdr v_11) (cons v2 v2-ls) (cons v2-ls_1 v2-ls-ls)) #f)) (cdr v_14))) v_15)) (car v_14)) #f)) (cdr v_12))) v_13)) (car v_12)) #f)) (car v_11)) #f)))) nil (lp v_10 () ())))) (car v_9)) #f)) (cdr v_7))) v_8)) (car v_7)) #f)) (cdr v_5))) v_6)) (car v_5)) #f)) (cdr v_3))) v_4)) (car v_3)) #f)) (cdr v_1))) v_2)) (car v_1)) #f)) (cdr expr))))))

(define-syntax match-extract-quasiquote-vars (er-macro-transformer (lambda (expr rename compare) ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp (error "no expansion for" (strip-syntactic-closures expr)))) ((lambda (v_94) (if (pair? v_94) ((lambda (v_95) ((lambda (x) ((lambda (v_96) (if (pair? v_96) ((lambda (v_97) (if (list? v_97) ((lambda (k) ((lambda (v_98) (if (pair? v_98) ((lambda (v_99) ((lambda (i) ((lambda (v_100) (if (pair? v_100) ((lambda (v_101) ((lambda (v) ((lambda (v_102) (if (pair? v_102) ((lambda (v_103) (if (pair? v_103) ((lambda (v_104) (if (equal? v_104 #t) ((lambda (v_105) ((lambda (d) ((lambda (v_106) (if (null? v_106) (append (map (lambda (k) k) k) (cons v (quote ()))) #f)) (cdr v_102))) v_105)) (cdr v_103)) #f)) (car v_103)) #f)) (car v_102)) #f)) (cdr v_100))) v_101)) (car v_100)) #f)) (cdr v_98))) v_99)) (car v_98)) #f)) (cdr v_96))) v_97) #f)) (car v_96)) #f)) (cdr v_94))) v_95)) (car v_94)) #f)) (cdr expr))))) ((lambda (v_80) (if (pair? v_80) ((lambda (v_81) (if (vector? v_81) ((lambda (v_82) (if (list? v_82) ((lambda (x) ((lambda (v_83) (if (pair? v_83) ((lambda (v_84) ((lambda (k) ((lambda (v_85) (if (pair? v_85) ((lambda (v_86) ((lambda (i) ((lambda (v_87) (if (pair? v_87) ((lambda (v_88) ((lambda (v) ((lambda (v_89) (if (pair? v_89) ((lambda (v_90) (if (pair? v_90) ((lambda (v_91) (if (equal? v_91 #t) ((lambda (v_92) ((lambda (d) ((lambda (v_93) (if (null? v_93) (cons (rename (quote match-extract-quasiquote-vars)) (cons (map (lambda (x) x) x) (cons k (cons i (cons v (cons d (quote ()))))))) #f)) (cdr v_89))) v_92)) (cdr v_90)) #f)) (car v_90)) #f)) (car v_89)) #f)) (cdr v_87))) v_88)) (car v_87)) #f)) (cdr v_85))) v_86)) (car v_85)) #f)) (cdr v_83))) v_84)) (car v_83)) #f)) (cdr v_80))) v_82) #f)) (vector->list v_81)) #f)) (car v_80)) #f)) (cdr expr))))) ((lambda (v_65) (if (pair? v_65) ((lambda (v_66) (if (pair? v_66) ((lambda (v_67) ((lambda (x) ((lambda (v_68) ((lambda (y) ((lambda (v_69) (if (pair? v_69) ((lambda (v_70) ((lambda (k) ((lambda (v_71) (if (pair? v_71) ((lambda (v_72) ((lambda (i) ((lambda (v_73) (if (pair? v_73) ((lambda (v_74) ((lambda (v) ((lambda (v_75) (if (pair? v_75) ((lambda (v_76) (if (pair? v_76) ((lambda (v_77) (if (equal? v_77 #t) ((lambda (v_78) ((lambda (d) ((lambda (v_79) (if (null? v_79) (cons (rename (quote match-extract-quasiquote-vars)) (cons x (cons (cons (rename (quote match-extract-quasiquote-vars-step)) (cons y (cons k (cons i (cons v (cons d (quote ()))))))) (cons i (cons (quote ()) (quote ())))))) #f)) (cdr v_75))) v_78)) (cdr v_76)) #f)) (car v_76)) #f)) (car v_75)) #f)) (cdr v_73))) v_74)) (car v_73)) #f)) (cdr v_71))) v_72)) (car v_71)) #f)) (cdr v_69))) v_70)) (car v_69)) #f)) (cdr v_65))) v_68)) (cdr v_66))) v_67)) (car v_66)) #f)) (car v_65)) #f)) (cdr expr))))) ((lambda (v_48) (if (pair? v_48) ((lambda (v_49) (if (pair? v_49) ((lambda (v_50) (if (compare v_50 (quote unquote)) ((lambda (v_51) (if (pair? v_51) ((lambda (v_52) ((lambda (x) ((lambda (v_53) (if (null? v_53) ((lambda (v_54) (if (pair? v_54) ((lambda (v_55) ((lambda (k) ((lambda (v_56) (if (pair? v_56) ((lambda (v_57) ((lambda (i) ((lambda (v_58) (if (pair? v_58) ((lambda (v_59) ((lambda (v) ((lambda (v_60) (if (pair? v_60) ((lambda (v_61) (if (pair? v_61) ((lambda (v_62) (if (equal? v_62 #t) ((lambda (v_63) ((lambda (d) ((lambda (v_64) (if (null? v_64) (cons (rename (quote match-extract-quasiquote-vars)) (cons x (cons k (cons i (cons v (cons d (quote ()))))))) #f)) (cdr v_60))) v_63)) (cdr v_61)) #f)) (car v_61)) #f)) (car v_60)) #f)) (cdr v_58))) v_59)) (car v_58)) #f)) (cdr v_56))) v_57)) (car v_56)) #f)) (cdr v_54))) v_55)) (car v_54)) #f)) (cdr v_48)) #f)) (cdr v_51))) v_52)) (car v_51)) #f)) (cdr v_49)) #f)) (car v_49)) #f)) (car v_48)) #f)) (cdr expr))))) ((lambda (v_31) (if (pair? v_31) ((lambda (v_32) (if (pair? v_32) ((lambda (v_33) (if (compare v_33 (quote unquote)) ((lambda (v_34) (if (pair? v_34) ((lambda (v_35) ((lambda (x) ((lambda (v_36) (if (null? v_36) ((lambda (v_37) (if (pair? v_37) ((lambda (v_38) ((lambda (k) ((lambda (v_39) (if (pair? v_39) ((lambda (v_40) ((lambda (i) ((lambda (v_41) (if (pair? v_41) ((lambda (v_42) ((lambda (v) ((lambda (v_43) (if (pair? v_43) ((lambda (v_44) (if (pair? v_44) ((lambda (v_45) (if (equal? v_45 #t) ((lambda (v_46) (if (null? v_46) ((lambda (v_47) (if (null? v_47) (cons (rename (quote match-extract-vars)) (cons x (cons k (cons i (cons v (quote ())))))) #f)) (cdr v_43)) #f)) (cdr v_44)) #f)) (car v_44)) #f)) (car v_43)) #f)) (cdr v_41))) v_42)) (car v_41)) #f)) (cdr v_39))) v_40)) (car v_39)) #f)) (cdr v_37))) v_38)) (car v_37)) #f)) (cdr v_31)) #f)) (cdr v_34))) v_35)) (car v_34)) #f)) (cdr v_32)) #f)) (car v_32)) #f)) (car v_31)) #f)) (cdr expr))))) ((lambda (v_16) (if (pair? v_16) ((lambda (v_17) (if (pair? v_17) ((lambda (v_18) (if (compare v_18 (quote unquote-splicing)) ((lambda (v_19) (if (pair? v_19) ((lambda (v_20) ((lambda (x) ((lambda (v_21) (if (null? v_21) ((lambda (v_22) (if (pair? v_22) ((lambda (v_23) ((lambda (k) ((lambda (v_24) (if (pair? v_24) ((lambda (v_25) ((lambda (i) ((lambda (v_26) (if (pair? v_26) ((lambda (v_27) ((lambda (v) ((lambda (v_28) (if (pair? v_28) ((lambda (v_29) ((lambda (d) ((lambda (v_30) (if (null? v_30) (cons (rename (quote match-extract-quasiquote-vars)) (cons (cons (rename (quote unquote)) (cons x (quote ()))) (cons k (cons i (cons v (cons d (quote ()))))))) #f)) (cdr v_28))) v_29)) (car v_28)) #f)) (cdr v_26))) v_27)) (car v_26)) #f)) (cdr v_24))) v_25)) (car v_24)) #f)) (cdr v_22))) v_23)) (car v_22)) #f)) (cdr v_16)) #f)) (cdr v_19))) v_20)) (car v_19)) #f)) (cdr v_17)) #f)) (car v_17)) #f)) (car v_16)) #f)) (cdr expr))))) ((lambda (v_1) (if (pair? v_1) ((lambda (v_2) (if (pair? v_2) ((lambda (v_3) (if (compare v_3 (quote quasiquote)) ((lambda (v_4) (if (pair? v_4) ((lambda (v_5) ((lambda (x) ((lambda (v_6) (if (null? v_6) ((lambda (v_7) (if (pair? v_7) ((lambda (v_8) ((lambda (k) ((lambda (v_9) (if (pair? v_9) ((lambda (v_10) ((lambda (i) ((lambda (v_11) (if (pair? v_11) ((lambda (v_12) ((lambda (v) ((lambda (v_13) (if (pair? v_13) ((lambda (v_14) ((lambda (d) ((lambda (v_15) (if (null? v_15) (cons (rename (quote match-extract-quasiquote-vars)) (cons x (cons k (cons i (cons v (cons (cons #t d) (quote ()))))))) #f)) (cdr v_13))) v_14)) (car v_13)) #f)) (cdr v_11))) v_12)) (car v_11)) #f)) (cdr v_9))) v_10)) (car v_9)) #f)) (cdr v_7))) v_8)) (car v_7)) #f)) (cdr v_1)) #f)) (cdr v_4))) v_5)) (car v_4)) #f)) (cdr v_2)) #f)) (car v_2)) #f)) (car v_1)) #f)) (cdr expr))))))

(define-syntax match-extract-quasiquote-vars-step (er-macro-transformer (lambda (expr rename compare) ((lambda (tmp) (if tmp tmp (error "no expansion for" (strip-syntactic-closures expr)))) ((lambda (v_1) (if (pair? v_1) ((lambda (v_2) ((lambda (x) ((lambda (v_3) (if (pair? v_3) ((lambda (v_4) ((lambda (k) ((lambda (v_5) (if (pair? v_5) ((lambda (v_6) ((lambda (i) ((lambda (v_7) (if (pair? v_7) ((lambda (v_8) ((lambda (v) ((lambda (v_9) (if (pair? v_9) ((lambda (v_10) ((lambda (d) ((lambda (v_11) (if (pair? v_11) ((lambda (v_12) ((lambda () (define lp #f) (set! lp (lambda (v_13 v2-ls v2-ls-ls) (if (null? v_13) ((lambda (v2 v2-ls) ((lambda (v_19) (if (null? v_19) (cons (rename (quote match-extract-quasiquote-vars)) (cons x (cons k (cons (append (map (lambda (v2) v2) v2) i) (cons (append (map (lambda (v2 v2-ls) (cons v2 (cons v2-ls (quote ())))) v2 v2-ls) v) (cons d (quote ()))))))) #f)) (cdr v_11))) (reverse v2-ls) (reverse v2-ls-ls)) (if (pair? v_13) ((lambda (v_14) (if (pair? v_14) ((lambda (v_15) ((lambda (v2) ((lambda (v_16) (if (pair? v_16) ((lambda (v_17) ((lambda (v2-ls_1) ((lambda (v_18) (if (null? v_18) (lp (cdr v_13) (cons v2 v2-ls) (cons v2-ls_1 v2-ls-ls)) #f)) (cdr v_16))) v_17)) (car v_16)) #f)) (cdr v_14))) v_15)) (car v_14)) #f)) (car v_13)) #f)))) nil (lp v_12 () ())))) (car v_11)) #f)) (cdr v_9))) v_10)) (car v_9)) #f)) (cdr v_7))) v_8)) (car v_7)) #f)) (cdr v_5))) v_6)) (car v_5)) #f)) (cdr v_3))) v_4)) (car v_3)) #f)) (cdr v_1))) v_2)) (car v_1)) #f)) (cdr expr))))))

(define-syntax match-lambda (er-macro-transformer (lambda (expr rename compare) ((lambda (tmp) (if tmp tmp (error "no expansion for" (strip-syntactic-closures expr)))) ((lambda (v_1) (if (list? v_1) ((lambda (clause) (cons (rename (quote lambda)) (cons (cons (rename (quote expr)) (quote ())) (cons (cons (rename (quote match)) (cons (rename (quote expr)) (map (lambda (clause) clause) clause))) (quote ()))))) v_1) #f)) (cdr expr))))))

(define-syntax match-lambda* (er-macro-transformer (lambda (expr rename compare) ((lambda (tmp) (if tmp tmp (error "no expansion for" (strip-syntactic-closures expr)))) ((lambda (v_1) (if (list? v_1) ((lambda (clause) (cons (rename (quote lambda)) (cons (rename (quote expr)) (cons (cons (rename (quote match)) (cons (rename (quote expr)) (map (lambda (clause) clause) clause))) (quote ()))))) v_1) #f)) (cdr expr))))))

(define-syntax match-let (er-macro-transformer (lambda (expr rename compare) ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp (error "no expansion for" (strip-syntactic-closures expr)))) ((lambda (v_4) (if (pair? v_4) ((lambda (v_5) ((lambda (loop) ((lambda (v_6) ((lambda (rest) (cons (rename (quote match-named-let)) (cons loop (cons (quote ()) rest)))) v_6)) (cdr v_4))) v_5)) (car v_4)) #f)) (cdr expr))))) ((lambda (v_1) (if (pair? v_1) ((lambda (v_2) (if (list? v_2) ((lambda (vars) ((lambda (v_3) ((lambda (body) (cons (rename (quote match-let/helper)) (cons (rename (quote let)) (cons (quote ()) (cons (quote ()) (cons (map (lambda (vars) vars) vars) body)))))) v_3)) (cdr v_1))) v_2) #f)) (car v_1)) #f)) (cdr expr))))))

(define-syntax match-letrec (er-macro-transformer (lambda (expr rename compare) ((lambda (tmp) (if tmp tmp (error "no expansion for" (strip-syntactic-closures expr)))) ((lambda (v_1) (if (pair? v_1) ((lambda (v_2) ((lambda (vars) ((lambda (v_3) ((lambda (body) (cons (rename (quote match-let/helper)) (cons (rename (quote letrec)) (cons (quote ()) (cons (quote ()) (cons vars body)))))) v_3)) (cdr v_1))) v_2)) (car v_1)) #f)) (cdr expr))))))

(define-syntax match-let/helper (er-macro-transformer (lambda (expr rename compare) ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp (error "no expansion for" (strip-syntactic-closures expr)))) ((lambda (v_70) (if (pair? v_70) ((lambda (v_71) ((lambda (let) ((lambda (v_72) (if (pair? v_72) ((lambda (v_73) (if (list? v_73) ((lambda (v) ((lambda (v_74) (if (pair? v_74) ((lambda (v_75) (if (list? v_75) ((lambda (p) ((lambda (v_76) (if (pair? v_76) ((lambda (v_77) (if (pair? v_77) ((lambda (v_78) (if (pair? v_78) ((lambda (v_79) ((lambda (a) ((lambda (v_80) (if (pair? v_80) ((lambda (v_81) ((lambda (expr) ((lambda (v_82) (if (null? v_82) ((lambda (v_83) ((lambda (rest) ((lambda (v_84) ((lambda (body) (cons (rename (quote match-let/helper)) (cons let (cons (append (map (lambda (v) v) v) (cons (cons a (cons expr (quote ()))) (quote ()))) (cons (map (lambda (p) p) p) (cons rest body)))))) v_84)) (cdr v_76))) v_83)) (cdr v_77)) #f)) (cdr v_80))) v_81)) (car v_80)) #f)) (cdr v_78))) v_79)) (car v_78)) #f)) (car v_77)) #f)) (car v_76)) #f)) (cdr v_74))) v_75) #f)) (car v_74)) #f)) (cdr v_72))) v_73) #f)) (car v_72)) #f)) (cdr v_70))) v_71)) (car v_70)) #f)) (cdr expr))))) ((lambda (v_54) (if (pair? v_54) ((lambda (v_55) ((lambda (let) ((lambda (v_56) (if (pair? v_56) ((lambda (v_57) (if (list? v_57) ((lambda (v) ((lambda (v_58) (if (pair? v_58) ((lambda (v_59) (if (list? v_59) ((lambda (p) ((lambda (v_60) (if (pair? v_60) ((lambda (v_61) (if (pair? v_61) ((lambda (v_62) (if (pair? v_62) ((lambda (v_63) (if (vector? v_63) ((lambda (v_64) (if (list? v_64) ((lambda (a) ((lambda (v_65) (if (pair? v_65) ((lambda (v_66) ((lambda (expr) ((lambda (v_67) (if (null? v_67) ((lambda (v_68) ((lambda (rest) ((lambda (v_69) ((lambda (body) (cons (rename (quote match-let/helper)) (cons let (cons (append (map (lambda (v) v) v) (cons (cons (rename (quote tmp)) (cons expr (quote ()))) (quote ()))) (cons (append (map (lambda (p) p) p) (cons (cons (list->vector (map (lambda (a) a) a)) (cons (rename (quote tmp)) (quote ()))) (quote ()))) (cons rest body)))))) v_69)) (cdr v_60))) v_68)) (cdr v_61)) #f)) (cdr v_65))) v_66)) (car v_65)) #f)) (cdr v_62))) v_64) #f)) (vector->list v_63)) #f)) (car v_62)) #f)) (car v_61)) #f)) (car v_60)) #f)) (cdr v_58))) v_59) #f)) (car v_58)) #f)) (cdr v_56))) v_57) #f)) (car v_56)) #f)) (cdr v_54))) v_55)) (car v_54)) #f)) (cdr expr))))) ((lambda (v_37) (if (pair? v_37) ((lambda (v_38) ((lambda (let) ((lambda (v_39) (if (pair? v_39) ((lambda (v_40) (if (list? v_40) ((lambda (v) ((lambda (v_41) (if (pair? v_41) ((lambda (v_42) (if (list? v_42) ((lambda (p) ((lambda (v_43) (if (pair? v_43) ((lambda (v_44) (if (pair? v_44) ((lambda (v_45) (if (pair? v_45) ((lambda (v_46) (if (pair? v_46) ((lambda (v_47) ((lambda (a) ((lambda (v_48) ((lambda (b) ((lambda (v_49) (if (pair? v_49) ((lambda (v_50) ((lambda (expr) ((lambda (v_51) (if (null? v_51) ((lambda (v_52) ((lambda (rest) ((lambda (v_53) ((lambda (body) (cons (rename (quote match-let/helper)) (cons let (cons (append (map (lambda (v) v) v) (cons (cons (rename (quote tmp)) (cons expr (quote ()))) (quote ()))) (cons (append (map (lambda (p) p) p) (cons (cons (cons a b) (cons (rename (quote tmp)) (quote ()))) (quote ()))) (cons rest body)))))) v_53)) (cdr v_43))) v_52)) (cdr v_44)) #f)) (cdr v_49))) v_50)) (car v_49)) #f)) (cdr v_45))) v_48)) (cdr v_46))) v_47)) (car v_46)) #f)) (car v_45)) #f)) (car v_44)) #f)) (car v_43)) #f)) (cdr v_41))) v_42) #f)) (car v_41)) #f)) (cdr v_39))) v_40) #f)) (car v_39)) #f)) (cdr v_37))) v_38)) (car v_37)) #f)) (cdr expr))))) ((lambda (v_16) (if (pair? v_16) ((lambda (v_17) ((lambda (let) ((lambda (v_18) (if (pair? v_18) ((lambda (v_19) ((lambda () (define lp #f) (set! lp (lambda (v_20 var-ls expr-ls) (if (null? v_20) ((lambda (var expr) ((lambda (v_26) (if (pair? v_26) ((lambda (v_27) ((lambda () (define lp #f) (set! lp (lambda (v_28 pat-ls tmp-ls) (if (null? v_28) ((lambda (pat tmp) ((lambda (v_34) (if (pair? v_34) ((lambda (v_35) (if (null? v_35) ((lambda (v_36) ((lambda (body) (cons let (cons (map (lambda (var expr) (cons var (cons expr (quote ())))) var expr) (cons (cons (rename (quote match-let*)) (cons (map (lambda (pat tmp) (cons pat (cons tmp (quote ())))) pat tmp) body)) (quote ()))))) v_36)) (cdr v_34)) #f)) (car v_34)) #f)) (cdr v_26))) (reverse pat-ls) (reverse tmp-ls)) (if (pair? v_28) ((lambda (v_29) (if (pair? v_29) ((lambda (v_30) ((lambda (pat) ((lambda (v_31) (if (pair? v_31) ((lambda (v_32) ((lambda (tmp) ((lambda (v_33) (if (null? v_33) (lp (cdr v_28) (cons pat pat-ls) (cons tmp tmp-ls)) #f)) (cdr v_31))) v_32)) (car v_31)) #f)) (cdr v_29))) v_30)) (car v_29)) #f)) (car v_28)) #f)))) nil (lp v_27 () ())))) (car v_26)) #f)) (cdr v_18))) (reverse var-ls) (reverse expr-ls)) (if (pair? v_20) ((lambda (v_21) (if (pair? v_21) ((lambda (v_22) ((lambda (var) ((lambda (v_23) (if (pair? v_23) ((lambda (v_24) ((lambda (expr) ((lambda (v_25) (if (null? v_25) (lp (cdr v_20) (cons var var-ls) (cons expr expr-ls)) #f)) (cdr v_23))) v_24)) (car v_23)) #f)) (cdr v_21))) v_22)) (car v_21)) #f)) (car v_20)) #f)))) nil (lp v_19 () ())))) (car v_18)) #f)) (cdr v_16))) v_17)) (car v_16)) #f)) (cdr expr))))) ((lambda (v_1) (if (pair? v_1) ((lambda (v_2) ((lambda (let) ((lambda (v_3) (if (pair? v_3) ((lambda (v_4) ((lambda () (define lp #f) (set! lp (lambda (v_5 var-ls expr-ls) (if (null? v_5) ((lambda (var expr) ((lambda (v_11) (if (pair? v_11) ((lambda (v_12) (if (null? v_12) ((lambda (v_13) (if (pair? v_13) ((lambda (v_14) (if (null? v_14) ((lambda (v_15) ((lambda (body) (cons let (cons (map (lambda (var expr) (cons var (cons expr (quote ())))) var expr) body))) v_15)) (cdr v_13)) #f)) (car v_13)) #f)) (cdr v_11)) #f)) (car v_11)) #f)) (cdr v_3))) (reverse var-ls) (reverse expr-ls)) (if (pair? v_5) ((lambda (v_6) (if (pair? v_6) ((lambda (v_7) ((lambda (var) ((lambda (v_8) (if (pair? v_8) ((lambda (v_9) ((lambda (expr) ((lambda (v_10) (if (null? v_10) (lp (cdr v_5) (cons var var-ls) (cons expr expr-ls)) #f)) (cdr v_8))) v_9)) (car v_8)) #f)) (cdr v_6))) v_7)) (car v_6)) #f)) (car v_5)) #f)))) nil (lp v_4 () ())))) (car v_3)) #f)) (cdr v_1))) v_2)) (car v_1)) #f)) (cdr expr))))))

(define-syntax match-named-let (er-macro-transformer (lambda (expr rename compare) ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp (error "no expansion for" (strip-syntactic-closures expr)))) ((lambda (v_16) (if (pair? v_16) ((lambda (v_17) ((lambda (loop) ((lambda (v_18) (if (pair? v_18) ((lambda (v_19) (if (list? v_19) ((lambda (v) ((lambda (v_20) (if (pair? v_20) ((lambda (v_21) (if (pair? v_21) ((lambda (v_22) (if (pair? v_22) ((lambda (v_23) ((lambda (pat) ((lambda (v_24) (if (pair? v_24) ((lambda (v_25) ((lambda (expr) ((lambda (v_26) (if (null? v_26) ((lambda (v_27) ((lambda (rest) ((lambda (v_28) ((lambda (body) (cons (rename (quote match-named-let)) (cons loop (cons (append (map (lambda (v) v) v) (cons (cons pat (cons expr (cons (rename (quote tmp)) (quote ())))) (quote ()))) (cons rest body))))) v_28)) (cdr v_20))) v_27)) (cdr v_21)) #f)) (cdr v_24))) v_25)) (car v_24)) #f)) (cdr v_22))) v_23)) (car v_22)) #f)) (car v_21)) #f)) (car v_20)) #f)) (cdr v_18))) v_19) #f)) (car v_18)) #f)) (cdr v_16))) v_17)) (car v_16)) #f)) (cdr expr))))) ((lambda (v_1) (if (pair? v_1) ((lambda (v_2) ((lambda (loop) ((lambda (v_3) (if (pair? v_3) ((lambda (v_4) ((lambda () (define lp #f) (set! lp (lambda (v_5 pat-ls expr-ls var-ls) (if (null? v_5) ((lambda (pat expr var) ((lambda (v_13) (if (pair? v_13) ((lambda (v_14) (if (null? v_14) ((lambda (v_15) ((lambda (body) (cons (rename (quote let)) (cons loop (cons (map (lambda (var expr) (cons var (cons expr (quote ())))) var expr) (cons (cons (rename (quote match-let)) (cons (map (lambda (pat var) (cons pat (cons var (quote ())))) pat var) body)) (quote ())))))) v_15)) (cdr v_13)) #f)) (car v_13)) #f)) (cdr v_3))) (reverse pat-ls) (reverse expr-ls) (reverse var-ls)) (if (pair? v_5) ((lambda (v_6) (if (pair? v_6) ((lambda (v_7) ((lambda (pat) ((lambda (v_8) (if (pair? v_8) ((lambda (v_9) ((lambda (expr) ((lambda (v_10) (if (pair? v_10) ((lambda (v_11) ((lambda (var) ((lambda (v_12) (if (null? v_12) (lp (cdr v_5) (cons pat pat-ls) (cons expr expr-ls) (cons var var-ls)) #f)) (cdr v_10))) v_11)) (car v_10)) #f)) (cdr v_8))) v_9)) (car v_8)) #f)) (cdr v_6))) v_7)) (car v_6)) #f)) (car v_5)) #f)))) nil (lp v_4 () () ())))) (car v_3)) #f)) (cdr v_1))) v_2)) (car v_1)) #f)) (cdr expr))))))

(define-syntax match-let* (er-macro-transformer (lambda (expr rename compare) ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp (error "no expansion for" (strip-syntactic-closures expr)))) ((lambda (v_4) (if (pair? v_4) ((lambda (v_5) (if (pair? v_5) ((lambda (v_6) (if (pair? v_6) ((lambda (v_7) ((lambda (pat) ((lambda (v_8) (if (pair? v_8) ((lambda (v_9) ((lambda (expr) ((lambda (v_10) (if (null? v_10) ((lambda (v_11) ((lambda (rest) ((lambda (v_12) ((lambda (body) (cons (rename (quote match)) (cons expr (cons (cons pat (cons (cons (rename (quote match-let*)) (cons rest body)) (quote ()))) (quote ()))))) v_12)) (cdr v_4))) v_11)) (cdr v_5)) #f)) (cdr v_8))) v_9)) (car v_8)) #f)) (cdr v_6))) v_7)) (car v_6)) #f)) (car v_5)) #f)) (car v_4)) #f)) (cdr expr))))) ((lambda (v_1) (if (pair? v_1) ((lambda (v_2) (if (null? v_2) ((lambda (v_3) ((lambda (body) (cons (rename (quote begin)) body)) v_3)) (cdr v_1)) #f)) (car v_1)) #f)) (cdr expr))))))

(define-syntax match-check-ellipse (er-macro-transformer (lambda (expr rename compare) ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp (error "no expansion for" (strip-syntactic-closures expr)))) ((lambda (v_18) (if (pair? v_18) ((lambda (v_19) ((lambda (id) ((lambda (v_20) (if (pair? v_20) ((lambda (v_21) ((lambda (success-k) ((lambda (v_22) (if (pair? v_22) ((lambda (v_23) ((lambda (failure-k) ((lambda (v_24) (if (null? v_24) (cons (rename (quote let-syntax)) (cons (cons (cons (rename (quote ellipse?)) (cons (cons (rename (quote syntax-rules)) (cons (quote ()) (cons (cons (cons (rename (quote ellipse?)) (cons (cons (rename (quote foo)) (cons id (quote ()))) (cons (rename (quote sk)) (cons (rename (quote fk)) (quote ()))))) (cons (rename (quote sk)) (quote ()))) (cons (cons (cons (rename (quote ellipse?)) (cons (rename (quote other)) (cons (rename (quote sk)) (cons (rename (quote fk)) (quote ()))))) (cons (rename (quote fk)) (quote ()))) (quote ()))))) (quote ()))) (quote ())) (cons (cons (rename (quote ellipse?)) (cons (cons (rename (quote a)) (cons (rename (quote b)) (cons (rename (quote c)) (quote ())))) (cons success-k (cons failure-k (quote ()))))) (quote ())))) #f)) (cdr v_22))) v_23)) (car v_22)) #f)) (cdr v_20))) v_21)) (car v_20)) #f)) (cdr v_18))) v_19)) (car v_18)) #f)) (cdr expr))))) ((lambda (v_10) (if (pair? v_10) ((lambda (v_11) (if (vector? v_11) ((lambda (v_12) (if (list? v_12) ((lambda (a) ((lambda (v_13) (if (pair? v_13) ((lambda (v_14) ((lambda (success-k) ((lambda (v_15) (if (pair? v_15) ((lambda (v_16) ((lambda (failure-k) ((lambda (v_17) (if (null? v_17) failure-k #f)) (cdr v_15))) v_16)) (car v_15)) #f)) (cdr v_13))) v_14)) (car v_13)) #f)) (cdr v_10))) v_12) #f)) (vector->list v_11)) #f)) (car v_10)) #f)) (cdr expr))))) ((lambda (v_1) (if (pair? v_1) ((lambda (v_2) (if (pair? v_2) ((lambda (v_3) ((lambda (a) ((lambda (v_4) ((lambda (b) ((lambda (v_5) (if (pair? v_5) ((lambda (v_6) ((lambda (success-k) ((lambda (v_7) (if (pair? v_7) ((lambda (v_8) ((lambda (failure-k) ((lambda (v_9) (if (null? v_9) failure-k #f)) (cdr v_7))) v_8)) (car v_7)) #f)) (cdr v_5))) v_6)) (car v_5)) #f)) (cdr v_1))) v_4)) (cdr v_2))) v_3)) (car v_2)) #f)) (car v_1)) #f)) (cdr expr))))))

(define-syntax match-check-identifier (er-macro-transformer (lambda (expr rename compare) ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp (error "no expansion for" (strip-syntactic-closures expr)))) ((lambda (v_18) (if (pair? v_18) ((lambda (v_19) ((lambda (x) ((lambda (v_20) (if (pair? v_20) ((lambda (v_21) ((lambda (success-k) ((lambda (v_22) (if (pair? v_22) ((lambda (v_23) ((lambda (failure-k) ((lambda (v_24) (if (null? v_24) (cons (rename (quote let-syntax)) (cons (cons (cons (rename (quote sym?)) (cons (cons (rename (quote syntax-rules)) (cons (quote ()) (cons (cons (cons (rename (quote sym?)) (cons x (cons (rename (quote sk)) (cons (rename (quote fk)) (quote ()))))) (cons (rename (quote sk)) (quote ()))) (cons (cons (cons (rename (quote sym?)) (cons (rename (quote y)) (cons (rename (quote sk)) (cons (rename (quote fk)) (quote ()))))) (cons (rename (quote fk)) (quote ()))) (quote ()))))) (quote ()))) (quote ())) (cons (cons (rename (quote sym?)) (cons (rename (quote abracadabra)) (cons success-k (cons failure-k (quote ()))))) (quote ())))) #f)) (cdr v_22))) v_23)) (car v_22)) #f)) (cdr v_20))) v_21)) (car v_20)) #f)) (cdr v_18))) v_19)) (car v_18)) #f)) (cdr expr))))) ((lambda (v_10) (if (pair? v_10) ((lambda (v_11) (if (vector? v_11) ((lambda (v_12) (if (list? v_12) ((lambda (x) ((lambda (v_13) (if (pair? v_13) ((lambda (v_14) ((lambda (success-k) ((lambda (v_15) (if (pair? v_15) ((lambda (v_16) ((lambda (failure-k) ((lambda (v_17) (if (null? v_17) failure-k #f)) (cdr v_15))) v_16)) (car v_15)) #f)) (cdr v_13))) v_14)) (car v_13)) #f)) (cdr v_10))) v_12) #f)) (vector->list v_11)) #f)) (car v_10)) #f)) (cdr expr))))) ((lambda (v_1) (if (pair? v_1) ((lambda (v_2) (if (pair? v_2) ((lambda (v_3) ((lambda (x) ((lambda (v_4) ((lambda (y) ((lambda (v_5) (if (pair? v_5) ((lambda (v_6) ((lambda (success-k) ((lambda (v_7) (if (pair? v_7) ((lambda (v_8) ((lambda (failure-k) ((lambda (v_9) (if (null? v_9) failure-k #f)) (cdr v_7))) v_8)) (car v_7)) #f)) (cdr v_5))) v_6)) (car v_5)) #f)) (cdr v_1))) v_4)) (cdr v_2))) v_3)) (car v_2)) #f)) (car v_1)) #f)) (cdr expr))))))

