
  @_define = 
      LispMacro.new { |_arg,*__rest__| _body = __rest__[0] ;  
          if ( 
            callProcedure( 'not',
                begin
                  if (self.instance_variables.map {|x| x.intern}.include?(:@_not)) then
                    @_not
                  else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:8"] + __e.backtrace ) ; raise __e
                end              ,
                Cell.new(
                  callProcedure( 'pair?',
                      begin
                        if (self.instance_variables.map {|x| x.intern}.include?(:@_pair_QUMARK)) then
                          @_pair_QUMARK
                        else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:16"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                        begin
                            _arg
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:22"] + __e.backtrace ) ; raise __e
                        end
                               ))
                         ))
           ) then
              callProcedure( 'cons',
                  begin
                    if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                      @_cons
                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:22"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"define"                  ,Cell.new(
                    callProcedure( 'cons',
                        begin
                          if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                            @_cons
                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:22"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              _arg
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:22"] + __e.backtrace ) ; raise __e
                          end                        ,Cell.new(
                          begin
                              _body
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:23"] + __e.backtrace ) ; raise __e
                          end
                                 )))
                           )))
          else
              begin
                  if ( 
                    callProcedure( 'pair?',
                        begin
                          if (self.instance_variables.map {|x| x.intern}.include?(:@_pair_QUMARK)) then
                            @_pair_QUMARK
                          else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:16"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          callProcedure( 'cdr',
                              begin
                                if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                  @_cdr
                                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:22"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    _arg
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:22"] + __e.backtrace ) ; raise __e
                                end
                                       ))
                                 ))
                   ) then
                      if ( 
                        callProcedure( 'pair?',
                            begin
                              if (self.instance_variables.map {|x| x.intern}.include?(:@_pair_QUMARK)) then
                                @_pair_QUMARK
                              else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:16"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              callProcedure( 'car',
                                  begin
                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                      @_car
                                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:19"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    callProcedure( 'cdr',
                                        begin
                                          if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                            @_cdr
                                          else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:22"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          begin
                                              _arg
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:22"] + __e.backtrace ) ; raise __e
                                          end
                                                 ))
                                           ))
                                     ))
                       ) then
                          begin raise RuntimeError, 
                          "Error: define syntax error."
                          rescue => __e 
                            __e.set_backtrace( ["./lib/init.nnd:17"] + __e.backtrace )
                            raise __e
                          end 
                      end
                  end
                  callProcedure( 'cons',
                      begin
                        if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                          @_cons
                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:22"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                      :"define"                      ,Cell.new(
                        callProcedure( 'cons',
                            begin
                              if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                @_cons
                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:22"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              callProcedure( 'car',
                                  begin
                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                      @_car
                                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:19"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        _arg
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:22"] + __e.backtrace ) ; raise __e
                                    end
                                           ))                            ,Cell.new(
                              callProcedure( 'list',
                                  begin
                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_list)) then
                                      @_list
                                    else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:20"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    callProcedure( 'cons',
                                        begin
                                          if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                            @_cons
                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:22"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                        :"lambda"                                        ,Cell.new(
                                          callProcedure( 'cons',
                                              begin
                                                if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                  @_cons
                                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:22"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                callProcedure( 'cdr',
                                                    begin
                                                      if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                                        @_cdr
                                                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:22"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      begin
                                                          _arg
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:22"] + __e.backtrace ) ; raise __e
                                                      end
                                                             ))                                              ,Cell.new(
                                                begin
                                                    _body
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:23"] + __e.backtrace ) ; raise __e
                                                end
                                                       )))
                                                 )))
                                           ))
                                     )))
                               )))
              end
          end
      }
#--------------------

  @_caar = 
      Proc.new { |_x| 
          callProcedure( 'car',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                  @_car
                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:29"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'car',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                        @_car
                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:29"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          _x
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:29"] + __e.backtrace ) ; raise __e
                      end
                             ))
                       ))
      }
#--------------------

  @_cadr = 
      Proc.new { |_x| 
          callProcedure( 'car',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                  @_car
                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:30"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'cdr',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                        @_cdr
                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:30"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          _x
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:30"] + __e.backtrace ) ; raise __e
                      end
                             ))
                       ))
      }
#--------------------

  @_cdar = 
      Proc.new { |_x| 
          callProcedure( 'cdr',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                  @_cdr
                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:31"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'car',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                        @_car
                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:31"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          _x
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:31"] + __e.backtrace ) ; raise __e
                      end
                             ))
                       ))
      }
#--------------------

  @_cddr = 
      Proc.new { |_x| 
          callProcedure( 'cdr',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                  @_cdr
                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:32"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'cdr',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                        @_cdr
                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:32"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          _x
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:32"] + __e.backtrace ) ; raise __e
                      end
                             ))
                       ))
      }
#--------------------

  @_caaar = 
      Proc.new { |_x| 
          callProcedure( 'car',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                  @_car
                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:33"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'car',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                        @_car
                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:33"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'car',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                              @_car
                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:33"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                _x
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:33"] + __e.backtrace ) ; raise __e
                            end
                                   ))
                             ))
                       ))
      }
#--------------------

  @_caadr = 
      Proc.new { |_x| 
          callProcedure( 'car',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                  @_car
                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:34"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'car',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                        @_car
                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:34"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'cdr',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                              @_cdr
                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:34"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                _x
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:34"] + __e.backtrace ) ; raise __e
                            end
                                   ))
                             ))
                       ))
      }
#--------------------

  @_cadar = 
      Proc.new { |_x| 
          callProcedure( 'car',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                  @_car
                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:35"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'cdr',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                        @_cdr
                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:35"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'car',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                              @_car
                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:35"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                _x
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:35"] + __e.backtrace ) ; raise __e
                            end
                                   ))
                             ))
                       ))
      }
#--------------------

  @_caddr = 
      Proc.new { |_x| 
          callProcedure( 'car',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                  @_car
                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:36"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'cdr',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                        @_cdr
                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:36"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'cdr',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                              @_cdr
                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:36"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                _x
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:36"] + __e.backtrace ) ; raise __e
                            end
                                   ))
                             ))
                       ))
      }
#--------------------

  @_cdaar = 
      Proc.new { |_x| 
          callProcedure( 'cdr',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                  @_cdr
                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:37"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'car',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                        @_car
                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:37"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'car',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                              @_car
                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:37"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                _x
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:37"] + __e.backtrace ) ; raise __e
                            end
                                   ))
                             ))
                       ))
      }
#--------------------

  @_cdadr = 
      Proc.new { |_x| 
          callProcedure( 'cdr',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                  @_cdr
                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:38"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'car',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                        @_car
                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:38"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'cdr',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                              @_cdr
                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:38"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                _x
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:38"] + __e.backtrace ) ; raise __e
                            end
                                   ))
                             ))
                       ))
      }
#--------------------

  @_cddar = 
      Proc.new { |_x| 
          callProcedure( 'cdr',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                  @_cdr
                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:39"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'cdr',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                        @_cdr
                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:39"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'car',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                              @_car
                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:39"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                _x
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:39"] + __e.backtrace ) ; raise __e
                            end
                                   ))
                             ))
                       ))
      }
#--------------------

  @_cdddr = 
      Proc.new { |_x| 
          callProcedure( 'cdr',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                  @_cdr
                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:40"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'cdr',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                        @_cdr
                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:40"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'cdr',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                              @_cdr
                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:40"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                _x
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:40"] + __e.backtrace ) ; raise __e
                            end
                                   ))
                             ))
                       ))
      }
#--------------------

  @_caaaar = 
      Proc.new { |_x| 
          callProcedure( 'car',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                  @_car
                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:41"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'car',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                        @_car
                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:41"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'car',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                              @_car
                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:41"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'car',
                                begin
                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                    @_car
                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:41"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _x
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:41"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                                   ))
                             ))
                       ))
      }
#--------------------

  @_caaadr = 
      Proc.new { |_x| 
          callProcedure( 'car',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                  @_car
                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:42"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'car',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                        @_car
                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:42"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'car',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                              @_car
                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:42"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'cdr',
                                begin
                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                    @_cdr
                                  else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:42"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _x
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:42"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                                   ))
                             ))
                       ))
      }
#--------------------

  @_caadar = 
      Proc.new { |_x| 
          callProcedure( 'car',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                  @_car
                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:43"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'car',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                        @_car
                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:43"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'cdr',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                              @_cdr
                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:43"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'car',
                                begin
                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                    @_car
                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:43"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _x
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:43"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                                   ))
                             ))
                       ))
      }
#--------------------

  @_caaddr = 
      Proc.new { |_x| 
          callProcedure( 'car',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                  @_car
                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:44"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'car',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                        @_car
                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:44"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'cdr',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                              @_cdr
                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:44"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'cdr',
                                begin
                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                    @_cdr
                                  else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:44"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _x
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:44"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                                   ))
                             ))
                       ))
      }
#--------------------

  @_cadaar = 
      Proc.new { |_x| 
          callProcedure( 'car',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                  @_car
                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:45"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'cdr',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                        @_cdr
                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:45"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'car',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                              @_car
                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:45"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'car',
                                begin
                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                    @_car
                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:45"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _x
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:45"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                                   ))
                             ))
                       ))
      }
#--------------------

  @_cadadr = 
      Proc.new { |_x| 
          callProcedure( 'car',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                  @_car
                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:46"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'cdr',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                        @_cdr
                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:46"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'car',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                              @_car
                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:46"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'cdr',
                                begin
                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                    @_cdr
                                  else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:46"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _x
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:46"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                                   ))
                             ))
                       ))
      }
#--------------------

  @_caddar = 
      Proc.new { |_x| 
          callProcedure( 'car',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                  @_car
                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:47"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'cdr',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                        @_cdr
                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:47"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'cdr',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                              @_cdr
                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:47"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'car',
                                begin
                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                    @_car
                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:47"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _x
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:47"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                                   ))
                             ))
                       ))
      }
#--------------------

  @_cadddr = 
      Proc.new { |_x| 
          callProcedure( 'car',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                  @_car
                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:48"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'cdr',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                        @_cdr
                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:48"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'cdr',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                              @_cdr
                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:48"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'cdr',
                                begin
                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                    @_cdr
                                  else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:48"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _x
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:48"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                                   ))
                             ))
                       ))
      }
#--------------------

  @_cdaaar = 
      Proc.new { |_x| 
          callProcedure( 'cdr',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                  @_cdr
                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:49"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'car',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                        @_car
                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:49"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'car',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                              @_car
                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:49"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'car',
                                begin
                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                    @_car
                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:49"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _x
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:49"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                                   ))
                             ))
                       ))
      }
#--------------------

  @_cdaadr = 
      Proc.new { |_x| 
          callProcedure( 'cdr',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                  @_cdr
                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:50"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'car',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                        @_car
                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:50"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'car',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                              @_car
                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:50"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'cdr',
                                begin
                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                    @_cdr
                                  else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:50"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _x
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:50"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                                   ))
                             ))
                       ))
      }
#--------------------

  @_cdadar = 
      Proc.new { |_x| 
          callProcedure( 'cdr',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                  @_cdr
                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:51"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'car',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                        @_car
                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:51"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'cdr',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                              @_cdr
                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:51"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'car',
                                begin
                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                    @_car
                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:51"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _x
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:51"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                                   ))
                             ))
                       ))
      }
#--------------------

  @_cdaddr = 
      Proc.new { |_x| 
          callProcedure( 'cdr',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                  @_cdr
                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:52"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'car',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                        @_car
                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:52"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'cdr',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                              @_cdr
                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:52"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'cdr',
                                begin
                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                    @_cdr
                                  else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:52"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _x
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:52"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                                   ))
                             ))
                       ))
      }
#--------------------

  @_cddaar = 
      Proc.new { |_x| 
          callProcedure( 'cdr',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                  @_cdr
                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:53"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'cdr',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                        @_cdr
                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:53"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'car',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                              @_car
                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:53"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'car',
                                begin
                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                    @_car
                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:53"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _x
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:53"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                                   ))
                             ))
                       ))
      }
#--------------------

  @_cddadr = 
      Proc.new { |_x| 
          callProcedure( 'cdr',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                  @_cdr
                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:54"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'cdr',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                        @_cdr
                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:54"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'car',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                              @_car
                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:54"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'cdr',
                                begin
                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                    @_cdr
                                  else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:54"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _x
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:54"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                                   ))
                             ))
                       ))
      }
#--------------------

  @_cdddar = 
      Proc.new { |_x| 
          callProcedure( 'cdr',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                  @_cdr
                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:55"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'cdr',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                        @_cdr
                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:55"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'cdr',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                              @_cdr
                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:55"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'car',
                                begin
                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                    @_car
                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:55"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _x
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:55"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                                   ))
                             ))
                       ))
      }
#--------------------

  @_cddddr = 
      Proc.new { |_x| 
          callProcedure( 'cdr',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                  @_cdr
                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:56"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'cdr',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                        @_cdr
                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:56"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'cdr',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                              @_cdr
                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:56"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'cdr',
                                begin
                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                    @_cdr
                                  else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:56"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _x
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:56"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                                   ))
                             ))
                       ))
      }
#--------------------

  @_iota = 
      begin
        if (self.instance_variables.map {|x| x.intern}.include?(:@_range)) then
          @_range
        else raise NameError.new( "Error: undefined variable _range", "_range" ) end
        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:62"] + __e.backtrace ) ; raise __e
      end
#--------------------

  @_append = 
      Proc.new { |_a,_b| 
          begin
            ___lambda = lambda { |_append_MIMARKreverse| 
                _append_MIMARKreverse                 = 
                  Proc.new { |_a,_b| 
                      if ( 
                        callProcedure( 'pair?',
                            begin
                              if (self.instance_variables.map {|x| x.intern}.include?(:@_pair_QUMARK)) then
                                @_pair_QUMARK
                              else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:67"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  _a
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:70"] + __e.backtrace ) ; raise __e
                              end
                                     ))
                       ) then
                          callProcedure( 'append-reverse',
                              begin
                                  _append_MIMARKreverse
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:70"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                callProcedure( 'cdr',
                                    begin
                                      if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                        @_cdr
                                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:68"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          _a
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:70"] + __e.backtrace ) ; raise __e
                                      end
                                             ))                              ,Cell.new(
                                callProcedure( 'cons',
                                    begin
                                      if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                        @_cons
                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:68"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      callProcedure( 'car',
                                          begin
                                            if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                              @_car
                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:68"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                _a
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:70"] + __e.backtrace ) ; raise __e
                                            end
                                                   ))                                    ,Cell.new(
                                      begin
                                          _b
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:70"] + __e.backtrace ) ; raise __e
                                      end
                                             )))
                                       )))
                      else
                          begin
                              _b
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:70"] + __e.backtrace ) ; raise __e
                          end
                      end
                  }
                callProcedure( 'append-reverse',
                    begin
                        _append_MIMARKreverse
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:70"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'reverse',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_reverse)) then
                              @_reverse
                            else raise NameError.new( "Error: undefined variable _reverse", "_reverse" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:70"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                _a
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:70"] + __e.backtrace ) ; raise __e
                            end
                                   ))                    ,Cell.new(
                      begin
                          _b
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:70"] + __e.backtrace ) ; raise __e
                      end
                             )))
            } ; ___lambda.call(
            nil
                       )
          end
      }
#--------------------

  @_list_QUMARK = 
      Proc.new { |_arg| 
          if ( 
            callProcedure( 'pair?',
                begin
                  if (self.instance_variables.map {|x| x.intern}.include?(:@_pair_QUMARK)) then
                    @_pair_QUMARK
                  else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:76"] + __e.backtrace ) ; raise __e
                end              ,
                Cell.new(
                  begin
                      _arg
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:78"] + __e.backtrace ) ; raise __e
                  end
                         ))
           ) then
              callProcedure( 'list?',
                  begin
                    if (self.instance_variables.map {|x| x.intern}.include?(:@_list_QUMARK)) then
                      @_list_QUMARK
                    else raise NameError.new( "Error: undefined variable _list_QUMARK", "_list_QUMARK" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:77"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    callProcedure( 'cdr',
                        begin
                          if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                            @_cdr
                          else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:77"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              _arg
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:78"] + __e.backtrace ) ; raise __e
                          end
                                 ))
                           ))
          else
              callProcedure( 'null?',
                  begin
                    if (self.instance_variables.map {|x| x.intern}.include?(:@_null_QUMARK)) then
                      @_null_QUMARK
                    else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:78"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    begin
                        _arg
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:78"] + __e.backtrace ) ; raise __e
                    end
                           ))
          end
      }
#--------------------

  @_even_QUMARK = 
      Proc.new { |_n| 
          callProcedure( '=',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@__EQMARK)) then
                  @__EQMARK
                else raise NameError.new( "Error: undefined variable __EQMARK", "__EQMARK" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:79"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( '%',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@__PAMARK)) then
                        @__PAMARK
                      else raise NameError.new( "Error: undefined variable __PAMARK", "__PAMARK" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:79"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          _n
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:79"] + __e.backtrace ) ; raise __e
                      end                    ,Cell.new(
                    2
                             )))              ,Cell.new(
              0
                       )))
      }
#--------------------

  @_odd_QUMARK = 
      Proc.new { |_n| 
          callProcedure( 'not',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_not)) then
                  @_not
                else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:80"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( '=',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@__EQMARK)) then
                        @__EQMARK
                      else raise NameError.new( "Error: undefined variable __EQMARK", "__EQMARK" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:80"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( '%',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@__PAMARK)) then
                              @__PAMARK
                            else raise NameError.new( "Error: undefined variable __PAMARK", "__PAMARK" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:80"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                _n
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:80"] + __e.backtrace ) ; raise __e
                            end                          ,Cell.new(
                          2
                                   )))                    ,Cell.new(
                    0
                             )))
                       ))
      }
#--------------------

  @_zero_QUMARK = 
      Proc.new { |_n| 
          callProcedure( '=',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@__EQMARK)) then
                  @__EQMARK
                else raise NameError.new( "Error: undefined variable __EQMARK", "__EQMARK" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:81"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                begin
                    _n
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:81"] + __e.backtrace ) ; raise __e
                end              ,Cell.new(
              0
                       )))
      }
#--------------------

  @_positive_QUMARK = 
      Proc.new { |_n| 
          callProcedure( '>',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@__GTMARK)) then
                  @__GTMARK
                else raise NameError.new( "Error: undefined variable __GTMARK", "__GTMARK" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:82"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                begin
                    _n
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:82"] + __e.backtrace ) ; raise __e
                end              ,Cell.new(
              0
                       )))
      }
#--------------------

  @_negative_QUMARK = 
      Proc.new { |_n| 
          callProcedure( '<',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@__LTMARK)) then
                  @__LTMARK
                else raise NameError.new( "Error: undefined variable __LTMARK", "__LTMARK" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:83"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                begin
                    _n
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:83"] + __e.backtrace ) ; raise __e
                end              ,Cell.new(
              0
                       )))
      }
#--------------------

  @_abs = 
      Proc.new { |_n| 
          if ( 
            callProcedure( '>=',
                begin
                  if (self.instance_variables.map {|x| x.intern}.include?(:@__GTMARK_EQMARK)) then
                    @__GTMARK_EQMARK
                  else raise NameError.new( "Error: undefined variable __GTMARK_EQMARK", "__GTMARK_EQMARK" ) end
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:84"] + __e.backtrace ) ; raise __e
                end              ,
                Cell.new(
                  begin
                      _n
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:84"] + __e.backtrace ) ; raise __e
                  end                ,Cell.new(
                0
                         )))
           ) then
              begin
                  _n
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:84"] + __e.backtrace ) ; raise __e
              end
          else
              callProcedure( '-',
                  begin
                    if (self.instance_variables.map {|x| x.intern}.include?(:@__MIMARK)) then
                      @__MIMARK
                    else raise NameError.new( "Error: undefined variable __MIMARK", "__MIMARK" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:84"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    begin
                        _n
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:84"] + __e.backtrace ) ; raise __e
                    end
                           ))
          end
      }
#--------------------

  @_max = 
      Proc.new { |*__rest__| _lst = __rest__[0] ;  
          callProcedure( 'foldr',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_foldr)) then
                  @_foldr
                else raise NameError.new( "Error: undefined variable _foldr", "_foldr" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:86"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                Proc.new { |_a,_b| 
                    if ( 
                      callProcedure( '>',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@__GTMARK)) then
                              @__GTMARK
                            else raise NameError.new( "Error: undefined variable __GTMARK", "__GTMARK" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:86"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                _a
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:86"] + __e.backtrace ) ; raise __e
                            end                          ,Cell.new(
                            begin
                                _b
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:86"] + __e.backtrace ) ; raise __e
                            end
                                   )))
                     ) then
                        begin
                            _a
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:86"] + __e.backtrace ) ; raise __e
                        end
                    else
                        begin
                            _b
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:86"] + __e.backtrace ) ; raise __e
                        end
                    end
                }              ,Cell.new(
                callProcedure( 'car',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                        @_car
                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:86"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          _lst
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:86"] + __e.backtrace ) ; raise __e
                      end
                             ))              ,Cell.new(
                callProcedure( 'cdr',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                        @_cdr
                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:86"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          _lst
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:86"] + __e.backtrace ) ; raise __e
                      end
                             ))
                       ))))
      }
#--------------------

  @_min = 
      Proc.new { |*__rest__| _lst = __rest__[0] ;  
          callProcedure( 'foldr',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_foldr)) then
                  @_foldr
                else raise NameError.new( "Error: undefined variable _foldr", "_foldr" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:88"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                Proc.new { |_a,_b| 
                    if ( 
                      callProcedure( '<',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@__LTMARK)) then
                              @__LTMARK
                            else raise NameError.new( "Error: undefined variable __LTMARK", "__LTMARK" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:88"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                _a
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:88"] + __e.backtrace ) ; raise __e
                            end                          ,Cell.new(
                            begin
                                _b
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:88"] + __e.backtrace ) ; raise __e
                            end
                                   )))
                     ) then
                        begin
                            _a
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:88"] + __e.backtrace ) ; raise __e
                        end
                    else
                        begin
                            _b
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:88"] + __e.backtrace ) ; raise __e
                        end
                    end
                }              ,Cell.new(
                callProcedure( 'car',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                        @_car
                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:88"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          _lst
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:88"] + __e.backtrace ) ; raise __e
                      end
                             ))              ,Cell.new(
                callProcedure( 'cdr',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                        @_cdr
                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:88"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          _lst
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:88"] + __e.backtrace ) ; raise __e
                      end
                             ))
                       ))))
      }
#--------------------

  @_succ = 
      Proc.new { |_x| 
          callProcedure( '+',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@__PLMARK)) then
                  @__PLMARK
                else raise NameError.new( "Error: undefined variable __PLMARK", "__PLMARK" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:89"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                begin
                    _x
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:89"] + __e.backtrace ) ; raise __e
                end              ,Cell.new(
              1
                       )))
      }
#--------------------

  @_pred = 
      Proc.new { |_x| 
          callProcedure( '-',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@__MIMARK)) then
                  @__MIMARK
                else raise NameError.new( "Error: undefined variable __MIMARK", "__MIMARK" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:90"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                begin
                    _x
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:90"] + __e.backtrace ) ; raise __e
                end              ,Cell.new(
              1
                       )))
      }
#--------------------

  @_nth = 
      Proc.new { |_n,_lst| 
          begin
            ___lambda = lambda { |_nth_MIMARKiter| 
                _nth_MIMARKiter                 = 
                  Proc.new { |_n,_index,_lst| 
                      if ( 
                        callProcedure( 'null?',
                            begin
                              if (self.instance_variables.map {|x| x.intern}.include?(:@_null_QUMARK)) then
                                @_null_QUMARK
                              else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:94"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  _lst
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:101"] + __e.backtrace ) ; raise __e
                              end
                                     ))
                       ) then
                        nil
                      else
                          if ( 
                            callProcedure( 'not',
                                begin
                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_not)) then
                                    @_not
                                  else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:96"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  callProcedure( 'pair?',
                                      begin
                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_pair_QUMARK)) then
                                          @_pair_QUMARK
                                        else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:96"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _lst
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:101"] + __e.backtrace ) ; raise __e
                                        end
                                               ))
                                         ))
                           ) then
                              begin raise RuntimeError, 
                              "Error: nth got improper list."
                              rescue => __e 
                                __e.set_backtrace( ["./lib/init.nnd:97"] + __e.backtrace )
                                raise __e
                              end 
                          else
                              if ( 
                                callProcedure( 'eqv?',
                                    begin
                                      if (self.instance_variables.map {|x| x.intern}.include?(:@_eqv_QUMARK)) then
                                        @_eqv_QUMARK
                                      else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:98"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          _n
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:101"] + __e.backtrace ) ; raise __e
                                      end                                    ,Cell.new(
                                      begin
                                          _index
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:100"] + __e.backtrace ) ; raise __e
                                      end
                                             )))
                               ) then
                                  callProcedure( 'car',
                                      begin
                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                          @_car
                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:99"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _lst
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:101"] + __e.backtrace ) ; raise __e
                                        end
                                               ))
                              else
                                  callProcedure( 'nth-iter',
                                      begin
                                          _nth_MIMARKiter
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:101"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _n
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:101"] + __e.backtrace ) ; raise __e
                                        end                                      ,Cell.new(
                                        callProcedure( '+',
                                            begin
                                              if (self.instance_variables.map {|x| x.intern}.include?(:@__PLMARK)) then
                                                @__PLMARK
                                              else raise NameError.new( "Error: undefined variable __PLMARK", "__PLMARK" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:100"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              begin
                                                  _index
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:100"] + __e.backtrace ) ; raise __e
                                              end                                            ,Cell.new(
                                            1
                                                     )))                                      ,Cell.new(
                                        callProcedure( 'cdr',
                                            begin
                                              if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                                @_cdr
                                              else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:100"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              begin
                                                  _lst
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:101"] + __e.backtrace ) ; raise __e
                                              end
                                                     ))
                                               ))))
                              end
                          end
                      end
                  }
                callProcedure( 'nth-iter',
                    begin
                        _nth_MIMARKiter
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:101"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          _n
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:101"] + __e.backtrace ) ; raise __e
                      end                    ,Cell.new(
                    0                    ,Cell.new(
                      begin
                          _lst
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:101"] + __e.backtrace ) ; raise __e
                      end
                             ))))
            } ; ___lambda.call(
            nil
                       )
          end
      }
#--------------------

  @_first = 
      Proc.new { |_lst| 
          callProcedure( 'nth',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_nth)) then
                  @_nth
                else raise NameError.new( "Error: undefined variable _nth", "_nth" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:102"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
              0              ,Cell.new(
                begin
                    _lst
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:102"] + __e.backtrace ) ; raise __e
                end
                       )))
      }
#--------------------

  @_second = 
      Proc.new { |_lst| 
          callProcedure( 'nth',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_nth)) then
                  @_nth
                else raise NameError.new( "Error: undefined variable _nth", "_nth" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:103"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
              1              ,Cell.new(
                begin
                    _lst
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:103"] + __e.backtrace ) ; raise __e
                end
                       )))
      }
#--------------------

  @_third = 
      Proc.new { |_lst| 
          callProcedure( 'nth',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_nth)) then
                  @_nth
                else raise NameError.new( "Error: undefined variable _nth", "_nth" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:104"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
              2              ,Cell.new(
                begin
                    _lst
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:104"] + __e.backtrace ) ; raise __e
                end
                       )))
      }
#--------------------

  @_fourth = 
      Proc.new { |_lst| 
          callProcedure( 'nth',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_nth)) then
                  @_nth
                else raise NameError.new( "Error: undefined variable _nth", "_nth" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:105"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
              3              ,Cell.new(
                begin
                    _lst
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:105"] + __e.backtrace ) ; raise __e
                end
                       )))
      }
#--------------------

  @_fifth = 
      Proc.new { |_lst| 
          callProcedure( 'nth',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_nth)) then
                  @_nth
                else raise NameError.new( "Error: undefined variable _nth", "_nth" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:106"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
              4              ,Cell.new(
                begin
                    _lst
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:106"] + __e.backtrace ) ; raise __e
                end
                       )))
      }
#--------------------

  @_sixth = 
      Proc.new { |_lst| 
          callProcedure( 'nth',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_nth)) then
                  @_nth
                else raise NameError.new( "Error: undefined variable _nth", "_nth" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:107"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
              5              ,Cell.new(
                begin
                    _lst
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:107"] + __e.backtrace ) ; raise __e
                end
                       )))
      }
#--------------------

  @_seventh = 
      Proc.new { |_lst| 
          callProcedure( 'nth',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_nth)) then
                  @_nth
                else raise NameError.new( "Error: undefined variable _nth", "_nth" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:108"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
              6              ,Cell.new(
                begin
                    _lst
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:108"] + __e.backtrace ) ; raise __e
                end
                       )))
      }
#--------------------

  @_eighth = 
      Proc.new { |_lst| 
          callProcedure( 'nth',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_nth)) then
                  @_nth
                else raise NameError.new( "Error: undefined variable _nth", "_nth" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:109"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
              7              ,Cell.new(
                begin
                    _lst
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:109"] + __e.backtrace ) ; raise __e
                end
                       )))
      }
#--------------------

  @_ninth = 
      Proc.new { |_lst| 
          callProcedure( 'nth',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_nth)) then
                  @_nth
                else raise NameError.new( "Error: undefined variable _nth", "_nth" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:110"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
              8              ,Cell.new(
                begin
                    _lst
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:110"] + __e.backtrace ) ; raise __e
                end
                       )))
      }
#--------------------

  @_tenth = 
      Proc.new { |_lst| 
          callProcedure( 'nth',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_nth)) then
                  @_nth
                else raise NameError.new( "Error: undefined variable _nth", "_nth" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:111"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
              9              ,Cell.new(
                begin
                    _lst
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:111"] + __e.backtrace ) ; raise __e
                end
                       )))
      }
#--------------------

  @_x_MIMARK_GTMARKstring = 
      Proc.new { |_object| 
          callProcedure( 'to-s',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_to_MIMARKs)) then
                  @_to_MIMARKs
                else raise NameError.new( "Error: undefined variable _to_MIMARKs", "_to_MIMARKs" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:113"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                begin
                    _object
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:113"] + __e.backtrace ) ; raise __e
                end
                       ))
      }
#--------------------

  @_macroexpand = 
      Proc.new { |_sexp| 
          begin
            ___lambda = lambda { |_newsexp| 
                if ( 
                  callProcedure( 'not',
                      begin
                        if (self.instance_variables.map {|x| x.intern}.include?(:@_not)) then
                          @_not
                        else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:120"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                        callProcedure( 'equal?',
                            begin
                              if (self.instance_variables.map {|x| x.intern}.include?(:@_equal_QUMARK)) then
                                @_equal_QUMARK
                              else raise NameError.new( "Error: undefined variable _equal_QUMARK", "_equal_QUMARK" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:120"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  _sexp
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:120"] + __e.backtrace ) ; raise __e
                              end                            ,Cell.new(
                              begin
                                  _newsexp
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:122"] + __e.backtrace ) ; raise __e
                              end
                                     )))
                               ))
                 ) then
                    callProcedure( 'macroexpand',
                        begin
                          if (self.instance_variables.map {|x| x.intern}.include?(:@_macroexpand)) then
                            @_macroexpand
                          else raise NameError.new( "Error: undefined variable _macroexpand", "_macroexpand" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:121"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              _newsexp
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:122"] + __e.backtrace ) ; raise __e
                          end
                                 ))
                else
                    begin
                        _newsexp
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:122"] + __e.backtrace ) ; raise __e
                    end
                end
            } ; ___lambda.call(
                  callProcedure( 'macroexpand-1',
                      begin
                        if (self.instance_variables.map {|x| x.intern}.include?(:@_macroexpand_MIMARK1)) then
                          @_macroexpand_MIMARK1
                        else raise NameError.new( "Error: undefined variable _macroexpand_MIMARK1", "_macroexpand_MIMARK1" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:119"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                        begin
                            _sexp
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:120"] + __e.backtrace ) ; raise __e
                        end
                               ))
                       )
          end
      }
#--------------------

  @_feedto = 
      Proc.new { || 
          begin raise RuntimeError, 
          "=> (feedto) appeared outside cond or case."
          rescue => __e 
            __e.set_backtrace( ["./lib/init.nnd:125"] + __e.backtrace )
            raise __e
          end 
      }
#--------------------

  @_cond = 
      LispMacro.new { |*__rest__| _lst = __rest__[0] ;  
          begin
            ___lambda = lambda { |_case_MIMARKblock,_cond_MIMARKiter| 
                _case_MIMARKblock                 = 
                  Proc.new { |_elem,*__rest__| _elseblock = __rest__[0] ;  
                      begin
                        ___lambda = lambda { |_condition,_body,_tmpsym| 
                            callProcedure( 'append',
                                begin
                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_append)) then
                                    @_append
                                  else raise NameError.new( "Error: undefined variable _append", "_append" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:141"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  if ( 
                                    callProcedure( 'eq?',
                                        begin
                                          if (self.instance_variables.map {|x| x.intern}.include?(:@_eq_QUMARK)) then
                                            @_eq_QUMARK
                                          else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:158"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                        :"feedto"                                        ,Cell.new(
                                          callProcedure( 'car',
                                              begin
                                                if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                                  @_car
                                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:160"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                begin
                                                    _body
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:150"] + __e.backtrace ) ; raise __e
                                                end
                                                       ))
                                                 )))
                                   ) then
                                      callProcedure( 'cons',
                                          begin
                                            if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                              @_cons
                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:150"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                          :"if"                                          ,Cell.new(
                                            callProcedure( 'list',
                                                begin
                                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_list)) then
                                                    @_list
                                                  else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:148"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  callProcedure( 'list',
                                                      begin
                                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_list)) then
                                                          @_list
                                                        else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:148"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                      :"set!"                                                      ,Cell.new(
                                                        begin
                                                            _tmpsym
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:146"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,Cell.new(
                                                        begin
                                                            _condition
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:149"] + __e.backtrace ) ; raise __e
                                                        end
                                                               ))))                                                ,Cell.new(
                                                  callProcedure( 'list',
                                                      begin
                                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_list)) then
                                                          @_list
                                                        else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:148"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        callProcedure( 'cadr',
                                                            begin
                                                              if (self.instance_variables.map {|x| x.intern}.include?(:@_cadr)) then
                                                                @_cadr
                                                              else raise NameError.new( "Error: undefined variable _cadr", "_cadr" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:146"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              begin
                                                                  _body
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:150"] + __e.backtrace ) ; raise __e
                                                              end
                                                                     ))                                                      ,Cell.new(
                                                        begin
                                                            _tmpsym
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:146"] + __e.backtrace ) ; raise __e
                                                        end
                                                               )))
                                                         )))
                                                   )))
                                  else
                                      callProcedure( 'cons',
                                          begin
                                            if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                              @_cons
                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:150"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                          :"if"                                          ,Cell.new(
                                            callProcedure( 'list',
                                                begin
                                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_list)) then
                                                    @_list
                                                  else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:148"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  begin
                                                      _condition
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:149"] + __e.backtrace ) ; raise __e
                                                  end                                                ,Cell.new(
                                                  callProcedure( 'cons',
                                                      begin
                                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                          @_cons
                                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:150"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                      :"begin"                                                      ,Cell.new(
                                                        begin
                                                            _body
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:150"] + __e.backtrace ) ; raise __e
                                                        end
                                                               )))
                                                         )))
                                                   )))
                                  end                                ,Cell.new(
                                  if ( 
                                    callProcedure( '<',
                                        begin
                                          if (self.instance_variables.map {|x| x.intern}.include?(:@__LTMARK)) then
                                            @__LTMARK
                                          else raise NameError.new( "Error: undefined variable __LTMARK", "__LTMARK" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:151"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                        0                                        ,Cell.new(
                                          callProcedure( 'length',
                                              begin
                                                if (self.instance_variables.map {|x| x.intern}.include?(:@_length)) then
                                                  @_length
                                                else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:158"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                begin
                                                    _elseblock
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:152"] + __e.backtrace ) ; raise __e
                                                end
                                                       ))
                                                 )))
                                   ) then
                                      begin
                                          _elseblock
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:152"] + __e.backtrace ) ; raise __e
                                      end
                                  else
                                    Cell.new()
                                  end
                                         )))
                        } ; ___lambda.call(
                              if ( 
                                callProcedure( 'eq?',
                                    begin
                                      if (self.instance_variables.map {|x| x.intern}.include?(:@_eq_QUMARK)) then
                                        @_eq_QUMARK
                                      else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:158"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                    :"else"                                    ,Cell.new(
                                      callProcedure( 'car',
                                          begin
                                            if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                              @_car
                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:160"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                _elem
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:136"] + __e.backtrace ) ; raise __e
                                            end
                                                   ))
                                             )))
                               ) then
                                true
                              else
                                  callProcedure( 'car',
                                      begin
                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                          @_car
                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:160"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _elem
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:136"] + __e.backtrace ) ; raise __e
                                        end
                                               ))
                              end                            ,
                              if ( 
                                callProcedure( 'null?',
                                    begin
                                      if (self.instance_variables.map {|x| x.intern}.include?(:@_null_QUMARK)) then
                                        @_null_QUMARK
                                      else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:134"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      callProcedure( 'cdr',
                                          begin
                                            if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                              @_cdr
                                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:161"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                _elem
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:136"] + __e.backtrace ) ; raise __e
                                            end
                                                   ))
                                             ))
                               ) then
                                Cell.new(true)
                              else
                                  callProcedure( 'cdr',
                                      begin
                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                          @_cdr
                                        else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:161"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _elem
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:136"] + __e.backtrace ) ; raise __e
                                        end
                                               ))
                              end                            ,
                              callProcedure( 'gensym',
                                  begin
                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_gensym)) then
                                      @_gensym
                                    else raise NameError.new( "Error: undefined variable _gensym", "_gensym" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:137"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                Cell.new(
                                           ))
                                   )
                      end
                  }
                _cond_MIMARKiter                 = 
                  Proc.new { |_lst| 
                      if ( 
                        callProcedure( 'eq?',
                            begin
                              if (self.instance_variables.map {|x| x.intern}.include?(:@_eq_QUMARK)) then
                                @_eq_QUMARK
                              else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:158"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                            0                            ,Cell.new(
                              callProcedure( 'length',
                                  begin
                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_length)) then
                                      @_length
                                    else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:158"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        _lst
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:162"] + __e.backtrace ) ; raise __e
                                    end
                                           ))
                                     )))
                       ) then
                        Cell.new()
                      else
                          if ( 
                            callProcedure( 'eq?',
                                begin
                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_eq_QUMARK)) then
                                    @_eq_QUMARK
                                  else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:158"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                1                                ,Cell.new(
                                  callProcedure( 'length',
                                      begin
                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_length)) then
                                          @_length
                                        else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:158"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _lst
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:162"] + __e.backtrace ) ; raise __e
                                        end
                                               ))
                                         )))
                           ) then
                              callProcedure( 'case-block',
                                  begin
                                      _case_MIMARKblock
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:160"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    callProcedure( 'car',
                                        begin
                                          if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                            @_car
                                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:160"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          begin
                                              _lst
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:162"] + __e.backtrace ) ; raise __e
                                          end
                                                 ))                                  ,Cell.new(
                                  Cell.new()
                                           )))
                          else
                              callProcedure( 'case-block',
                                  begin
                                      _case_MIMARKblock
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:160"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    callProcedure( 'car',
                                        begin
                                          if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                            @_car
                                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:160"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          begin
                                              _lst
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:162"] + __e.backtrace ) ; raise __e
                                          end
                                                 ))                                  ,Cell.new(
                                    callProcedure( 'cond-iter',
                                        begin
                                            _cond_MIMARKiter
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:162"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          callProcedure( 'cdr',
                                              begin
                                                if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                                  @_cdr
                                                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:161"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                begin
                                                    _lst
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:162"] + __e.backtrace ) ; raise __e
                                                end
                                                       ))
                                                 ))
                                           )))
                          end
                      end
                  }
                callProcedure( 'cond-iter',
                    begin
                        _cond_MIMARKiter
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:162"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          _lst
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:162"] + __e.backtrace ) ; raise __e
                      end
                             ))
            } ; ___lambda.call(
            nil,nil
                       )
          end
      }
#--------------------

  @_let1 = 
      LispMacro.new { |_var,_expr,*__rest__| _body = __rest__[0] ;  
          callProcedure( 'append',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_append)) then
                  @_append
                else raise NameError.new( "Error: undefined variable _append", "_append" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:166"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'list',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_list)) then
                        @_list
                      else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:167"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                    :"let"                    ,Cell.new(
                      callProcedure( 'list',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_list)) then
                              @_list
                            else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:167"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'list',
                                begin
                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_list)) then
                                    @_list
                                  else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:167"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _var
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:167"] + __e.backtrace ) ; raise __e
                                  end                                ,Cell.new(
                                  begin
                                      _expr
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:167"] + __e.backtrace ) ; raise __e
                                  end
                                         )))
                                   ))
                             )))              ,Cell.new(
                begin
                    _body
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:168"] + __e.backtrace ) ; raise __e
                end
                       )))
      }
#--------------------

  @_or = 
      LispMacro.new { |*__rest__| _lst = __rest__[0] ;  
          begin
            ___lambda = lambda { |_or_MIMARKiter| 
                _or_MIMARKiter                 = 
                  Proc.new { |_lst| 
                      if ( 
                        callProcedure( 'eq?',
                            begin
                              if (self.instance_variables.map {|x| x.intern}.include?(:@_eq_QUMARK)) then
                                @_eq_QUMARK
                              else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:177"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                            0                            ,Cell.new(
                              callProcedure( 'length',
                                  begin
                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_length)) then
                                      @_length
                                    else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:177"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        _lst
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:185"] + __e.backtrace ) ; raise __e
                                    end
                                           ))
                                     )))
                       ) then
                          begin
                            false
                          end
                      else
                          if ( 
                            callProcedure( 'eq?',
                                begin
                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_eq_QUMARK)) then
                                    @_eq_QUMARK
                                  else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:177"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                1                                ,Cell.new(
                                  callProcedure( 'length',
                                      begin
                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_length)) then
                                          @_length
                                        else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:177"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _lst
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:185"] + __e.backtrace ) ; raise __e
                                        end
                                               ))
                                         )))
                           ) then
                              begin
                                  begin
                                    ___lambda = lambda { |_sym| 
                                        callProcedure( 'list',
                                            begin
                                              if (self.instance_variables.map {|x| x.intern}.include?(:@_list)) then
                                                @_list
                                              else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:184"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                            :"let1"                                            ,Cell.new(
                                              begin
                                                  _sym
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:184"] + __e.backtrace ) ; raise __e
                                              end                                            ,Cell.new(
                                              callProcedure( 'car',
                                                  begin
                                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                                      @_car
                                                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:183"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    begin
                                                        _lst
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:185"] + __e.backtrace ) ; raise __e
                                                    end
                                                           ))                                            ,Cell.new(
                                              callProcedure( 'list',
                                                  begin
                                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_list)) then
                                                      @_list
                                                    else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:184"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                  :"if"                                                  ,Cell.new(
                                                    begin
                                                        _sym
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:184"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,Cell.new(
                                                    begin
                                                        _sym
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:184"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,Cell.new(
                                                  false
                                                           )))))
                                                     )))))
                                    } ; ___lambda.call(
                                          callProcedure( 'gensym',
                                              begin
                                                if (self.instance_variables.map {|x| x.intern}.include?(:@_gensym)) then
                                                  @_gensym
                                                else raise NameError.new( "Error: undefined variable _gensym", "_gensym" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:182"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                            Cell.new(
                                                       ))
                                               )
                                  end
                              end
                          else
                              if ( 
                              true
                               ) then
                                  begin
                                      begin
                                        ___lambda = lambda { |_sym| 
                                            callProcedure( 'list',
                                                begin
                                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_list)) then
                                                    @_list
                                                  else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:184"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                :"let1"                                                ,Cell.new(
                                                  begin
                                                      _sym
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:184"] + __e.backtrace ) ; raise __e
                                                  end                                                ,Cell.new(
                                                  callProcedure( 'car',
                                                      begin
                                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                                          @_car
                                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:183"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        begin
                                                            _lst
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:185"] + __e.backtrace ) ; raise __e
                                                        end
                                                               ))                                                ,Cell.new(
                                                  callProcedure( 'list',
                                                      begin
                                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_list)) then
                                                          @_list
                                                        else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:184"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                      :"if"                                                      ,Cell.new(
                                                        begin
                                                            _sym
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:184"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,Cell.new(
                                                        begin
                                                            _sym
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:184"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,Cell.new(
                                                        callProcedure( 'or-iter',
                                                            begin
                                                                _or_MIMARKiter
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:185"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              callProcedure( 'cdr',
                                                                  begin
                                                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                                                      @_cdr
                                                                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:184"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                    begin
                                                                        _lst
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:185"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                           ))
                                                                     ))
                                                               )))))
                                                         )))))
                                        } ; ___lambda.call(
                                              callProcedure( 'gensym',
                                                  begin
                                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_gensym)) then
                                                      @_gensym
                                                    else raise NameError.new( "Error: undefined variable _gensym", "_gensym" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:182"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                Cell.new(
                                                           ))
                                                   )
                                      end
                                  end
                              else
                                Nil.new
                              end
                          end
                      end
                  }
                callProcedure( 'or-iter',
                    begin
                        _or_MIMARKiter
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:185"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          _lst
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:185"] + __e.backtrace ) ; raise __e
                      end
                             ))
            } ; ___lambda.call(
            nil
                       )
          end
      }
#--------------------

  @_and = 
      LispMacro.new { |*__rest__| _lst = __rest__[0] ;  
          begin
            ___lambda = lambda { |_and_MIMARKiter| 
                _and_MIMARKiter                 = 
                  Proc.new { |_lst| 
                      if ( 
                        callProcedure( 'eq?',
                            begin
                              if (self.instance_variables.map {|x| x.intern}.include?(:@_eq_QUMARK)) then
                                @_eq_QUMARK
                              else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:197"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                            0                            ,Cell.new(
                              callProcedure( 'length',
                                  begin
                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_length)) then
                                      @_length
                                    else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:194"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        _lst
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:200"] + __e.backtrace ) ; raise __e
                                    end
                                           ))
                                     )))
                       ) then
                          begin
                            true
                          end
                      else
                          if ( 
                            callProcedure( 'eq?',
                                begin
                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_eq_QUMARK)) then
                                    @_eq_QUMARK
                                  else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:197"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                1                                ,Cell.new(
                                  callProcedure( 'length',
                                      begin
                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_length)) then
                                          @_length
                                        else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:194"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _lst
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:200"] + __e.backtrace ) ; raise __e
                                        end
                                               ))
                                         )))
                           ) then
                              begin
                                  callProcedure( 'car',
                                      begin
                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                          @_car
                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:197"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _lst
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:200"] + __e.backtrace ) ; raise __e
                                        end
                                               ))
                              end
                          else
                              if ( 
                              true
                               ) then
                                  begin
                                      callProcedure( 'list',
                                          begin
                                            if (self.instance_variables.map {|x| x.intern}.include?(:@_list)) then
                                              @_list
                                            else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:197"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                          :"if"                                          ,Cell.new(
                                            callProcedure( 'list',
                                                begin
                                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_list)) then
                                                    @_list
                                                  else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:197"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                :"not"                                                ,Cell.new(
                                                  callProcedure( 'list',
                                                      begin
                                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_list)) then
                                                          @_list
                                                        else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:197"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                      :"eq?"                                                      ,Cell.new(
                                                      false                                                      ,Cell.new(
                                                        callProcedure( 'car',
                                                            begin
                                                              if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                                                @_car
                                                              else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:197"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              begin
                                                                  _lst
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:200"] + __e.backtrace ) ; raise __e
                                                              end
                                                                     ))
                                                               ))))
                                                         )))                                          ,Cell.new(
                                            callProcedure( 'and-iter',
                                                begin
                                                    _and_MIMARKiter
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:200"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  callProcedure( 'cdr',
                                                      begin
                                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                                          @_cdr
                                                        else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:198"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        begin
                                                            _lst
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:200"] + __e.backtrace ) ; raise __e
                                                        end
                                                               ))
                                                         ))                                          ,Cell.new(
                                          false
                                                   )))))
                                  end
                              else
                                Nil.new
                              end
                          end
                      end
                  }
                callProcedure( 'and-iter',
                    begin
                        _and_MIMARKiter
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:200"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          _lst
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:200"] + __e.backtrace ) ; raise __e
                      end
                             ))
            } ; ___lambda.call(
            nil
                       )
          end
      }
#--------------------

  @_apply = 
      Proc.new { |_proc,*__rest__| _args = __rest__[0] ;  
          if ( 
            callProcedure( 'null?',
                begin
                  if (self.instance_variables.map {|x| x.intern}.include?(:@_null_QUMARK)) then
                    @_null_QUMARK
                  else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:204"] + __e.backtrace ) ; raise __e
                end              ,
                Cell.new(
                  begin
                      _args
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:208"] + __e.backtrace ) ; raise __e
                  end
                         ))
           ) then
              callProcedure( 'proc',
                  begin
                      _proc
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:207"] + __e.backtrace ) ; raise __e
                  end                ,
                Cell.new(
                           ))
          else
              callProcedure( 'anonymouse', 
                  Proc.new { |_lol| 
                      callProcedure( 'apply1',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_apply1)) then
                              @_apply1
                            else raise NameError.new( "Error: undefined variable _apply1", "_apply1" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:207"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                _proc
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:207"] + __e.backtrace ) ; raise __e
                            end                          ,Cell.new(
                            callProcedure( 'append',
                                begin
                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_append)) then
                                    @_append
                                  else raise NameError.new( "Error: undefined variable _append", "_append" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:207"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  callProcedure( 'reverse',
                                      begin
                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_reverse)) then
                                          @_reverse
                                        else raise NameError.new( "Error: undefined variable _reverse", "_reverse" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:208"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        callProcedure( 'cdr',
                                            begin
                                              if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                                @_cdr
                                              else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:207"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              begin
                                                  _lol
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:207"] + __e.backtrace ) ; raise __e
                                              end
                                                     ))
                                               ))                                ,Cell.new(
                                  callProcedure( 'car',
                                      begin
                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                          @_car
                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:207"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _lol
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:207"] + __e.backtrace ) ; raise __e
                                        end
                                               ))
                                         )))
                                   )))
                  }                ,
                  Cell.new(
                    callProcedure( 'reverse',
                        begin
                          if (self.instance_variables.map {|x| x.intern}.include?(:@_reverse)) then
                            @_reverse
                          else raise NameError.new( "Error: undefined variable _reverse", "_reverse" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:208"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              _args
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:208"] + __e.backtrace ) ; raise __e
                          end
                                 ))
                           ))
          end
      }
#--------------------

  @_quasiquote = 
      LispMacro.new { |_l| 
          begin
            ___lambda = lambda { |_mcons,_mappend,_foo| 
                _mcons                 = 
                  Proc.new { |_f,_l,_r| 
                      if ( 
                        if ( 
                          callProcedure( 'not',
                              begin
                                if (self.instance_variables.map {|x| x.intern}.include?(:@_not)) then
                                  @_not
                                else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:240"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                callProcedure( 'eq?',
                                    begin
                                      if (self.instance_variables.map {|x| x.intern}.include?(:@_eq_QUMARK)) then
                                        @_eq_QUMARK
                                      else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:261"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                    false                                    ,Cell.new(
                                      callProcedure( 'pair?',
                                          begin
                                            if (self.instance_variables.map {|x| x.intern}.include?(:@_pair_QUMARK)) then
                                              @_pair_QUMARK
                                            else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:252"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                _r
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:237"] + __e.backtrace ) ; raise __e
                                            end
                                                   ))
                                             )))
                                       ))
                         ) then
                            if ( 
                              callProcedure( 'not',
                                  begin
                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_not)) then
                                      @_not
                                    else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:240"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    callProcedure( 'eq?',
                                        begin
                                          if (self.instance_variables.map {|x| x.intern}.include?(:@_eq_QUMARK)) then
                                            @_eq_QUMARK
                                          else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:261"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                        false                                        ,Cell.new(
                                          callProcedure( 'eq?',
                                              begin
                                                if (self.instance_variables.map {|x| x.intern}.include?(:@_eq_QUMARK)) then
                                                  @_eq_QUMARK
                                                else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:261"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                callProcedure( 'car',
                                                    begin
                                                      if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                                        @_car
                                                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:264"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      begin
                                                          _r
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:237"] + __e.backtrace ) ; raise __e
                                                      end
                                                             ))                                              ,Cell.new(
                                              :"quote"
                                                       )))
                                                 )))
                                           ))
                             ) then
                                if ( 
                                  callProcedure( 'not',
                                      begin
                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_not)) then
                                          @_not
                                        else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:240"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        callProcedure( 'eq?',
                                            begin
                                              if (self.instance_variables.map {|x| x.intern}.include?(:@_eq_QUMARK)) then
                                                @_eq_QUMARK
                                              else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:261"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                            false                                            ,Cell.new(
                                              callProcedure( 'eq?',
                                                  begin
                                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_eq_QUMARK)) then
                                                      @_eq_QUMARK
                                                    else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:261"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    callProcedure( 'car',
                                                        begin
                                                          if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                                            @_car
                                                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:264"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                          callProcedure( 'cdr',
                                                              begin
                                                                if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                                                  @_cdr
                                                                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                                begin
                                                                    _r
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:237"] + __e.backtrace ) ; raise __e
                                                                end
                                                                       ))
                                                                 ))                                                  ,Cell.new(
                                                    callProcedure( 'cdr',
                                                        begin
                                                          if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                                            @_cdr
                                                          else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                          begin
                                                              _f
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:232"] + __e.backtrace ) ; raise __e
                                                          end
                                                                 ))
                                                           )))
                                                     )))
                                               ))
                                 ) then
                                    if ( 
                                      callProcedure( 'not',
                                          begin
                                            if (self.instance_variables.map {|x| x.intern}.include?(:@_not)) then
                                              @_not
                                            else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:240"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            callProcedure( 'eq?',
                                                begin
                                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_eq_QUMARK)) then
                                                    @_eq_QUMARK
                                                  else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:261"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                false                                                ,Cell.new(
                                                  callProcedure( 'pair?',
                                                      begin
                                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_pair_QUMARK)) then
                                                          @_pair_QUMARK
                                                        else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:252"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        begin
                                                            _l
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:266"] + __e.backtrace ) ; raise __e
                                                        end
                                                               ))
                                                         )))
                                                   ))
                                     ) then
                                        if ( 
                                          callProcedure( 'not',
                                              begin
                                                if (self.instance_variables.map {|x| x.intern}.include?(:@_not)) then
                                                  @_not
                                                else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:240"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                callProcedure( 'eq?',
                                                    begin
                                                      if (self.instance_variables.map {|x| x.intern}.include?(:@_eq_QUMARK)) then
                                                        @_eq_QUMARK
                                                      else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:261"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                    false                                                    ,Cell.new(
                                                      callProcedure( 'eq?',
                                                          begin
                                                            if (self.instance_variables.map {|x| x.intern}.include?(:@_eq_QUMARK)) then
                                                              @_eq_QUMARK
                                                            else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:261"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            callProcedure( 'car',
                                                                begin
                                                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                                                    @_car
                                                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:264"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                  begin
                                                                      _l
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:266"] + __e.backtrace ) ; raise __e
                                                                  end
                                                                         ))                                                          ,Cell.new(
                                                          :"quote"
                                                                   )))
                                                             )))
                                                       ))
                                         ) then
                                            callProcedure( 'eq?',
                                                begin
                                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_eq_QUMARK)) then
                                                    @_eq_QUMARK
                                                  else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:261"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  callProcedure( 'car',
                                                      begin
                                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                                          @_car
                                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:264"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        callProcedure( 'cdr',
                                                            begin
                                                              if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                                                @_cdr
                                                              else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              begin
                                                                  _l
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:266"] + __e.backtrace ) ; raise __e
                                                              end
                                                                     ))
                                                               ))                                                ,Cell.new(
                                                  callProcedure( 'car',
                                                      begin
                                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                                          @_car
                                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:264"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        begin
                                                            _f
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:232"] + __e.backtrace ) ; raise __e
                                                        end
                                                               ))
                                                         )))
                                        else
                                          false
                                        end
                                    else
                                      false
                                    end
                                else
                                  false
                                end
                            else
                              false
                            end
                        else
                          false
                        end
                       ) then
                          if ( 
                            begin
                              ___lambda = lambda { |___gensym__7| 
                                  if ( 
                                    begin
                                        ___gensym__7
                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                    end
                                   ) then
                                      begin
                                          ___gensym__7
                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                      end
                                  else
                                      begin
                                        ___lambda = lambda { |___gensym__8| 
                                            if ( 
                                              begin
                                                  ___gensym__8
                                                rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                              end
                                             ) then
                                                begin
                                                    ___gensym__8
                                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                end
                                            else
                                                begin
                                                  ___lambda = lambda { |___gensym__9| 
                                                      if ( 
                                                        begin
                                                            ___gensym__9
                                                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                        end
                                                       ) then
                                                          begin
                                                              ___gensym__9
                                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                          end
                                                      else
                                                        false
                                                      end
                                                  } ; ___lambda.call(
                                                        callProcedure( 'string?',
                                                            begin
                                                              if (self.instance_variables.map {|x| x.intern}.include?(:@_string_QUMARK)) then
                                                                @_string_QUMARK
                                                              else raise NameError.new( "Error: undefined variable _string_QUMARK", "_string_QUMARK" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:241"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              begin
                                                                  _f
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:232"] + __e.backtrace ) ; raise __e
                                                              end
                                                                     ))
                                                             )
                                                end
                                            end
                                        } ; ___lambda.call(
                                              callProcedure( 'number?',
                                                  begin
                                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_number_QUMARK)) then
                                                      @_number_QUMARK
                                                    else raise NameError.new( "Error: undefined variable _number_QUMARK", "_number_QUMARK" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:241"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    begin
                                                        _f
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:232"] + __e.backtrace ) ; raise __e
                                                    end
                                                           ))
                                                   )
                                      end
                                  end
                              } ; ___lambda.call(
                                    callProcedure( 'procedure?',
                                        begin
                                          if (self.instance_variables.map {|x| x.intern}.include?(:@_procedure_QUMARK)) then
                                            @_procedure_QUMARK
                                          else raise NameError.new( "Error: undefined variable _procedure_QUMARK", "_procedure_QUMARK" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:241"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          begin
                                              _f
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:232"] + __e.backtrace ) ; raise __e
                                          end
                                                 ))
                                         )
                            end
                           ) then
                              begin
                                  _f
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:232"] + __e.backtrace ) ; raise __e
                              end
                          else
                              callProcedure( 'list',
                                  begin
                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_list)) then
                                      @_list
                                    else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:243"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                  :"quote"                                  ,Cell.new(
                                    begin
                                        _f
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:232"] + __e.backtrace ) ; raise __e
                                    end
                                           )))
                          end
                      else
                          callProcedure( 'list',
                              begin
                                if (self.instance_variables.map {|x| x.intern}.include?(:@_list)) then
                                  @_list
                                else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:243"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                              :"cons"                              ,Cell.new(
                                begin
                                    _l
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:266"] + __e.backtrace ) ; raise __e
                                end                              ,Cell.new(
                                begin
                                    _r
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:237"] + __e.backtrace ) ; raise __e
                                end
                                       ))))
                      end
                  }
                _mappend                 = 
                  Proc.new { |_f,_l,_r| 
                      if ( 
                        begin
                          ___lambda = lambda { |___gensym__10| 
                              if ( 
                                begin
                                    ___gensym__10
                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                end
                               ) then
                                  begin
                                      ___gensym__10
                                    rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                  end
                              else
                                  begin
                                    ___lambda = lambda { |___gensym__11| 
                                        if ( 
                                          begin
                                              ___gensym__11
                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                          end
                                         ) then
                                            begin
                                                ___gensym__11
                                              rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                            end
                                        else
                                          false
                                        end
                                    } ; ___lambda.call(
                                          if ( 
                                            callProcedure( 'not',
                                                begin
                                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_not)) then
                                                    @_not
                                                  else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:240"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  callProcedure( 'eq?',
                                                      begin
                                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_eq_QUMARK)) then
                                                          @_eq_QUMARK
                                                        else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:261"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                      false                                                      ,Cell.new(
                                                        callProcedure( 'pair?',
                                                            begin
                                                              if (self.instance_variables.map {|x| x.intern}.include?(:@_pair_QUMARK)) then
                                                                @_pair_QUMARK
                                                              else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:252"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              begin
                                                                  _r
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:237"] + __e.backtrace ) ; raise __e
                                                              end
                                                                     ))
                                                               )))
                                                         ))
                                           ) then
                                              if ( 
                                                callProcedure( 'not',
                                                    begin
                                                      if (self.instance_variables.map {|x| x.intern}.include?(:@_not)) then
                                                        @_not
                                                      else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:240"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      callProcedure( 'eq?',
                                                          begin
                                                            if (self.instance_variables.map {|x| x.intern}.include?(:@_eq_QUMARK)) then
                                                              @_eq_QUMARK
                                                            else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:261"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                          false                                                          ,Cell.new(
                                                            callProcedure( 'eq?',
                                                                begin
                                                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_eq_QUMARK)) then
                                                                    @_eq_QUMARK
                                                                  else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:261"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                  callProcedure( 'car',
                                                                      begin
                                                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                                                          @_car
                                                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:264"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                      Cell.new(
                                                                        begin
                                                                            _r
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:237"] + __e.backtrace ) ; raise __e
                                                                        end
                                                                               ))                                                                ,Cell.new(
                                                                :"quote"
                                                                         )))
                                                                   )))
                                                             ))
                                               ) then
                                                  callProcedure( 'eq?',
                                                      begin
                                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_eq_QUMARK)) then
                                                          @_eq_QUMARK
                                                        else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:261"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        callProcedure( 'car',
                                                            begin
                                                              if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                                                @_car
                                                              else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:264"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              callProcedure( 'cdr',
                                                                  begin
                                                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                                                      @_cdr
                                                                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                    begin
                                                                        _r
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:237"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                           ))
                                                                     ))                                                      ,Cell.new(
                                                      Cell.new()
                                                               )))
                                              else
                                                false
                                              end
                                          else
                                            false
                                          end
                                               )
                                  end
                              end
                          } ; ___lambda.call(
                                callProcedure( 'null?',
                                    begin
                                      if (self.instance_variables.map {|x| x.intern}.include?(:@_null_QUMARK)) then
                                        @_null_QUMARK
                                      else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:232"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      callProcedure( 'cdr',
                                          begin
                                            if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                              @_cdr
                                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                _f
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:232"] + __e.backtrace ) ; raise __e
                                            end
                                                   ))
                                             ))
                                     )
                        end
                       ) then
                          begin
                              _l
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:266"] + __e.backtrace ) ; raise __e
                          end
                      else
                          callProcedure( 'list',
                              begin
                                if (self.instance_variables.map {|x| x.intern}.include?(:@_list)) then
                                  @_list
                                else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:243"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                              :"append"                              ,Cell.new(
                                begin
                                    _l
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:266"] + __e.backtrace ) ; raise __e
                                end                              ,Cell.new(
                                begin
                                    _r
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:237"] + __e.backtrace ) ; raise __e
                                end
                                       ))))
                      end
                  }
                _foo                 = 
                  Proc.new { |_level,_form| 
                      if ( 
                        callProcedure( 'not',
                            begin
                              if (self.instance_variables.map {|x| x.intern}.include?(:@_not)) then
                                @_not
                              else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:240"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              callProcedure( 'pair?',
                                  begin
                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_pair_QUMARK)) then
                                      @_pair_QUMARK
                                    else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:252"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        _form
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                    end
                                           ))
                                     ))
                       ) then
                          begin
                              if ( 
                                begin
                                  ___lambda = lambda { |___gensym__15| 
                                      if ( 
                                        begin
                                            ___gensym__15
                                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                        end
                                       ) then
                                          begin
                                              ___gensym__15
                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                          end
                                      else
                                          begin
                                            ___lambda = lambda { |___gensym__16| 
                                                if ( 
                                                  begin
                                                      ___gensym__16
                                                    rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                  end
                                                 ) then
                                                    begin
                                                        ___gensym__16
                                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                    end
                                                else
                                                    begin
                                                      ___lambda = lambda { |___gensym__17| 
                                                          if ( 
                                                            begin
                                                                ___gensym__17
                                                              rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                            end
                                                           ) then
                                                              begin
                                                                  ___gensym__17
                                                                rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                              end
                                                          else
                                                            false
                                                          end
                                                      } ; ___lambda.call(
                                                            callProcedure( 'string?',
                                                                begin
                                                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_string_QUMARK)) then
                                                                    @_string_QUMARK
                                                                  else raise NameError.new( "Error: undefined variable _string_QUMARK", "_string_QUMARK" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:241"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                  begin
                                                                      _form
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                                  end
                                                                         ))
                                                                 )
                                                    end
                                                end
                                            } ; ___lambda.call(
                                                  callProcedure( 'number?',
                                                      begin
                                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_number_QUMARK)) then
                                                          @_number_QUMARK
                                                        else raise NameError.new( "Error: undefined variable _number_QUMARK", "_number_QUMARK" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:241"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        begin
                                                            _form
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                        end
                                                               ))
                                                       )
                                          end
                                      end
                                  } ; ___lambda.call(
                                        callProcedure( 'procedure?',
                                            begin
                                              if (self.instance_variables.map {|x| x.intern}.include?(:@_procedure_QUMARK)) then
                                                @_procedure_QUMARK
                                              else raise NameError.new( "Error: undefined variable _procedure_QUMARK", "_procedure_QUMARK" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:241"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              begin
                                                  _form
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                              end
                                                     ))
                                             )
                                end
                               ) then
                                  begin
                                      _form
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                  end
                              else
                                  callProcedure( 'list',
                                      begin
                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_list)) then
                                          @_list
                                        else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:243"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                      :"quote"                                      ,Cell.new(
                                        begin
                                            _form
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                        end
                                               )))
                              end
                          end
                      else
                          if ( 
                            callProcedure( 'eq?',
                                begin
                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_eq_QUMARK)) then
                                    @_eq_QUMARK
                                  else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:261"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                :"quasiquote"                                ,Cell.new(
                                  callProcedure( 'car',
                                      begin
                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                          @_car
                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:264"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _form
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                        end
                                               ))
                                         )))
                           ) then
                              begin
                                  callProcedure( 'mcons',
                                      begin
                                          _mcons
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:264"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _form
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                        end                                      ,Cell.new(
                                      Cell.new(:"quote",Cell.new(:"quasiquote"))                                      ,Cell.new(
                                        callProcedure( 'foo',
                                            begin
                                                _foo
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:266"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              callProcedure( '+',
                                                  begin
                                                    if (self.instance_variables.map {|x| x.intern}.include?(:@__PLMARK)) then
                                                      @__PLMARK
                                                    else raise NameError.new( "Error: undefined variable __PLMARK", "__PLMARK" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:246"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    begin
                                                        _level
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,Cell.new(
                                                  1
                                                           )))                                            ,Cell.new(
                                              callProcedure( 'cdr',
                                                  begin
                                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                                      @_cdr
                                                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    begin
                                                        _form
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                    end
                                                           ))
                                                     )))
                                               ))))
                              end
                          else
                              if ( 
                              true
                               ) then
                                  begin
                                      if ( 
                                        callProcedure( 'zero?',
                                            begin
                                              if (self.instance_variables.map {|x| x.intern}.include?(:@_zero_QUMARK)) then
                                                @_zero_QUMARK
                                              else raise NameError.new( "Error: undefined variable _zero_QUMARK", "_zero_QUMARK" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:247"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              begin
                                                  _level
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                              end
                                                     ))
                                       ) then
                                          if ( 
                                            callProcedure( 'eq?',
                                                begin
                                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_eq_QUMARK)) then
                                                    @_eq_QUMARK
                                                  else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:261"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  callProcedure( 'car',
                                                      begin
                                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                                          @_car
                                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:264"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        begin
                                                            _form
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                        end
                                                               ))                                                ,Cell.new(
                                                :"unquote"
                                                         )))
                                           ) then
                                              begin
                                                  callProcedure( 'car',
                                                      begin
                                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                                          @_car
                                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:264"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        callProcedure( 'cdr',
                                                            begin
                                                              if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                                                @_cdr
                                                              else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              begin
                                                                  _form
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                              end
                                                                     ))
                                                               ))
                                              end
                                          else
                                              if ( 
                                                callProcedure( 'eq?',
                                                    begin
                                                      if (self.instance_variables.map {|x| x.intern}.include?(:@_eq_QUMARK)) then
                                                        @_eq_QUMARK
                                                      else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:261"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      callProcedure( 'car',
                                                          begin
                                                            if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                                              @_car
                                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:264"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            begin
                                                                _form
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                            end
                                                                   ))                                                    ,Cell.new(
                                                    :"unquote-splicing"
                                                             )))
                                               ) then
                                                  begin
                                                      begin raise RuntimeError, 
                                                      "Unquote-splicing wasn't in a list:"
                                                      rescue => __e 
                                                        __e.set_backtrace( ["./lib/init.nnd:250"] + __e.backtrace )
                                                        raise __e
                                                      end 
                                                  end
                                              else
                                                  if ( 
                                                    if ( 
                                                      callProcedure( 'not',
                                                          begin
                                                            if (self.instance_variables.map {|x| x.intern}.include?(:@_not)) then
                                                              @_not
                                                            else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:240"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            callProcedure( 'eq?',
                                                                begin
                                                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_eq_QUMARK)) then
                                                                    @_eq_QUMARK
                                                                  else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:261"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                false                                                                ,Cell.new(
                                                                  callProcedure( 'pair?',
                                                                      begin
                                                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_pair_QUMARK)) then
                                                                          @_pair_QUMARK
                                                                        else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:252"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                      Cell.new(
                                                                        callProcedure( 'car',
                                                                            begin
                                                                              if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                                                                @_car
                                                                              else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:264"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                            Cell.new(
                                                                              begin
                                                                                  _form
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                                              end
                                                                                     ))
                                                                               ))
                                                                         )))
                                                                   ))
                                                     ) then
                                                        callProcedure( 'eq?',
                                                            begin
                                                              if (self.instance_variables.map {|x| x.intern}.include?(:@_eq_QUMARK)) then
                                                                @_eq_QUMARK
                                                              else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:261"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              callProcedure( 'car',
                                                                  begin
                                                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                                                      @_car
                                                                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:264"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                    callProcedure( 'car',
                                                                        begin
                                                                          if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                                                            @_car
                                                                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:264"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                        Cell.new(
                                                                          begin
                                                                              _form
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                                          end
                                                                                 ))
                                                                           ))                                                            ,Cell.new(
                                                            :"unquote-splicing"
                                                                     )))
                                                    else
                                                      false
                                                    end
                                                   ) then
                                                      begin
                                                          callProcedure( 'mappend',
                                                              begin
                                                                  _mappend
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:254"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                                begin
                                                                    _form
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,Cell.new(
                                                                callProcedure( 'car',
                                                                    begin
                                                                      if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                                                        @_car
                                                                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:264"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                    Cell.new(
                                                                      callProcedure( 'cdr',
                                                                          begin
                                                                            if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                                                              @_cdr
                                                                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                          Cell.new(
                                                                            callProcedure( 'car',
                                                                                begin
                                                                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                                                                    @_car
                                                                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:264"] + __e.backtrace ) ; raise __e
                                                                                end                                                                              ,
                                                                                Cell.new(
                                                                                  begin
                                                                                      _form
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                                                  end
                                                                                         ))
                                                                                   ))
                                                                             ))                                                              ,Cell.new(
                                                                callProcedure( 'foo',
                                                                    begin
                                                                        _foo
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:266"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                    Cell.new(
                                                                      begin
                                                                          _level
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,Cell.new(
                                                                      callProcedure( 'cdr',
                                                                          begin
                                                                            if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                                                              @_cdr
                                                                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                          Cell.new(
                                                                            begin
                                                                                _form
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                                            end
                                                                                   ))
                                                                             )))
                                                                       ))))
                                                      end
                                                  else
                                                      if ( 
                                                      true
                                                       ) then
                                                          begin
                                                              callProcedure( 'mcons',
                                                                  begin
                                                                      _mcons
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:264"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                    begin
                                                                        _form
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,Cell.new(
                                                                    callProcedure( 'foo',
                                                                        begin
                                                                            _foo
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:266"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                        Cell.new(
                                                                          begin
                                                                              _level
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,Cell.new(
                                                                          callProcedure( 'car',
                                                                              begin
                                                                                if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                                                                  @_car
                                                                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:264"] + __e.backtrace ) ; raise __e
                                                                              end                                                                            ,
                                                                              Cell.new(
                                                                                begin
                                                                                    _form
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                                                end
                                                                                       ))
                                                                                 )))                                                                  ,Cell.new(
                                                                    callProcedure( 'foo',
                                                                        begin
                                                                            _foo
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:266"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                        Cell.new(
                                                                          begin
                                                                              _level
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,Cell.new(
                                                                          callProcedure( 'cdr',
                                                                              begin
                                                                                if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                                                                  @_cdr
                                                                                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                                              end                                                                            ,
                                                                              Cell.new(
                                                                                begin
                                                                                    _form
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                                                end
                                                                                       ))
                                                                                 )))
                                                                           ))))
                                                          end
                                                      else
                                                        Nil.new
                                                      end
                                                  end
                                              end
                                          end
                                      else
                                          if ( 
                                            callProcedure( 'eq?',
                                                begin
                                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_eq_QUMARK)) then
                                                    @_eq_QUMARK
                                                  else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:261"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  callProcedure( 'car',
                                                      begin
                                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                                          @_car
                                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:264"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        begin
                                                            _form
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                        end
                                                               ))                                                ,Cell.new(
                                                :"unquote"
                                                         )))
                                           ) then
                                              begin
                                                  callProcedure( 'mcons',
                                                      begin
                                                          _mcons
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:264"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        begin
                                                            _form
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,Cell.new(
                                                      Cell.new(:"quote",Cell.new(:"unquote"))                                                      ,Cell.new(
                                                        callProcedure( 'foo',
                                                            begin
                                                                _foo
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:266"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              callProcedure( '-',
                                                                  begin
                                                                    if (self.instance_variables.map {|x| x.intern}.include?(:@__MIMARK)) then
                                                                      @__MIMARK
                                                                    else raise NameError.new( "Error: undefined variable __MIMARK", "__MIMARK" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:263"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                    begin
                                                                        _level
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,Cell.new(
                                                                  1
                                                                           )))                                                            ,Cell.new(
                                                              callProcedure( 'cdr',
                                                                  begin
                                                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                                                      @_cdr
                                                                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                    begin
                                                                        _form
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                           ))
                                                                     )))
                                                               ))))
                                              end
                                          else
                                              if ( 
                                                callProcedure( 'eq?',
                                                    begin
                                                      if (self.instance_variables.map {|x| x.intern}.include?(:@_eq_QUMARK)) then
                                                        @_eq_QUMARK
                                                      else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:261"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      callProcedure( 'car',
                                                          begin
                                                            if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                                              @_car
                                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:264"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            begin
                                                                _form
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                            end
                                                                   ))                                                    ,Cell.new(
                                                    :"unquote-splicing"
                                                             )))
                                               ) then
                                                  begin
                                                      callProcedure( 'mcons',
                                                          begin
                                                              _mcons
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:264"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            begin
                                                                _form
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,Cell.new(
                                                          Cell.new(:"quote",Cell.new(:"unquote-splicing"))                                                          ,Cell.new(
                                                            callProcedure( 'foo',
                                                                begin
                                                                    _foo
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:266"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                  callProcedure( '-',
                                                                      begin
                                                                        if (self.instance_variables.map {|x| x.intern}.include?(:@__MIMARK)) then
                                                                          @__MIMARK
                                                                        else raise NameError.new( "Error: undefined variable __MIMARK", "__MIMARK" ) end
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:263"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                      Cell.new(
                                                                        begin
                                                                            _level
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,Cell.new(
                                                                      1
                                                                               )))                                                                ,Cell.new(
                                                                  callProcedure( 'cdr',
                                                                      begin
                                                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                                                          @_cdr
                                                                        else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                      Cell.new(
                                                                        begin
                                                                            _form
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                                        end
                                                                               ))
                                                                         )))
                                                                   ))))
                                                  end
                                              else
                                                  if ( 
                                                  true
                                                   ) then
                                                      begin
                                                          callProcedure( 'mcons',
                                                              begin
                                                                  _mcons
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:264"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                                begin
                                                                    _form
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,Cell.new(
                                                                callProcedure( 'foo',
                                                                    begin
                                                                        _foo
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:266"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                    Cell.new(
                                                                      begin
                                                                          _level
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,Cell.new(
                                                                      callProcedure( 'car',
                                                                          begin
                                                                            if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                                                              @_car
                                                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:264"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                          Cell.new(
                                                                            begin
                                                                                _form
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                                            end
                                                                                   ))
                                                                             )))                                                              ,Cell.new(
                                                                callProcedure( 'foo',
                                                                    begin
                                                                        _foo
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:266"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                    Cell.new(
                                                                      begin
                                                                          _level
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,Cell.new(
                                                                      callProcedure( 'cdr',
                                                                          begin
                                                                            if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                                                              @_cdr
                                                                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                          Cell.new(
                                                                            begin
                                                                                _form
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:265"] + __e.backtrace ) ; raise __e
                                                                            end
                                                                                   ))
                                                                             )))
                                                                       ))))
                                                      end
                                                  else
                                                    Nil.new
                                                  end
                                              end
                                          end
                                      end
                                  end
                              else
                                Nil.new
                              end
                          end
                      end
                  }
                callProcedure( 'foo',
                    begin
                        _foo
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:266"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                    0                    ,Cell.new(
                      begin
                          _l
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:266"] + __e.backtrace ) ; raise __e
                      end
                             )))
            } ; ___lambda.call(
            nil,nil,nil
                       )
          end
      }
#--------------------

  @_unquote = 
      LispMacro.new { |_lst| 
          begin raise RuntimeError, 
          "unquote appeared outside quasiquote"
          rescue => __e 
            __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace )
            raise __e
          end 
      }
#--------------------

  @_unquote_MIMARKsplicing = 
      LispMacro.new { |_lst| 
          begin raise RuntimeError, 
          "unquote-splicing appeared outside quasiquote"
          rescue => __e 
            __e.set_backtrace( ["./lib/init.nnd:274"] + __e.backtrace )
            raise __e
          end 
      }
#--------------------

  @_when = 
      LispMacro.new { |*__rest__| _form = __rest__[0] ;  
          callProcedure( 'cons',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                  @_cons
                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
              :"if"              ,Cell.new(
                callProcedure( 'cons',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                        @_cons
                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'car',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                              @_car
                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:279"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                _form
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:279"] + __e.backtrace ) ; raise __e
                            end
                                   ))                    ,Cell.new(
                      callProcedure( 'cons',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                              @_cons
                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'cons',
                                begin
                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                    @_cons
                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                :"begin"                                ,Cell.new(
                                  callProcedure( 'cdr',
                                      begin
                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                          @_cdr
                                        else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:279"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _form
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:279"] + __e.backtrace ) ; raise __e
                                        end
                                               ))
                                         )))                          ,Cell.new(
                          
                                   )))
                             )))
                       )))
      }
#--------------------

  @_unless = 
      LispMacro.new { |*__rest__| _form = __rest__[0] ;  
          callProcedure( 'cons',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                  @_cons
                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
              :"if"              ,Cell.new(
                callProcedure( 'cons',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                        @_cons
                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'cons',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                              @_cons
                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                          :"not"                          ,Cell.new(
                            callProcedure( 'cons',
                                begin
                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                    @_cons
                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  callProcedure( 'car',
                                      begin
                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                          @_car
                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:283"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _form
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:283"] + __e.backtrace ) ; raise __e
                                        end
                                               ))                                ,Cell.new(
                                
                                         )))
                                   )))                    ,Cell.new(
                      callProcedure( 'cons',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                              @_cons
                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'cons',
                                begin
                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                    @_cons
                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                :"begin"                                ,Cell.new(
                                  callProcedure( 'cdr',
                                      begin
                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                          @_cdr
                                        else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:283"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _form
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:283"] + __e.backtrace ) ; raise __e
                                        end
                                               ))
                                         )))                          ,Cell.new(
                          
                                   )))
                             )))
                       )))
      }
#--------------------

  @_while = 
      LispMacro.new { |*__rest__| _form = __rest__[0] ;  
          begin
            ___lambda = lambda { |_sym| 
                callProcedure( 'cons',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                        @_cons
                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                    :"begin"                    ,Cell.new(
                      callProcedure( 'cons',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                              @_cons
                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'cons',
                                begin
                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                    @_cons
                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                :"define"                                ,Cell.new(
                                  callProcedure( 'cons',
                                      begin
                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                          @_cons
                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _sym
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:294"] + __e.backtrace ) ; raise __e
                                        end                                      ,Cell.new(
                                        callProcedure( 'cons',
                                            begin
                                              if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                @_cons
                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              callProcedure( 'cons',
                                                  begin
                                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                      @_cons
                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                  :"lambda"                                                  ,Cell.new(
                                                    callProcedure( 'cons',
                                                        begin
                                                          if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                            @_cons
                                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                        Cell.new()                                                        ,Cell.new(
                                                          callProcedure( 'cons',
                                                              begin
                                                                if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                                  @_cons
                                                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                                callProcedure( 'cons',
                                                                    begin
                                                                      if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                                        @_cons
                                                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                    Cell.new(
                                                                    :"if"                                                                    ,Cell.new(
                                                                      callProcedure( 'cons',
                                                                          begin
                                                                            if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                                              @_cons
                                                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                          Cell.new(
                                                                            callProcedure( 'car',
                                                                                begin
                                                                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                                                                    @_car
                                                                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:291"] + __e.backtrace ) ; raise __e
                                                                                end                                                                              ,
                                                                                Cell.new(
                                                                                  begin
                                                                                      _form
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:292"] + __e.backtrace ) ; raise __e
                                                                                  end
                                                                                         ))                                                                          ,Cell.new(
                                                                            callProcedure( 'cons',
                                                                                begin
                                                                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                                                    @_cons
                                                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
                                                                                end                                                                              ,
                                                                                Cell.new(
                                                                                  callProcedure( 'cons',
                                                                                      begin
                                                                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                                                          @_cons
                                                                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
                                                                                      end                                                                                    ,
                                                                                      Cell.new(
                                                                                      :"begin"                                                                                      ,Cell.new(
                                                                                        callProcedure( 'append',
                                                                                            begin
                                                                                              if (self.instance_variables.map {|x| x.intern}.include?(:@_append)) then
                                                                                                @_append
                                                                                              else raise NameError.new( "Error: undefined variable _append", "_append" ) end
                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:237"] + __e.backtrace ) ; raise __e
                                                                                            end                                                                                          ,
                                                                                            Cell.new(
                                                                                              callProcedure( 'cdr',
                                                                                                  begin
                                                                                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                                                                                      @_cdr
                                                                                                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:292"] + __e.backtrace ) ; raise __e
                                                                                                  end                                                                                                ,
                                                                                                  Cell.new(
                                                                                                    begin
                                                                                                        _form
                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:292"] + __e.backtrace ) ; raise __e
                                                                                                    end
                                                                                                           ))                                                                                            ,Cell.new(
                                                                                              callProcedure( 'cons',
                                                                                                  begin
                                                                                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                                                                      @_cons
                                                                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
                                                                                                  end                                                                                                ,
                                                                                                  Cell.new(
                                                                                                    callProcedure( 'cons',
                                                                                                        begin
                                                                                                          if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                                                                            @_cons
                                                                                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
                                                                                                        end                                                                                                      ,
                                                                                                        Cell.new(
                                                                                                          begin
                                                                                                              _sym
                                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:294"] + __e.backtrace ) ; raise __e
                                                                                                          end                                                                                                        ,Cell.new(
                                                                                                        
                                                                                                                 )))                                                                                                  ,Cell.new(
                                                                                                  
                                                                                                           )))
                                                                                                     )))
                                                                                               )))                                                                                ,Cell.new(
                                                                                
                                                                                         )))
                                                                                   )))
                                                                             )))                                                              ,Cell.new(
                                                              
                                                                       )))
                                                                 )))
                                                           )))                                            ,Cell.new(
                                            
                                                     )))
                                               )))
                                         )))                          ,Cell.new(
                            callProcedure( 'cons',
                                begin
                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                    @_cons
                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  callProcedure( 'cons',
                                      begin
                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                          @_cons
                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _sym
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:294"] + __e.backtrace ) ; raise __e
                                        end                                      ,Cell.new(
                                      
                                               )))                                ,Cell.new(
                                
                                         )))
                                   )))
                             )))
            } ; ___lambda.call(
                  callProcedure( 'gensym',
                      begin
                        if (self.instance_variables.map {|x| x.intern}.include?(:@_gensym)) then
                          @_gensym
                        else raise NameError.new( "Error: undefined variable _gensym", "_gensym" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:287"] + __e.backtrace ) ; raise __e
                      end                    ,
                    Cell.new(
                               ))
                       )
          end
      }
#--------------------

  @_until = 
      LispMacro.new { |*__rest__| _form = __rest__[0] ;  
          callProcedure( 'cons',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                  @_cons
                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
              :"while"              ,Cell.new(
                callProcedure( 'cons',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                        @_cons
                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'cons',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                              @_cons
                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                          :"not"                          ,Cell.new(
                            callProcedure( 'cons',
                                begin
                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                    @_cons
                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  callProcedure( 'car',
                                      begin
                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                          @_car
                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:298"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _form
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:299"] + __e.backtrace ) ; raise __e
                                        end
                                               ))                                ,Cell.new(
                                
                                         )))
                                   )))                    ,Cell.new(
                      callProcedure( 'cdr',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                              @_cdr
                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:299"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                _form
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:299"] + __e.backtrace ) ; raise __e
                            end
                                   ))
                             )))
                       )))
      }
#--------------------

  @_let = 
      LispMacro.new { |*__rest__| _lst = __rest__[0] ;  
          if ( 
            callProcedure( 'symbol?',
                begin
                  if (self.instance_variables.map {|x| x.intern}.include?(:@_symbol_QUMARK)) then
                    @_symbol_QUMARK
                  else raise NameError.new( "Error: undefined variable _symbol_QUMARK", "_symbol_QUMARK" ) end
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:304"] + __e.backtrace ) ; raise __e
                end              ,
                Cell.new(
                  callProcedure( 'car',
                      begin
                        if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                          @_car
                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:304"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                        begin
                            _lst
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:319"] + __e.backtrace ) ; raise __e
                        end
                               ))
                         ))
           ) then
              callProcedure( 'cons',
                  begin
                    if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                      @_cons
                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"letrec"                  ,Cell.new(
                    callProcedure( 'cons',
                        begin
                          if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                            @_cons
                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          callProcedure( 'cons',
                              begin
                                if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                  @_cons
                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                callProcedure( 'cons',
                                    begin
                                      if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                        @_cons
                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      callProcedure( 'first',
                                          begin
                                            if (self.instance_variables.map {|x| x.intern}.include?(:@_first)) then
                                              @_first
                                            else raise NameError.new( "Error: undefined variable _first", "_first" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:312"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                _lst
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:319"] + __e.backtrace ) ; raise __e
                                            end
                                                   ))                                    ,Cell.new(
                                      callProcedure( 'cons',
                                          begin
                                            if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                              @_cons
                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            callProcedure( 'cons',
                                                begin
                                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                    @_cons
                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                :"lambda"                                                ,Cell.new(
                                                  callProcedure( 'cons',
                                                      begin
                                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                          @_cons
                                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        callProcedure( 'map',
                                                            begin
                                                              if (self.instance_variables.map {|x| x.intern}.include?(:@_map)) then
                                                                @_map
                                                              else raise NameError.new( "Error: undefined variable _map", "_map" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:313"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              Proc.new { |_x| 
                                                                  callProcedure( 'first',
                                                                      begin
                                                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_first)) then
                                                                          @_first
                                                                        else raise NameError.new( "Error: undefined variable _first", "_first" ) end
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:312"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                      Cell.new(
                                                                        begin
                                                                            _x
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:315"] + __e.backtrace ) ; raise __e
                                                                        end
                                                                               ))
                                                              }                                                            ,Cell.new(
                                                              callProcedure( 'second',
                                                                  begin
                                                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_second)) then
                                                                      @_second
                                                                    else raise NameError.new( "Error: undefined variable _second", "_second" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:316"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                    begin
                                                                        _lst
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:319"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                           ))
                                                                     )))                                                      ,Cell.new(
                                                        callProcedure( 'cons',
                                                            begin
                                                              if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                                @_cons
                                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              callProcedure( 'third',
                                                                  begin
                                                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_third)) then
                                                                      @_third
                                                                    else raise NameError.new( "Error: undefined variable _third", "_third" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:311"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                    begin
                                                                        _lst
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:319"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                           ))                                                            ,Cell.new(
                                                            
                                                                     )))
                                                               )))
                                                         )))                                          ,Cell.new(
                                          
                                                   )))
                                             )))                              ,Cell.new(
                              
                                       )))                        ,Cell.new(
                          callProcedure( 'cons',
                              begin
                                if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                  @_cons
                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                callProcedure( 'cons',
                                    begin
                                      if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                        @_cons
                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      callProcedure( 'first',
                                          begin
                                            if (self.instance_variables.map {|x| x.intern}.include?(:@_first)) then
                                              @_first
                                            else raise NameError.new( "Error: undefined variable _first", "_first" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:312"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                _lst
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:319"] + __e.backtrace ) ; raise __e
                                            end
                                                   ))                                    ,Cell.new(
                                      callProcedure( 'map',
                                          begin
                                            if (self.instance_variables.map {|x| x.intern}.include?(:@_map)) then
                                              @_map
                                            else raise NameError.new( "Error: undefined variable _map", "_map" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:313"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            Proc.new { |_x| 
                                                callProcedure( 'second',
                                                    begin
                                                      if (self.instance_variables.map {|x| x.intern}.include?(:@_second)) then
                                                        @_second
                                                      else raise NameError.new( "Error: undefined variable _second", "_second" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:316"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      begin
                                                          _x
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:315"] + __e.backtrace ) ; raise __e
                                                      end
                                                             ))
                                            }                                          ,Cell.new(
                                            callProcedure( 'second',
                                                begin
                                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_second)) then
                                                    @_second
                                                  else raise NameError.new( "Error: undefined variable _second", "_second" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:316"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  begin
                                                      _lst
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:319"] + __e.backtrace ) ; raise __e
                                                  end
                                                         ))
                                                   )))
                                             )))                              ,Cell.new(
                              
                                       )))
                                 )))
                           )))
          else
              callProcedure( 'cons',
                  begin
                    if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                      @_cons
                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"let"                  ,Cell.new(
                    begin
                        _lst
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:319"] + __e.backtrace ) ; raise __e
                    end
                           )))
          end
      }
#--------------------

  @_errorf = 
      LispMacro.new { |_format,*__rest__| _args = __rest__[0] ;  
          callProcedure( 'cons',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                  @_cons
                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
              :"error"              ,Cell.new(
                callProcedure( 'cons',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                        @_cons
                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'cons',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                              @_cons
                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                          :"sprintf"                          ,Cell.new(
                            callProcedure( 'cons',
                                begin
                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                    @_cons
                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:228"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _format
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:327"] + __e.backtrace ) ; raise __e
                                  end                                ,Cell.new(
                                  begin
                                      _args
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:327"] + __e.backtrace ) ; raise __e
                                  end
                                         )))
                                   )))                    ,Cell.new(
                    
                             )))
                       )))
      }
#--------------------

  @_generic_MIMARKmember = 
      Proc.new { |_cmp,_obj,_lst| 
          if ( 
            callProcedure( 'null?',
                begin
                  if (self.instance_variables.map {|x| x.intern}.include?(:@_null_QUMARK)) then
                    @_null_QUMARK
                  else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:335"] + __e.backtrace ) ; raise __e
                end              ,
                Cell.new(
                  begin
                      _lst
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:337"] + __e.backtrace ) ; raise __e
                  end
                         ))
           ) then
              begin
                false
              end
          else
              if ( 
                callProcedure( 'cmp',
                    begin
                        _cmp
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:337"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          _obj
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:337"] + __e.backtrace ) ; raise __e
                      end                    ,Cell.new(
                      callProcedure( 'car',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                              @_car
                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:336"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                _lst
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:337"] + __e.backtrace ) ; raise __e
                            end
                                   ))
                             )))
               ) then
                  begin
                      begin
                          _lst
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:337"] + __e.backtrace ) ; raise __e
                      end
                  end
              else
                  if ( 
                  true
                   ) then
                      begin
                          callProcedure( 'generic-member',
                              begin
                                if (self.instance_variables.map {|x| x.intern}.include?(:@_generic_MIMARKmember)) then
                                  @_generic_MIMARKmember
                                else raise NameError.new( "Error: undefined variable _generic_MIMARKmember", "_generic_MIMARKmember" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:337"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    _cmp
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:337"] + __e.backtrace ) ; raise __e
                                end                              ,Cell.new(
                                begin
                                    _obj
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:337"] + __e.backtrace ) ; raise __e
                                end                              ,Cell.new(
                                callProcedure( 'cdr',
                                    begin
                                      if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                        @_cdr
                                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:337"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          _lst
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:337"] + __e.backtrace ) ; raise __e
                                      end
                                             ))
                                       ))))
                      end
                  else
                    Nil.new
                  end
              end
          end
      }
#--------------------

  @_memq = 
      Proc.new { |_obj,_lst| 
          callProcedure( 'generic-member',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_generic_MIMARKmember)) then
                  @_generic_MIMARKmember
                else raise NameError.new( "Error: undefined variable _generic_MIMARKmember", "_generic_MIMARKmember" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:340"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                begin
                  if (self.instance_variables.map {|x| x.intern}.include?(:@_eq_QUMARK)) then
                    @_eq_QUMARK
                  else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:340"] + __e.backtrace ) ; raise __e
                end              ,Cell.new(
                begin
                    _obj
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:340"] + __e.backtrace ) ; raise __e
                end              ,Cell.new(
                begin
                    _lst
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:340"] + __e.backtrace ) ; raise __e
                end
                       ))))
      }
#--------------------

  @_memv = 
      Proc.new { |_obj,_lst| 
          callProcedure( 'generic-member',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_generic_MIMARKmember)) then
                  @_generic_MIMARKmember
                else raise NameError.new( "Error: undefined variable _generic_MIMARKmember", "_generic_MIMARKmember" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:342"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                begin
                  if (self.instance_variables.map {|x| x.intern}.include?(:@_eqv_QUMARK)) then
                    @_eqv_QUMARK
                  else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:342"] + __e.backtrace ) ; raise __e
                end              ,Cell.new(
                begin
                    _obj
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:342"] + __e.backtrace ) ; raise __e
                end              ,Cell.new(
                begin
                    _lst
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:342"] + __e.backtrace ) ; raise __e
                end
                       ))))
      }
#--------------------

  @_member = 
      Proc.new { |_obj,_lst| 
          callProcedure( 'generic-member',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_generic_MIMARKmember)) then
                  @_generic_MIMARKmember
                else raise NameError.new( "Error: undefined variable _generic_MIMARKmember", "_generic_MIMARKmember" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:344"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                begin
                  if (self.instance_variables.map {|x| x.intern}.include?(:@_equal_QUMARK)) then
                    @_equal_QUMARK
                  else raise NameError.new( "Error: undefined variable _equal_QUMARK", "_equal_QUMARK" ) end
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:344"] + __e.backtrace ) ; raise __e
                end              ,Cell.new(
                begin
                    _obj
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:344"] + __e.backtrace ) ; raise __e
                end              ,Cell.new(
                begin
                    _lst
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:344"] + __e.backtrace ) ; raise __e
                end
                       ))))
      }
#--------------------

  @_generic_MIMARKassoc = 
      Proc.new { |_cmp,_obj,_alst| 
          if ( 
            callProcedure( 'null?',
                begin
                  if (self.instance_variables.map {|x| x.intern}.include?(:@_null_QUMARK)) then
                    @_null_QUMARK
                  else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:349"] + __e.backtrace ) ; raise __e
                end              ,
                Cell.new(
                  begin
                      _alst
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:351"] + __e.backtrace ) ; raise __e
                  end
                         ))
           ) then
              begin
                false
              end
          else
              if ( 
                callProcedure( 'cmp',
                    begin
                        _cmp
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:351"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          _obj
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:351"] + __e.backtrace ) ; raise __e
                      end                    ,Cell.new(
                      callProcedure( 'caar',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_caar)) then
                              @_caar
                            else raise NameError.new( "Error: undefined variable _caar", "_caar" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:350"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                _alst
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:351"] + __e.backtrace ) ; raise __e
                            end
                                   ))
                             )))
               ) then
                  begin
                      callProcedure( 'car',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                              @_car
                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:350"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                _alst
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:351"] + __e.backtrace ) ; raise __e
                            end
                                   ))
                  end
              else
                  if ( 
                  true
                   ) then
                      begin
                          callProcedure( 'generic-assoc',
                              begin
                                if (self.instance_variables.map {|x| x.intern}.include?(:@_generic_MIMARKassoc)) then
                                  @_generic_MIMARKassoc
                                else raise NameError.new( "Error: undefined variable _generic_MIMARKassoc", "_generic_MIMARKassoc" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:351"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    _cmp
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:351"] + __e.backtrace ) ; raise __e
                                end                              ,Cell.new(
                                begin
                                    _obj
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:351"] + __e.backtrace ) ; raise __e
                                end                              ,Cell.new(
                                callProcedure( 'cdr',
                                    begin
                                      if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                        @_cdr
                                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:351"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          _alst
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:351"] + __e.backtrace ) ; raise __e
                                      end
                                             ))
                                       ))))
                      end
                  else
                    Nil.new
                  end
              end
          end
      }
#--------------------

  @_assq = 
      Proc.new { |_obj,_alst| 
          callProcedure( 'generic-assoc',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_generic_MIMARKassoc)) then
                  @_generic_MIMARKassoc
                else raise NameError.new( "Error: undefined variable _generic_MIMARKassoc", "_generic_MIMARKassoc" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:354"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                begin
                  if (self.instance_variables.map {|x| x.intern}.include?(:@_eq_QUMARK)) then
                    @_eq_QUMARK
                  else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:354"] + __e.backtrace ) ; raise __e
                end              ,Cell.new(
                begin
                    _obj
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:354"] + __e.backtrace ) ; raise __e
                end              ,Cell.new(
                begin
                    _alst
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:354"] + __e.backtrace ) ; raise __e
                end
                       ))))
      }
#--------------------

  @_assv = 
      Proc.new { |_obj,_alst| 
          callProcedure( 'generic-assoc',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_generic_MIMARKassoc)) then
                  @_generic_MIMARKassoc
                else raise NameError.new( "Error: undefined variable _generic_MIMARKassoc", "_generic_MIMARKassoc" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:356"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                begin
                  if (self.instance_variables.map {|x| x.intern}.include?(:@_eqv_QUMARK)) then
                    @_eqv_QUMARK
                  else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:356"] + __e.backtrace ) ; raise __e
                end              ,Cell.new(
                begin
                    _obj
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:356"] + __e.backtrace ) ; raise __e
                end              ,Cell.new(
                begin
                    _alst
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:356"] + __e.backtrace ) ; raise __e
                end
                       ))))
      }
#--------------------

  @_assoc = 
      Proc.new { |_obj,_alst| 
          callProcedure( 'generic-assoc',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_generic_MIMARKassoc)) then
                  @_generic_MIMARKassoc
                else raise NameError.new( "Error: undefined variable _generic_MIMARKassoc", "_generic_MIMARKassoc" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:358"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                begin
                  if (self.instance_variables.map {|x| x.intern}.include?(:@_equal_QUMARK)) then
                    @_equal_QUMARK
                  else raise NameError.new( "Error: undefined variable _equal_QUMARK", "_equal_QUMARK" ) end
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:358"] + __e.backtrace ) ; raise __e
                end              ,Cell.new(
                begin
                    _obj
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:358"] + __e.backtrace ) ; raise __e
                end              ,Cell.new(
                begin
                    _alst
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:358"] + __e.backtrace ) ; raise __e
                end
                       ))))
      }
#--------------------

  @_acons = 
      Proc.new { |_x,_y,_z| 
          callProcedure( 'cons',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                  @_cons
                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:360"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'cons',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                        @_cons
                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:360"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          _x
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:360"] + __e.backtrace ) ; raise __e
                      end                    ,Cell.new(
                      begin
                          _y
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:360"] + __e.backtrace ) ; raise __e
                      end
                             )))              ,Cell.new(
                begin
                    _z
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:360"] + __e.backtrace ) ; raise __e
                end
                       )))
      }
#--------------------

  @_assq_MIMARKref = 
      Proc.new { |_obj,_alst| 
          if ( 
            @___gensym__32 = 
                callProcedure( 'assq',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_assq)) then
                        @_assq
                      else raise NameError.new( "Error: undefined variable _assq", "_assq" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:363"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          _obj
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:363"] + __e.backtrace ) ; raise __e
                      end                    ,Cell.new(
                      begin
                          _alst
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:363"] + __e.backtrace ) ; raise __e
                      end
                             )))
           ) then
              callProcedure( 'cdr',
                  begin
                    if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                      @_cdr
                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:363"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@___gensym__32)) then
                        @___gensym__32
                      else raise NameError.new( "Error: undefined variable ___gensym__32", "___gensym__32" ) end
                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                    end
                           ))
          else
              if ( 
              true
               ) then
                  begin
                    nil
                  end
              else
                Nil.new
              end
          end
      }
#--------------------

  @_assv_MIMARKref = 
      Proc.new { |_obj,_alst| 
          if ( 
            @___gensym__34 = 
                callProcedure( 'assv',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_assv)) then
                        @_assv
                      else raise NameError.new( "Error: undefined variable _assv", "_assv" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:366"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          _obj
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:366"] + __e.backtrace ) ; raise __e
                      end                    ,Cell.new(
                      begin
                          _alst
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:366"] + __e.backtrace ) ; raise __e
                      end
                             )))
           ) then
              callProcedure( 'cdr',
                  begin
                    if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                      @_cdr
                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:366"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@___gensym__34)) then
                        @___gensym__34
                      else raise NameError.new( "Error: undefined variable ___gensym__34", "___gensym__34" ) end
                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                    end
                           ))
          else
              if ( 
              true
               ) then
                  begin
                    nil
                  end
              else
                Nil.new
              end
          end
      }
#--------------------

  @_assoc_MIMARKref = 
      Proc.new { |_obj,_alst| 
          if ( 
            @___gensym__36 = 
                callProcedure( 'assoc',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_assoc)) then
                        @_assoc
                      else raise NameError.new( "Error: undefined variable _assoc", "_assoc" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:369"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          _obj
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:369"] + __e.backtrace ) ; raise __e
                      end                    ,Cell.new(
                      begin
                          _alst
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:369"] + __e.backtrace ) ; raise __e
                      end
                             )))
           ) then
              callProcedure( 'cdr',
                  begin
                    if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                      @_cdr
                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:369"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@___gensym__36)) then
                        @___gensym__36
                      else raise NameError.new( "Error: undefined variable ___gensym__36", "___gensym__36" ) end
                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                    end
                           ))
          else
              if ( 
              true
               ) then
                  begin
                    nil
                  end
              else
                Nil.new
              end
          end
      }
#--------------------

  @_map = 
      Proc.new { |_pred,_lst| 
          if ( 
            callProcedure( 'null?',
                begin
                  if (self.instance_variables.map {|x| x.intern}.include?(:@_null_QUMARK)) then
                    @_null_QUMARK
                  else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:377"] + __e.backtrace ) ; raise __e
                end              ,
                Cell.new(
                  begin
                      _lst
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:381"] + __e.backtrace ) ; raise __e
                  end
                         ))
           ) then
            Cell.new()
          else
              callProcedure( 'cons',
                  begin
                    if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                      @_cons
                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:379"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    callProcedure( 'pred',
                        begin
                            _pred
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:381"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          callProcedure( 'car',
                              begin
                                if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                  @_car
                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:380"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    _lst
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:381"] + __e.backtrace ) ; raise __e
                                end
                                       ))
                                 ))                  ,Cell.new(
                    callProcedure( 'map',
                        begin
                          if (self.instance_variables.map {|x| x.intern}.include?(:@_map)) then
                            @_map
                          else raise NameError.new( "Error: undefined variable _map", "_map" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:381"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              _pred
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:381"] + __e.backtrace ) ; raise __e
                          end                        ,Cell.new(
                          callProcedure( 'cdr',
                              begin
                                if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                  @_cdr
                                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:381"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    _lst
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:381"] + __e.backtrace ) ; raise __e
                                end
                                       ))
                                 )))
                           )))
          end
      }
#--------------------

  @_for_MIMARKeach = 
      begin
        if (self.instance_variables.map {|x| x.intern}.include?(:@_map)) then
          @_map
        else raise NameError.new( "Error: undefined variable _map", "_map" ) end
        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:382"] + __e.backtrace ) ; raise __e
      end
#--------------------

  @_filter = 
      Proc.new { |_pred,_lst| 
          if ( 
            callProcedure( 'null?',
                begin
                  if (self.instance_variables.map {|x| x.intern}.include?(:@_null_QUMARK)) then
                    @_null_QUMARK
                  else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:385"] + __e.backtrace ) ; raise __e
                end              ,
                Cell.new(
                  begin
                      _lst
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:391"] + __e.backtrace ) ; raise __e
                  end
                         ))
           ) then
            Cell.new()
          else
              if ( 
                callProcedure( 'pred',
                    begin
                        _pred
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:391"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'car',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                              @_car
                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:389"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                _lst
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:391"] + __e.backtrace ) ; raise __e
                            end
                                   ))
                             ))
               ) then
                  callProcedure( 'cons',
                      begin
                        if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                          @_cons
                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:388"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                        callProcedure( 'car',
                            begin
                              if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                @_car
                              else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:389"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  _lst
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:391"] + __e.backtrace ) ; raise __e
                              end
                                     ))                      ,Cell.new(
                        callProcedure( 'filter',
                            begin
                              if (self.instance_variables.map {|x| x.intern}.include?(:@_filter)) then
                                @_filter
                              else raise NameError.new( "Error: undefined variable _filter", "_filter" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:391"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  _pred
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:391"] + __e.backtrace ) ; raise __e
                              end                            ,Cell.new(
                              callProcedure( 'cdr',
                                  begin
                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                      @_cdr
                                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:391"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        _lst
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:391"] + __e.backtrace ) ; raise __e
                                    end
                                           ))
                                     )))
                               )))
              else
                  callProcedure( 'filter',
                      begin
                        if (self.instance_variables.map {|x| x.intern}.include?(:@_filter)) then
                          @_filter
                        else raise NameError.new( "Error: undefined variable _filter", "_filter" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:391"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                        begin
                            _pred
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:391"] + __e.backtrace ) ; raise __e
                        end                      ,Cell.new(
                        callProcedure( 'cdr',
                            begin
                              if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                @_cdr
                              else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:391"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  _lst
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:391"] + __e.backtrace ) ; raise __e
                              end
                                     ))
                               )))
              end
          end
      }
#--------------------

  @_filter_MIMARKmap = 
      Proc.new { |_pred,_lst| 
          if ( 
            callProcedure( 'null?',
                begin
                  if (self.instance_variables.map {|x| x.intern}.include?(:@_null_QUMARK)) then
                    @_null_QUMARK
                  else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:395"] + __e.backtrace ) ; raise __e
                end              ,
                Cell.new(
                  begin
                      _lst
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:402"] + __e.backtrace ) ; raise __e
                  end
                         ))
           ) then
            Cell.new()
          else
              begin
                ___lambda = lambda { |_result| 
                    if ( 
                      begin
                          _result
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:400"] + __e.backtrace ) ; raise __e
                      end
                     ) then
                        callProcedure( 'cons',
                            begin
                              if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                @_cons
                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:399"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  _result
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:400"] + __e.backtrace ) ; raise __e
                              end                            ,Cell.new(
                              callProcedure( 'filter-map',
                                  begin
                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_filter_MIMARKmap)) then
                                      @_filter_MIMARKmap
                                    else raise NameError.new( "Error: undefined variable _filter_MIMARKmap", "_filter_MIMARKmap" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:402"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        _pred
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:402"] + __e.backtrace ) ; raise __e
                                    end                                  ,Cell.new(
                                    callProcedure( 'cdr',
                                        begin
                                          if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                            @_cdr
                                          else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:402"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          begin
                                              _lst
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:402"] + __e.backtrace ) ; raise __e
                                          end
                                                 ))
                                           )))
                                     )))
                    else
                        callProcedure( 'filter-map',
                            begin
                              if (self.instance_variables.map {|x| x.intern}.include?(:@_filter_MIMARKmap)) then
                                @_filter_MIMARKmap
                              else raise NameError.new( "Error: undefined variable _filter_MIMARKmap", "_filter_MIMARKmap" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:402"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  _pred
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:402"] + __e.backtrace ) ; raise __e
                              end                            ,Cell.new(
                              callProcedure( 'cdr',
                                  begin
                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                      @_cdr
                                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:402"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        _lst
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:402"] + __e.backtrace ) ; raise __e
                                    end
                                           ))
                                     )))
                    end
                } ; ___lambda.call(
                      callProcedure( 'pred',
                          begin
                              _pred
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:402"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'car',
                                begin
                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                    @_car
                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:397"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _lst
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:402"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                                   ))
                           )
              end
          end
      }
#--------------------

  @_find = 
      Proc.new { |_pred,_lst| 
          begin
            ___lambda = lambda { |_result| 
                if ( 
                  callProcedure( 'null?',
                      begin
                        if (self.instance_variables.map {|x| x.intern}.include?(:@_null_QUMARK)) then
                          @_null_QUMARK
                        else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:407"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                        begin
                            _result
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:409"] + __e.backtrace ) ; raise __e
                        end
                               ))
                 ) then
                  false
                else
                    callProcedure( 'car',
                        begin
                          if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                            @_car
                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:409"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              _result
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:409"] + __e.backtrace ) ; raise __e
                          end
                                 ))
                end
            } ; ___lambda.call(
                  callProcedure( 'filter',
                      begin
                        if (self.instance_variables.map {|x| x.intern}.include?(:@_filter)) then
                          @_filter
                        else raise NameError.new( "Error: undefined variable _filter", "_filter" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:406"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                        begin
                            _pred
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:406"] + __e.backtrace ) ; raise __e
                        end                      ,Cell.new(
                        begin
                            _lst
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:406"] + __e.backtrace ) ; raise __e
                        end
                               )))
                       )
          end
      }
#--------------------

  @_lambda = 
      LispMacro.new { |*__rest__| _src = __rest__[0] ;  
          if ( 
            callProcedure( 'not',
                begin
                  if (self.instance_variables.map {|x| x.intern}.include?(:@_not)) then
                    @_not
                  else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:428"] + __e.backtrace ) ; raise __e
                end              ,
                Cell.new(
                  callProcedure( 'list?',
                      begin
                        if (self.instance_variables.map {|x| x.intern}.include?(:@_list_QUMARK)) then
                          @_list_QUMARK
                        else raise NameError.new( "Error: undefined variable _list_QUMARK", "_list_QUMARK" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:417"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                        callProcedure( 'cadr',
                            begin
                              if (self.instance_variables.map {|x| x.intern}.include?(:@_cadr)) then
                                @_cadr
                              else raise NameError.new( "Error: undefined variable _cadr", "_cadr" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:438"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  _src
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:443"] + __e.backtrace ) ; raise __e
                              end
                                     ))
                               ))
                         ))
           ) then
              callProcedure( 'cons',
                  begin
                    if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                      @_cons
                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:399"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"lambda"                  ,Cell.new(
                    begin
                        _src
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:443"] + __e.backtrace ) ; raise __e
                    end
                           )))
          else
              begin
                ___lambda = lambda { |_body| 
                    if ( 
                      callProcedure( 'not',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_not)) then
                              @_not
                            else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:428"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'list?',
                                begin
                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_list_QUMARK)) then
                                    @_list_QUMARK
                                  else raise NameError.new( "Error: undefined variable _list_QUMARK", "_list_QUMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:417"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  callProcedure( 'car',
                                      begin
                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                          @_car
                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:433"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _body
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:430"] + __e.backtrace ) ; raise __e
                                        end
                                               ))
                                         ))
                                   ))
                     ) then
                        callProcedure( 'cons',
                            begin
                              if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                @_cons
                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:399"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                            :"lambda"                            ,Cell.new(
                              begin
                                  _src
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:443"] + __e.backtrace ) ; raise __e
                              end
                                     )))
                    else
                        begin
                          ___lambda = lambda { |_defs,_rest| 
                              if ( 
                                callProcedure( '<',
                                    begin
                                      if (self.instance_variables.map {|x| x.intern}.include?(:@__LTMARK)) then
                                        @__LTMARK
                                      else raise NameError.new( "Error: undefined variable __LTMARK", "__LTMARK" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:431"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                    0                                    ,Cell.new(
                                      callProcedure( 'length',
                                          begin
                                            if (self.instance_variables.map {|x| x.intern}.include?(:@_length)) then
                                              @_length
                                            else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:431"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                _defs
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:440"] + __e.backtrace ) ; raise __e
                                            end
                                                   ))
                                             )))
                               ) then
                                  callProcedure( 'cons',
                                      begin
                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                          @_cons
                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:399"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                      :"lambda"                                      ,Cell.new(
                                        callProcedure( 'cons',
                                            begin
                                              if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                @_cons
                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:399"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              callProcedure( 'car',
                                                  begin
                                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                                      @_car
                                                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:433"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    begin
                                                        _src
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:443"] + __e.backtrace ) ; raise __e
                                                    end
                                                           ))                                            ,Cell.new(
                                              callProcedure( 'cons',
                                                  begin
                                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                      @_cons
                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:399"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    callProcedure( 'cons',
                                                        begin
                                                          if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                            @_cons
                                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:399"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                        :"letrec"                                                        ,Cell.new(
                                                          callProcedure( 'cons',
                                                              begin
                                                                if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                                  @_cons
                                                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:399"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                                callProcedure( 'map',
                                                                    begin
                                                                      if (self.instance_variables.map {|x| x.intern}.include?(:@_map)) then
                                                                        @_map
                                                                      else raise NameError.new( "Error: undefined variable _map", "_map" ) end
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:435"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                    Cell.new(
                                                                      Proc.new { |_x| 
                                                                          callProcedure( 'list',
                                                                              begin
                                                                                if (self.instance_variables.map {|x| x.intern}.include?(:@_list)) then
                                                                                  @_list
                                                                                else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:437"] + __e.backtrace ) ; raise __e
                                                                              end                                                                            ,
                                                                              Cell.new(
                                                                                callProcedure( 'cadr',
                                                                                    begin
                                                                                      if (self.instance_variables.map {|x| x.intern}.include?(:@_cadr)) then
                                                                                        @_cadr
                                                                                      else raise NameError.new( "Error: undefined variable _cadr", "_cadr" ) end
                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:438"] + __e.backtrace ) ; raise __e
                                                                                    end                                                                                  ,
                                                                                    Cell.new(
                                                                                      begin
                                                                                          _x
                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:439"] + __e.backtrace ) ; raise __e
                                                                                      end
                                                                                             ))                                                                              ,Cell.new(
                                                                                callProcedure( 'caddr',
                                                                                    begin
                                                                                      if (self.instance_variables.map {|x| x.intern}.include?(:@_caddr)) then
                                                                                        @_caddr
                                                                                      else raise NameError.new( "Error: undefined variable _caddr", "_caddr" ) end
                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:439"] + __e.backtrace ) ; raise __e
                                                                                    end                                                                                  ,
                                                                                    Cell.new(
                                                                                      begin
                                                                                          _x
                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:439"] + __e.backtrace ) ; raise __e
                                                                                      end
                                                                                             ))
                                                                                       )))
                                                                      }                                                                    ,Cell.new(
                                                                      begin
                                                                          _defs
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:440"] + __e.backtrace ) ; raise __e
                                                                      end
                                                                             )))                                                              ,Cell.new(
                                                                begin
                                                                    _rest
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:441"] + __e.backtrace ) ; raise __e
                                                                end
                                                                       )))
                                                                 )))                                                  ,Cell.new(
                                                  
                                                           )))
                                                     )))
                                               )))
                              else
                                  callProcedure( 'cons',
                                      begin
                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                          @_cons
                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:399"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                      :"lambda"                                      ,Cell.new(
                                        begin
                                            _src
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:443"] + __e.backtrace ) ; raise __e
                                        end
                                               )))
                              end
                          } ; ___lambda.call(
                                callProcedure( 'filter',
                                    begin
                                      if (self.instance_variables.map {|x| x.intern}.include?(:@_filter)) then
                                        @_filter
                                      else raise NameError.new( "Error: undefined variable _filter", "_filter" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:426"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      Proc.new { |_x| 
                                          if ( 
                                            callProcedure( 'not',
                                                begin
                                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_not)) then
                                                    @_not
                                                  else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:428"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  callProcedure( 'eq?',
                                                      begin
                                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_eq_QUMARK)) then
                                                          @_eq_QUMARK
                                                        else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:428"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                      false                                                      ,Cell.new(
                                                        callProcedure( 'eq?',
                                                            begin
                                                              if (self.instance_variables.map {|x| x.intern}.include?(:@_eq_QUMARK)) then
                                                                @_eq_QUMARK
                                                              else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:428"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                            :"define"                                                            ,Cell.new(
                                                              callProcedure( 'car',
                                                                  begin
                                                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                                                      @_car
                                                                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:433"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                    begin
                                                                        _x
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:439"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                           ))
                                                                     )))
                                                               )))
                                                         ))
                                           ) then
                                              callProcedure( 'symbol?',
                                                  begin
                                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_symbol_QUMARK)) then
                                                      @_symbol_QUMARK
                                                    else raise NameError.new( "Error: undefined variable _symbol_QUMARK", "_symbol_QUMARK" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:429"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    callProcedure( 'cadr',
                                                        begin
                                                          if (self.instance_variables.map {|x| x.intern}.include?(:@_cadr)) then
                                                            @_cadr
                                                          else raise NameError.new( "Error: undefined variable _cadr", "_cadr" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:438"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                          begin
                                                              _x
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:439"] + __e.backtrace ) ; raise __e
                                                          end
                                                                 ))
                                                           ))
                                          else
                                            false
                                          end
                                      }                                    ,Cell.new(
                                      begin
                                          _body
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:430"] + __e.backtrace ) ; raise __e
                                      end
                                             )))                              ,
                                callProcedure( 'filter',
                                    begin
                                      if (self.instance_variables.map {|x| x.intern}.include?(:@_filter)) then
                                        @_filter
                                      else raise NameError.new( "Error: undefined variable _filter", "_filter" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:426"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      Proc.new { |_x| 
                                          callProcedure( 'not',
                                              begin
                                                if (self.instance_variables.map {|x| x.intern}.include?(:@_not)) then
                                                  @_not
                                                else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:428"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                if ( 
                                                  callProcedure( 'not',
                                                      begin
                                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_not)) then
                                                          @_not
                                                        else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:428"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        callProcedure( 'eq?',
                                                            begin
                                                              if (self.instance_variables.map {|x| x.intern}.include?(:@_eq_QUMARK)) then
                                                                @_eq_QUMARK
                                                              else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:428"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                            false                                                            ,Cell.new(
                                                              callProcedure( 'eq?',
                                                                  begin
                                                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_eq_QUMARK)) then
                                                                      @_eq_QUMARK
                                                                    else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:428"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                  :"define"                                                                  ,Cell.new(
                                                                    callProcedure( 'car',
                                                                        begin
                                                                          if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                                                            @_car
                                                                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:433"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                        Cell.new(
                                                                          begin
                                                                              _x
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:439"] + __e.backtrace ) ; raise __e
                                                                          end
                                                                                 ))
                                                                           )))
                                                                     )))
                                                               ))
                                                 ) then
                                                    callProcedure( 'symbol?',
                                                        begin
                                                          if (self.instance_variables.map {|x| x.intern}.include?(:@_symbol_QUMARK)) then
                                                            @_symbol_QUMARK
                                                          else raise NameError.new( "Error: undefined variable _symbol_QUMARK", "_symbol_QUMARK" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:429"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                          callProcedure( 'cadr',
                                                              begin
                                                                if (self.instance_variables.map {|x| x.intern}.include?(:@_cadr)) then
                                                                  @_cadr
                                                                else raise NameError.new( "Error: undefined variable _cadr", "_cadr" ) end
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:438"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                                begin
                                                                    _x
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:439"] + __e.backtrace ) ; raise __e
                                                                end
                                                                       ))
                                                                 ))
                                                else
                                                  false
                                                end
                                                       ))
                                      }                                    ,Cell.new(
                                      begin
                                          _body
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:430"] + __e.backtrace ) ; raise __e
                                      end
                                             )))
                                     )
                        end
                    end
                } ; ___lambda.call(
                      callProcedure( 'cdr',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                              @_cdr
                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:416"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                _src
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:443"] + __e.backtrace ) ; raise __e
                            end
                                   ))
                           )
              end
          end
      }
#--------------------

  @_case = 
      LispMacro.new { |_cond_MIMARKexp,*__rest__| _body = __rest__[0] ;  
          begin
            ___lambda = lambda { |_case_MIMARKblock,_case_MIMARKiter| 
                _case_MIMARKblock                 = 
                  Proc.new { |_val,*__rest__| _elem = __rest__[0] ;  
                      begin
                        ___lambda = lambda { |_block| 
                            begin
                              ___lambda = lambda { |_cond_MIMARKvals,_body| 
                                  begin
                                    ___lambda = lambda { |_v| 
                                        callProcedure( 'cons',
                                            begin
                                              if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                @_cons
                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:459"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              callProcedure( 'cons',
                                                  begin
                                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                      @_cons
                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:459"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    begin
                                                        _v
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:464"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,Cell.new(
                                                    begin
                                                        _body
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:481"] + __e.backtrace ) ; raise __e
                                                    end
                                                           )))                                            ,Cell.new(
                                            
                                                     )))
                                    } ; ___lambda.call(
                                          if ( 
                                            callProcedure( 'eq?',
                                                begin
                                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_eq_QUMARK)) then
                                                    @_eq_QUMARK
                                                  else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:472"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                :"else"                                                ,Cell.new(
                                                  begin
                                                      _cond_MIMARKvals
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:463"] + __e.backtrace ) ; raise __e
                                                  end
                                                         )))
                                           ) then
                                              begin
                                                  _cond_MIMARKvals
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:463"] + __e.backtrace ) ; raise __e
                                              end
                                          else
                                              callProcedure( 'cons',
                                                  begin
                                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                      @_cons
                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:459"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                  :"or"                                                  ,Cell.new(
                                                    callProcedure( 'map',
                                                        begin
                                                          if (self.instance_variables.map {|x| x.intern}.include?(:@_map)) then
                                                            @_map
                                                          else raise NameError.new( "Error: undefined variable _map", "_map" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:460"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                          Proc.new { |_x| 
                                                              callProcedure( 'cons',
                                                                  begin
                                                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                                      @_cons
                                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:459"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                  :"eqv?"                                                                  ,Cell.new(
                                                                    callProcedure( 'cons',
                                                                        begin
                                                                          if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                                            @_cons
                                                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:459"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                        Cell.new(
                                                                          begin
                                                                              _x
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:462"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,Cell.new(
                                                                          callProcedure( 'cons',
                                                                              begin
                                                                                if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                                                  @_cons
                                                                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:459"] + __e.backtrace ) ; raise __e
                                                                              end                                                                            ,
                                                                              Cell.new(
                                                                                begin
                                                                                    _val
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:476"] + __e.backtrace ) ; raise __e
                                                                                end                                                                              ,Cell.new(
                                                                              
                                                                                       )))
                                                                                 )))
                                                                           )))
                                                          }                                                        ,Cell.new(
                                                          begin
                                                              _cond_MIMARKvals
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:463"] + __e.backtrace ) ; raise __e
                                                          end
                                                                 )))
                                                           )))
                                          end
                                               )
                                  end
                              } ; ___lambda.call(
                                    callProcedure( 'car',
                                        begin
                                          if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                            @_car
                                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:475"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          begin
                                              _block
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:455"] + __e.backtrace ) ; raise __e
                                          end
                                                 ))                                  ,
                                    callProcedure( 'cdr',
                                        begin
                                          if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                            @_cdr
                                          else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:476"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          begin
                                              _block
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:455"] + __e.backtrace ) ; raise __e
                                          end
                                                 ))
                                         )
                            end
                        } ; ___lambda.call(
                              callProcedure( 'car',
                                  begin
                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                      @_car
                                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:475"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        _elem
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:453"] + __e.backtrace ) ; raise __e
                                    end
                                           ))
                                   )
                      end
                  }
                _case_MIMARKiter                 = 
                  Proc.new { |_val,_lst| 
                      if ( 
                        callProcedure( 'eq?',
                            begin
                              if (self.instance_variables.map {|x| x.intern}.include?(:@_eq_QUMARK)) then
                                @_eq_QUMARK
                              else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:472"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                            0                            ,Cell.new(
                              callProcedure( 'length',
                                  begin
                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_length)) then
                                      @_length
                                    else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:472"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        _lst
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:476"] + __e.backtrace ) ; raise __e
                                    end
                                           ))
                                     )))
                       ) then
                          begin
                            Cell.new()
                          end
                      else
                          if ( 
                            callProcedure( 'eq?',
                                begin
                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_eq_QUMARK)) then
                                    @_eq_QUMARK
                                  else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:472"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                1                                ,Cell.new(
                                  callProcedure( 'length',
                                      begin
                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_length)) then
                                          @_length
                                        else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:472"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _lst
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:476"] + __e.backtrace ) ; raise __e
                                        end
                                               ))
                                         )))
                           ) then
                              begin
                                  callProcedure( 'case-block',
                                      begin
                                          _case_MIMARKblock
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:475"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _val
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:476"] + __e.backtrace ) ; raise __e
                                        end                                      ,Cell.new(
                                        callProcedure( 'car',
                                            begin
                                              if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                                @_car
                                              else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:475"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              begin
                                                  _lst
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:476"] + __e.backtrace ) ; raise __e
                                              end
                                                     ))
                                               )))
                              end
                          else
                              if ( 
                              true
                               ) then
                                  begin
                                      callProcedure( 'append',
                                          begin
                                            if (self.instance_variables.map {|x| x.intern}.include?(:@_append)) then
                                              @_append
                                            else raise NameError.new( "Error: undefined variable _append", "_append" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:475"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            callProcedure( 'case-block',
                                                begin
                                                    _case_MIMARKblock
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:475"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  begin
                                                      _val
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:476"] + __e.backtrace ) ; raise __e
                                                  end                                                ,Cell.new(
                                                  callProcedure( 'car',
                                                      begin
                                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                                          @_car
                                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:475"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        begin
                                                            _lst
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:476"] + __e.backtrace ) ; raise __e
                                                        end
                                                               ))
                                                         )))                                          ,Cell.new(
                                            callProcedure( 'case-iter',
                                                begin
                                                    _case_MIMARKiter
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:481"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  begin
                                                      _val
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:476"] + __e.backtrace ) ; raise __e
                                                  end                                                ,Cell.new(
                                                  callProcedure( 'cdr',
                                                      begin
                                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                                          @_cdr
                                                        else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:476"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        begin
                                                            _lst
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:476"] + __e.backtrace ) ; raise __e
                                                        end
                                                               ))
                                                         )))
                                                   )))
                                  end
                              else
                                Nil.new
                              end
                          end
                      end
                  }
                begin
                  ___lambda = lambda { |_sym| 
                      callProcedure( 'cons',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                              @_cons
                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:459"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                          :"let1"                          ,Cell.new(
                            callProcedure( 'cons',
                                begin
                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                    @_cons
                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:459"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _sym
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:481"] + __e.backtrace ) ; raise __e
                                  end                                ,Cell.new(
                                  callProcedure( 'cons',
                                      begin
                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                          @_cons
                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:459"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _cond_MIMARKexp
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:479"] + __e.backtrace ) ; raise __e
                                        end                                      ,Cell.new(
                                        callProcedure( 'cons',
                                            begin
                                              if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                @_cons
                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:459"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              callProcedure( 'cons',
                                                  begin
                                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                      @_cons
                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:459"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                  :"cond"                                                  ,Cell.new(
                                                    callProcedure( 'case-iter',
                                                        begin
                                                            _case_MIMARKiter
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:481"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                          begin
                                                              _sym
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:481"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,Cell.new(
                                                          begin
                                                              _body
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:481"] + __e.backtrace ) ; raise __e
                                                          end
                                                                 )))
                                                           )))                                            ,Cell.new(
                                            
                                                     )))
                                               )))
                                         )))
                                   )))
                  } ; ___lambda.call(
                        callProcedure( 'gensym',
                            begin
                              if (self.instance_variables.map {|x| x.intern}.include?(:@_gensym)) then
                                @_gensym
                              else raise NameError.new( "Error: undefined variable _gensym", "_gensym" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:478"] + __e.backtrace ) ; raise __e
                            end                          ,
                          Cell.new(
                                     ))
                             )
                end
            } ; ___lambda.call(
            nil,nil
                       )
          end
      }
#--------------------

  @_let_ASMARK = 
      LispMacro.new { |_exps,*__rest__| _body = __rest__[0] ;  
          begin
            ___lambda = lambda { |_let_ASMARK_MIMARKexpand| 
                _let_ASMARK_MIMARKexpand                 = 
                  Proc.new { |_rest,_body| 
                      begin
                        ___lambda = lambda { |___gensym__40| 
                            if ( 
                              begin
                                ___lambda = lambda { |___gensym__44| 
                                    if ( 
                                      begin
                                          ___gensym__44
                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                      end
                                     ) then
                                        begin
                                            ___gensym__44
                                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                        end
                                    else
                                      false
                                    end
                                } ; ___lambda.call(
                                      callProcedure( 'eqv?',
                                          begin
                                            if (self.instance_variables.map {|x| x.intern}.include?(:@_eqv_QUMARK)) then
                                              @_eqv_QUMARK
                                            else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:462"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                          0                                          ,Cell.new(
                                            begin
                                                ___gensym__40
                                              rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                            end
                                                   )))
                                           )
                              end
                             ) then
                                begin
                                  Cell.new()
                                end
                            else
                                if ( 
                                  begin
                                    ___lambda = lambda { |___gensym__45| 
                                        if ( 
                                          begin
                                              ___gensym__45
                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                          end
                                         ) then
                                            begin
                                                ___gensym__45
                                              rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                            end
                                        else
                                          false
                                        end
                                    } ; ___lambda.call(
                                          callProcedure( 'eqv?',
                                              begin
                                                if (self.instance_variables.map {|x| x.intern}.include?(:@_eqv_QUMARK)) then
                                                  @_eqv_QUMARK
                                                else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:462"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                              1                                              ,Cell.new(
                                                begin
                                                    ___gensym__40
                                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                end
                                                       )))
                                               )
                                  end
                                 ) then
                                    begin
                                        callProcedure( 'cons',
                                            begin
                                              if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                @_cons
                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:459"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                            :"let"                                            ,Cell.new(
                                              callProcedure( 'cons',
                                                  begin
                                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                      @_cons
                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:459"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    callProcedure( 'cons',
                                                        begin
                                                          if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                            @_cons
                                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:459"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                          callProcedure( 'car',
                                                              begin
                                                                if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                                                  @_car
                                                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:495"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                                begin
                                                                    _rest
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:496"] + __e.backtrace ) ; raise __e
                                                                end
                                                                       ))                                                        ,Cell.new(
                                                        
                                                                 )))                                                  ,Cell.new(
                                                    begin
                                                        _body
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:498"] + __e.backtrace ) ; raise __e
                                                    end
                                                           )))
                                                     )))
                                    end
                                else
                                    if ( 
                                    true
                                     ) then
                                        begin
                                            callProcedure( 'cons',
                                                begin
                                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                    @_cons
                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:459"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                :"let"                                                ,Cell.new(
                                                  callProcedure( 'cons',
                                                      begin
                                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                          @_cons
                                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:459"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        callProcedure( 'cons',
                                                            begin
                                                              if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                                @_cons
                                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:459"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              callProcedure( 'car',
                                                                  begin
                                                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                                                      @_car
                                                                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:495"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                    begin
                                                                        _rest
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:496"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                           ))                                                            ,Cell.new(
                                                            
                                                                     )))                                                      ,Cell.new(
                                                        callProcedure( 'cons',
                                                            begin
                                                              if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                                @_cons
                                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:459"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              callProcedure( 'let*-expand',
                                                                  begin
                                                                      _let_ASMARK_MIMARKexpand
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:498"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                    callProcedure( 'cdr',
                                                                        begin
                                                                          if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                                                            @_cdr
                                                                          else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:496"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                        Cell.new(
                                                                          begin
                                                                              _rest
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:496"] + __e.backtrace ) ; raise __e
                                                                          end
                                                                                 ))                                                                  ,Cell.new(
                                                                    begin
                                                                        _body
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:498"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                           )))                                                            ,Cell.new(
                                                            
                                                                     )))
                                                               )))
                                                         )))
                                        end
                                    else
                                      Nil.new
                                    end
                                end
                            end
                        } ; ___lambda.call(
                              callProcedure( 'length',
                                  begin
                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_length)) then
                                      @_length
                                    else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:488"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        _rest
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:496"] + __e.backtrace ) ; raise __e
                                    end
                                           ))
                                   )
                      end
                  }
                callProcedure( 'let*-expand',
                    begin
                        _let_ASMARK_MIMARKexpand
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:498"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          _exps
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:498"] + __e.backtrace ) ; raise __e
                      end                    ,Cell.new(
                      begin
                          _body
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:498"] + __e.backtrace ) ; raise __e
                      end
                             )))
            } ; ___lambda.call(
            nil
                       )
          end
      }
#--------------------

  @_values = 
      Proc.new { |*__rest__| _args = __rest__[0] ;  
          begin
            ___lambda = lambda { |___gensym__46| 
                if ( 
                  begin
                    ___lambda = lambda { |___gensym__49| 
                        if ( 
                          begin
                              ___gensym__49
                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                          end
                         ) then
                            begin
                                ___gensym__49
                              rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                            end
                        else
                          false
                        end
                    } ; ___lambda.call(
                          callProcedure( 'eqv?',
                              begin
                                if (self.instance_variables.map {|x| x.intern}.include?(:@_eqv_QUMARK)) then
                                  @_eqv_QUMARK
                                else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:462"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                              1                              ,Cell.new(
                                begin
                                    ___gensym__46
                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                end
                                       )))
                               )
                  end
                 ) then
                    begin
                        callProcedure( 'car',
                            begin
                              if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                @_car
                              else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:507"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  _args
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:509"] + __e.backtrace ) ; raise __e
                              end
                                     ))
                    end
                else
                    if ( 
                    true
                     ) then
                        begin
                            callProcedure( 'make-values',
                                begin
                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_make_MIMARKvalues)) then
                                    @_make_MIMARKvalues
                                  else raise NameError.new( "Error: undefined variable _make_MIMARKvalues", "_make_MIMARKvalues" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:509"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _args
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:509"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                        end
                    else
                      Nil.new
                    end
                end
            } ; ___lambda.call(
                  callProcedure( 'length',
                      begin
                        if (self.instance_variables.map {|x| x.intern}.include?(:@_length)) then
                          @_length
                        else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:505"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                        begin
                            _args
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:509"] + __e.backtrace ) ; raise __e
                        end
                               ))
                       )
          end
      }
#--------------------

  @_call_MIMARKwith_MIMARKvalues = 
      Proc.new { |_producer,_consumer| 
          begin
            ___lambda = lambda { |_v| 
                if ( 
                  callProcedure( 'values?',
                      begin
                        if (self.instance_variables.map {|x| x.intern}.include?(:@_values_QUMARK)) then
                          @_values_QUMARK
                        else raise NameError.new( "Error: undefined variable _values_QUMARK", "_values_QUMARK" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:514"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                        begin
                            _v
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:516"] + __e.backtrace ) ; raise __e
                        end
                               ))
                 ) then
                    callProcedure( 'apply',
                        begin
                          if (self.instance_variables.map {|x| x.intern}.include?(:@_apply)) then
                            @_apply
                          else raise NameError.new( "Error: undefined variable _apply", "_apply" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:515"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              _consumer
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:516"] + __e.backtrace ) ; raise __e
                          end                        ,Cell.new(
                          callProcedure( 'values-values',
                              begin
                                if (self.instance_variables.map {|x| x.intern}.include?(:@_values_MIMARKvalues)) then
                                  @_values_MIMARKvalues
                                else raise NameError.new( "Error: undefined variable _values_MIMARKvalues", "_values_MIMARKvalues" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:515"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    _v
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:516"] + __e.backtrace ) ; raise __e
                                end
                                       ))
                                 )))
                else
                    callProcedure( 'consumer',
                        begin
                            _consumer
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:516"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              _v
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:516"] + __e.backtrace ) ; raise __e
                          end
                                 ))
                end
            } ; ___lambda.call(
                  callProcedure( 'producer',
                      begin
                          _producer
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:513"] + __e.backtrace ) ; raise __e
                      end                    ,
                    Cell.new(
                               ))
                       )
          end
      }
#--------------------

  @_receive = 
      LispMacro.new { |_vars,_expr,*__rest__| _body = __rest__[0] ;  
          callProcedure( 'cons',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                  @_cons
                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:459"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
              :"call-with-values"              ,Cell.new(
                callProcedure( 'cons',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                        @_cons
                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:459"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'cons',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                              @_cons
                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:459"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                          :"lambda"                          ,Cell.new(
                            callProcedure( 'cons',
                                begin
                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                    @_cons
                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:459"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                Cell.new()                                ,Cell.new(
                                  callProcedure( 'cons',
                                      begin
                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                          @_cons
                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:459"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _expr
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:522"] + __e.backtrace ) ; raise __e
                                        end                                      ,Cell.new(
                                      
                                               )))
                                         )))
                                   )))                    ,Cell.new(
                      callProcedure( 'cons',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                              @_cons
                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:459"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'cons',
                                begin
                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                    @_cons
                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:459"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                :"lambda"                                ,Cell.new(
                                  callProcedure( 'cons',
                                      begin
                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                          @_cons
                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:459"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _vars
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:523"] + __e.backtrace ) ; raise __e
                                        end                                      ,Cell.new(
                                        begin
                                            _body
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:523"] + __e.backtrace ) ; raise __e
                                        end
                                               )))
                                         )))                          ,Cell.new(
                          
                                   )))
                             )))
                       )))
      }
#--------------------

  @_get_MIMARKkeyword = 
      Proc.new { |_key,_kv_MIMARKlist,*__rest__| _fallback = __rest__[0] ;  
          if ( 
            begin
              ___lambda = lambda { |___gensym__52| 
                  if ( 
                    begin
                        ___gensym__52
                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                    end
                   ) then
                      begin
                          ___gensym__52
                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                      end
                  else
                      begin
                        ___lambda = lambda { |___gensym__53| 
                            if ( 
                              begin
                                  ___gensym__53
                                rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                              end
                             ) then
                                begin
                                    ___gensym__53
                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                end
                            else
                              false
                            end
                        } ; ___lambda.call(
                              callProcedure( '>=',
                                  begin
                                    if (self.instance_variables.map {|x| x.intern}.include?(:@__GTMARK_EQMARK)) then
                                      @__GTMARK_EQMARK
                                    else raise NameError.new( "Error: undefined variable __GTMARK_EQMARK", "__GTMARK_EQMARK" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:531"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                  2                                  ,Cell.new(
                                    callProcedure( 'length',
                                        begin
                                          if (self.instance_variables.map {|x| x.intern}.include?(:@_length)) then
                                            @_length
                                          else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:541"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          begin
                                              _kv_MIMARKlist
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:547"] + __e.backtrace ) ; raise __e
                                          end
                                                 ))
                                           )))
                                   )
                      end
                  end
              } ; ___lambda.call(
                    callProcedure( 'not',
                        begin
                          if (self.instance_variables.map {|x| x.intern}.include?(:@_not)) then
                            @_not
                          else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:531"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          callProcedure( 'list?',
                              begin
                                if (self.instance_variables.map {|x| x.intern}.include?(:@_list_QUMARK)) then
                                  @_list_QUMARK
                                else raise NameError.new( "Error: undefined variable _list_QUMARK", "_list_QUMARK" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:531"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    _kv_MIMARKlist
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:547"] + __e.backtrace ) ; raise __e
                                end
                                       ))
                                 ))
                         )
            end
           ) then
              begin
                  if ( 
                    callProcedure( 'null?',
                        begin
                          if (self.instance_variables.map {|x| x.intern}.include?(:@_null_QUMARK)) then
                            @_null_QUMARK
                          else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:543"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              _fallback
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:545"] + __e.backtrace ) ; raise __e
                          end
                                 ))
                   ) then
                      begin raise RuntimeError, 
                        callProcedure( 'sprintf',
                            begin
                              if (self.instance_variables.map {|x| x.intern}.include?(:@_sprintf)) then
                                @_sprintf
                              else raise NameError.new( "Error: undefined variable _sprintf", "_sprintf" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:327"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                            "Error: imcomplete key list: %s\n"                            ,Cell.new(
                              callProcedure( 'write-to-string',
                                  begin
                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_write_MIMARKto_MIMARKstring)) then
                                      @_write_MIMARKto_MIMARKstring
                                    else raise NameError.new( "Error: undefined variable _write_MIMARKto_MIMARKstring", "_write_MIMARKto_MIMARKstring" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:547"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        _kv_MIMARKlist
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:547"] + __e.backtrace ) ; raise __e
                                    end
                                           ))
                                     )))
                      rescue => __e 
                        __e.set_backtrace( ["./lib/init.nnd:326"] + __e.backtrace )
                        raise __e
                      end 
                  else
                      callProcedure( 'car',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                              @_car
                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:549"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                _fallback
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:545"] + __e.backtrace ) ; raise __e
                            end
                                   ))
                  end
              end
          else
              if ( 
              true
               ) then
                  begin
                      begin
                        ___lambda = lambda { |_loop| 
                            _loop                             = 
                              Proc.new { |_k,_v,_rest| 
                                  if ( 
                                    callProcedure( 'eq?',
                                        begin
                                          if (self.instance_variables.map {|x| x.intern}.include?(:@_eq_QUMARK)) then
                                            @_eq_QUMARK
                                          else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:539"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          begin
                                              _k
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:539"] + __e.backtrace ) ; raise __e
                                          end                                        ,Cell.new(
                                          begin
                                              _key
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:544"] + __e.backtrace ) ; raise __e
                                          end
                                                 )))
                                   ) then
                                      begin
                                          _v
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:540"] + __e.backtrace ) ; raise __e
                                      end
                                  else
                                      begin
                                        ___lambda = lambda { |___gensym__54| 
                                            if ( 
                                              begin
                                                ___lambda = lambda { |___gensym__58| 
                                                    if ( 
                                                      begin
                                                          ___gensym__58
                                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                      end
                                                     ) then
                                                        begin
                                                            ___gensym__58
                                                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                        end
                                                    else
                                                      false
                                                    end
                                                } ; ___lambda.call(
                                                      callProcedure( 'eqv?',
                                                          begin
                                                            if (self.instance_variables.map {|x| x.intern}.include?(:@_eqv_QUMARK)) then
                                                              @_eqv_QUMARK
                                                            else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:462"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                          0                                                          ,Cell.new(
                                                            begin
                                                                ___gensym__54
                                                              rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                            end
                                                                   )))
                                                           )
                                              end
                                             ) then
                                                begin
                                                    if ( 
                                                      callProcedure( 'null?',
                                                          begin
                                                            if (self.instance_variables.map {|x| x.intern}.include?(:@_null_QUMARK)) then
                                                              @_null_QUMARK
                                                            else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:543"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            begin
                                                                _fallback
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:545"] + __e.backtrace ) ; raise __e
                                                            end
                                                                   ))
                                                     ) then
                                                        begin raise RuntimeError, 
                                                          callProcedure( 'sprintf',
                                                              begin
                                                                if (self.instance_variables.map {|x| x.intern}.include?(:@_sprintf)) then
                                                                  @_sprintf
                                                                else raise NameError.new( "Error: undefined variable _sprintf", "_sprintf" ) end
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:327"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                              "Error: value for key %s is not provided : %s\n"                                                              ,Cell.new(
                                                                callProcedure( 'write-to-string',
                                                                    begin
                                                                      if (self.instance_variables.map {|x| x.intern}.include?(:@_write_MIMARKto_MIMARKstring)) then
                                                                        @_write_MIMARKto_MIMARKstring
                                                                      else raise NameError.new( "Error: undefined variable _write_MIMARKto_MIMARKstring", "_write_MIMARKto_MIMARKstring" ) end
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:547"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                    Cell.new(
                                                                      begin
                                                                          _key
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:544"] + __e.backtrace ) ; raise __e
                                                                      end
                                                                             ))                                                              ,Cell.new(
                                                                callProcedure( 'write-to-string',
                                                                    begin
                                                                      if (self.instance_variables.map {|x| x.intern}.include?(:@_write_MIMARKto_MIMARKstring)) then
                                                                        @_write_MIMARKto_MIMARKstring
                                                                      else raise NameError.new( "Error: undefined variable _write_MIMARKto_MIMARKstring", "_write_MIMARKto_MIMARKstring" ) end
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:547"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                    Cell.new(
                                                                      begin
                                                                          _kv_MIMARKlist
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:547"] + __e.backtrace ) ; raise __e
                                                                      end
                                                                             ))
                                                                       ))))
                                                        rescue => __e 
                                                          __e.set_backtrace( ["./lib/init.nnd:326"] + __e.backtrace )
                                                          raise __e
                                                        end 
                                                    else
                                                        callProcedure( 'car',
                                                            begin
                                                              if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                                                @_car
                                                              else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:549"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              begin
                                                                  _fallback
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:545"] + __e.backtrace ) ; raise __e
                                                              end
                                                                     ))
                                                    end
                                                end
                                            else
                                                if ( 
                                                  begin
                                                    ___lambda = lambda { |___gensym__59| 
                                                        if ( 
                                                          begin
                                                              ___gensym__59
                                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                          end
                                                         ) then
                                                            begin
                                                                ___gensym__59
                                                              rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                            end
                                                        else
                                                          false
                                                        end
                                                    } ; ___lambda.call(
                                                          callProcedure( 'eqv?',
                                                              begin
                                                                if (self.instance_variables.map {|x| x.intern}.include?(:@_eqv_QUMARK)) then
                                                                  @_eqv_QUMARK
                                                                else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:462"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                              1                                                              ,Cell.new(
                                                                begin
                                                                    ___gensym__54
                                                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                end
                                                                       )))
                                                               )
                                                  end
                                                 ) then
                                                    begin
                                                        begin raise RuntimeError, 
                                                          callProcedure( 'sprintf',
                                                              begin
                                                                if (self.instance_variables.map {|x| x.intern}.include?(:@_sprintf)) then
                                                                  @_sprintf
                                                                else raise NameError.new( "Error: undefined variable _sprintf", "_sprintf" ) end
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:327"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                              "Error: incomplete key list: %s\n"                                                              ,Cell.new(
                                                                callProcedure( 'write-to-string',
                                                                    begin
                                                                      if (self.instance_variables.map {|x| x.intern}.include?(:@_write_MIMARKto_MIMARKstring)) then
                                                                        @_write_MIMARKto_MIMARKstring
                                                                      else raise NameError.new( "Error: undefined variable _write_MIMARKto_MIMARKstring", "_write_MIMARKto_MIMARKstring" ) end
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:547"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                    Cell.new(
                                                                      begin
                                                                          _kv_MIMARKlist
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:547"] + __e.backtrace ) ; raise __e
                                                                      end
                                                                             ))
                                                                       )))
                                                        rescue => __e 
                                                          __e.set_backtrace( ["./lib/init.nnd:326"] + __e.backtrace )
                                                          raise __e
                                                        end 
                                                    end
                                                else
                                                    if ( 
                                                    true
                                                     ) then
                                                        begin
                                                            callProcedure( 'loop',
                                                                begin
                                                                    _loop
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:549"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                  callProcedure( 'car',
                                                                      begin
                                                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                                                          @_car
                                                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:549"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                      Cell.new(
                                                                        begin
                                                                            _rest
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:551"] + __e.backtrace ) ; raise __e
                                                                        end
                                                                               ))                                                                ,Cell.new(
                                                                  callProcedure( 'cadr',
                                                                      begin
                                                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_cadr)) then
                                                                          @_cadr
                                                                        else raise NameError.new( "Error: undefined variable _cadr", "_cadr" ) end
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:550"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                      Cell.new(
                                                                        begin
                                                                            _rest
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:551"] + __e.backtrace ) ; raise __e
                                                                        end
                                                                               ))                                                                ,Cell.new(
                                                                  callProcedure( 'cddr',
                                                                      begin
                                                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_cddr)) then
                                                                          @_cddr
                                                                        else raise NameError.new( "Error: undefined variable _cddr", "_cddr" ) end
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:551"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                      Cell.new(
                                                                        begin
                                                                            _rest
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:551"] + __e.backtrace ) ; raise __e
                                                                        end
                                                                               ))
                                                                         ))))
                                                        end
                                                    else
                                                      Nil.new
                                                    end
                                                end
                                            end
                                        } ; ___lambda.call(
                                              callProcedure( 'length',
                                                  begin
                                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_length)) then
                                                      @_length
                                                    else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:541"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    begin
                                                        _rest
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:551"] + __e.backtrace ) ; raise __e
                                                    end
                                                           ))
                                                   )
                                      end
                                  end
                              }
                            callProcedure( 'loop',
                                begin
                                    _loop
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:549"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  callProcedure( 'car',
                                      begin
                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                          @_car
                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:549"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _kv_MIMARKlist
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:547"] + __e.backtrace ) ; raise __e
                                        end
                                               ))                                ,Cell.new(
                                  callProcedure( 'cadr',
                                      begin
                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_cadr)) then
                                          @_cadr
                                        else raise NameError.new( "Error: undefined variable _cadr", "_cadr" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:550"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _kv_MIMARKlist
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:547"] + __e.backtrace ) ; raise __e
                                        end
                                               ))                                ,Cell.new(
                                  callProcedure( 'cddr',
                                      begin
                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_cddr)) then
                                          @_cddr
                                        else raise NameError.new( "Error: undefined variable _cddr", "_cddr" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:551"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _kv_MIMARKlist
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:547"] + __e.backtrace ) ; raise __e
                                        end
                                               ))
                                         ))))
                        } ; ___lambda.call(
                        nil
                                   )
                      end
                  end
              else
                Nil.new
              end
          end
      }
#--------------------

  @_dot_MIMARKoperator = 
      LispMacro.new { |*__rest__| _lst = __rest__[0] ;  
          begin
            ___lambda = lambda { |_generate_MIMARKmethod_MIMARKcall_MIMARKform| 
                _generate_MIMARKmethod_MIMARKcall_MIMARKform                 = 
                  Proc.new { |_lst| 
                      begin
                        ___lambda = lambda { |_tmp| 
                            if ( 
                              callProcedure( 'symbol?',
                                  begin
                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_symbol_QUMARK)) then
                                      @_symbol_QUMARK
                                    else raise NameError.new( "Error: undefined variable _symbol_QUMARK", "_symbol_QUMARK" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:571"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    callProcedure( 'first',
                                        begin
                                          if (self.instance_variables.map {|x| x.intern}.include?(:@_first)) then
                                            @_first
                                          else raise NameError.new( "Error: undefined variable _first", "_first" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:564"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          begin
                                              _lst
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:572"] + __e.backtrace ) ; raise __e
                                          end
                                                 ))
                                           ))
                             ) then
                                callProcedure( 'cons',
                                    begin
                                      if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                        @_cons
                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:459"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      callProcedure( 'string->symbol',
                                          begin
                                            if (self.instance_variables.map {|x| x.intern}.include?(:@_string_MIMARK_GTMARKsymbol)) then
                                              @_string_MIMARK_GTMARKsymbol
                                            else raise NameError.new( "Error: undefined variable _string_MIMARK_GTMARKsymbol", "_string_MIMARK_GTMARKsymbol" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:565"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            callProcedure( '+',
                                                begin
                                                  if (self.instance_variables.map {|x| x.intern}.include?(:@__PLMARK)) then
                                                    @__PLMARK
                                                  else raise NameError.new( "Error: undefined variable __PLMARK", "__PLMARK" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:565"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  callProcedure( 'to-s',
                                                      begin
                                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_to_MIMARKs)) then
                                                          @_to_MIMARKs
                                                        else raise NameError.new( "Error: undefined variable _to_MIMARKs", "_to_MIMARKs" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:565"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        callProcedure( 'first',
                                                            begin
                                                              if (self.instance_variables.map {|x| x.intern}.include?(:@_first)) then
                                                                @_first
                                                              else raise NameError.new( "Error: undefined variable _first", "_first" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:564"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              begin
                                                                  _lst
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:572"] + __e.backtrace ) ; raise __e
                                                              end
                                                                     ))
                                                               ))                                                ,Cell.new(
                                                "."                                                ,Cell.new(
                                                  callProcedure( 'to-s',
                                                      begin
                                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_to_MIMARKs)) then
                                                          @_to_MIMARKs
                                                        else raise NameError.new( "Error: undefined variable _to_MIMARKs", "_to_MIMARKs" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:565"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        callProcedure( 'second',
                                                            begin
                                                              if (self.instance_variables.map {|x| x.intern}.include?(:@_second)) then
                                                                @_second
                                                              else raise NameError.new( "Error: undefined variable _second", "_second" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:571"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              begin
                                                                  _lst
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:572"] + __e.backtrace ) ; raise __e
                                                              end
                                                                     ))
                                                               ))
                                                         ))))
                                                   ))                                    ,Cell.new(
                                      callProcedure( 'cddr',
                                          begin
                                            if (self.instance_variables.map {|x| x.intern}.include?(:@_cddr)) then
                                              @_cddr
                                            else raise NameError.new( "Error: undefined variable _cddr", "_cddr" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:566"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                _lst
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:572"] + __e.backtrace ) ; raise __e
                                            end
                                                   ))
                                             )))
                            else
                                callProcedure( 'cons',
                                    begin
                                      if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                        @_cons
                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:459"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                    :"let"                                    ,Cell.new(
                                      callProcedure( 'cons',
                                          begin
                                            if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                              @_cons
                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:459"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            callProcedure( 'cons',
                                                begin
                                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                    @_cons
                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:459"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  callProcedure( 'cons',
                                                      begin
                                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                          @_cons
                                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:459"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        begin
                                                            _tmp
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:565"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,Cell.new(
                                                        callProcedure( 'cons',
                                                            begin
                                                              if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                                @_cons
                                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:459"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              callProcedure( 'first',
                                                                  begin
                                                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_first)) then
                                                                      @_first
                                                                    else raise NameError.new( "Error: undefined variable _first", "_first" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:564"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                    begin
                                                                        _lst
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:572"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                           ))                                                            ,Cell.new(
                                                            
                                                                     )))
                                                               )))                                                ,Cell.new(
                                                
                                                         )))                                          ,Cell.new(
                                            callProcedure( 'cons',
                                                begin
                                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                    @_cons
                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:459"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  callProcedure( 'cons',
                                                      begin
                                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                          @_cons
                                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:459"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        callProcedure( 'string->symbol',
                                                            begin
                                                              if (self.instance_variables.map {|x| x.intern}.include?(:@_string_MIMARK_GTMARKsymbol)) then
                                                                @_string_MIMARK_GTMARKsymbol
                                                              else raise NameError.new( "Error: undefined variable _string_MIMARK_GTMARKsymbol", "_string_MIMARK_GTMARKsymbol" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:565"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              callProcedure( '+',
                                                                  begin
                                                                    if (self.instance_variables.map {|x| x.intern}.include?(:@__PLMARK)) then
                                                                      @__PLMARK
                                                                    else raise NameError.new( "Error: undefined variable __PLMARK", "__PLMARK" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:565"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                    callProcedure( 'to-s',
                                                                        begin
                                                                          if (self.instance_variables.map {|x| x.intern}.include?(:@_to_MIMARKs)) then
                                                                            @_to_MIMARKs
                                                                          else raise NameError.new( "Error: undefined variable _to_MIMARKs", "_to_MIMARKs" ) end
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:565"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                        Cell.new(
                                                                          begin
                                                                              _tmp
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:565"] + __e.backtrace ) ; raise __e
                                                                          end
                                                                                 ))                                                                  ,Cell.new(
                                                                  "."                                                                  ,Cell.new(
                                                                    callProcedure( 'to-s',
                                                                        begin
                                                                          if (self.instance_variables.map {|x| x.intern}.include?(:@_to_MIMARKs)) then
                                                                            @_to_MIMARKs
                                                                          else raise NameError.new( "Error: undefined variable _to_MIMARKs", "_to_MIMARKs" ) end
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:565"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                        Cell.new(
                                                                          callProcedure( 'second',
                                                                              begin
                                                                                if (self.instance_variables.map {|x| x.intern}.include?(:@_second)) then
                                                                                  @_second
                                                                                else raise NameError.new( "Error: undefined variable _second", "_second" ) end
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:571"] + __e.backtrace ) ; raise __e
                                                                              end                                                                            ,
                                                                              Cell.new(
                                                                                begin
                                                                                    _lst
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:572"] + __e.backtrace ) ; raise __e
                                                                                end
                                                                                       ))
                                                                                 ))
                                                                           ))))
                                                                     ))                                                      ,Cell.new(
                                                        callProcedure( 'cddr',
                                                            begin
                                                              if (self.instance_variables.map {|x| x.intern}.include?(:@_cddr)) then
                                                                @_cddr
                                                              else raise NameError.new( "Error: undefined variable _cddr", "_cddr" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:566"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              begin
                                                                  _lst
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:572"] + __e.backtrace ) ; raise __e
                                                              end
                                                                     ))
                                                               )))                                                ,Cell.new(
                                                
                                                         )))
                                                   )))
                                             )))
                            end
                        } ; ___lambda.call(
                              callProcedure( 'gensym',
                                  begin
                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_gensym)) then
                                      @_gensym
                                    else raise NameError.new( "Error: undefined variable _gensym", "_gensym" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:560"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                Cell.new(
                                           ))
                                   )
                      end
                  }
                if ( 
                  callProcedure( '>',
                      begin
                        if (self.instance_variables.map {|x| x.intern}.include?(:@__GTMARK)) then
                          @__GTMARK
                        else raise NameError.new( "Error: undefined variable __GTMARK", "__GTMARK" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:568"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                      2                      ,Cell.new(
                        callProcedure( 'length',
                            begin
                              if (self.instance_variables.map {|x| x.intern}.include?(:@_length)) then
                                @_length
                              else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:568"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  _lst
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:572"] + __e.backtrace ) ; raise __e
                              end
                                     ))
                               )))
                 ) then
                    begin
                        callProcedure( 'raise',
                            begin
                              if (self.instance_variables.map {|x| x.intern}.include?(:@_raise)) then
                                @_raise
                              else raise NameError.new( "Error: undefined variable _raise", "_raise" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:573"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  ArgumentError
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:569"] + __e.backtrace ) ; raise __e
                              end                            ,Cell.new(
                            ". dot-operator requires 2+ arguments."
                                     )))
                    end
                else
                    if ( 
                    true
                     ) then
                        begin
                            if ( 
                              callProcedure( 'symbol?',
                                  begin
                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_symbol_QUMARK)) then
                                      @_symbol_QUMARK
                                    else raise NameError.new( "Error: undefined variable _symbol_QUMARK", "_symbol_QUMARK" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:571"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    callProcedure( 'second',
                                        begin
                                          if (self.instance_variables.map {|x| x.intern}.include?(:@_second)) then
                                            @_second
                                          else raise NameError.new( "Error: undefined variable _second", "_second" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:571"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          begin
                                              _lst
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:572"] + __e.backtrace ) ; raise __e
                                          end
                                                 ))
                                           ))
                             ) then
                                callProcedure( 'generate-method-call-form',
                                    begin
                                        _generate_MIMARKmethod_MIMARKcall_MIMARKform
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:572"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          _lst
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:572"] + __e.backtrace ) ; raise __e
                                      end
                                             ))
                            else
                                callProcedure( 'raise',
                                    begin
                                      if (self.instance_variables.map {|x| x.intern}.include?(:@_raise)) then
                                        @_raise
                                      else raise NameError.new( "Error: undefined variable _raise", "_raise" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:573"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          TypeError
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:573"] + __e.backtrace ) ; raise __e
                                      end                                    ,Cell.new(
                                    ". dot-operator requires method name as symbol."
                                             )))
                            end
                        end
                    else
                      Nil.new
                    end
                end
            } ; ___lambda.call(
            nil
                       )
          end
      }
#--------------------

  @_with_MIMARKopen = 
      Proc.new { |_filename,_pred,*__rest__| _lst = __rest__[0] ;  
          begin
            ___lambda = lambda { |_len| 
                begin
                  ___lambda = lambda { |_f| 
                      begin
                        ___lambda = lambda { |_result| 
                            begin
                                _f.close(
                                  )
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:586"] + __e.backtrace ) ; raise __e
                            end
                            begin
                                _result
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:587"] + __e.backtrace ) ; raise __e
                            end
                        } ; ___lambda.call(
                              callProcedure( 'pred',
                                  begin
                                      _pred
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:585"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        _f
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:585"] + __e.backtrace ) ; raise __e
                                    end
                                           ))
                                   )
                      end
                  } ; ___lambda.call(
                        if ( 
                          callProcedure( '=',
                              begin
                                if (self.instance_variables.map {|x| x.intern}.include?(:@__EQMARK)) then
                                  @__EQMARK
                                else raise NameError.new( "Error: undefined variable __EQMARK", "__EQMARK" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:579"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                              0                              ,Cell.new(
                                begin
                                    _len
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:581"] + __e.backtrace ) ; raise __e
                                end
                                       )))
                         ) then
                            begin
                                begin
                                    Kernel.open(
                                          begin
                                              _filename
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:582"] + __e.backtrace ) ; raise __e
                                          end
                                      )
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:582"] + __e.backtrace ) ; raise __e
                                end
                            end
                        else
                            if ( 
                              callProcedure( '<',
                                  begin
                                    if (self.instance_variables.map {|x| x.intern}.include?(:@__LTMARK)) then
                                      @__LTMARK
                                    else raise NameError.new( "Error: undefined variable __LTMARK", "__LTMARK" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:581"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                  0                                  ,Cell.new(
                                    begin
                                        _len
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:581"] + __e.backtrace ) ; raise __e
                                    end
                                           )))
                             ) then
                                begin
                                    begin
                                        Kernel.open(
                                              begin
                                                  _filename
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:582"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              callProcedure( 'car',
                                                  begin
                                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                                      @_car
                                                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:582"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    begin
                                                        _lst
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:582"] + __e.backtrace ) ; raise __e
                                                    end
                                                           ))
                                          )
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:582"] + __e.backtrace ) ; raise __e
                                    end
                                end
                            else
                                if ( 
                                true
                                 ) then
                                    begin
                                        begin raise RuntimeError, 
                                        "with-open requires 2 or 3 arguments."
                                        rescue => __e 
                                          __e.set_backtrace( ["./lib/init.nnd:584"] + __e.backtrace )
                                          raise __e
                                        end 
                                    end
                                else
                                  Nil.new
                                end
                            end
                        end
                             )
                end
            } ; ___lambda.call(
                  callProcedure( 'length',
                      begin
                        if (self.instance_variables.map {|x| x.intern}.include?(:@_length)) then
                          @_length
                        else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:577"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                        begin
                            _lst
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:582"] + __e.backtrace ) ; raise __e
                        end
                               ))
                       )
          end
      }
#--------------------

  @_last_MIMARKpair = 
      Proc.new { |_x| 
          if ( 
            callProcedure( 'pair?',
                begin
                  if (self.instance_variables.map {|x| x.intern}.include?(:@_pair_QUMARK)) then
                    @_pair_QUMARK
                  else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:594"] + __e.backtrace ) ; raise __e
                end              ,
                Cell.new(
                  callProcedure( 'cdr',
                      begin
                        if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                          @_cdr
                        else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:595"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                        begin
                            _x
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:596"] + __e.backtrace ) ; raise __e
                        end
                               ))
                         ))
           ) then
              callProcedure( 'last-pair',
                  begin
                    if (self.instance_variables.map {|x| x.intern}.include?(:@_last_MIMARKpair)) then
                      @_last_MIMARKpair
                    else raise NameError.new( "Error: undefined variable _last_MIMARKpair", "_last_MIMARKpair" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:595"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    callProcedure( 'cdr',
                        begin
                          if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                            @_cdr
                          else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:595"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              _x
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:596"] + __e.backtrace ) ; raise __e
                          end
                                 ))
                           ))
          else
              begin
                  _x
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:596"] + __e.backtrace ) ; raise __e
              end
          end
      }
#--------------------

  @_cons_ASMARK = 
      Proc.new { |_arg,*__rest__| _args = __rest__[0] ;  
          if ( 
            callProcedure( 'null?',
                begin
                  if (self.instance_variables.map {|x| x.intern}.include?(:@_null_QUMARK)) then
                    @_null_QUMARK
                  else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:600"] + __e.backtrace ) ; raise __e
                end              ,
                Cell.new(
                  begin
                      _args
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:602"] + __e.backtrace ) ; raise __e
                  end
                         ))
           ) then
              begin
                  _arg
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:602"] + __e.backtrace ) ; raise __e
              end
          else
              callProcedure( 'cons',
                  begin
                    if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                      @_cons
                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:602"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    begin
                        _arg
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:602"] + __e.backtrace ) ; raise __e
                    end                  ,Cell.new(
                    callProcedure( 'apply',
                        begin
                          if (self.instance_variables.map {|x| x.intern}.include?(:@_apply)) then
                            @_apply
                          else raise NameError.new( "Error: undefined variable _apply", "_apply" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:602"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_list_ASMARK)) then
                              @_list_ASMARK
                            else raise NameError.new( "Error: undefined variable _list_ASMARK", "_list_ASMARK" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:602"] + __e.backtrace ) ; raise __e
                          end                        ,Cell.new(
                          begin
                              _args
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:602"] + __e.backtrace ) ; raise __e
                          end
                                 )))
                           )))
          end
      }
#--------------------

  @_list_ASMARK = 
      begin
        if (self.instance_variables.map {|x| x.intern}.include?(:@_cons_ASMARK)) then
          @_cons_ASMARK
        else raise NameError.new( "Error: undefined variable _cons_ASMARK", "_cons_ASMARK" ) end
        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:603"] + __e.backtrace ) ; raise __e
      end
#--------------------

  @_make_MIMARKhash_MIMARKtable = 
      Proc.new { || 
          begin
              Hash.new(
                )
            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:610"] + __e.backtrace ) ; raise __e
          end
      }
#--------------------

  @_hash_MIMARKtable_QUMARK = 
      Proc.new { |_h| 
          begin
              _h.is_a?(
                    begin
                        Hash
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:613"] + __e.backtrace ) ; raise __e
                    end
                )
            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:613"] + __e.backtrace ) ; raise __e
          end
      }
#--------------------

  @_hash_MIMARKtable_MIMARKnum_MIMARKentries = 
      Proc.new { |_h| 
          begin
              _h.length(
                )
            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:616"] + __e.backtrace ) ; raise __e
          end
      }
#--------------------

  @_hash_MIMARKtable = 
      Proc.new { |*__rest__| _kv_MIMARKlist = __rest__[0] ;  
          begin
            ___lambda = lambda { |_h| 
                callProcedure( 'for-each',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_for_MIMARKeach)) then
                        @_for_MIMARKeach
                      else raise NameError.new( "Error: undefined variable _for_MIMARKeach", "_for_MIMARKeach" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:620"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      Proc.new { |_entry| 
                          if ( 
                            callProcedure( 'pair?',
                                begin
                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_pair_QUMARK)) then
                                    @_pair_QUMARK
                                  else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:622"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  callProcedure( 'cdr',
                                      begin
                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                          @_cdr
                                        else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:624"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _entry
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:624"] + __e.backtrace ) ; raise __e
                                        end
                                               ))
                                         ))
                           ) then
                              callProcedure( 'hash-table-put!',
                                  begin
                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_hash_MIMARKtable_MIMARKput_EXMARK)) then
                                      @_hash_MIMARKtable_MIMARKput_EXMARK
                                    else raise NameError.new( "Error: undefined variable _hash_MIMARKtable_MIMARKput_EXMARK", "_hash_MIMARKtable_MIMARKput_EXMARK" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:624"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        _h
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:626"] + __e.backtrace ) ; raise __e
                                    end                                  ,Cell.new(
                                    callProcedure( 'car',
                                        begin
                                          if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                            @_car
                                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:624"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          begin
                                              _entry
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:624"] + __e.backtrace ) ; raise __e
                                          end
                                                 ))                                  ,Cell.new(
                                    callProcedure( 'cadr',
                                        begin
                                          if (self.instance_variables.map {|x| x.intern}.include?(:@_cadr)) then
                                            @_cadr
                                          else raise NameError.new( "Error: undefined variable _cadr", "_cadr" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:623"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          begin
                                              _entry
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:624"] + __e.backtrace ) ; raise __e
                                          end
                                                 ))
                                           ))))
                          else
                              callProcedure( 'hash-table-put!',
                                  begin
                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_hash_MIMARKtable_MIMARKput_EXMARK)) then
                                      @_hash_MIMARKtable_MIMARKput_EXMARK
                                    else raise NameError.new( "Error: undefined variable _hash_MIMARKtable_MIMARKput_EXMARK", "_hash_MIMARKtable_MIMARKput_EXMARK" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:624"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        _h
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:626"] + __e.backtrace ) ; raise __e
                                    end                                  ,Cell.new(
                                    callProcedure( 'car',
                                        begin
                                          if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                            @_car
                                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:624"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          begin
                                              _entry
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:624"] + __e.backtrace ) ; raise __e
                                          end
                                                 ))                                  ,Cell.new(
                                    callProcedure( 'cdr',
                                        begin
                                          if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                            @_cdr
                                          else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:624"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          begin
                                              _entry
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:624"] + __e.backtrace ) ; raise __e
                                          end
                                                 ))
                                           ))))
                          end
                      }                    ,Cell.new(
                      begin
                          _kv_MIMARKlist
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:625"] + __e.backtrace ) ; raise __e
                      end
                             )))
                begin
                    _h
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:626"] + __e.backtrace ) ; raise __e
                end
            } ; ___lambda.call(
                  callProcedure( 'make-hash-table',
                      begin
                        if (self.instance_variables.map {|x| x.intern}.include?(:@_make_MIMARKhash_MIMARKtable)) then
                          @_make_MIMARKhash_MIMARKtable
                        else raise NameError.new( "Error: undefined variable _make_MIMARKhash_MIMARKtable", "_make_MIMARKhash_MIMARKtable" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:619"] + __e.backtrace ) ; raise __e
                      end                    ,
                    Cell.new(
                               ))
                       )
          end
      }
#--------------------

  @_hash_MIMARKtable_MIMARKexist_QUMARK = 
      Proc.new { |_h,_key| 
          begin
              _h.has_key?(
                    begin
                        _key
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:629"] + __e.backtrace ) ; raise __e
                    end
                )
            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:629"] + __e.backtrace ) ; raise __e
          end
      }
#--------------------

  @_hash_MIMARKtable_MIMARKclear_EXMARK = 
      Proc.new { |_h| 
          begin
              _h.clear(
                )
            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:632"] + __e.backtrace ) ; raise __e
          end
      }
#--------------------

  @_hash_MIMARKtable_MIMARKdelete_EXMARK = 
      Proc.new { |_h,_key| 
          begin
              _h.delete(
                    begin
                        _key
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
                    end
                )
            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
          end
      }
#--------------------

  @_hash_MIMARKtable_MIMARKkeys = 
      Proc.new { |_h| 
          callProcedure( 'to-list',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_to_MIMARKlist)) then
                  @_to_MIMARKlist
                else raise NameError.new( "Error: undefined variable _to_MIMARKlist", "_to_MIMARKlist" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:638"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                begin
                    _h.keys(
                      )
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:638"] + __e.backtrace ) ; raise __e
                end
                       ))
      }
#--------------------

  @_hash_MIMARKtable_MIMARKvalues = 
      Proc.new { |_h| 
          callProcedure( 'to-list',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_to_MIMARKlist)) then
                  @_to_MIMARKlist
                else raise NameError.new( "Error: undefined variable _to_MIMARKlist", "_to_MIMARKlist" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:641"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                begin
                    _h.values(
                      )
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:641"] + __e.backtrace ) ; raise __e
                end
                       ))
      }
#--------------------

  @_hash_MIMARKtable_MIMARKmap = 
      Proc.new { |_h,_pred| 
          begin
            ___lambda = lambda { |_keys| 
                callProcedure( 'map',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_map)) then
                        @_map
                      else raise NameError.new( "Error: undefined variable _map", "_map" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:645"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      Proc.new { |_key| 
                          callProcedure( 'pred',
                              begin
                                  _pred
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:647"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    _key
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:647"] + __e.backtrace ) ; raise __e
                                end                              ,Cell.new(
                                callProcedure( 'hash-table-get',
                                    begin
                                      if (self.instance_variables.map {|x| x.intern}.include?(:@_hash_MIMARKtable_MIMARKget)) then
                                        @_hash_MIMARKtable_MIMARKget
                                      else raise NameError.new( "Error: undefined variable _hash_MIMARKtable_MIMARKget", "_hash_MIMARKtable_MIMARKget" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:647"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          _h
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:647"] + __e.backtrace ) ; raise __e
                                      end                                    ,Cell.new(
                                      begin
                                          _key
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:647"] + __e.backtrace ) ; raise __e
                                      end
                                             )))
                                       )))
                      }                    ,Cell.new(
                      begin
                          _keys
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:648"] + __e.backtrace ) ; raise __e
                      end
                             )))
            } ; ___lambda.call(
                  callProcedure( 'hash-table-keys',
                      begin
                        if (self.instance_variables.map {|x| x.intern}.include?(:@_hash_MIMARKtable_MIMARKkeys)) then
                          @_hash_MIMARKtable_MIMARKkeys
                        else raise NameError.new( "Error: undefined variable _hash_MIMARKtable_MIMARKkeys", "_hash_MIMARKtable_MIMARKkeys" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:644"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                        begin
                            _h
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:647"] + __e.backtrace ) ; raise __e
                        end
                               ))
                       )
          end
      }
#--------------------

  @_hash_MIMARKtable_MIMARKfor_MIMARKeach = 
      begin
        if (self.instance_variables.map {|x| x.intern}.include?(:@_hash_MIMARKtable_MIMARKmap)) then
          @_hash_MIMARKtable_MIMARKmap
        else raise NameError.new( "Error: undefined variable _hash_MIMARKtable_MIMARKmap", "_hash_MIMARKtable_MIMARKmap" ) end
        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:649"] + __e.backtrace ) ; raise __e
      end
#--------------------

  @_hash_MIMARKtable_MIMARK_GTMARKalist = 
      Proc.new { |_h| 
          if ( 
            callProcedure( 'not',
                begin
                  if (self.instance_variables.map {|x| x.intern}.include?(:@_not)) then
                    @_not
                  else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:652"] + __e.backtrace ) ; raise __e
                end              ,
                Cell.new(
                  begin
                      _h.is_a?(
                            begin
                                Hash
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:652"] + __e.backtrace ) ; raise __e
                            end
                        )
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:652"] + __e.backtrace ) ; raise __e
                  end
                         ))
           ) then
              callProcedure( 'raise',
                  begin
                    if (self.instance_variables.map {|x| x.intern}.include?(:@_raise)) then
                      @_raise
                    else raise NameError.new( "Error: undefined variable _raise", "_raise" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:653"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    begin
                        TypeError
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:653"] + __e.backtrace ) ; raise __e
                    end                  ,Cell.new(
                  "Error: hash-table->alist expects Hash instance."
                           )))
          else
              begin
                ___lambda = lambda { |_keys| 
                    callProcedure( 'map',
                        begin
                          if (self.instance_variables.map {|x| x.intern}.include?(:@_map)) then
                            @_map
                          else raise NameError.new( "Error: undefined variable _map", "_map" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:655"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          Proc.new { |_key| 
                              callProcedure( 'cons',
                                  begin
                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                      @_cons
                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        _key
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                                    end                                  ,Cell.new(
                                    callProcedure( 'hash-table-get',
                                        begin
                                          if (self.instance_variables.map {|x| x.intern}.include?(:@_hash_MIMARKtable_MIMARKget)) then
                                            @_hash_MIMARKtable_MIMARKget
                                          else raise NameError.new( "Error: undefined variable _hash_MIMARKtable_MIMARKget", "_hash_MIMARKtable_MIMARKget" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          begin
                                              _h
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                                          end                                        ,Cell.new(
                                          begin
                                              _key
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                                          end
                                                 )))
                                           )))
                          }                        ,Cell.new(
                          begin
                              _keys
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:658"] + __e.backtrace ) ; raise __e
                          end
                                 )))
                } ; ___lambda.call(
                      callProcedure( 'hash-table-keys',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_hash_MIMARKtable_MIMARKkeys)) then
                              @_hash_MIMARKtable_MIMARKkeys
                            else raise NameError.new( "Error: undefined variable _hash_MIMARKtable_MIMARKkeys", "_hash_MIMARKtable_MIMARKkeys" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:654"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                _h
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                            end
                                   ))
                           )
              end
          end
      }
#--------------------

  @_alist_MIMARK_GTMARKhash_MIMARKtable = 
      Proc.new { |_alist| 
          if ( 
            callProcedure( 'not',
                begin
                  if (self.instance_variables.map {|x| x.intern}.include?(:@_not)) then
                    @_not
                  else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:661"] + __e.backtrace ) ; raise __e
                end              ,
                Cell.new(
                  callProcedure( 'list?',
                      begin
                        if (self.instance_variables.map {|x| x.intern}.include?(:@_list_QUMARK)) then
                          @_list_QUMARK
                        else raise NameError.new( "Error: undefined variable _list_QUMARK", "_list_QUMARK" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:661"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                        begin
                            _alist
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:663"] + __e.backtrace ) ; raise __e
                        end
                               ))
                         ))
           ) then
              callProcedure( 'raise',
                  begin
                    if (self.instance_variables.map {|x| x.intern}.include?(:@_raise)) then
                      @_raise
                    else raise NameError.new( "Error: undefined variable _raise", "_raise" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:662"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    begin
                        TypeError
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:662"] + __e.backtrace ) ; raise __e
                    end                  ,Cell.new(
                  "Error: alist->hash-table expects alist."
                           )))
          else
              callProcedure( 'apply',
                  begin
                    if (self.instance_variables.map {|x| x.intern}.include?(:@_apply)) then
                      @_apply
                    else raise NameError.new( "Error: undefined variable _apply", "_apply" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:663"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_hash_MIMARKtable)) then
                        @_hash_MIMARKtable
                      else raise NameError.new( "Error: undefined variable _hash_MIMARKtable", "_hash_MIMARKtable" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:663"] + __e.backtrace ) ; raise __e
                    end                  ,Cell.new(
                    begin
                        _alist
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:663"] + __e.backtrace ) ; raise __e
                    end
                           )))
          end
      }
#--------------------

  @_export = 
      LispMacro.new { |_name| 
          callProcedure( 'cons',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                  @_cons
                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
              :"define"              ,Cell.new(
                callProcedure( 'cons',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                        @_cons
                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          _name
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:671"] + __e.backtrace ) ; raise __e
                      end                    ,Cell.new(
                    Cell.new(nil)
                             )))
                       )))
      }
#--------------------

  @_load_MIMARKlibrary = 
      Proc.new { |_name| 
          begin
            ___lambda = lambda { |_home| 
                begin
                  ___lambda = lambda { |_path| 
                      if ( 
                        begin
                            File.exist?(
                                  callProcedure( '+',
                                      begin
                                        if (self.instance_variables.map {|x| x.intern}.include?(:@__PLMARK)) then
                                          @__PLMARK
                                        else raise NameError.new( "Error: undefined variable __PLMARK", "__PLMARK" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:680"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _path
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:682"] + __e.backtrace ) ; raise __e
                                        end                                      ,Cell.new(
                                      ".nndc"
                                               )))
                              )
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:679"] + __e.backtrace ) ; raise __e
                        end
                       ) then
                          begin
                              callProcedure( 'load-compiled-code',
                                  begin
                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_load_MIMARKcompiled_MIMARKcode)) then
                                      @_load_MIMARKcompiled_MIMARKcode
                                    else raise NameError.new( "Error: undefined variable _load_MIMARKcompiled_MIMARKcode", "_load_MIMARKcompiled_MIMARKcode" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:678"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    callProcedure( '+',
                                        begin
                                          if (self.instance_variables.map {|x| x.intern}.include?(:@__PLMARK)) then
                                            @__PLMARK
                                          else raise NameError.new( "Error: undefined variable __PLMARK", "__PLMARK" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:680"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          begin
                                              _path
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:682"] + __e.backtrace ) ; raise __e
                                          end                                        ,Cell.new(
                                        ".nndc"
                                                 )))
                                           ))
                          end
                      else
                          if ( 
                            begin
                                File.exist?(
                                      callProcedure( '+',
                                          begin
                                            if (self.instance_variables.map {|x| x.intern}.include?(:@__PLMARK)) then
                                              @__PLMARK
                                            else raise NameError.new( "Error: undefined variable __PLMARK", "__PLMARK" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:680"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                _path
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:682"] + __e.backtrace ) ; raise __e
                                            end                                          ,Cell.new(
                                          ".nnd"
                                                   )))
                                  )
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:679"] + __e.backtrace ) ; raise __e
                            end
                           ) then
                              begin
                                  callProcedure( 'load',
                                      begin
                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_load)) then
                                          @_load
                                        else raise NameError.new( "Error: undefined variable _load", "_load" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:680"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        callProcedure( '+',
                                            begin
                                              if (self.instance_variables.map {|x| x.intern}.include?(:@__PLMARK)) then
                                                @__PLMARK
                                              else raise NameError.new( "Error: undefined variable __PLMARK", "__PLMARK" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:680"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              begin
                                                  _path
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:682"] + __e.backtrace ) ; raise __e
                                              end                                            ,Cell.new(
                                            ".nnd"
                                                     )))
                                               ))
                              end
                          else
                              if ( 
                              true
                               ) then
                                  begin
                                      begin raise RuntimeError, 
                                        callProcedure( 'sprintf',
                                            begin
                                              if (self.instance_variables.map {|x| x.intern}.include?(:@_sprintf)) then
                                                @_sprintf
                                              else raise NameError.new( "Error: undefined variable _sprintf", "_sprintf" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:327"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                            "Error: can't load library file [%s]\n"                                            ,Cell.new(
                                              begin
                                                  _path
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:682"] + __e.backtrace ) ; raise __e
                                              end
                                                     )))
                                      rescue => __e 
                                        __e.set_backtrace( ["./lib/init.nnd:584"] + __e.backtrace )
                                        raise __e
                                      end 
                                  end
                              else
                                Nil.new
                              end
                          end
                      end
                  } ; ___lambda.call(
                        callProcedure( '+',
                            begin
                              if (self.instance_variables.map {|x| x.intern}.include?(:@__PLMARK)) then
                                @__PLMARK
                              else raise NameError.new( "Error: undefined variable __PLMARK", "__PLMARK" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:680"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  _home
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:675"] + __e.backtrace ) ; raise __e
                              end                            ,Cell.new(
                            "/"                            ,Cell.new(
                              begin
                                  _name
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:675"] + __e.backtrace ) ; raise __e
                              end
                                     ))))
                             )
                end
            } ; ___lambda.call(
                  callProcedure( 'get-nendo-home',
                      begin
                        if (self.instance_variables.map {|x| x.intern}.include?(:@_get_MIMARKnendo_MIMARKhome)) then
                          @_get_MIMARKnendo_MIMARKhome
                        else raise NameError.new( "Error: undefined variable _get_MIMARKnendo_MIMARKhome", "_get_MIMARKnendo_MIMARKhome" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:674"] + __e.backtrace ) ; raise __e
                      end                    ,
                    Cell.new(
                               ))
                       )
          end
      }
#--------------------

  @_debug_MIMARKprint_MIMARKlength = 
    63
#--------------------

  @_debug_MIMARKprint_MIMARKoutput_MIMARKfunc = 
      Proc.new { |_str| 
          begin
              STDERR.print(
                    begin
                        _str
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:691"] + __e.backtrace ) ; raise __e
                    end
                )
            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:691"] + __e.backtrace ) ; raise __e
          end
      }
#--------------------

  @_debug_MIMARKlimit_MIMARKlength = 
      Proc.new { |_x| 
          callProcedure( '+',
              begin
                if (self.instance_variables.map {|x| x.intern}.include?(:@__PLMARK)) then
                  @__PLMARK
                else raise NameError.new( "Error: undefined variable __PLMARK", "__PLMARK" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:696"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                if ( 
                  callProcedure( '<',
                      begin
                        if (self.instance_variables.map {|x| x.intern}.include?(:@__LTMARK)) then
                          @__LTMARK
                        else raise NameError.new( "Error: undefined variable __LTMARK", "__LTMARK" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:694"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                        begin
                          if (self.instance_variables.map {|x| x.intern}.include?(:@_debug_MIMARKprint_MIMARKlength)) then
                            @_debug_MIMARKprint_MIMARKlength
                          else raise NameError.new( "Error: undefined variable _debug_MIMARKprint_MIMARKlength", "_debug_MIMARKprint_MIMARKlength" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:694"] + __e.backtrace ) ; raise __e
                        end                      ,Cell.new(
                        begin
                            _x.length
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:694"] + __e.backtrace ) ; raise __e
                        end
                               )))
                 ) then
                    begin
                      ___lambda = lambda { |_n| 
                          callProcedure( 'sprintf',
                              begin
                                if (self.instance_variables.map {|x| x.intern}.include?(:@_sprintf)) then
                                  @_sprintf
                                else raise NameError.new( "Error: undefined variable _sprintf", "_sprintf" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:696"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                callProcedure( '+',
                                    begin
                                      if (self.instance_variables.map {|x| x.intern}.include?(:@__PLMARK)) then
                                        @__PLMARK
                                      else raise NameError.new( "Error: undefined variable __PLMARK", "__PLMARK" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:696"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                    "%"                                    ,Cell.new(
                                      begin
                                          _n
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:696"] + __e.backtrace ) ; raise __e
                                      end                                    ,Cell.new(
                                    "."                                    ,Cell.new(
                                      begin
                                          _n
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:696"] + __e.backtrace ) ; raise __e
                                      end                                    ,Cell.new(
                                    "s ..."
                                             ))))))                              ,Cell.new(
                                begin
                                    _x
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:697"] + __e.backtrace ) ; raise __e
                                end
                                       )))
                      } ; ___lambda.call(
                            begin
                              if (self.instance_variables.map {|x| x.intern}.include?(:@_debug_MIMARKprint_MIMARKlength)) then
                                @_debug_MIMARKprint_MIMARKlength.to_s
                              else raise NameError.new( "Error: undefined variable _debug_MIMARKprint_MIMARKlength", "_debug_MIMARKprint_MIMARKlength" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:695"] + __e.backtrace ) ; raise __e
                            end
                                 )
                    end
                else
                    begin
                        _x
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:697"] + __e.backtrace ) ; raise __e
                    end
                end              ,Cell.new(
              "\n"
                       )))
      }
#--------------------

  @_debug_MIMARKprint = 
      LispMacro.new { |__form,_sourcefile,_lineno,_sourcesexp| 
          begin
            ___lambda = lambda { |_val| 
                callProcedure( 'cons',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                        @_cons
                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                    :"let"                    ,Cell.new(
                      callProcedure( 'cons',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                              @_cons
                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'cons',
                                begin
                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                    @_cons
                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  callProcedure( 'cons',
                                      begin
                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                          @_cons
                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _val
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:707"] + __e.backtrace ) ; raise __e
                                        end                                      ,Cell.new(
                                      Cell.new(nil)
                                               )))                                ,Cell.new(
                                
                                         )))                          ,Cell.new(
                            callProcedure( 'cons',
                                begin
                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                    @_cons
                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  callProcedure( 'cons',
                                      begin
                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                          @_cons
                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                      :"debug-print-output-func"                                      ,Cell.new(
                                        callProcedure( 'cons',
                                            begin
                                              if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                @_cons
                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              callProcedure( 'cons',
                                                  begin
                                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                      @_cons
                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                  :"debug-limit-length"                                                  ,Cell.new(
                                                    callProcedure( 'cons',
                                                        begin
                                                          if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                            @_cons
                                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                          callProcedure( 'cons',
                                                              begin
                                                                if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                                  @_cons
                                                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                              :"sprintf"                                                              ,Cell.new(
                                                                callProcedure( 'cons',
                                                                    begin
                                                                      if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                                        @_cons
                                                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                    Cell.new(
                                                                    "#?=\"%s\":%s:%s"                                                                    ,Cell.new(
                                                                      callProcedure( 'cons',
                                                                          begin
                                                                            if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                                              @_cons
                                                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                          Cell.new(
                                                                            begin
                                                                                _sourcefile
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:704"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,Cell.new(
                                                                            callProcedure( 'cons',
                                                                                begin
                                                                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                                                    @_cons
                                                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                                                                                end                                                                              ,
                                                                                Cell.new(
                                                                                  begin
                                                                                      _lineno
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:704"] + __e.backtrace ) ; raise __e
                                                                                  end                                                                                ,Cell.new(
                                                                                  callProcedure( 'cons',
                                                                                      begin
                                                                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                                                          @_cons
                                                                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                                                                                      end                                                                                    ,
                                                                                      Cell.new(
                                                                                        callProcedure( 'cons',
                                                                                            begin
                                                                                              if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                                                                @_cons
                                                                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                                                                                            end                                                                                          ,
                                                                                            Cell.new(
                                                                                            :"write-to-string"                                                                                            ,Cell.new(
                                                                                              callProcedure( 'cons',
                                                                                                  begin
                                                                                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                                                                      @_cons
                                                                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                                                                                                  end                                                                                                ,
                                                                                                  Cell.new(
                                                                                                    begin
                                                                                                        _sourcesexp
                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:704"] + __e.backtrace ) ; raise __e
                                                                                                    end                                                                                                  ,Cell.new(
                                                                                                  
                                                                                                           )))
                                                                                                     )))                                                                                      ,Cell.new(
                                                                                      
                                                                                               )))
                                                                                         )))
                                                                                   )))
                                                                             )))
                                                                       )))                                                        ,Cell.new(
                                                        
                                                                 )))
                                                           )))                                            ,Cell.new(
                                            
                                                     )))
                                               )))                                ,Cell.new(
                                  callProcedure( 'cons',
                                      begin
                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                          @_cons
                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        callProcedure( 'cons',
                                            begin
                                              if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                @_cons
                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                            :"set!"                                            ,Cell.new(
                                              callProcedure( 'cons',
                                                  begin
                                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                      @_cons
                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    begin
                                                        _val
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:707"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,Cell.new(
                                                    callProcedure( 'cons',
                                                        begin
                                                          if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                            @_cons
                                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                          begin
                                                              __form
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:705"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,Cell.new(
                                                        
                                                                 )))
                                                           )))
                                                     )))                                      ,Cell.new(
                                        callProcedure( 'cons',
                                            begin
                                              if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                @_cons
                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              callProcedure( 'cons',
                                                  begin
                                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                      @_cons
                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                  :"debug-print-output-func"                                                  ,Cell.new(
                                                    callProcedure( 'cons',
                                                        begin
                                                          if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                            @_cons
                                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                          callProcedure( 'cons',
                                                              begin
                                                                if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                                  @_cons
                                                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                              :"debug-limit-length"                                                              ,Cell.new(
                                                                callProcedure( 'cons',
                                                                    begin
                                                                      if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                                        @_cons
                                                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                    Cell.new(
                                                                      callProcedure( 'cons',
                                                                          begin
                                                                            if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                                              @_cons
                                                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                          Cell.new(
                                                                          :"+"                                                                          ,Cell.new(
                                                                            callProcedure( 'cons',
                                                                                begin
                                                                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                                                    @_cons
                                                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                                                                                end                                                                              ,
                                                                                Cell.new(
                                                                                "#?-    "                                                                                ,Cell.new(
                                                                                  callProcedure( 'cons',
                                                                                      begin
                                                                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                                                          @_cons
                                                                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                                                                                      end                                                                                    ,
                                                                                      Cell.new(
                                                                                        callProcedure( 'cons',
                                                                                            begin
                                                                                              if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                                                                @_cons
                                                                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                                                                                            end                                                                                          ,
                                                                                            Cell.new(
                                                                                            :"write-to-string"                                                                                            ,Cell.new(
                                                                                              callProcedure( 'cons',
                                                                                                  begin
                                                                                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                                                                      @_cons
                                                                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                                                                                                  end                                                                                                ,
                                                                                                  Cell.new(
                                                                                                    begin
                                                                                                        _val
                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:707"] + __e.backtrace ) ; raise __e
                                                                                                    end                                                                                                  ,Cell.new(
                                                                                                  
                                                                                                           )))
                                                                                                     )))                                                                                      ,Cell.new(
                                                                                      
                                                                                               )))
                                                                                         )))
                                                                                   )))                                                                    ,Cell.new(
                                                                    
                                                                             )))
                                                                       )))                                                        ,Cell.new(
                                                        
                                                                 )))
                                                           )))                                            ,Cell.new(
                                              callProcedure( 'cons',
                                                  begin
                                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_cons)) then
                                                      @_cons
                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    begin
                                                        _val
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:707"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,Cell.new(
                                                  
                                                           )))
                                                     )))
                                               )))
                                         )))
                                   )))
                             )))
            } ; ___lambda.call(
                  callProcedure( 'gensym',
                      begin
                        if (self.instance_variables.map {|x| x.intern}.include?(:@_gensym)) then
                          @_gensym
                        else raise NameError.new( "Error: undefined variable _gensym", "_gensym" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:702"] + __e.backtrace ) ; raise __e
                      end                    ,
                    Cell.new(
                               ))
                       )
          end
      }
#--------------------

  @_pretty_MIMARKprint = 
      Proc.new { |_s| 
          begin
            ___lambda = lambda { |_do_MIMARKindent| 
                _do_MIMARKindent                 = 
                  Proc.new { |_level| 
                      callProcedure( 'for-each',
                          begin
                            if (self.instance_variables.map {|x| x.intern}.include?(:@_for_MIMARKeach)) then
                              @_for_MIMARKeach
                            else raise NameError.new( "Error: undefined variable _for_MIMARKeach", "_for_MIMARKeach" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:717"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            Proc.new { |_x| 
                                callProcedure( 'display',
                                    begin
                                      if (self.instance_variables.map {|x| x.intern}.include?(:@_display)) then
                                        @_display
                                      else raise NameError.new( "Error: undefined variable _display", "_display" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:723"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                    " "
                                             ))
                            }                          ,Cell.new(
                            callProcedure( 'range',
                                begin
                                  if (self.instance_variables.map {|x| x.intern}.include?(:@_range)) then
                                    @_range
                                  else raise NameError.new( "Error: undefined variable _range", "_range" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:717"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _level
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:735"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                                   )))
                  }
                @_pp_MIMARKparenl = 
                    Proc.new { || 
                        callProcedure( 'display',
                            begin
                              if (self.instance_variables.map {|x| x.intern}.include?(:@_display)) then
                                @_display
                              else raise NameError.new( "Error: undefined variable _display", "_display" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:723"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                            "("
                                     ))
                    }
                @_pp_MIMARKparenr = 
                    Proc.new { || 
                        callProcedure( 'display',
                            begin
                              if (self.instance_variables.map {|x| x.intern}.include?(:@_display)) then
                                @_display
                              else raise NameError.new( "Error: undefined variable _display", "_display" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:723"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                            ")"
                                     ))
                    }
                @_pp_MIMARKatom = 
                    Proc.new { |_e,_prefix| 
                        if ( 
                          begin
                              _prefix
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:736"] + __e.backtrace ) ; raise __e
                          end
                         ) then
                            begin
                                callProcedure( 'display',
                                    begin
                                      if (self.instance_variables.map {|x| x.intern}.include?(:@_display)) then
                                        @_display
                                      else raise NameError.new( "Error: undefined variable _display", "_display" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:723"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                    " "
                                             ))
                            end
                        end
                        callProcedure( 'write',
                            begin
                              if (self.instance_variables.map {|x| x.intern}.include?(:@_write)) then
                                @_write
                              else raise NameError.new( "Error: undefined variable _write", "_write" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:740"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  _e
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:736"] + __e.backtrace ) ; raise __e
                              end
                                     ))
                    }
                @_pp_MIMARKlist = 
                    Proc.new { |_s,_level,_prefix| 
                        if ( 
                          callProcedure( 'not',
                              begin
                                if (self.instance_variables.map {|x| x.intern}.include?(:@_not)) then
                                  @_not
                                else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:661"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                callProcedure( 'eq?',
                                    begin
                                      if (self.instance_variables.map {|x| x.intern}.include?(:@_eq_QUMARK)) then
                                        @_eq_QUMARK
                                      else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:539"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                    false                                    ,Cell.new(
                                      begin
                                          _prefix
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:736"] + __e.backtrace ) ; raise __e
                                      end
                                             )))
                                       ))
                         ) then
                            callProcedure( 'do-indent',
                                begin
                                    _do_MIMARKindent
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:726"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _level
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:735"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                        else
                          false
                        end
                        callProcedure( 'pp-parenl',
                            begin
                              if (self.instance_variables.map {|x| x.intern}.include?(:@_pp_MIMARKparenl)) then
                                @_pp_MIMARKparenl
                              else raise NameError.new( "Error: undefined variable _pp_MIMARKparenl", "_pp_MIMARKparenl" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:727"] + __e.backtrace ) ; raise __e
                            end                          ,
                          Cell.new(
                                     ))
                        begin
                          ___lambda = lambda { |_loop| 
                              _loop                               = 
                                Proc.new { |_s,_prefix| 
                                    if ( 
                                      callProcedure( 'null?',
                                          begin
                                            if (self.instance_variables.map {|x| x.intern}.include?(:@_null_QUMARK)) then
                                              @_null_QUMARK
                                            else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:730"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                _s
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:740"] + __e.backtrace ) ; raise __e
                                            end
                                                   ))
                                     ) then
                                        callProcedure( 'pp-parenr',
                                            begin
                                              if (self.instance_variables.map {|x| x.intern}.include?(:@_pp_MIMARKparenr)) then
                                                @_pp_MIMARKparenr
                                              else raise NameError.new( "Error: undefined variable _pp_MIMARKparenr", "_pp_MIMARKparenr" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:731"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                          Cell.new(
                                                     ))
                                    else
                                        begin
                                          ___lambda = lambda { |_e| 
                                              if ( 
                                                callProcedure( 'list?',
                                                    begin
                                                      if (self.instance_variables.map {|x| x.intern}.include?(:@_list_QUMARK)) then
                                                        @_list_QUMARK
                                                      else raise NameError.new( "Error: undefined variable _list_QUMARK", "_list_QUMARK" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:738"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      begin
                                                          _e
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:736"] + __e.backtrace ) ; raise __e
                                                      end
                                                             ))
                                               ) then
                                                  begin
                                                      if ( 
                                                        callProcedure( 'not',
                                                            begin
                                                              if (self.instance_variables.map {|x| x.intern}.include?(:@_not)) then
                                                                @_not
                                                              else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:661"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              callProcedure( 'eq?',
                                                                  begin
                                                                    if (self.instance_variables.map {|x| x.intern}.include?(:@_eq_QUMARK)) then
                                                                      @_eq_QUMARK
                                                                    else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:539"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                  false                                                                  ,Cell.new(
                                                                    begin
                                                                        _prefix
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:736"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                           )))
                                                                     ))
                                                       ) then
                                                          callProcedure( 'newline',
                                                              begin
                                                                if (self.instance_variables.map {|x| x.intern}.include?(:@_newline)) then
                                                                  @_newline
                                                                else raise NameError.new( "Error: undefined variable _newline", "_newline" ) end
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:741"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                            Cell.new(
                                                                       ))
                                                      else
                                                        false
                                                      end
                                                      callProcedure( 'pp-list',
                                                          begin
                                                            if (self.instance_variables.map {|x| x.intern}.include?(:@_pp_MIMARKlist)) then
                                                              @_pp_MIMARKlist
                                                            else raise NameError.new( "Error: undefined variable _pp_MIMARKlist", "_pp_MIMARKlist" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:739"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            begin
                                                                _e
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:736"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,Cell.new(
                                                            callProcedure( '+',
                                                                begin
                                                                  if (self.instance_variables.map {|x| x.intern}.include?(:@__PLMARK)) then
                                                                    @__PLMARK
                                                                  else raise NameError.new( "Error: undefined variable __PLMARK", "__PLMARK" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:735"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                  begin
                                                                      _level
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:735"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,Cell.new(
                                                                1
                                                                         )))                                                          ,Cell.new(
                                                            begin
                                                                _prefix
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:736"] + __e.backtrace ) ; raise __e
                                                            end
                                                                   ))))
                                                  end
                                              else
                                                  callProcedure( 'pp-atom',
                                                      begin
                                                        if (self.instance_variables.map {|x| x.intern}.include?(:@_pp_MIMARKatom)) then
                                                          @_pp_MIMARKatom
                                                        else raise NameError.new( "Error: undefined variable _pp_MIMARKatom", "_pp_MIMARKatom" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:736"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        begin
                                                            _e
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:736"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,Cell.new(
                                                        begin
                                                            _prefix
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:736"] + __e.backtrace ) ; raise __e
                                                        end
                                                               )))
                                              end
                                              callProcedure( 'loop',
                                                  begin
                                                      _loop
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:737"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    callProcedure( 'cdr',
                                                        begin
                                                          if (self.instance_variables.map {|x| x.intern}.include?(:@_cdr)) then
                                                            @_cdr
                                                          else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:737"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                          begin
                                                              _s
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:740"] + __e.backtrace ) ; raise __e
                                                          end
                                                                 ))                                                  ,Cell.new(
                                                  true
                                                           )))
                                          } ; ___lambda.call(
                                                callProcedure( 'car',
                                                    begin
                                                      if (self.instance_variables.map {|x| x.intern}.include?(:@_car)) then
                                                        @_car
                                                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:732"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      begin
                                                          _s
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:740"] + __e.backtrace ) ; raise __e
                                                      end
                                                             ))
                                                     )
                                        end
                                    end
                                }
                              callProcedure( 'loop',
                                  begin
                                      _loop
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:737"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        _s
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:740"] + __e.backtrace ) ; raise __e
                                    end                                  ,Cell.new(
                                  false
                                           )))
                          } ; ___lambda.call(
                          nil
                                     )
                        end
                    }
                if ( 
                  callProcedure( 'list?',
                      begin
                        if (self.instance_variables.map {|x| x.intern}.include?(:@_list_QUMARK)) then
                          @_list_QUMARK
                        else raise NameError.new( "Error: undefined variable _list_QUMARK", "_list_QUMARK" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:738"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                        begin
                            _s
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:740"] + __e.backtrace ) ; raise __e
                        end
                               ))
                 ) then
                    callProcedure( 'pp-list',
                        begin
                          if (self.instance_variables.map {|x| x.intern}.include?(:@_pp_MIMARKlist)) then
                            @_pp_MIMARKlist
                          else raise NameError.new( "Error: undefined variable _pp_MIMARKlist", "_pp_MIMARKlist" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:739"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              _s
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:740"] + __e.backtrace ) ; raise __e
                          end                        ,Cell.new(
                        0                        ,Cell.new(
                        false
                                 ))))
                else
                    callProcedure( 'write',
                        begin
                          if (self.instance_variables.map {|x| x.intern}.include?(:@_write)) then
                            @_write
                          else raise NameError.new( "Error: undefined variable _write", "_write" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:740"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              _s
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:740"] + __e.backtrace ) ; raise __e
                          end
                                 ))
                end
                callProcedure( 'newline',
                    begin
                      if (self.instance_variables.map {|x| x.intern}.include?(:@_newline)) then
                        @_newline
                      else raise NameError.new( "Error: undefined variable _newline", "_newline" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:741"] + __e.backtrace ) ; raise __e
                    end                  ,
                  Cell.new(
                             ))
            } ; ___lambda.call(
            nil
                       )
          end
      }
#--------------------

  @__ASMARKnendo_MIMARKversion_ASMARK = 
    "0.3.1"
