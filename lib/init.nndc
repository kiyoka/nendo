#------------------------------

  @_define = 
      LispMacro.new { |_arg,*__rest__| _body = __rest__[0] ;  
          if ( 
            callProcedure( 'not',
                begin
                  if (self.instance_variables.include?(:@_not)) then
                    @_not
                  else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:8"] + __e.backtrace ) ; raise __e
                end              ,
                Cell.new(
                  callProcedure( 'pair?',
                      begin
                        if (self.instance_variables.include?(:@_pair_QMARK)) then
                          @_pair_QMARK
                        else raise NameError.new( "Error: undefined variable _pair_QMARK", "_pair_QMARK" ) end
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:16"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                        begin
                            _arg
                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:22"] + __e.backtrace ) ; raise __e
                        end
                               ))
                         ))
           ) then
              callProcedure( 'cons',
                  begin
                    if (self.instance_variables.include?(:@_cons)) then
                      @_cons
                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:22"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"define"                  ,Cell.new(
                    callProcedure( 'cons',
                        begin
                          if (self.instance_variables.include?(:@_cons)) then
                            @_cons
                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:22"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              _arg
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:22"] + __e.backtrace ) ; raise __e
                          end                        ,Cell.new(
                          begin
                              _body
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:23"] + __e.backtrace ) ; raise __e
                          end
                                 )))
                           )))
          else
              begin
                  if ( 
                    callProcedure( 'pair?',
                        begin
                          if (self.instance_variables.include?(:@_pair_QMARK)) then
                            @_pair_QMARK
                          else raise NameError.new( "Error: undefined variable _pair_QMARK", "_pair_QMARK" ) end
                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:16"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          callProcedure( 'cdr',
                              begin
                                if (self.instance_variables.include?(:@_cdr)) then
                                  @_cdr
                                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:22"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    _arg
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:22"] + __e.backtrace ) ; raise __e
                                end
                                       ))
                                 ))
                   ) then
                      if ( 
                        callProcedure( 'pair?',
                            begin
                              if (self.instance_variables.include?(:@_pair_QMARK)) then
                                @_pair_QMARK
                              else raise NameError.new( "Error: undefined variable _pair_QMARK", "_pair_QMARK" ) end
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:16"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              callProcedure( 'car',
                                  begin
                                    if (self.instance_variables.include?(:@_car)) then
                                      @_car
                                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:19"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    callProcedure( 'cdr',
                                        begin
                                          if (self.instance_variables.include?(:@_cdr)) then
                                            @_cdr
                                          else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:22"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          begin
                                              _arg
                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:22"] + __e.backtrace ) ; raise __e
                                          end
                                                 ))
                                           ))
                                     ))
                       ) then
                        begin raise RuntimeError, "Error: define syntax error." ; rescue => __e ;  __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:17"] + __e.backtrace ) ; raise __e ; end 
                      end
                  end
                  callProcedure( 'cons',
                      begin
                        if (self.instance_variables.include?(:@_cons)) then
                          @_cons
                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:22"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                      :"define"                      ,Cell.new(
                        callProcedure( 'cons',
                            begin
                              if (self.instance_variables.include?(:@_cons)) then
                                @_cons
                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:22"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              callProcedure( 'car',
                                  begin
                                    if (self.instance_variables.include?(:@_car)) then
                                      @_car
                                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:19"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        _arg
                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:22"] + __e.backtrace ) ; raise __e
                                    end
                                           ))                            ,Cell.new(
                              callProcedure( 'list',
                                  begin
                                    if (self.instance_variables.include?(:@_list)) then
                                      @_list
                                    else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:20"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    callProcedure( 'cons',
                                        begin
                                          if (self.instance_variables.include?(:@_cons)) then
                                            @_cons
                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:22"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                        :"lambda"                                        ,Cell.new(
                                          callProcedure( 'cons',
                                              begin
                                                if (self.instance_variables.include?(:@_cons)) then
                                                  @_cons
                                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:22"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                callProcedure( 'cdr',
                                                    begin
                                                      if (self.instance_variables.include?(:@_cdr)) then
                                                        @_cdr
                                                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:22"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      begin
                                                          _arg
                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:22"] + __e.backtrace ) ; raise __e
                                                      end
                                                             ))                                              ,Cell.new(
                                                begin
                                                    _body
                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:23"] + __e.backtrace ) ; raise __e
                                                end
                                                       )))
                                                 )))
                                           ))
                                     )))
                               )))
              end
          end
      }
#------------------------------

  @_caar = 
      Proc.new { |_x| 
          callProcedure( 'car',
              begin
                if (self.instance_variables.include?(:@_car)) then
                  @_car
                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:29"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'car',
                    begin
                      if (self.instance_variables.include?(:@_car)) then
                        @_car
                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:29"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          _x
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:29"] + __e.backtrace ) ; raise __e
                      end
                             ))
                       ))
      }
#------------------------------

  @_cadr = 
      Proc.new { |_x| 
          callProcedure( 'car',
              begin
                if (self.instance_variables.include?(:@_car)) then
                  @_car
                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:30"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'cdr',
                    begin
                      if (self.instance_variables.include?(:@_cdr)) then
                        @_cdr
                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:30"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          _x
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:30"] + __e.backtrace ) ; raise __e
                      end
                             ))
                       ))
      }
#------------------------------

  @_cdar = 
      Proc.new { |_x| 
          callProcedure( 'cdr',
              begin
                if (self.instance_variables.include?(:@_cdr)) then
                  @_cdr
                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:31"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'car',
                    begin
                      if (self.instance_variables.include?(:@_car)) then
                        @_car
                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:31"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          _x
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:31"] + __e.backtrace ) ; raise __e
                      end
                             ))
                       ))
      }
#------------------------------

  @_cddr = 
      Proc.new { |_x| 
          callProcedure( 'cdr',
              begin
                if (self.instance_variables.include?(:@_cdr)) then
                  @_cdr
                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:32"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'cdr',
                    begin
                      if (self.instance_variables.include?(:@_cdr)) then
                        @_cdr
                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:32"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          _x
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:32"] + __e.backtrace ) ; raise __e
                      end
                             ))
                       ))
      }
#------------------------------

  @_caaar = 
      Proc.new { |_x| 
          callProcedure( 'car',
              begin
                if (self.instance_variables.include?(:@_car)) then
                  @_car
                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:33"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'car',
                    begin
                      if (self.instance_variables.include?(:@_car)) then
                        @_car
                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:33"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'car',
                          begin
                            if (self.instance_variables.include?(:@_car)) then
                              @_car
                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:33"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                _x
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:33"] + __e.backtrace ) ; raise __e
                            end
                                   ))
                             ))
                       ))
      }
#------------------------------

  @_caadr = 
      Proc.new { |_x| 
          callProcedure( 'car',
              begin
                if (self.instance_variables.include?(:@_car)) then
                  @_car
                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:34"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'car',
                    begin
                      if (self.instance_variables.include?(:@_car)) then
                        @_car
                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:34"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'cdr',
                          begin
                            if (self.instance_variables.include?(:@_cdr)) then
                              @_cdr
                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:34"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                _x
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:34"] + __e.backtrace ) ; raise __e
                            end
                                   ))
                             ))
                       ))
      }
#------------------------------

  @_cadar = 
      Proc.new { |_x| 
          callProcedure( 'car',
              begin
                if (self.instance_variables.include?(:@_car)) then
                  @_car
                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:35"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'cdr',
                    begin
                      if (self.instance_variables.include?(:@_cdr)) then
                        @_cdr
                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:35"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'car',
                          begin
                            if (self.instance_variables.include?(:@_car)) then
                              @_car
                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:35"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                _x
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:35"] + __e.backtrace ) ; raise __e
                            end
                                   ))
                             ))
                       ))
      }
#------------------------------

  @_caddr = 
      Proc.new { |_x| 
          callProcedure( 'car',
              begin
                if (self.instance_variables.include?(:@_car)) then
                  @_car
                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:36"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'cdr',
                    begin
                      if (self.instance_variables.include?(:@_cdr)) then
                        @_cdr
                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:36"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'cdr',
                          begin
                            if (self.instance_variables.include?(:@_cdr)) then
                              @_cdr
                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:36"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                _x
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:36"] + __e.backtrace ) ; raise __e
                            end
                                   ))
                             ))
                       ))
      }
#------------------------------

  @_cdaar = 
      Proc.new { |_x| 
          callProcedure( 'cdr',
              begin
                if (self.instance_variables.include?(:@_cdr)) then
                  @_cdr
                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:37"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'car',
                    begin
                      if (self.instance_variables.include?(:@_car)) then
                        @_car
                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:37"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'car',
                          begin
                            if (self.instance_variables.include?(:@_car)) then
                              @_car
                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:37"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                _x
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:37"] + __e.backtrace ) ; raise __e
                            end
                                   ))
                             ))
                       ))
      }
#------------------------------

  @_cdadr = 
      Proc.new { |_x| 
          callProcedure( 'cdr',
              begin
                if (self.instance_variables.include?(:@_cdr)) then
                  @_cdr
                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:38"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'car',
                    begin
                      if (self.instance_variables.include?(:@_car)) then
                        @_car
                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:38"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'cdr',
                          begin
                            if (self.instance_variables.include?(:@_cdr)) then
                              @_cdr
                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:38"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                _x
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:38"] + __e.backtrace ) ; raise __e
                            end
                                   ))
                             ))
                       ))
      }
#------------------------------

  @_cddar = 
      Proc.new { |_x| 
          callProcedure( 'cdr',
              begin
                if (self.instance_variables.include?(:@_cdr)) then
                  @_cdr
                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:39"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'cdr',
                    begin
                      if (self.instance_variables.include?(:@_cdr)) then
                        @_cdr
                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:39"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'car',
                          begin
                            if (self.instance_variables.include?(:@_car)) then
                              @_car
                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:39"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                _x
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:39"] + __e.backtrace ) ; raise __e
                            end
                                   ))
                             ))
                       ))
      }
#------------------------------

  @_cdddr = 
      Proc.new { |_x| 
          callProcedure( 'cdr',
              begin
                if (self.instance_variables.include?(:@_cdr)) then
                  @_cdr
                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:40"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'cdr',
                    begin
                      if (self.instance_variables.include?(:@_cdr)) then
                        @_cdr
                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:40"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'cdr',
                          begin
                            if (self.instance_variables.include?(:@_cdr)) then
                              @_cdr
                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:40"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                _x
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:40"] + __e.backtrace ) ; raise __e
                            end
                                   ))
                             ))
                       ))
      }
#------------------------------

  @_caaaar = 
      Proc.new { |_x| 
          callProcedure( 'car',
              begin
                if (self.instance_variables.include?(:@_car)) then
                  @_car
                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:41"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'car',
                    begin
                      if (self.instance_variables.include?(:@_car)) then
                        @_car
                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:41"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'car',
                          begin
                            if (self.instance_variables.include?(:@_car)) then
                              @_car
                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:41"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'car',
                                begin
                                  if (self.instance_variables.include?(:@_car)) then
                                    @_car
                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:41"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _x
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:41"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                                   ))
                             ))
                       ))
      }
#------------------------------

  @_caaadr = 
      Proc.new { |_x| 
          callProcedure( 'car',
              begin
                if (self.instance_variables.include?(:@_car)) then
                  @_car
                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:42"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'car',
                    begin
                      if (self.instance_variables.include?(:@_car)) then
                        @_car
                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:42"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'car',
                          begin
                            if (self.instance_variables.include?(:@_car)) then
                              @_car
                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:42"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'cdr',
                                begin
                                  if (self.instance_variables.include?(:@_cdr)) then
                                    @_cdr
                                  else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:42"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _x
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:42"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                                   ))
                             ))
                       ))
      }
#------------------------------

  @_caadar = 
      Proc.new { |_x| 
          callProcedure( 'car',
              begin
                if (self.instance_variables.include?(:@_car)) then
                  @_car
                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:43"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'car',
                    begin
                      if (self.instance_variables.include?(:@_car)) then
                        @_car
                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:43"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'cdr',
                          begin
                            if (self.instance_variables.include?(:@_cdr)) then
                              @_cdr
                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:43"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'car',
                                begin
                                  if (self.instance_variables.include?(:@_car)) then
                                    @_car
                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:43"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _x
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:43"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                                   ))
                             ))
                       ))
      }
#------------------------------

  @_caaddr = 
      Proc.new { |_x| 
          callProcedure( 'car',
              begin
                if (self.instance_variables.include?(:@_car)) then
                  @_car
                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:44"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'car',
                    begin
                      if (self.instance_variables.include?(:@_car)) then
                        @_car
                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:44"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'cdr',
                          begin
                            if (self.instance_variables.include?(:@_cdr)) then
                              @_cdr
                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:44"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'cdr',
                                begin
                                  if (self.instance_variables.include?(:@_cdr)) then
                                    @_cdr
                                  else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:44"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _x
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:44"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                                   ))
                             ))
                       ))
      }
#------------------------------

  @_cadaar = 
      Proc.new { |_x| 
          callProcedure( 'car',
              begin
                if (self.instance_variables.include?(:@_car)) then
                  @_car
                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:45"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'cdr',
                    begin
                      if (self.instance_variables.include?(:@_cdr)) then
                        @_cdr
                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:45"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'car',
                          begin
                            if (self.instance_variables.include?(:@_car)) then
                              @_car
                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:45"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'car',
                                begin
                                  if (self.instance_variables.include?(:@_car)) then
                                    @_car
                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:45"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _x
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:45"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                                   ))
                             ))
                       ))
      }
#------------------------------

  @_cadadr = 
      Proc.new { |_x| 
          callProcedure( 'car',
              begin
                if (self.instance_variables.include?(:@_car)) then
                  @_car
                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:46"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'cdr',
                    begin
                      if (self.instance_variables.include?(:@_cdr)) then
                        @_cdr
                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:46"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'car',
                          begin
                            if (self.instance_variables.include?(:@_car)) then
                              @_car
                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:46"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'cdr',
                                begin
                                  if (self.instance_variables.include?(:@_cdr)) then
                                    @_cdr
                                  else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:46"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _x
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:46"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                                   ))
                             ))
                       ))
      }
#------------------------------

  @_caddar = 
      Proc.new { |_x| 
          callProcedure( 'car',
              begin
                if (self.instance_variables.include?(:@_car)) then
                  @_car
                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:47"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'cdr',
                    begin
                      if (self.instance_variables.include?(:@_cdr)) then
                        @_cdr
                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:47"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'cdr',
                          begin
                            if (self.instance_variables.include?(:@_cdr)) then
                              @_cdr
                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:47"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'car',
                                begin
                                  if (self.instance_variables.include?(:@_car)) then
                                    @_car
                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:47"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _x
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:47"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                                   ))
                             ))
                       ))
      }
#------------------------------

  @_cadddr = 
      Proc.new { |_x| 
          callProcedure( 'car',
              begin
                if (self.instance_variables.include?(:@_car)) then
                  @_car
                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:48"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'cdr',
                    begin
                      if (self.instance_variables.include?(:@_cdr)) then
                        @_cdr
                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:48"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'cdr',
                          begin
                            if (self.instance_variables.include?(:@_cdr)) then
                              @_cdr
                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:48"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'cdr',
                                begin
                                  if (self.instance_variables.include?(:@_cdr)) then
                                    @_cdr
                                  else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:48"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _x
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:48"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                                   ))
                             ))
                       ))
      }
#------------------------------

  @_cdaaar = 
      Proc.new { |_x| 
          callProcedure( 'cdr',
              begin
                if (self.instance_variables.include?(:@_cdr)) then
                  @_cdr
                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:49"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'car',
                    begin
                      if (self.instance_variables.include?(:@_car)) then
                        @_car
                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:49"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'car',
                          begin
                            if (self.instance_variables.include?(:@_car)) then
                              @_car
                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:49"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'car',
                                begin
                                  if (self.instance_variables.include?(:@_car)) then
                                    @_car
                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:49"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _x
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:49"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                                   ))
                             ))
                       ))
      }
#------------------------------

  @_cdaadr = 
      Proc.new { |_x| 
          callProcedure( 'cdr',
              begin
                if (self.instance_variables.include?(:@_cdr)) then
                  @_cdr
                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:50"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'car',
                    begin
                      if (self.instance_variables.include?(:@_car)) then
                        @_car
                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:50"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'car',
                          begin
                            if (self.instance_variables.include?(:@_car)) then
                              @_car
                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:50"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'cdr',
                                begin
                                  if (self.instance_variables.include?(:@_cdr)) then
                                    @_cdr
                                  else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:50"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _x
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:50"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                                   ))
                             ))
                       ))
      }
#------------------------------

  @_cdadar = 
      Proc.new { |_x| 
          callProcedure( 'cdr',
              begin
                if (self.instance_variables.include?(:@_cdr)) then
                  @_cdr
                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:51"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'car',
                    begin
                      if (self.instance_variables.include?(:@_car)) then
                        @_car
                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:51"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'cdr',
                          begin
                            if (self.instance_variables.include?(:@_cdr)) then
                              @_cdr
                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:51"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'car',
                                begin
                                  if (self.instance_variables.include?(:@_car)) then
                                    @_car
                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:51"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _x
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:51"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                                   ))
                             ))
                       ))
      }
#------------------------------

  @_cdaddr = 
      Proc.new { |_x| 
          callProcedure( 'cdr',
              begin
                if (self.instance_variables.include?(:@_cdr)) then
                  @_cdr
                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:52"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'car',
                    begin
                      if (self.instance_variables.include?(:@_car)) then
                        @_car
                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:52"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'cdr',
                          begin
                            if (self.instance_variables.include?(:@_cdr)) then
                              @_cdr
                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:52"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'cdr',
                                begin
                                  if (self.instance_variables.include?(:@_cdr)) then
                                    @_cdr
                                  else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:52"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _x
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:52"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                                   ))
                             ))
                       ))
      }
#------------------------------

  @_cddaar = 
      Proc.new { |_x| 
          callProcedure( 'cdr',
              begin
                if (self.instance_variables.include?(:@_cdr)) then
                  @_cdr
                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:53"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'cdr',
                    begin
                      if (self.instance_variables.include?(:@_cdr)) then
                        @_cdr
                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:53"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'car',
                          begin
                            if (self.instance_variables.include?(:@_car)) then
                              @_car
                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:53"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'car',
                                begin
                                  if (self.instance_variables.include?(:@_car)) then
                                    @_car
                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:53"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _x
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:53"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                                   ))
                             ))
                       ))
      }
#------------------------------

  @_cddadr = 
      Proc.new { |_x| 
          callProcedure( 'cdr',
              begin
                if (self.instance_variables.include?(:@_cdr)) then
                  @_cdr
                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:54"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'cdr',
                    begin
                      if (self.instance_variables.include?(:@_cdr)) then
                        @_cdr
                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:54"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'car',
                          begin
                            if (self.instance_variables.include?(:@_car)) then
                              @_car
                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:54"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'cdr',
                                begin
                                  if (self.instance_variables.include?(:@_cdr)) then
                                    @_cdr
                                  else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:54"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _x
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:54"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                                   ))
                             ))
                       ))
      }
#------------------------------

  @_cdddar = 
      Proc.new { |_x| 
          callProcedure( 'cdr',
              begin
                if (self.instance_variables.include?(:@_cdr)) then
                  @_cdr
                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:55"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'cdr',
                    begin
                      if (self.instance_variables.include?(:@_cdr)) then
                        @_cdr
                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:55"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'cdr',
                          begin
                            if (self.instance_variables.include?(:@_cdr)) then
                              @_cdr
                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:55"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'car',
                                begin
                                  if (self.instance_variables.include?(:@_car)) then
                                    @_car
                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:55"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _x
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:55"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                                   ))
                             ))
                       ))
      }
#------------------------------

  @_cddddr = 
      Proc.new { |_x| 
          callProcedure( 'cdr',
              begin
                if (self.instance_variables.include?(:@_cdr)) then
                  @_cdr
                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:56"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'cdr',
                    begin
                      if (self.instance_variables.include?(:@_cdr)) then
                        @_cdr
                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:56"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'cdr',
                          begin
                            if (self.instance_variables.include?(:@_cdr)) then
                              @_cdr
                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:56"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'cdr',
                                begin
                                  if (self.instance_variables.include?(:@_cdr)) then
                                    @_cdr
                                  else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:56"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _x
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:56"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                                   ))
                             ))
                       ))
      }
#------------------------------

  @_iota = 
      begin
        if (self.instance_variables.include?(:@_range)) then
          @_range
        else raise NameError.new( "Error: undefined variable _range", "_range" ) end
        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:62"] + __e.backtrace ) ; raise __e
      end
#------------------------------

  @_append = 
      Proc.new { |_a,_b| 
          begin
            ___lambda = lambda { |_append_reverse| 
                _append_reverse                 = 
                  Proc.new { |_a,_b| 
                      if ( 
                        callProcedure( 'pair?',
                            begin
                              if (self.instance_variables.include?(:@_pair_QMARK)) then
                                @_pair_QMARK
                              else raise NameError.new( "Error: undefined variable _pair_QMARK", "_pair_QMARK" ) end
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:67"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  _a
                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:70"] + __e.backtrace ) ; raise __e
                              end
                                     ))
                       ) then
                          callProcedure( 'append_reverse',
                              begin
                                  _append_reverse
                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:70"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                callProcedure( 'cdr',
                                    begin
                                      if (self.instance_variables.include?(:@_cdr)) then
                                        @_cdr
                                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:68"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          _a
                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:70"] + __e.backtrace ) ; raise __e
                                      end
                                             ))                              ,Cell.new(
                                callProcedure( 'cons',
                                    begin
                                      if (self.instance_variables.include?(:@_cons)) then
                                        @_cons
                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:68"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      callProcedure( 'car',
                                          begin
                                            if (self.instance_variables.include?(:@_car)) then
                                              @_car
                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:68"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                _a
                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:70"] + __e.backtrace ) ; raise __e
                                            end
                                                   ))                                    ,Cell.new(
                                      begin
                                          _b
                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:70"] + __e.backtrace ) ; raise __e
                                      end
                                             )))
                                       )))
                      else
                          begin
                              _b
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:70"] + __e.backtrace ) ; raise __e
                          end
                      end
                  }
                callProcedure( 'append_reverse',
                    begin
                        _append_reverse
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:70"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'reverse',
                          begin
                            if (self.instance_variables.include?(:@_reverse)) then
                              @_reverse
                            else raise NameError.new( "Error: undefined variable _reverse", "_reverse" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:70"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                _a
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:70"] + __e.backtrace ) ; raise __e
                            end
                                   ))                    ,Cell.new(
                      begin
                          _b
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:70"] + __e.backtrace ) ; raise __e
                      end
                             )))
            } ; ___lambda.call(
            nil
                       )
          end
      }
#------------------------------

  @_list_QMARK = 
      begin
        if (self.instance_variables.include?(:@_pair_QMARK)) then
          @_pair_QMARK
        else raise NameError.new( "Error: undefined variable _pair_QMARK", "_pair_QMARK" ) end
        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:75"] + __e.backtrace ) ; raise __e
      end
#------------------------------

  @_even_QMARK = 
      Proc.new { |_n| 
          callProcedure( '=',
              begin
                if (self.instance_variables.include?(:@_eq_QMARK)) then
                  @_eq_QMARK
                else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:76"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( '%',
                    begin
                      if (self.instance_variables.include?(:@_mod)) then
                        @_mod
                      else raise NameError.new( "Error: undefined variable _mod", "_mod" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:76"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          _n
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:76"] + __e.backtrace ) ; raise __e
                      end                    ,Cell.new(
                    2
                             )))              ,Cell.new(
              0
                       )))
      }
#------------------------------

  @_odd_QMARK = 
      Proc.new { |_n| 
          callProcedure( 'not',
              begin
                if (self.instance_variables.include?(:@_not)) then
                  @_not
                else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:77"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( '=',
                    begin
                      if (self.instance_variables.include?(:@_eq_QMARK)) then
                        @_eq_QMARK
                      else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:77"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( '%',
                          begin
                            if (self.instance_variables.include?(:@_mod)) then
                              @_mod
                            else raise NameError.new( "Error: undefined variable _mod", "_mod" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:77"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                _n
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:77"] + __e.backtrace ) ; raise __e
                            end                          ,Cell.new(
                          2
                                   )))                    ,Cell.new(
                    0
                             )))
                       ))
      }
#------------------------------

  @_zero_QMARK = 
      Proc.new { |_n| 
          callProcedure( '=',
              begin
                if (self.instance_variables.include?(:@_eq_QMARK)) then
                  @_eq_QMARK
                else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:78"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                begin
                    _n
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:78"] + __e.backtrace ) ; raise __e
                end              ,Cell.new(
              0
                       )))
      }
#------------------------------

  @_positive_QMARK = 
      Proc.new { |_n| 
          callProcedure( '>',
              begin
                if (self.instance_variables.include?(:@_gt_QMARK)) then
                  @_gt_QMARK
                else raise NameError.new( "Error: undefined variable _gt_QMARK", "_gt_QMARK" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:79"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                begin
                    _n
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:79"] + __e.backtrace ) ; raise __e
                end              ,Cell.new(
              0
                       )))
      }
#------------------------------

  @_negative_QMARK = 
      Proc.new { |_n| 
          callProcedure( '<',
              begin
                if (self.instance_variables.include?(:@_lt_QMARK)) then
                  @_lt_QMARK
                else raise NameError.new( "Error: undefined variable _lt_QMARK", "_lt_QMARK" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:80"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                begin
                    _n
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:80"] + __e.backtrace ) ; raise __e
                end              ,Cell.new(
              0
                       )))
      }
#------------------------------

  @_abs = 
      Proc.new { |_n| 
          if ( 
            callProcedure( '>=',
                begin
                  if (self.instance_variables.include?(:@_ge_QMARK)) then
                    @_ge_QMARK
                  else raise NameError.new( "Error: undefined variable _ge_QMARK", "_ge_QMARK" ) end
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:81"] + __e.backtrace ) ; raise __e
                end              ,
                Cell.new(
                  begin
                      _n
                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:81"] + __e.backtrace ) ; raise __e
                  end                ,Cell.new(
                0
                         )))
           ) then
              begin
                  _n
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:81"] + __e.backtrace ) ; raise __e
              end
          else
              callProcedure( '-',
                  begin
                    if (self.instance_variables.include?(:@_minus)) then
                      @_minus
                    else raise NameError.new( "Error: undefined variable _minus", "_minus" ) end
                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:81"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    begin
                        _n
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:81"] + __e.backtrace ) ; raise __e
                    end
                           ))
          end
      }
#------------------------------

  @_max = 
      Proc.new { |*__rest__| _lst = __rest__[0] ;  
          callProcedure( 'foldr',
              begin
                if (self.instance_variables.include?(:@_foldr)) then
                  @_foldr
                else raise NameError.new( "Error: undefined variable _foldr", "_foldr" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:83"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                Proc.new { |_a,_b| 
                    if ( 
                      callProcedure( '>',
                          begin
                            if (self.instance_variables.include?(:@_gt_QMARK)) then
                              @_gt_QMARK
                            else raise NameError.new( "Error: undefined variable _gt_QMARK", "_gt_QMARK" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:83"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                _a
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:83"] + __e.backtrace ) ; raise __e
                            end                          ,Cell.new(
                            begin
                                _b
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:83"] + __e.backtrace ) ; raise __e
                            end
                                   )))
                     ) then
                        begin
                            _a
                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:83"] + __e.backtrace ) ; raise __e
                        end
                    else
                        begin
                            _b
                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:83"] + __e.backtrace ) ; raise __e
                        end
                    end
                }              ,Cell.new(
                callProcedure( 'car',
                    begin
                      if (self.instance_variables.include?(:@_car)) then
                        @_car
                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:83"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          _lst
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:83"] + __e.backtrace ) ; raise __e
                      end
                             ))              ,Cell.new(
                callProcedure( 'cdr',
                    begin
                      if (self.instance_variables.include?(:@_cdr)) then
                        @_cdr
                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:83"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          _lst
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:83"] + __e.backtrace ) ; raise __e
                      end
                             ))
                       ))))
      }
#------------------------------

  @_min = 
      Proc.new { |*__rest__| _lst = __rest__[0] ;  
          callProcedure( 'foldr',
              begin
                if (self.instance_variables.include?(:@_foldr)) then
                  @_foldr
                else raise NameError.new( "Error: undefined variable _foldr", "_foldr" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:85"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                Proc.new { |_a,_b| 
                    if ( 
                      callProcedure( '<',
                          begin
                            if (self.instance_variables.include?(:@_lt_QMARK)) then
                              @_lt_QMARK
                            else raise NameError.new( "Error: undefined variable _lt_QMARK", "_lt_QMARK" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:85"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                _a
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:85"] + __e.backtrace ) ; raise __e
                            end                          ,Cell.new(
                            begin
                                _b
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:85"] + __e.backtrace ) ; raise __e
                            end
                                   )))
                     ) then
                        begin
                            _a
                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:85"] + __e.backtrace ) ; raise __e
                        end
                    else
                        begin
                            _b
                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:85"] + __e.backtrace ) ; raise __e
                        end
                    end
                }              ,Cell.new(
                callProcedure( 'car',
                    begin
                      if (self.instance_variables.include?(:@_car)) then
                        @_car
                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:85"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          _lst
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:85"] + __e.backtrace ) ; raise __e
                      end
                             ))              ,Cell.new(
                callProcedure( 'cdr',
                    begin
                      if (self.instance_variables.include?(:@_cdr)) then
                        @_cdr
                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:85"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          _lst
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:85"] + __e.backtrace ) ; raise __e
                      end
                             ))
                       ))))
      }
#------------------------------

  @_succ = 
      Proc.new { |_x| 
          callProcedure( '+',
              begin
                if (self.instance_variables.include?(:@_plus)) then
                  @_plus
                else raise NameError.new( "Error: undefined variable _plus", "_plus" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:86"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                begin
                    _x
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:86"] + __e.backtrace ) ; raise __e
                end              ,Cell.new(
              1
                       )))
      }
#------------------------------

  @_pred = 
      Proc.new { |_x| 
          callProcedure( '-',
              begin
                if (self.instance_variables.include?(:@_minus)) then
                  @_minus
                else raise NameError.new( "Error: undefined variable _minus", "_minus" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:87"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                begin
                    _x
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:87"] + __e.backtrace ) ; raise __e
                end              ,Cell.new(
              1
                       )))
      }
#------------------------------

  @_nth = 
      Proc.new { |_n,_lst| 
          begin
            ___lambda = lambda { |_nth_iter| 
                _nth_iter                 = 
                  Proc.new { |_n,_index,_lst| 
                      if ( 
                        callProcedure( 'null?',
                            begin
                              if (self.instance_variables.include?(:@_null_QMARK)) then
                                @_null_QMARK
                              else raise NameError.new( "Error: undefined variable _null_QMARK", "_null_QMARK" ) end
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:91"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  _lst
                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:98"] + __e.backtrace ) ; raise __e
                              end
                                     ))
                       ) then
                        nil
                      else
                          if ( 
                            callProcedure( 'not',
                                begin
                                  if (self.instance_variables.include?(:@_not)) then
                                    @_not
                                  else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:93"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  callProcedure( 'pair?',
                                      begin
                                        if (self.instance_variables.include?(:@_pair_QMARK)) then
                                          @_pair_QMARK
                                        else raise NameError.new( "Error: undefined variable _pair_QMARK", "_pair_QMARK" ) end
                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:93"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _lst
                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:98"] + __e.backtrace ) ; raise __e
                                        end
                                               ))
                                         ))
                           ) then
                            begin raise RuntimeError, "Error: nth got improper list." ; rescue => __e ;  __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:94"] + __e.backtrace ) ; raise __e ; end 
                          else
                              if ( 
                                callProcedure( 'eqv?',
                                    begin
                                      if (self.instance_variables.include?(:@_eqv_QMARK)) then
                                        @_eqv_QMARK
                                      else raise NameError.new( "Error: undefined variable _eqv_QMARK", "_eqv_QMARK" ) end
                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:95"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          _n
                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:98"] + __e.backtrace ) ; raise __e
                                      end                                    ,Cell.new(
                                      begin
                                          _index
                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:97"] + __e.backtrace ) ; raise __e
                                      end
                                             )))
                               ) then
                                  callProcedure( 'car',
                                      begin
                                        if (self.instance_variables.include?(:@_car)) then
                                          @_car
                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:96"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _lst
                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:98"] + __e.backtrace ) ; raise __e
                                        end
                                               ))
                              else
                                  callProcedure( 'nth_iter',
                                      begin
                                          _nth_iter
                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:98"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _n
                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:98"] + __e.backtrace ) ; raise __e
                                        end                                      ,Cell.new(
                                        callProcedure( '+',
                                            begin
                                              if (self.instance_variables.include?(:@_plus)) then
                                                @_plus
                                              else raise NameError.new( "Error: undefined variable _plus", "_plus" ) end
                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:97"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              begin
                                                  _index
                                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:97"] + __e.backtrace ) ; raise __e
                                              end                                            ,Cell.new(
                                            1
                                                     )))                                      ,Cell.new(
                                        callProcedure( 'cdr',
                                            begin
                                              if (self.instance_variables.include?(:@_cdr)) then
                                                @_cdr
                                              else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:97"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              begin
                                                  _lst
                                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:98"] + __e.backtrace ) ; raise __e
                                              end
                                                     ))
                                               ))))
                              end
                          end
                      end
                  }
                callProcedure( 'nth_iter',
                    begin
                        _nth_iter
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:98"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          _n
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:98"] + __e.backtrace ) ; raise __e
                      end                    ,Cell.new(
                    0                    ,Cell.new(
                      begin
                          _lst
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:98"] + __e.backtrace ) ; raise __e
                      end
                             ))))
            } ; ___lambda.call(
            nil
                       )
          end
      }
#------------------------------

  @_first = 
      Proc.new { |_lst| 
          callProcedure( 'nth',
              begin
                if (self.instance_variables.include?(:@_nth)) then
                  @_nth
                else raise NameError.new( "Error: undefined variable _nth", "_nth" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:99"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
              0              ,Cell.new(
                begin
                    _lst
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:99"] + __e.backtrace ) ; raise __e
                end
                       )))
      }
#------------------------------

  @_second = 
      Proc.new { |_lst| 
          callProcedure( 'nth',
              begin
                if (self.instance_variables.include?(:@_nth)) then
                  @_nth
                else raise NameError.new( "Error: undefined variable _nth", "_nth" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:100"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
              1              ,Cell.new(
                begin
                    _lst
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:100"] + __e.backtrace ) ; raise __e
                end
                       )))
      }
#------------------------------

  @_third = 
      Proc.new { |_lst| 
          callProcedure( 'nth',
              begin
                if (self.instance_variables.include?(:@_nth)) then
                  @_nth
                else raise NameError.new( "Error: undefined variable _nth", "_nth" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:101"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
              2              ,Cell.new(
                begin
                    _lst
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:101"] + __e.backtrace ) ; raise __e
                end
                       )))
      }
#------------------------------

  @_fourth = 
      Proc.new { |_lst| 
          callProcedure( 'nth',
              begin
                if (self.instance_variables.include?(:@_nth)) then
                  @_nth
                else raise NameError.new( "Error: undefined variable _nth", "_nth" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:102"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
              3              ,Cell.new(
                begin
                    _lst
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:102"] + __e.backtrace ) ; raise __e
                end
                       )))
      }
#------------------------------

  @_fifth = 
      Proc.new { |_lst| 
          callProcedure( 'nth',
              begin
                if (self.instance_variables.include?(:@_nth)) then
                  @_nth
                else raise NameError.new( "Error: undefined variable _nth", "_nth" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:103"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
              4              ,Cell.new(
                begin
                    _lst
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:103"] + __e.backtrace ) ; raise __e
                end
                       )))
      }
#------------------------------

  @_sixth = 
      Proc.new { |_lst| 
          callProcedure( 'nth',
              begin
                if (self.instance_variables.include?(:@_nth)) then
                  @_nth
                else raise NameError.new( "Error: undefined variable _nth", "_nth" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:104"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
              5              ,Cell.new(
                begin
                    _lst
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:104"] + __e.backtrace ) ; raise __e
                end
                       )))
      }
#------------------------------

  @_seventh = 
      Proc.new { |_lst| 
          callProcedure( 'nth',
              begin
                if (self.instance_variables.include?(:@_nth)) then
                  @_nth
                else raise NameError.new( "Error: undefined variable _nth", "_nth" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:105"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
              6              ,Cell.new(
                begin
                    _lst
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:105"] + __e.backtrace ) ; raise __e
                end
                       )))
      }
#------------------------------

  @_eighth = 
      Proc.new { |_lst| 
          callProcedure( 'nth',
              begin
                if (self.instance_variables.include?(:@_nth)) then
                  @_nth
                else raise NameError.new( "Error: undefined variable _nth", "_nth" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:106"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
              7              ,Cell.new(
                begin
                    _lst
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:106"] + __e.backtrace ) ; raise __e
                end
                       )))
      }
#------------------------------

  @_ninth = 
      Proc.new { |_lst| 
          callProcedure( 'nth',
              begin
                if (self.instance_variables.include?(:@_nth)) then
                  @_nth
                else raise NameError.new( "Error: undefined variable _nth", "_nth" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:107"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
              8              ,Cell.new(
                begin
                    _lst
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:107"] + __e.backtrace ) ; raise __e
                end
                       )))
      }
#------------------------------

  @_tenth = 
      Proc.new { |_lst| 
          callProcedure( 'nth',
              begin
                if (self.instance_variables.include?(:@_nth)) then
                  @_nth
                else raise NameError.new( "Error: undefined variable _nth", "_nth" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:108"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
              9              ,Cell.new(
                begin
                    _lst
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:108"] + __e.backtrace ) ; raise __e
                end
                       )))
      }
#------------------------------

  @_macroexpand = 
      Proc.new { |_sexp| 
          begin
            ___lambda = lambda { |_newsexp| 
                if ( 
                  callProcedure( 'not',
                      begin
                        if (self.instance_variables.include?(:@_not)) then
                          @_not
                        else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:115"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                        callProcedure( 'equal?',
                            begin
                              if (self.instance_variables.include?(:@_equal_QMARK)) then
                                @_equal_QMARK
                              else raise NameError.new( "Error: undefined variable _equal_QMARK", "_equal_QMARK" ) end
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:115"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  _sexp
                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:115"] + __e.backtrace ) ; raise __e
                              end                            ,Cell.new(
                              begin
                                  _newsexp
                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:117"] + __e.backtrace ) ; raise __e
                              end
                                     )))
                               ))
                 ) then
                    callProcedure( 'macroexpand',
                        begin
                          if (self.instance_variables.include?(:@_macroexpand)) then
                            @_macroexpand
                          else raise NameError.new( "Error: undefined variable _macroexpand", "_macroexpand" ) end
                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:116"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              _newsexp
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:117"] + __e.backtrace ) ; raise __e
                          end
                                 ))
                else
                    begin
                        _newsexp
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:117"] + __e.backtrace ) ; raise __e
                    end
                end
            } ; ___lambda.call(
                  callProcedure( 'macroexpand_1',
                      begin
                        if (self.instance_variables.include?(:@_macroexpand_1)) then
                          @_macroexpand_1
                        else raise NameError.new( "Error: undefined variable _macroexpand_1", "_macroexpand_1" ) end
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:114"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                        begin
                            _sexp
                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:115"] + __e.backtrace ) ; raise __e
                        end
                               ))
                       )
          end
      }
#------------------------------

  @_feedto = 
      Proc.new { || 
        begin raise RuntimeError, "=> (feedto) appeared outside cond or case." ; rescue => __e ;  __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:120"] + __e.backtrace ) ; raise __e ; end 
      }
#------------------------------

  @_cond = 
      LispMacro.new { |*__rest__| _lst = __rest__[0] ;  
          begin
            ___lambda = lambda { |_case_block,_cond_iter| 
                _case_block                 = 
                  Proc.new { |_elem,*__rest__| _elseblock = __rest__[0] ;  
                      begin
                        ___lambda = lambda { |_condition,_body,_tmpsym| 
                            callProcedure( 'append',
                                begin
                                  if (self.instance_variables.include?(:@_append)) then
                                    @_append
                                  else raise NameError.new( "Error: undefined variable _append", "_append" ) end
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:134"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  if ( 
                                    callProcedure( 'eq?',
                                        begin
                                          if (self.instance_variables.include?(:@_eq_QMARK)) then
                                            @_eq_QMARK
                                          else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:151"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                        :"feedto"                                        ,Cell.new(
                                          callProcedure( 'car',
                                              begin
                                                if (self.instance_variables.include?(:@_car)) then
                                                  @_car
                                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:153"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                begin
                                                    _body
                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:143"] + __e.backtrace ) ; raise __e
                                                end
                                                       ))
                                                 )))
                                   ) then
                                      callProcedure( 'cons',
                                          begin
                                            if (self.instance_variables.include?(:@_cons)) then
                                              @_cons
                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:143"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                          :"if"                                          ,Cell.new(
                                            callProcedure( 'list',
                                                begin
                                                  if (self.instance_variables.include?(:@_list)) then
                                                    @_list
                                                  else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:141"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  callProcedure( 'list',
                                                      begin
                                                        if (self.instance_variables.include?(:@_list)) then
                                                          @_list
                                                        else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:141"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                      :"set!"                                                      ,Cell.new(
                                                        begin
                                                            _tmpsym
                                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:139"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,Cell.new(
                                                        begin
                                                            _condition
                                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:142"] + __e.backtrace ) ; raise __e
                                                        end
                                                               ))))                                                ,Cell.new(
                                                  callProcedure( 'list',
                                                      begin
                                                        if (self.instance_variables.include?(:@_list)) then
                                                          @_list
                                                        else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:141"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        callProcedure( 'cadr',
                                                            begin
                                                              if (self.instance_variables.include?(:@_cadr)) then
                                                                @_cadr
                                                              else raise NameError.new( "Error: undefined variable _cadr", "_cadr" ) end
                                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:139"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              begin
                                                                  _body
                                                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:143"] + __e.backtrace ) ; raise __e
                                                              end
                                                                     ))                                                      ,Cell.new(
                                                        begin
                                                            _tmpsym
                                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:139"] + __e.backtrace ) ; raise __e
                                                        end
                                                               )))
                                                         )))
                                                   )))
                                  else
                                      callProcedure( 'cons',
                                          begin
                                            if (self.instance_variables.include?(:@_cons)) then
                                              @_cons
                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:143"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                          :"if"                                          ,Cell.new(
                                            callProcedure( 'list',
                                                begin
                                                  if (self.instance_variables.include?(:@_list)) then
                                                    @_list
                                                  else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:141"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  begin
                                                      _condition
                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:142"] + __e.backtrace ) ; raise __e
                                                  end                                                ,Cell.new(
                                                  callProcedure( 'cons',
                                                      begin
                                                        if (self.instance_variables.include?(:@_cons)) then
                                                          @_cons
                                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:143"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                      :"begin"                                                      ,Cell.new(
                                                        begin
                                                            _body
                                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:143"] + __e.backtrace ) ; raise __e
                                                        end
                                                               )))
                                                         )))
                                                   )))
                                  end                                ,Cell.new(
                                  if ( 
                                    callProcedure( '<',
                                        begin
                                          if (self.instance_variables.include?(:@_lt_QMARK)) then
                                            @_lt_QMARK
                                          else raise NameError.new( "Error: undefined variable _lt_QMARK", "_lt_QMARK" ) end
                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:144"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                        0                                        ,Cell.new(
                                          callProcedure( 'length',
                                              begin
                                                if (self.instance_variables.include?(:@_length)) then
                                                  @_length
                                                else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:151"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                begin
                                                    _elseblock
                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:145"] + __e.backtrace ) ; raise __e
                                                end
                                                       ))
                                                 )))
                                   ) then
                                      begin
                                          _elseblock
                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:145"] + __e.backtrace ) ; raise __e
                                      end
                                  else
                                    Nil.new
                                  end
                                         )))
                        } ; ___lambda.call(
                              if ( 
                                callProcedure( 'eq?',
                                    begin
                                      if (self.instance_variables.include?(:@_eq_QMARK)) then
                                        @_eq_QMARK
                                      else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:151"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                    :"else"                                    ,Cell.new(
                                      callProcedure( 'car',
                                          begin
                                            if (self.instance_variables.include?(:@_car)) then
                                              @_car
                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:153"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                _elem
                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:129"] + __e.backtrace ) ; raise __e
                                            end
                                                   ))
                                             )))
                               ) then
                                true
                              else
                                  callProcedure( 'car',
                                      begin
                                        if (self.instance_variables.include?(:@_car)) then
                                          @_car
                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:153"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _elem
                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:129"] + __e.backtrace ) ; raise __e
                                        end
                                               ))
                              end                            ,
                              callProcedure( 'cdr',
                                  begin
                                    if (self.instance_variables.include?(:@_cdr)) then
                                      @_cdr
                                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:154"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        _elem
                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:129"] + __e.backtrace ) ; raise __e
                                    end
                                           ))                            ,
                              callProcedure( 'gensym',
                                  begin
                                    if (self.instance_variables.include?(:@_gensym)) then
                                      @_gensym
                                    else raise NameError.new( "Error: undefined variable _gensym", "_gensym" ) end
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:130"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                Cell.new(
                                           ))
                                   )
                      end
                  }
                _cond_iter                 = 
                  Proc.new { |_lst| 
                      if ( 
                        callProcedure( 'eq?',
                            begin
                              if (self.instance_variables.include?(:@_eq_QMARK)) then
                                @_eq_QMARK
                              else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:151"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                            0                            ,Cell.new(
                              callProcedure( 'length',
                                  begin
                                    if (self.instance_variables.include?(:@_length)) then
                                      @_length
                                    else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:151"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        _lst
                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:155"] + __e.backtrace ) ; raise __e
                                    end
                                           ))
                                     )))
                       ) then
                        Nil.new
                      else
                          if ( 
                            callProcedure( 'eq?',
                                begin
                                  if (self.instance_variables.include?(:@_eq_QMARK)) then
                                    @_eq_QMARK
                                  else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:151"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                1                                ,Cell.new(
                                  callProcedure( 'length',
                                      begin
                                        if (self.instance_variables.include?(:@_length)) then
                                          @_length
                                        else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:151"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _lst
                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:155"] + __e.backtrace ) ; raise __e
                                        end
                                               ))
                                         )))
                           ) then
                              callProcedure( 'case_block',
                                  begin
                                      _case_block
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:153"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    callProcedure( 'car',
                                        begin
                                          if (self.instance_variables.include?(:@_car)) then
                                            @_car
                                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:153"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          begin
                                              _lst
                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:155"] + __e.backtrace ) ; raise __e
                                          end
                                                 ))                                  ,Cell.new(
                                  Nil.new
                                           )))
                          else
                              callProcedure( 'case_block',
                                  begin
                                      _case_block
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:153"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    callProcedure( 'car',
                                        begin
                                          if (self.instance_variables.include?(:@_car)) then
                                            @_car
                                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:153"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          begin
                                              _lst
                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:155"] + __e.backtrace ) ; raise __e
                                          end
                                                 ))                                  ,Cell.new(
                                    callProcedure( 'cond_iter',
                                        begin
                                            _cond_iter
                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:155"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          callProcedure( 'cdr',
                                              begin
                                                if (self.instance_variables.include?(:@_cdr)) then
                                                  @_cdr
                                                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:154"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                begin
                                                    _lst
                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:155"] + __e.backtrace ) ; raise __e
                                                end
                                                       ))
                                                 ))
                                           )))
                          end
                      end
                  }
                callProcedure( 'cond_iter',
                    begin
                        _cond_iter
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:155"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          _lst
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:155"] + __e.backtrace ) ; raise __e
                      end
                             ))
            } ; ___lambda.call(
            nil,nil
                       )
          end
      }
#------------------------------

  @_let1 = 
      LispMacro.new { |_var,_expr,*__rest__| _body = __rest__[0] ;  
          callProcedure( 'append',
              begin
                if (self.instance_variables.include?(:@_append)) then
                  @_append
                else raise NameError.new( "Error: undefined variable _append", "_append" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:159"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'list',
                    begin
                      if (self.instance_variables.include?(:@_list)) then
                        @_list
                      else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:160"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                    :"let"                    ,Cell.new(
                      callProcedure( 'list',
                          begin
                            if (self.instance_variables.include?(:@_list)) then
                              @_list
                            else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:160"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'list',
                                begin
                                  if (self.instance_variables.include?(:@_list)) then
                                    @_list
                                  else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:160"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _var
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:160"] + __e.backtrace ) ; raise __e
                                  end                                ,Cell.new(
                                  begin
                                      _expr
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:160"] + __e.backtrace ) ; raise __e
                                  end
                                         )))
                                   ))
                             )))              ,Cell.new(
                begin
                    _body
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:161"] + __e.backtrace ) ; raise __e
                end
                       )))
      }
#------------------------------

  @_or = 
      LispMacro.new { |*__rest__| _lst = __rest__[0] ;  
          begin
            ___lambda = lambda { |_or_iter| 
                _or_iter                 = 
                  Proc.new { |_lst| 
                      if ( 
                        callProcedure( 'eq?',
                            begin
                              if (self.instance_variables.include?(:@_eq_QMARK)) then
                                @_eq_QMARK
                              else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:170"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                            0                            ,Cell.new(
                              callProcedure( 'length',
                                  begin
                                    if (self.instance_variables.include?(:@_length)) then
                                      @_length
                                    else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:170"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        _lst
                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:178"] + __e.backtrace ) ; raise __e
                                    end
                                           ))
                                     )))
                       ) then
                          begin
                            false
                          end
                      else
                          if ( 
                            callProcedure( 'eq?',
                                begin
                                  if (self.instance_variables.include?(:@_eq_QMARK)) then
                                    @_eq_QMARK
                                  else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:170"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                1                                ,Cell.new(
                                  callProcedure( 'length',
                                      begin
                                        if (self.instance_variables.include?(:@_length)) then
                                          @_length
                                        else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:170"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _lst
                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:178"] + __e.backtrace ) ; raise __e
                                        end
                                               ))
                                         )))
                           ) then
                              begin
                                  begin
                                    ___lambda = lambda { |_sym| 
                                        callProcedure( 'list',
                                            begin
                                              if (self.instance_variables.include?(:@_list)) then
                                                @_list
                                              else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:177"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                            :"let1"                                            ,Cell.new(
                                              begin
                                                  _sym
                                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:177"] + __e.backtrace ) ; raise __e
                                              end                                            ,Cell.new(
                                              callProcedure( 'car',
                                                  begin
                                                    if (self.instance_variables.include?(:@_car)) then
                                                      @_car
                                                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:176"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    begin
                                                        _lst
                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:178"] + __e.backtrace ) ; raise __e
                                                    end
                                                           ))                                            ,Cell.new(
                                              callProcedure( 'list',
                                                  begin
                                                    if (self.instance_variables.include?(:@_list)) then
                                                      @_list
                                                    else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:177"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                  :"if"                                                  ,Cell.new(
                                                    begin
                                                        _sym
                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:177"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,Cell.new(
                                                    begin
                                                        _sym
                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:177"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,Cell.new(
                                                  false
                                                           )))))
                                                     )))))
                                    } ; ___lambda.call(
                                          callProcedure( 'gensym',
                                              begin
                                                if (self.instance_variables.include?(:@_gensym)) then
                                                  @_gensym
                                                else raise NameError.new( "Error: undefined variable _gensym", "_gensym" ) end
                                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:175"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                            Cell.new(
                                                       ))
                                               )
                                  end
                              end
                          else
                              if ( 
                              true
                               ) then
                                  begin
                                      begin
                                        ___lambda = lambda { |_sym| 
                                            callProcedure( 'list',
                                                begin
                                                  if (self.instance_variables.include?(:@_list)) then
                                                    @_list
                                                  else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:177"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                :"let1"                                                ,Cell.new(
                                                  begin
                                                      _sym
                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:177"] + __e.backtrace ) ; raise __e
                                                  end                                                ,Cell.new(
                                                  callProcedure( 'car',
                                                      begin
                                                        if (self.instance_variables.include?(:@_car)) then
                                                          @_car
                                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:176"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        begin
                                                            _lst
                                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:178"] + __e.backtrace ) ; raise __e
                                                        end
                                                               ))                                                ,Cell.new(
                                                  callProcedure( 'list',
                                                      begin
                                                        if (self.instance_variables.include?(:@_list)) then
                                                          @_list
                                                        else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:177"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                      :"if"                                                      ,Cell.new(
                                                        begin
                                                            _sym
                                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:177"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,Cell.new(
                                                        begin
                                                            _sym
                                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:177"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,Cell.new(
                                                        callProcedure( 'or_iter',
                                                            begin
                                                                _or_iter
                                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:178"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              callProcedure( 'cdr',
                                                                  begin
                                                                    if (self.instance_variables.include?(:@_cdr)) then
                                                                      @_cdr
                                                                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:177"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                    begin
                                                                        _lst
                                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:178"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                           ))
                                                                     ))
                                                               )))))
                                                         )))))
                                        } ; ___lambda.call(
                                              callProcedure( 'gensym',
                                                  begin
                                                    if (self.instance_variables.include?(:@_gensym)) then
                                                      @_gensym
                                                    else raise NameError.new( "Error: undefined variable _gensym", "_gensym" ) end
                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:175"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                Cell.new(
                                                           ))
                                                   )
                                      end
                                  end
                              end
                          end
                      end
                  }
                callProcedure( 'or_iter',
                    begin
                        _or_iter
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:178"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          _lst
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:178"] + __e.backtrace ) ; raise __e
                      end
                             ))
            } ; ___lambda.call(
            nil
                       )
          end
      }
#------------------------------

  @_and = 
      LispMacro.new { |*__rest__| _lst = __rest__[0] ;  
          begin
            ___lambda = lambda { |_and_iter| 
                _and_iter                 = 
                  Proc.new { |_lst| 
                      if ( 
                        callProcedure( 'eq?',
                            begin
                              if (self.instance_variables.include?(:@_eq_QMARK)) then
                                @_eq_QMARK
                              else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:190"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                            0                            ,Cell.new(
                              callProcedure( 'length',
                                  begin
                                    if (self.instance_variables.include?(:@_length)) then
                                      @_length
                                    else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:187"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        _lst
                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:193"] + __e.backtrace ) ; raise __e
                                    end
                                           ))
                                     )))
                       ) then
                          begin
                            true
                          end
                      else
                          if ( 
                            callProcedure( 'eq?',
                                begin
                                  if (self.instance_variables.include?(:@_eq_QMARK)) then
                                    @_eq_QMARK
                                  else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:190"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                1                                ,Cell.new(
                                  callProcedure( 'length',
                                      begin
                                        if (self.instance_variables.include?(:@_length)) then
                                          @_length
                                        else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:187"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _lst
                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:193"] + __e.backtrace ) ; raise __e
                                        end
                                               ))
                                         )))
                           ) then
                              begin
                                  callProcedure( 'car',
                                      begin
                                        if (self.instance_variables.include?(:@_car)) then
                                          @_car
                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:190"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _lst
                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:193"] + __e.backtrace ) ; raise __e
                                        end
                                               ))
                              end
                          else
                              if ( 
                              true
                               ) then
                                  begin
                                      callProcedure( 'list',
                                          begin
                                            if (self.instance_variables.include?(:@_list)) then
                                              @_list
                                            else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:190"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                          :"if"                                          ,Cell.new(
                                            callProcedure( 'list',
                                                begin
                                                  if (self.instance_variables.include?(:@_list)) then
                                                    @_list
                                                  else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:190"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                :"not"                                                ,Cell.new(
                                                  callProcedure( 'list',
                                                      begin
                                                        if (self.instance_variables.include?(:@_list)) then
                                                          @_list
                                                        else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:190"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                      :"eq?"                                                      ,Cell.new(
                                                      false                                                      ,Cell.new(
                                                        callProcedure( 'car',
                                                            begin
                                                              if (self.instance_variables.include?(:@_car)) then
                                                                @_car
                                                              else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:190"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              begin
                                                                  _lst
                                                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:193"] + __e.backtrace ) ; raise __e
                                                              end
                                                                     ))
                                                               ))))
                                                         )))                                          ,Cell.new(
                                            callProcedure( 'and_iter',
                                                begin
                                                    _and_iter
                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:193"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  callProcedure( 'cdr',
                                                      begin
                                                        if (self.instance_variables.include?(:@_cdr)) then
                                                          @_cdr
                                                        else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:191"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        begin
                                                            _lst
                                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:193"] + __e.backtrace ) ; raise __e
                                                        end
                                                               ))
                                                         ))                                          ,Cell.new(
                                          false
                                                   )))))
                                  end
                              end
                          end
                      end
                  }
                callProcedure( 'and_iter',
                    begin
                        _and_iter
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:193"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          _lst
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:193"] + __e.backtrace ) ; raise __e
                      end
                             ))
            } ; ___lambda.call(
            nil
                       )
          end
      }
#------------------------------

  @_apply = 
      Proc.new { |_proc,*__rest__| _args = __rest__[0] ;  
          if ( 
            callProcedure( 'null?',
                begin
                  if (self.instance_variables.include?(:@_null_QMARK)) then
                    @_null_QMARK
                  else raise NameError.new( "Error: undefined variable _null_QMARK", "_null_QMARK" ) end
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:197"] + __e.backtrace ) ; raise __e
                end              ,
                Cell.new(
                  begin
                      _args
                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:201"] + __e.backtrace ) ; raise __e
                  end
                         ))
           ) then
              callProcedure( 'proc',
                  begin
                      _proc
                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:200"] + __e.backtrace ) ; raise __e
                  end                ,
                Cell.new(
                           ))
          else
              callProcedure( 'anonymouse', 
                  Proc.new { |_lol| 
                      callProcedure( 'apply1',
                          begin
                            if (self.instance_variables.include?(:@_apply1)) then
                              @_apply1
                            else raise NameError.new( "Error: undefined variable _apply1", "_apply1" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:200"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                _proc
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:200"] + __e.backtrace ) ; raise __e
                            end                          ,Cell.new(
                            callProcedure( 'append',
                                begin
                                  if (self.instance_variables.include?(:@_append)) then
                                    @_append
                                  else raise NameError.new( "Error: undefined variable _append", "_append" ) end
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:200"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  callProcedure( 'reverse',
                                      begin
                                        if (self.instance_variables.include?(:@_reverse)) then
                                          @_reverse
                                        else raise NameError.new( "Error: undefined variable _reverse", "_reverse" ) end
                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:201"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        callProcedure( 'cdr',
                                            begin
                                              if (self.instance_variables.include?(:@_cdr)) then
                                                @_cdr
                                              else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:200"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              begin
                                                  _lol
                                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:200"] + __e.backtrace ) ; raise __e
                                              end
                                                     ))
                                               ))                                ,Cell.new(
                                  callProcedure( 'car',
                                      begin
                                        if (self.instance_variables.include?(:@_car)) then
                                          @_car
                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:200"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _lol
                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:200"] + __e.backtrace ) ; raise __e
                                        end
                                               ))
                                         )))
                                   )))
                  }                ,
                  Cell.new(
                    callProcedure( 'reverse',
                        begin
                          if (self.instance_variables.include?(:@_reverse)) then
                            @_reverse
                          else raise NameError.new( "Error: undefined variable _reverse", "_reverse" ) end
                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:201"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              _args
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:201"] + __e.backtrace ) ; raise __e
                          end
                                 ))
                           ))
          end
      }
#------------------------------

  @_quasiquote = 
      LispMacro.new { |_l| 
          begin
            ___lambda = lambda { |_mcons,_mappend,_foo| 
                _mcons                 = 
                  Proc.new { |_f,_l,_r| 
                      if ( 
                        if ( 
                          callProcedure( 'not',
                              begin
                                if (self.instance_variables.include?(:@_not)) then
                                  @_not
                                else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:233"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                callProcedure( 'eq?',
                                    begin
                                      if (self.instance_variables.include?(:@_eq_QMARK)) then
                                        @_eq_QMARK
                                      else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:254"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                    false                                    ,Cell.new(
                                      callProcedure( 'pair?',
                                          begin
                                            if (self.instance_variables.include?(:@_pair_QMARK)) then
                                              @_pair_QMARK
                                            else raise NameError.new( "Error: undefined variable _pair_QMARK", "_pair_QMARK" ) end
                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:245"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                _r
                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:230"] + __e.backtrace ) ; raise __e
                                            end
                                                   ))
                                             )))
                                       ))
                         ) then
                            if ( 
                              callProcedure( 'not',
                                  begin
                                    if (self.instance_variables.include?(:@_not)) then
                                      @_not
                                    else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:233"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    callProcedure( 'eq?',
                                        begin
                                          if (self.instance_variables.include?(:@_eq_QMARK)) then
                                            @_eq_QMARK
                                          else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:254"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                        false                                        ,Cell.new(
                                          callProcedure( 'eq?',
                                              begin
                                                if (self.instance_variables.include?(:@_eq_QMARK)) then
                                                  @_eq_QMARK
                                                else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:254"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                callProcedure( 'car',
                                                    begin
                                                      if (self.instance_variables.include?(:@_car)) then
                                                        @_car
                                                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:257"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      begin
                                                          _r
                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:230"] + __e.backtrace ) ; raise __e
                                                      end
                                                             ))                                              ,Cell.new(
                                              :"quote"
                                                       )))
                                                 )))
                                           ))
                             ) then
                                if ( 
                                  callProcedure( 'not',
                                      begin
                                        if (self.instance_variables.include?(:@_not)) then
                                          @_not
                                        else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:233"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        callProcedure( 'eq?',
                                            begin
                                              if (self.instance_variables.include?(:@_eq_QMARK)) then
                                                @_eq_QMARK
                                              else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:254"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                            false                                            ,Cell.new(
                                              callProcedure( 'eq?',
                                                  begin
                                                    if (self.instance_variables.include?(:@_eq_QMARK)) then
                                                      @_eq_QMARK
                                                    else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:254"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    callProcedure( 'car',
                                                        begin
                                                          if (self.instance_variables.include?(:@_car)) then
                                                            @_car
                                                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:257"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                          callProcedure( 'cdr',
                                                              begin
                                                                if (self.instance_variables.include?(:@_cdr)) then
                                                                  @_cdr
                                                                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                                begin
                                                                    _r
                                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:230"] + __e.backtrace ) ; raise __e
                                                                end
                                                                       ))
                                                                 ))                                                  ,Cell.new(
                                                    callProcedure( 'cdr',
                                                        begin
                                                          if (self.instance_variables.include?(:@_cdr)) then
                                                            @_cdr
                                                          else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                          begin
                                                              _f
                                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:225"] + __e.backtrace ) ; raise __e
                                                          end
                                                                 ))
                                                           )))
                                                     )))
                                               ))
                                 ) then
                                    if ( 
                                      callProcedure( 'not',
                                          begin
                                            if (self.instance_variables.include?(:@_not)) then
                                              @_not
                                            else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:233"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            callProcedure( 'eq?',
                                                begin
                                                  if (self.instance_variables.include?(:@_eq_QMARK)) then
                                                    @_eq_QMARK
                                                  else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:254"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                false                                                ,Cell.new(
                                                  callProcedure( 'pair?',
                                                      begin
                                                        if (self.instance_variables.include?(:@_pair_QMARK)) then
                                                          @_pair_QMARK
                                                        else raise NameError.new( "Error: undefined variable _pair_QMARK", "_pair_QMARK" ) end
                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:245"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        begin
                                                            _l
                                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:259"] + __e.backtrace ) ; raise __e
                                                        end
                                                               ))
                                                         )))
                                                   ))
                                     ) then
                                        if ( 
                                          callProcedure( 'not',
                                              begin
                                                if (self.instance_variables.include?(:@_not)) then
                                                  @_not
                                                else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:233"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                callProcedure( 'eq?',
                                                    begin
                                                      if (self.instance_variables.include?(:@_eq_QMARK)) then
                                                        @_eq_QMARK
                                                      else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:254"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                    false                                                    ,Cell.new(
                                                      callProcedure( 'eq?',
                                                          begin
                                                            if (self.instance_variables.include?(:@_eq_QMARK)) then
                                                              @_eq_QMARK
                                                            else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:254"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            callProcedure( 'car',
                                                                begin
                                                                  if (self.instance_variables.include?(:@_car)) then
                                                                    @_car
                                                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:257"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                  begin
                                                                      _l
                                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:259"] + __e.backtrace ) ; raise __e
                                                                  end
                                                                         ))                                                          ,Cell.new(
                                                          :"quote"
                                                                   )))
                                                             )))
                                                       ))
                                         ) then
                                            callProcedure( 'eq?',
                                                begin
                                                  if (self.instance_variables.include?(:@_eq_QMARK)) then
                                                    @_eq_QMARK
                                                  else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:254"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  callProcedure( 'car',
                                                      begin
                                                        if (self.instance_variables.include?(:@_car)) then
                                                          @_car
                                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:257"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        callProcedure( 'cdr',
                                                            begin
                                                              if (self.instance_variables.include?(:@_cdr)) then
                                                                @_cdr
                                                              else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              begin
                                                                  _l
                                                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:259"] + __e.backtrace ) ; raise __e
                                                              end
                                                                     ))
                                                               ))                                                ,Cell.new(
                                                  callProcedure( 'car',
                                                      begin
                                                        if (self.instance_variables.include?(:@_car)) then
                                                          @_car
                                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:257"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        begin
                                                            _f
                                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:225"] + __e.backtrace ) ; raise __e
                                                        end
                                                               ))
                                                         )))
                                        else
                                          false
                                        end
                                    else
                                      false
                                    end
                                else
                                  false
                                end
                            else
                              false
                            end
                        else
                          false
                        end
                       ) then
                          if ( 
                            begin
                              ___lambda = lambda { |___gensym__7| 
                                  if ( 
                                    begin
                                        ___gensym__7
                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                    end
                                   ) then
                                      begin
                                          ___gensym__7
                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                      end
                                  else
                                      begin
                                        ___lambda = lambda { |___gensym__8| 
                                            if ( 
                                              begin
                                                  ___gensym__8
                                                rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                              end
                                             ) then
                                                begin
                                                    ___gensym__8
                                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                end
                                            else
                                                begin
                                                  ___lambda = lambda { |___gensym__9| 
                                                      if ( 
                                                        begin
                                                            ___gensym__9
                                                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                        end
                                                       ) then
                                                          begin
                                                              ___gensym__9
                                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                          end
                                                      else
                                                        false
                                                      end
                                                  } ; ___lambda.call(
                                                        callProcedure( 'string?',
                                                            begin
                                                              if (self.instance_variables.include?(:@_string_QMARK)) then
                                                                @_string_QMARK
                                                              else raise NameError.new( "Error: undefined variable _string_QMARK", "_string_QMARK" ) end
                                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:234"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              begin
                                                                  _f
                                                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:225"] + __e.backtrace ) ; raise __e
                                                              end
                                                                     ))
                                                             )
                                                end
                                            end
                                        } ; ___lambda.call(
                                              callProcedure( 'number?',
                                                  begin
                                                    if (self.instance_variables.include?(:@_number_QMARK)) then
                                                      @_number_QMARK
                                                    else raise NameError.new( "Error: undefined variable _number_QMARK", "_number_QMARK" ) end
                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:234"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    begin
                                                        _f
                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:225"] + __e.backtrace ) ; raise __e
                                                    end
                                                           ))
                                                   )
                                      end
                                  end
                              } ; ___lambda.call(
                                    callProcedure( 'procedure?',
                                        begin
                                          if (self.instance_variables.include?(:@_procedure_QMARK)) then
                                            @_procedure_QMARK
                                          else raise NameError.new( "Error: undefined variable _procedure_QMARK", "_procedure_QMARK" ) end
                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:234"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          begin
                                              _f
                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:225"] + __e.backtrace ) ; raise __e
                                          end
                                                 ))
                                         )
                            end
                           ) then
                              begin
                                  _f
                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:225"] + __e.backtrace ) ; raise __e
                              end
                          else
                              callProcedure( 'list',
                                  begin
                                    if (self.instance_variables.include?(:@_list)) then
                                      @_list
                                    else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:236"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                  :"quote"                                  ,Cell.new(
                                    begin
                                        _f
                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:225"] + __e.backtrace ) ; raise __e
                                    end
                                           )))
                          end
                      else
                          callProcedure( 'list',
                              begin
                                if (self.instance_variables.include?(:@_list)) then
                                  @_list
                                else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:236"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                              :"cons"                              ,Cell.new(
                                begin
                                    _l
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:259"] + __e.backtrace ) ; raise __e
                                end                              ,Cell.new(
                                begin
                                    _r
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:230"] + __e.backtrace ) ; raise __e
                                end
                                       ))))
                      end
                  }
                _mappend                 = 
                  Proc.new { |_f,_l,_r| 
                      if ( 
                        begin
                          ___lambda = lambda { |___gensym__10| 
                              if ( 
                                begin
                                    ___gensym__10
                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                end
                               ) then
                                  begin
                                      ___gensym__10
                                    rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                  end
                              else
                                  begin
                                    ___lambda = lambda { |___gensym__11| 
                                        if ( 
                                          begin
                                              ___gensym__11
                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                          end
                                         ) then
                                            begin
                                                ___gensym__11
                                              rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                            end
                                        else
                                          false
                                        end
                                    } ; ___lambda.call(
                                          if ( 
                                            callProcedure( 'not',
                                                begin
                                                  if (self.instance_variables.include?(:@_not)) then
                                                    @_not
                                                  else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:233"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  callProcedure( 'eq?',
                                                      begin
                                                        if (self.instance_variables.include?(:@_eq_QMARK)) then
                                                          @_eq_QMARK
                                                        else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:254"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                      false                                                      ,Cell.new(
                                                        callProcedure( 'pair?',
                                                            begin
                                                              if (self.instance_variables.include?(:@_pair_QMARK)) then
                                                                @_pair_QMARK
                                                              else raise NameError.new( "Error: undefined variable _pair_QMARK", "_pair_QMARK" ) end
                                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:245"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              begin
                                                                  _r
                                                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:230"] + __e.backtrace ) ; raise __e
                                                              end
                                                                     ))
                                                               )))
                                                         ))
                                           ) then
                                              if ( 
                                                callProcedure( 'not',
                                                    begin
                                                      if (self.instance_variables.include?(:@_not)) then
                                                        @_not
                                                      else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:233"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      callProcedure( 'eq?',
                                                          begin
                                                            if (self.instance_variables.include?(:@_eq_QMARK)) then
                                                              @_eq_QMARK
                                                            else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:254"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                          false                                                          ,Cell.new(
                                                            callProcedure( 'eq?',
                                                                begin
                                                                  if (self.instance_variables.include?(:@_eq_QMARK)) then
                                                                    @_eq_QMARK
                                                                  else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:254"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                  callProcedure( 'car',
                                                                      begin
                                                                        if (self.instance_variables.include?(:@_car)) then
                                                                          @_car
                                                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:257"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                      Cell.new(
                                                                        begin
                                                                            _r
                                                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:230"] + __e.backtrace ) ; raise __e
                                                                        end
                                                                               ))                                                                ,Cell.new(
                                                                :"quote"
                                                                         )))
                                                                   )))
                                                             ))
                                               ) then
                                                  callProcedure( 'eq?',
                                                      begin
                                                        if (self.instance_variables.include?(:@_eq_QMARK)) then
                                                          @_eq_QMARK
                                                        else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:254"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        callProcedure( 'car',
                                                            begin
                                                              if (self.instance_variables.include?(:@_car)) then
                                                                @_car
                                                              else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:257"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              callProcedure( 'cdr',
                                                                  begin
                                                                    if (self.instance_variables.include?(:@_cdr)) then
                                                                      @_cdr
                                                                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                    begin
                                                                        _r
                                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:230"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                           ))
                                                                     ))                                                      ,Cell.new(
                                                      Nil.new
                                                               )))
                                              else
                                                false
                                              end
                                          else
                                            false
                                          end
                                               )
                                  end
                              end
                          } ; ___lambda.call(
                                callProcedure( 'null?',
                                    begin
                                      if (self.instance_variables.include?(:@_null_QMARK)) then
                                        @_null_QMARK
                                      else raise NameError.new( "Error: undefined variable _null_QMARK", "_null_QMARK" ) end
                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:225"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      callProcedure( 'cdr',
                                          begin
                                            if (self.instance_variables.include?(:@_cdr)) then
                                              @_cdr
                                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                _f
                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:225"] + __e.backtrace ) ; raise __e
                                            end
                                                   ))
                                             ))
                                     )
                        end
                       ) then
                          begin
                              _l
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:259"] + __e.backtrace ) ; raise __e
                          end
                      else
                          callProcedure( 'list',
                              begin
                                if (self.instance_variables.include?(:@_list)) then
                                  @_list
                                else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:236"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                              :"append"                              ,Cell.new(
                                begin
                                    _l
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:259"] + __e.backtrace ) ; raise __e
                                end                              ,Cell.new(
                                begin
                                    _r
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:230"] + __e.backtrace ) ; raise __e
                                end
                                       ))))
                      end
                  }
                _foo                 = 
                  Proc.new { |_level,_form| 
                      if ( 
                        callProcedure( 'not',
                            begin
                              if (self.instance_variables.include?(:@_not)) then
                                @_not
                              else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:233"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              callProcedure( 'pair?',
                                  begin
                                    if (self.instance_variables.include?(:@_pair_QMARK)) then
                                      @_pair_QMARK
                                    else raise NameError.new( "Error: undefined variable _pair_QMARK", "_pair_QMARK" ) end
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:245"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        _form
                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                    end
                                           ))
                                     ))
                       ) then
                          begin
                              if ( 
                                begin
                                  ___lambda = lambda { |___gensym__15| 
                                      if ( 
                                        begin
                                            ___gensym__15
                                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                        end
                                       ) then
                                          begin
                                              ___gensym__15
                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                          end
                                      else
                                          begin
                                            ___lambda = lambda { |___gensym__16| 
                                                if ( 
                                                  begin
                                                      ___gensym__16
                                                    rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                  end
                                                 ) then
                                                    begin
                                                        ___gensym__16
                                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                    end
                                                else
                                                    begin
                                                      ___lambda = lambda { |___gensym__17| 
                                                          if ( 
                                                            begin
                                                                ___gensym__17
                                                              rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                            end
                                                           ) then
                                                              begin
                                                                  ___gensym__17
                                                                rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                              end
                                                          else
                                                            false
                                                          end
                                                      } ; ___lambda.call(
                                                            callProcedure( 'string?',
                                                                begin
                                                                  if (self.instance_variables.include?(:@_string_QMARK)) then
                                                                    @_string_QMARK
                                                                  else raise NameError.new( "Error: undefined variable _string_QMARK", "_string_QMARK" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:234"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                  begin
                                                                      _form
                                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                                  end
                                                                         ))
                                                                 )
                                                    end
                                                end
                                            } ; ___lambda.call(
                                                  callProcedure( 'number?',
                                                      begin
                                                        if (self.instance_variables.include?(:@_number_QMARK)) then
                                                          @_number_QMARK
                                                        else raise NameError.new( "Error: undefined variable _number_QMARK", "_number_QMARK" ) end
                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:234"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        begin
                                                            _form
                                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                        end
                                                               ))
                                                       )
                                          end
                                      end
                                  } ; ___lambda.call(
                                        callProcedure( 'procedure?',
                                            begin
                                              if (self.instance_variables.include?(:@_procedure_QMARK)) then
                                                @_procedure_QMARK
                                              else raise NameError.new( "Error: undefined variable _procedure_QMARK", "_procedure_QMARK" ) end
                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:234"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              begin
                                                  _form
                                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                              end
                                                     ))
                                             )
                                end
                               ) then
                                  begin
                                      _form
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                  end
                              else
                                  callProcedure( 'list',
                                      begin
                                        if (self.instance_variables.include?(:@_list)) then
                                          @_list
                                        else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:236"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                      :"quote"                                      ,Cell.new(
                                        begin
                                            _form
                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                        end
                                               )))
                              end
                          end
                      else
                          if ( 
                            callProcedure( 'eq?',
                                begin
                                  if (self.instance_variables.include?(:@_eq_QMARK)) then
                                    @_eq_QMARK
                                  else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:254"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                :"quasiquote"                                ,Cell.new(
                                  callProcedure( 'car',
                                      begin
                                        if (self.instance_variables.include?(:@_car)) then
                                          @_car
                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:257"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _form
                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                        end
                                               ))
                                         )))
                           ) then
                              begin
                                  callProcedure( 'mcons',
                                      begin
                                          _mcons
                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:257"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _form
                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                        end                                      ,Cell.new(
                                      Cell.new(:"quote",Cell.new(:"quasiquote"))                                      ,Cell.new(
                                        callProcedure( 'foo',
                                            begin
                                                _foo
                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:259"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              callProcedure( '+',
                                                  begin
                                                    if (self.instance_variables.include?(:@_plus)) then
                                                      @_plus
                                                    else raise NameError.new( "Error: undefined variable _plus", "_plus" ) end
                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:239"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    begin
                                                        _level
                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,Cell.new(
                                                  1
                                                           )))                                            ,Cell.new(
                                              callProcedure( 'cdr',
                                                  begin
                                                    if (self.instance_variables.include?(:@_cdr)) then
                                                      @_cdr
                                                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    begin
                                                        _form
                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                    end
                                                           ))
                                                     )))
                                               ))))
                              end
                          else
                              if ( 
                              true
                               ) then
                                  begin
                                      if ( 
                                        callProcedure( 'zero?',
                                            begin
                                              if (self.instance_variables.include?(:@_zero_QMARK)) then
                                                @_zero_QMARK
                                              else raise NameError.new( "Error: undefined variable _zero_QMARK", "_zero_QMARK" ) end
                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:240"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              begin
                                                  _level
                                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                              end
                                                     ))
                                       ) then
                                          if ( 
                                            callProcedure( 'eq?',
                                                begin
                                                  if (self.instance_variables.include?(:@_eq_QMARK)) then
                                                    @_eq_QMARK
                                                  else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:254"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  callProcedure( 'car',
                                                      begin
                                                        if (self.instance_variables.include?(:@_car)) then
                                                          @_car
                                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:257"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        begin
                                                            _form
                                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                        end
                                                               ))                                                ,Cell.new(
                                                :"unquote"
                                                         )))
                                           ) then
                                              begin
                                                  callProcedure( 'car',
                                                      begin
                                                        if (self.instance_variables.include?(:@_car)) then
                                                          @_car
                                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:257"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        callProcedure( 'cdr',
                                                            begin
                                                              if (self.instance_variables.include?(:@_cdr)) then
                                                                @_cdr
                                                              else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              begin
                                                                  _form
                                                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                              end
                                                                     ))
                                                               ))
                                              end
                                          else
                                              if ( 
                                                callProcedure( 'eq?',
                                                    begin
                                                      if (self.instance_variables.include?(:@_eq_QMARK)) then
                                                        @_eq_QMARK
                                                      else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:254"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      callProcedure( 'car',
                                                          begin
                                                            if (self.instance_variables.include?(:@_car)) then
                                                              @_car
                                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:257"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            begin
                                                                _form
                                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                            end
                                                                   ))                                                    ,Cell.new(
                                                    :"unquote_splicing"
                                                             )))
                                               ) then
                                                  begin
                                                    begin raise RuntimeError, "Unquote-splicing wasn't in a list:" ; rescue => __e ;  __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:243"] + __e.backtrace ) ; raise __e ; end 
                                                  end
                                              else
                                                  if ( 
                                                    if ( 
                                                      callProcedure( 'not',
                                                          begin
                                                            if (self.instance_variables.include?(:@_not)) then
                                                              @_not
                                                            else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:233"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            callProcedure( 'eq?',
                                                                begin
                                                                  if (self.instance_variables.include?(:@_eq_QMARK)) then
                                                                    @_eq_QMARK
                                                                  else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:254"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                false                                                                ,Cell.new(
                                                                  callProcedure( 'pair?',
                                                                      begin
                                                                        if (self.instance_variables.include?(:@_pair_QMARK)) then
                                                                          @_pair_QMARK
                                                                        else raise NameError.new( "Error: undefined variable _pair_QMARK", "_pair_QMARK" ) end
                                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:245"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                      Cell.new(
                                                                        callProcedure( 'car',
                                                                            begin
                                                                              if (self.instance_variables.include?(:@_car)) then
                                                                                @_car
                                                                              else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:257"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                            Cell.new(
                                                                              begin
                                                                                  _form
                                                                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                                              end
                                                                                     ))
                                                                               ))
                                                                         )))
                                                                   ))
                                                     ) then
                                                        callProcedure( 'eq?',
                                                            begin
                                                              if (self.instance_variables.include?(:@_eq_QMARK)) then
                                                                @_eq_QMARK
                                                              else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:254"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              callProcedure( 'car',
                                                                  begin
                                                                    if (self.instance_variables.include?(:@_car)) then
                                                                      @_car
                                                                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:257"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                    callProcedure( 'car',
                                                                        begin
                                                                          if (self.instance_variables.include?(:@_car)) then
                                                                            @_car
                                                                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:257"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                        Cell.new(
                                                                          begin
                                                                              _form
                                                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                                          end
                                                                                 ))
                                                                           ))                                                            ,Cell.new(
                                                            :"unquote_splicing"
                                                                     )))
                                                    else
                                                      false
                                                    end
                                                   ) then
                                                      begin
                                                          callProcedure( 'mappend',
                                                              begin
                                                                  _mappend
                                                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:247"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                                begin
                                                                    _form
                                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,Cell.new(
                                                                callProcedure( 'car',
                                                                    begin
                                                                      if (self.instance_variables.include?(:@_car)) then
                                                                        @_car
                                                                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:257"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                    Cell.new(
                                                                      callProcedure( 'cdr',
                                                                          begin
                                                                            if (self.instance_variables.include?(:@_cdr)) then
                                                                              @_cdr
                                                                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                          Cell.new(
                                                                            callProcedure( 'car',
                                                                                begin
                                                                                  if (self.instance_variables.include?(:@_car)) then
                                                                                    @_car
                                                                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:257"] + __e.backtrace ) ; raise __e
                                                                                end                                                                              ,
                                                                                Cell.new(
                                                                                  begin
                                                                                      _form
                                                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                                                  end
                                                                                         ))
                                                                                   ))
                                                                             ))                                                              ,Cell.new(
                                                                callProcedure( 'foo',
                                                                    begin
                                                                        _foo
                                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:259"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                    Cell.new(
                                                                      begin
                                                                          _level
                                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,Cell.new(
                                                                      callProcedure( 'cdr',
                                                                          begin
                                                                            if (self.instance_variables.include?(:@_cdr)) then
                                                                              @_cdr
                                                                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                          Cell.new(
                                                                            begin
                                                                                _form
                                                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                                            end
                                                                                   ))
                                                                             )))
                                                                       ))))
                                                      end
                                                  else
                                                      if ( 
                                                      true
                                                       ) then
                                                          begin
                                                              callProcedure( 'mcons',
                                                                  begin
                                                                      _mcons
                                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:257"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                    begin
                                                                        _form
                                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,Cell.new(
                                                                    callProcedure( 'foo',
                                                                        begin
                                                                            _foo
                                                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:259"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                        Cell.new(
                                                                          begin
                                                                              _level
                                                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,Cell.new(
                                                                          callProcedure( 'car',
                                                                              begin
                                                                                if (self.instance_variables.include?(:@_car)) then
                                                                                  @_car
                                                                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:257"] + __e.backtrace ) ; raise __e
                                                                              end                                                                            ,
                                                                              Cell.new(
                                                                                begin
                                                                                    _form
                                                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                                                end
                                                                                       ))
                                                                                 )))                                                                  ,Cell.new(
                                                                    callProcedure( 'foo',
                                                                        begin
                                                                            _foo
                                                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:259"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                        Cell.new(
                                                                          begin
                                                                              _level
                                                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,Cell.new(
                                                                          callProcedure( 'cdr',
                                                                              begin
                                                                                if (self.instance_variables.include?(:@_cdr)) then
                                                                                  @_cdr
                                                                                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                                              end                                                                            ,
                                                                              Cell.new(
                                                                                begin
                                                                                    _form
                                                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                                                end
                                                                                       ))
                                                                                 )))
                                                                           ))))
                                                          end
                                                      end
                                                  end
                                              end
                                          end
                                      else
                                          if ( 
                                            callProcedure( 'eq?',
                                                begin
                                                  if (self.instance_variables.include?(:@_eq_QMARK)) then
                                                    @_eq_QMARK
                                                  else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:254"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  callProcedure( 'car',
                                                      begin
                                                        if (self.instance_variables.include?(:@_car)) then
                                                          @_car
                                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:257"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        begin
                                                            _form
                                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                        end
                                                               ))                                                ,Cell.new(
                                                :"unquote"
                                                         )))
                                           ) then
                                              begin
                                                  callProcedure( 'mcons',
                                                      begin
                                                          _mcons
                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:257"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        begin
                                                            _form
                                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,Cell.new(
                                                      Cell.new(:"quote",Cell.new(:"unquote"))                                                      ,Cell.new(
                                                        callProcedure( 'foo',
                                                            begin
                                                                _foo
                                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:259"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              callProcedure( '-',
                                                                  begin
                                                                    if (self.instance_variables.include?(:@_minus)) then
                                                                      @_minus
                                                                    else raise NameError.new( "Error: undefined variable _minus", "_minus" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:256"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                    begin
                                                                        _level
                                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,Cell.new(
                                                                  1
                                                                           )))                                                            ,Cell.new(
                                                              callProcedure( 'cdr',
                                                                  begin
                                                                    if (self.instance_variables.include?(:@_cdr)) then
                                                                      @_cdr
                                                                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                    begin
                                                                        _form
                                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                           ))
                                                                     )))
                                                               ))))
                                              end
                                          else
                                              if ( 
                                                callProcedure( 'eq?',
                                                    begin
                                                      if (self.instance_variables.include?(:@_eq_QMARK)) then
                                                        @_eq_QMARK
                                                      else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:254"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      callProcedure( 'car',
                                                          begin
                                                            if (self.instance_variables.include?(:@_car)) then
                                                              @_car
                                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:257"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            begin
                                                                _form
                                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                            end
                                                                   ))                                                    ,Cell.new(
                                                    :"unquote_splicing"
                                                             )))
                                               ) then
                                                  begin
                                                      callProcedure( 'mcons',
                                                          begin
                                                              _mcons
                                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:257"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            begin
                                                                _form
                                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,Cell.new(
                                                          Cell.new(:"quote",Cell.new(:"unquote_splicing"))                                                          ,Cell.new(
                                                            callProcedure( 'foo',
                                                                begin
                                                                    _foo
                                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:259"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                  callProcedure( '-',
                                                                      begin
                                                                        if (self.instance_variables.include?(:@_minus)) then
                                                                          @_minus
                                                                        else raise NameError.new( "Error: undefined variable _minus", "_minus" ) end
                                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:256"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                      Cell.new(
                                                                        begin
                                                                            _level
                                                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,Cell.new(
                                                                      1
                                                                               )))                                                                ,Cell.new(
                                                                  callProcedure( 'cdr',
                                                                      begin
                                                                        if (self.instance_variables.include?(:@_cdr)) then
                                                                          @_cdr
                                                                        else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                      Cell.new(
                                                                        begin
                                                                            _form
                                                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                                        end
                                                                               ))
                                                                         )))
                                                                   ))))
                                                  end
                                              else
                                                  if ( 
                                                  true
                                                   ) then
                                                      begin
                                                          callProcedure( 'mcons',
                                                              begin
                                                                  _mcons
                                                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:257"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                                begin
                                                                    _form
                                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,Cell.new(
                                                                callProcedure( 'foo',
                                                                    begin
                                                                        _foo
                                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:259"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                    Cell.new(
                                                                      begin
                                                                          _level
                                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,Cell.new(
                                                                      callProcedure( 'car',
                                                                          begin
                                                                            if (self.instance_variables.include?(:@_car)) then
                                                                              @_car
                                                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:257"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                          Cell.new(
                                                                            begin
                                                                                _form
                                                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                                            end
                                                                                   ))
                                                                             )))                                                              ,Cell.new(
                                                                callProcedure( 'foo',
                                                                    begin
                                                                        _foo
                                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:259"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                    Cell.new(
                                                                      begin
                                                                          _level
                                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,Cell.new(
                                                                      callProcedure( 'cdr',
                                                                          begin
                                                                            if (self.instance_variables.include?(:@_cdr)) then
                                                                              @_cdr
                                                                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                          Cell.new(
                                                                            begin
                                                                                _form
                                                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:258"] + __e.backtrace ) ; raise __e
                                                                            end
                                                                                   ))
                                                                             )))
                                                                       ))))
                                                      end
                                                  end
                                              end
                                          end
                                      end
                                  end
                              end
                          end
                      end
                  }
                callProcedure( 'foo',
                    begin
                        _foo
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:259"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                    0                    ,Cell.new(
                      begin
                          _l
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:259"] + __e.backtrace ) ; raise __e
                      end
                             )))
            } ; ___lambda.call(
            nil,nil,nil
                       )
          end
      }
#------------------------------

  @_unquote = 
      LispMacro.new { |_lst| 
        begin raise RuntimeError, "unquote appeared outside quasiquote" ; rescue => __e ;  __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:263"] + __e.backtrace ) ; raise __e ; end 
      }
#------------------------------

  @_unquote_splicing = 
      LispMacro.new { |_lst| 
        begin raise RuntimeError, "unquote-splicing appeared outside quasiquote" ; rescue => __e ;  __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:267"] + __e.backtrace ) ; raise __e ; end 
      }
#------------------------------

  @_when = 
      LispMacro.new { |*__rest__| _form = __rest__[0] ;  
          callProcedure( 'cons',
              begin
                if (self.instance_variables.include?(:@_cons)) then
                  @_cons
                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:221"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
              :"if"              ,Cell.new(
                callProcedure( 'cons',
                    begin
                      if (self.instance_variables.include?(:@_cons)) then
                        @_cons
                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:221"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'car',
                          begin
                            if (self.instance_variables.include?(:@_car)) then
                              @_car
                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:272"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                _form
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:272"] + __e.backtrace ) ; raise __e
                            end
                                   ))                    ,Cell.new(
                      callProcedure( 'cons',
                          begin
                            if (self.instance_variables.include?(:@_cons)) then
                              @_cons
                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:221"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'cons',
                                begin
                                  if (self.instance_variables.include?(:@_cons)) then
                                    @_cons
                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:221"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                :"begin"                                ,Cell.new(
                                  callProcedure( 'cdr',
                                      begin
                                        if (self.instance_variables.include?(:@_cdr)) then
                                          @_cdr
                                        else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:272"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _form
                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:272"] + __e.backtrace ) ; raise __e
                                        end
                                               ))
                                         )))                          ,Cell.new(
                          
                                   )))
                             )))
                       )))
      }
#------------------------------

  @_unless = 
      LispMacro.new { |*__rest__| _form = __rest__[0] ;  
          callProcedure( 'cons',
              begin
                if (self.instance_variables.include?(:@_cons)) then
                  @_cons
                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:221"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
              :"if"              ,Cell.new(
                callProcedure( 'cons',
                    begin
                      if (self.instance_variables.include?(:@_cons)) then
                        @_cons
                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:221"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'cons',
                          begin
                            if (self.instance_variables.include?(:@_cons)) then
                              @_cons
                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:221"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                          :"not"                          ,Cell.new(
                            callProcedure( 'cons',
                                begin
                                  if (self.instance_variables.include?(:@_cons)) then
                                    @_cons
                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:221"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  callProcedure( 'car',
                                      begin
                                        if (self.instance_variables.include?(:@_car)) then
                                          @_car
                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:276"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _form
                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:276"] + __e.backtrace ) ; raise __e
                                        end
                                               ))                                ,Cell.new(
                                
                                         )))
                                   )))                    ,Cell.new(
                      callProcedure( 'cons',
                          begin
                            if (self.instance_variables.include?(:@_cons)) then
                              @_cons
                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:221"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'cons',
                                begin
                                  if (self.instance_variables.include?(:@_cons)) then
                                    @_cons
                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:221"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                :"begin"                                ,Cell.new(
                                  callProcedure( 'cdr',
                                      begin
                                        if (self.instance_variables.include?(:@_cdr)) then
                                          @_cdr
                                        else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:276"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _form
                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:276"] + __e.backtrace ) ; raise __e
                                        end
                                               ))
                                         )))                          ,Cell.new(
                          
                                   )))
                             )))
                       )))
      }
#------------------------------

  @_while = 
      LispMacro.new { |*__rest__| _form = __rest__[0] ;  
          begin
            ___lambda = lambda { |_sym| 
                callProcedure( 'cons',
                    begin
                      if (self.instance_variables.include?(:@_cons)) then
                        @_cons
                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:221"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                    :"begin"                    ,Cell.new(
                      callProcedure( 'cons',
                          begin
                            if (self.instance_variables.include?(:@_cons)) then
                              @_cons
                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:221"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'cons',
                                begin
                                  if (self.instance_variables.include?(:@_cons)) then
                                    @_cons
                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:221"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                :"define"                                ,Cell.new(
                                  callProcedure( 'cons',
                                      begin
                                        if (self.instance_variables.include?(:@_cons)) then
                                          @_cons
                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:221"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _sym
                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:287"] + __e.backtrace ) ; raise __e
                                        end                                      ,Cell.new(
                                        callProcedure( 'cons',
                                            begin
                                              if (self.instance_variables.include?(:@_cons)) then
                                                @_cons
                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:221"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              callProcedure( 'cons',
                                                  begin
                                                    if (self.instance_variables.include?(:@_cons)) then
                                                      @_cons
                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:221"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                  :"lambda"                                                  ,Cell.new(
                                                    callProcedure( 'cons',
                                                        begin
                                                          if (self.instance_variables.include?(:@_cons)) then
                                                            @_cons
                                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:221"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                        Nil.new                                                        ,Cell.new(
                                                          callProcedure( 'cons',
                                                              begin
                                                                if (self.instance_variables.include?(:@_cons)) then
                                                                  @_cons
                                                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:221"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                                callProcedure( 'cons',
                                                                    begin
                                                                      if (self.instance_variables.include?(:@_cons)) then
                                                                        @_cons
                                                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:221"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                    Cell.new(
                                                                    :"if"                                                                    ,Cell.new(
                                                                      callProcedure( 'cons',
                                                                          begin
                                                                            if (self.instance_variables.include?(:@_cons)) then
                                                                              @_cons
                                                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:221"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                          Cell.new(
                                                                            callProcedure( 'car',
                                                                                begin
                                                                                  if (self.instance_variables.include?(:@_car)) then
                                                                                    @_car
                                                                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:284"] + __e.backtrace ) ; raise __e
                                                                                end                                                                              ,
                                                                                Cell.new(
                                                                                  begin
                                                                                      _form
                                                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:285"] + __e.backtrace ) ; raise __e
                                                                                  end
                                                                                         ))                                                                          ,Cell.new(
                                                                            callProcedure( 'cons',
                                                                                begin
                                                                                  if (self.instance_variables.include?(:@_cons)) then
                                                                                    @_cons
                                                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:221"] + __e.backtrace ) ; raise __e
                                                                                end                                                                              ,
                                                                                Cell.new(
                                                                                  callProcedure( 'cons',
                                                                                      begin
                                                                                        if (self.instance_variables.include?(:@_cons)) then
                                                                                          @_cons
                                                                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:221"] + __e.backtrace ) ; raise __e
                                                                                      end                                                                                    ,
                                                                                      Cell.new(
                                                                                      :"begin"                                                                                      ,Cell.new(
                                                                                        callProcedure( 'append',
                                                                                            begin
                                                                                              if (self.instance_variables.include?(:@_append)) then
                                                                                                @_append
                                                                                              else raise NameError.new( "Error: undefined variable _append", "_append" ) end
                                                                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:230"] + __e.backtrace ) ; raise __e
                                                                                            end                                                                                          ,
                                                                                            Cell.new(
                                                                                              callProcedure( 'cdr',
                                                                                                  begin
                                                                                                    if (self.instance_variables.include?(:@_cdr)) then
                                                                                                      @_cdr
                                                                                                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:285"] + __e.backtrace ) ; raise __e
                                                                                                  end                                                                                                ,
                                                                                                  Cell.new(
                                                                                                    begin
                                                                                                        _form
                                                                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:285"] + __e.backtrace ) ; raise __e
                                                                                                    end
                                                                                                           ))                                                                                            ,Cell.new(
                                                                                              callProcedure( 'cons',
                                                                                                  begin
                                                                                                    if (self.instance_variables.include?(:@_cons)) then
                                                                                                      @_cons
                                                                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:221"] + __e.backtrace ) ; raise __e
                                                                                                  end                                                                                                ,
                                                                                                  Cell.new(
                                                                                                    callProcedure( 'cons',
                                                                                                        begin
                                                                                                          if (self.instance_variables.include?(:@_cons)) then
                                                                                                            @_cons
                                                                                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:221"] + __e.backtrace ) ; raise __e
                                                                                                        end                                                                                                      ,
                                                                                                        Cell.new(
                                                                                                          begin
                                                                                                              _sym
                                                                                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:287"] + __e.backtrace ) ; raise __e
                                                                                                          end                                                                                                        ,Cell.new(
                                                                                                        
                                                                                                                 )))                                                                                                  ,Cell.new(
                                                                                                  
                                                                                                           )))
                                                                                                     )))
                                                                                               )))                                                                                ,Cell.new(
                                                                                
                                                                                         )))
                                                                                   )))
                                                                             )))                                                              ,Cell.new(
                                                              
                                                                       )))
                                                                 )))
                                                           )))                                            ,Cell.new(
                                            
                                                     )))
                                               )))
                                         )))                          ,Cell.new(
                            callProcedure( 'cons',
                                begin
                                  if (self.instance_variables.include?(:@_cons)) then
                                    @_cons
                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:221"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  callProcedure( 'cons',
                                      begin
                                        if (self.instance_variables.include?(:@_cons)) then
                                          @_cons
                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:221"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _sym
                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:287"] + __e.backtrace ) ; raise __e
                                        end                                      ,Cell.new(
                                      
                                               )))                                ,Cell.new(
                                
                                         )))
                                   )))
                             )))
            } ; ___lambda.call(
                  callProcedure( 'gensym',
                      begin
                        if (self.instance_variables.include?(:@_gensym)) then
                          @_gensym
                        else raise NameError.new( "Error: undefined variable _gensym", "_gensym" ) end
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:280"] + __e.backtrace ) ; raise __e
                      end                    ,
                    Cell.new(
                               ))
                       )
          end
      }
#------------------------------

  @_until = 
      LispMacro.new { |*__rest__| _form = __rest__[0] ;  
          callProcedure( 'cons',
              begin
                if (self.instance_variables.include?(:@_cons)) then
                  @_cons
                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:221"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
              :"while"              ,Cell.new(
                callProcedure( 'cons',
                    begin
                      if (self.instance_variables.include?(:@_cons)) then
                        @_cons
                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:221"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'cons',
                          begin
                            if (self.instance_variables.include?(:@_cons)) then
                              @_cons
                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:221"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                          :"not"                          ,Cell.new(
                            callProcedure( 'cons',
                                begin
                                  if (self.instance_variables.include?(:@_cons)) then
                                    @_cons
                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:221"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  callProcedure( 'car',
                                      begin
                                        if (self.instance_variables.include?(:@_car)) then
                                          @_car
                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:291"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _form
                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:292"] + __e.backtrace ) ; raise __e
                                        end
                                               ))                                ,Cell.new(
                                
                                         )))
                                   )))                    ,Cell.new(
                      callProcedure( 'cdr',
                          begin
                            if (self.instance_variables.include?(:@_cdr)) then
                              @_cdr
                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:292"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                _form
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:292"] + __e.backtrace ) ; raise __e
                            end
                                   ))
                             )))
                       )))
      }
#------------------------------

  @_let = 
      LispMacro.new { |*__rest__| _lst = __rest__[0] ;  
          if ( 
            callProcedure( 'symbol?',
                begin
                  if (self.instance_variables.include?(:@_symbol_QMARK)) then
                    @_symbol_QMARK
                  else raise NameError.new( "Error: undefined variable _symbol_QMARK", "_symbol_QMARK" ) end
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:297"] + __e.backtrace ) ; raise __e
                end              ,
                Cell.new(
                  callProcedure( 'car',
                      begin
                        if (self.instance_variables.include?(:@_car)) then
                          @_car
                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:297"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                        begin
                            _lst
                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:312"] + __e.backtrace ) ; raise __e
                        end
                               ))
                         ))
           ) then
              callProcedure( 'cons',
                  begin
                    if (self.instance_variables.include?(:@_cons)) then
                      @_cons
                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:221"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"letrec"                  ,Cell.new(
                    callProcedure( 'cons',
                        begin
                          if (self.instance_variables.include?(:@_cons)) then
                            @_cons
                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:221"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          callProcedure( 'cons',
                              begin
                                if (self.instance_variables.include?(:@_cons)) then
                                  @_cons
                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:221"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                callProcedure( 'cons',
                                    begin
                                      if (self.instance_variables.include?(:@_cons)) then
                                        @_cons
                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:221"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      callProcedure( 'first',
                                          begin
                                            if (self.instance_variables.include?(:@_first)) then
                                              @_first
                                            else raise NameError.new( "Error: undefined variable _first", "_first" ) end
                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:305"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                _lst
                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:312"] + __e.backtrace ) ; raise __e
                                            end
                                                   ))                                    ,Cell.new(
                                      callProcedure( 'cons',
                                          begin
                                            if (self.instance_variables.include?(:@_cons)) then
                                              @_cons
                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:221"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            callProcedure( 'cons',
                                                begin
                                                  if (self.instance_variables.include?(:@_cons)) then
                                                    @_cons
                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:221"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                :"lambda"                                                ,Cell.new(
                                                  callProcedure( 'cons',
                                                      begin
                                                        if (self.instance_variables.include?(:@_cons)) then
                                                          @_cons
                                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:221"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        callProcedure( 'map',
                                                            begin
                                                              if (self.instance_variables.include?(:@_map)) then
                                                                @_map
                                                              else raise NameError.new( "Error: undefined variable _map", "_map" ) end
                                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:306"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              Proc.new { |_x| 
                                                                  callProcedure( 'first',
                                                                      begin
                                                                        if (self.instance_variables.include?(:@_first)) then
                                                                          @_first
                                                                        else raise NameError.new( "Error: undefined variable _first", "_first" ) end
                                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:305"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                      Cell.new(
                                                                        begin
                                                                            _x
                                                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                                        end
                                                                               ))
                                                              }                                                            ,Cell.new(
                                                              callProcedure( 'second',
                                                                  begin
                                                                    if (self.instance_variables.include?(:@_second)) then
                                                                      @_second
                                                                    else raise NameError.new( "Error: undefined variable _second", "_second" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:309"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                    begin
                                                                        _lst
                                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:312"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                           ))
                                                                     )))                                                      ,Cell.new(
                                                        callProcedure( 'cons',
                                                            begin
                                                              if (self.instance_variables.include?(:@_cons)) then
                                                                @_cons
                                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:221"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              callProcedure( 'third',
                                                                  begin
                                                                    if (self.instance_variables.include?(:@_third)) then
                                                                      @_third
                                                                    else raise NameError.new( "Error: undefined variable _third", "_third" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:304"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                    begin
                                                                        _lst
                                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:312"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                           ))                                                            ,Cell.new(
                                                            
                                                                     )))
                                                               )))
                                                         )))                                          ,Cell.new(
                                          
                                                   )))
                                             )))                              ,Cell.new(
                              
                                       )))                        ,Cell.new(
                          callProcedure( 'cons',
                              begin
                                if (self.instance_variables.include?(:@_cons)) then
                                  @_cons
                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:221"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                callProcedure( 'cons',
                                    begin
                                      if (self.instance_variables.include?(:@_cons)) then
                                        @_cons
                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:221"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      callProcedure( 'first',
                                          begin
                                            if (self.instance_variables.include?(:@_first)) then
                                              @_first
                                            else raise NameError.new( "Error: undefined variable _first", "_first" ) end
                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:305"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                _lst
                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:312"] + __e.backtrace ) ; raise __e
                                            end
                                                   ))                                    ,Cell.new(
                                      callProcedure( 'map',
                                          begin
                                            if (self.instance_variables.include?(:@_map)) then
                                              @_map
                                            else raise NameError.new( "Error: undefined variable _map", "_map" ) end
                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:306"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            Proc.new { |_x| 
                                                callProcedure( 'second',
                                                    begin
                                                      if (self.instance_variables.include?(:@_second)) then
                                                        @_second
                                                      else raise NameError.new( "Error: undefined variable _second", "_second" ) end
                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:309"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      begin
                                                          _x
                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                      end
                                                             ))
                                            }                                          ,Cell.new(
                                            callProcedure( 'second',
                                                begin
                                                  if (self.instance_variables.include?(:@_second)) then
                                                    @_second
                                                  else raise NameError.new( "Error: undefined variable _second", "_second" ) end
                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:309"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  begin
                                                      _lst
                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:312"] + __e.backtrace ) ; raise __e
                                                  end
                                                         ))
                                                   )))
                                             )))                              ,Cell.new(
                              
                                       )))
                                 )))
                           )))
          else
              callProcedure( 'cons',
                  begin
                    if (self.instance_variables.include?(:@_cons)) then
                      @_cons
                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:221"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"let"                  ,Cell.new(
                    begin
                        _lst
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:312"] + __e.backtrace ) ; raise __e
                    end
                           )))
          end
      }
#------------------------------

  @_generic_member = 
      Proc.new { |_cmp,_obj,_lst| 
          if ( 
            callProcedure( 'null?',
                begin
                  if (self.instance_variables.include?(:@_null_QMARK)) then
                    @_null_QMARK
                  else raise NameError.new( "Error: undefined variable _null_QMARK", "_null_QMARK" ) end
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:321"] + __e.backtrace ) ; raise __e
                end              ,
                Cell.new(
                  begin
                      _lst
                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:323"] + __e.backtrace ) ; raise __e
                  end
                         ))
           ) then
              begin
                false
              end
          else
              if ( 
                callProcedure( 'cmp',
                    begin
                        _cmp
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:323"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          _obj
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:323"] + __e.backtrace ) ; raise __e
                      end                    ,Cell.new(
                      callProcedure( 'car',
                          begin
                            if (self.instance_variables.include?(:@_car)) then
                              @_car
                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:322"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                _lst
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:323"] + __e.backtrace ) ; raise __e
                            end
                                   ))
                             )))
               ) then
                  begin
                      begin
                          _lst
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:323"] + __e.backtrace ) ; raise __e
                      end
                  end
              else
                  if ( 
                  true
                   ) then
                      begin
                          callProcedure( 'generic_member',
                              begin
                                if (self.instance_variables.include?(:@_generic_member)) then
                                  @_generic_member
                                else raise NameError.new( "Error: undefined variable _generic_member", "_generic_member" ) end
                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:323"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    _cmp
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:323"] + __e.backtrace ) ; raise __e
                                end                              ,Cell.new(
                                begin
                                    _obj
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:323"] + __e.backtrace ) ; raise __e
                                end                              ,Cell.new(
                                callProcedure( 'cdr',
                                    begin
                                      if (self.instance_variables.include?(:@_cdr)) then
                                        @_cdr
                                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:323"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          _lst
                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:323"] + __e.backtrace ) ; raise __e
                                      end
                                             ))
                                       ))))
                      end
                  end
              end
          end
      }
#------------------------------

  @_memq = 
      Proc.new { |_obj,_lst| 
          callProcedure( 'generic_member',
              begin
                if (self.instance_variables.include?(:@_generic_member)) then
                  @_generic_member
                else raise NameError.new( "Error: undefined variable _generic_member", "_generic_member" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:326"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                begin
                  if (self.instance_variables.include?(:@_eq_QMARK)) then
                    @_eq_QMARK
                  else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:326"] + __e.backtrace ) ; raise __e
                end              ,Cell.new(
                begin
                    _obj
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:326"] + __e.backtrace ) ; raise __e
                end              ,Cell.new(
                begin
                    _lst
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:326"] + __e.backtrace ) ; raise __e
                end
                       ))))
      }
#------------------------------

  @_memv = 
      Proc.new { |_obj,_lst| 
          callProcedure( 'generic_member',
              begin
                if (self.instance_variables.include?(:@_generic_member)) then
                  @_generic_member
                else raise NameError.new( "Error: undefined variable _generic_member", "_generic_member" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:328"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                begin
                  if (self.instance_variables.include?(:@_eqv_QMARK)) then
                    @_eqv_QMARK
                  else raise NameError.new( "Error: undefined variable _eqv_QMARK", "_eqv_QMARK" ) end
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:328"] + __e.backtrace ) ; raise __e
                end              ,Cell.new(
                begin
                    _obj
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:328"] + __e.backtrace ) ; raise __e
                end              ,Cell.new(
                begin
                    _lst
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:328"] + __e.backtrace ) ; raise __e
                end
                       ))))
      }
#------------------------------

  @_member = 
      Proc.new { |_obj,_lst| 
          callProcedure( 'generic_member',
              begin
                if (self.instance_variables.include?(:@_generic_member)) then
                  @_generic_member
                else raise NameError.new( "Error: undefined variable _generic_member", "_generic_member" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:330"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                begin
                  if (self.instance_variables.include?(:@_equal_QMARK)) then
                    @_equal_QMARK
                  else raise NameError.new( "Error: undefined variable _equal_QMARK", "_equal_QMARK" ) end
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:330"] + __e.backtrace ) ; raise __e
                end              ,Cell.new(
                begin
                    _obj
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:330"] + __e.backtrace ) ; raise __e
                end              ,Cell.new(
                begin
                    _lst
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:330"] + __e.backtrace ) ; raise __e
                end
                       ))))
      }
#------------------------------

  @_generic_assoc = 
      Proc.new { |_cmp,_obj,_alst| 
          if ( 
            callProcedure( 'null?',
                begin
                  if (self.instance_variables.include?(:@_null_QMARK)) then
                    @_null_QMARK
                  else raise NameError.new( "Error: undefined variable _null_QMARK", "_null_QMARK" ) end
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:335"] + __e.backtrace ) ; raise __e
                end              ,
                Cell.new(
                  begin
                      _alst
                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:337"] + __e.backtrace ) ; raise __e
                  end
                         ))
           ) then
              begin
                false
              end
          else
              if ( 
                callProcedure( 'cmp',
                    begin
                        _cmp
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:337"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          _obj
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:337"] + __e.backtrace ) ; raise __e
                      end                    ,Cell.new(
                      callProcedure( 'caar',
                          begin
                            if (self.instance_variables.include?(:@_caar)) then
                              @_caar
                            else raise NameError.new( "Error: undefined variable _caar", "_caar" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:336"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                _alst
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:337"] + __e.backtrace ) ; raise __e
                            end
                                   ))
                             )))
               ) then
                  begin
                      callProcedure( 'car',
                          begin
                            if (self.instance_variables.include?(:@_car)) then
                              @_car
                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:336"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                _alst
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:337"] + __e.backtrace ) ; raise __e
                            end
                                   ))
                  end
              else
                  if ( 
                  true
                   ) then
                      begin
                          callProcedure( 'generic_assoc',
                              begin
                                if (self.instance_variables.include?(:@_generic_assoc)) then
                                  @_generic_assoc
                                else raise NameError.new( "Error: undefined variable _generic_assoc", "_generic_assoc" ) end
                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:337"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    _cmp
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:337"] + __e.backtrace ) ; raise __e
                                end                              ,Cell.new(
                                begin
                                    _obj
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:337"] + __e.backtrace ) ; raise __e
                                end                              ,Cell.new(
                                callProcedure( 'cdr',
                                    begin
                                      if (self.instance_variables.include?(:@_cdr)) then
                                        @_cdr
                                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:337"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          _alst
                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:337"] + __e.backtrace ) ; raise __e
                                      end
                                             ))
                                       ))))
                      end
                  end
              end
          end
      }
#------------------------------

  @_assq = 
      Proc.new { |_obj,_alst| 
          callProcedure( 'generic_assoc',
              begin
                if (self.instance_variables.include?(:@_generic_assoc)) then
                  @_generic_assoc
                else raise NameError.new( "Error: undefined variable _generic_assoc", "_generic_assoc" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:340"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                begin
                  if (self.instance_variables.include?(:@_eq_QMARK)) then
                    @_eq_QMARK
                  else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:340"] + __e.backtrace ) ; raise __e
                end              ,Cell.new(
                begin
                    _obj
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:340"] + __e.backtrace ) ; raise __e
                end              ,Cell.new(
                begin
                    _alst
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:340"] + __e.backtrace ) ; raise __e
                end
                       ))))
      }
#------------------------------

  @_assv = 
      Proc.new { |_obj,_alst| 
          callProcedure( 'generic_assoc',
              begin
                if (self.instance_variables.include?(:@_generic_assoc)) then
                  @_generic_assoc
                else raise NameError.new( "Error: undefined variable _generic_assoc", "_generic_assoc" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:342"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                begin
                  if (self.instance_variables.include?(:@_eqv_QMARK)) then
                    @_eqv_QMARK
                  else raise NameError.new( "Error: undefined variable _eqv_QMARK", "_eqv_QMARK" ) end
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:342"] + __e.backtrace ) ; raise __e
                end              ,Cell.new(
                begin
                    _obj
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:342"] + __e.backtrace ) ; raise __e
                end              ,Cell.new(
                begin
                    _alst
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:342"] + __e.backtrace ) ; raise __e
                end
                       ))))
      }
#------------------------------

  @_assoc = 
      Proc.new { |_obj,_alst| 
          callProcedure( 'generic_assoc',
              begin
                if (self.instance_variables.include?(:@_generic_assoc)) then
                  @_generic_assoc
                else raise NameError.new( "Error: undefined variable _generic_assoc", "_generic_assoc" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:344"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                begin
                  if (self.instance_variables.include?(:@_equal_QMARK)) then
                    @_equal_QMARK
                  else raise NameError.new( "Error: undefined variable _equal_QMARK", "_equal_QMARK" ) end
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:344"] + __e.backtrace ) ; raise __e
                end              ,Cell.new(
                begin
                    _obj
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:344"] + __e.backtrace ) ; raise __e
                end              ,Cell.new(
                begin
                    _alst
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:344"] + __e.backtrace ) ; raise __e
                end
                       ))))
      }
#------------------------------

  @_acons = 
      Proc.new { |_x,_y,_z| 
          callProcedure( 'cons',
              begin
                if (self.instance_variables.include?(:@_cons)) then
                  @_cons
                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:346"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                callProcedure( 'cons',
                    begin
                      if (self.instance_variables.include?(:@_cons)) then
                        @_cons
                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:346"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          _x
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:346"] + __e.backtrace ) ; raise __e
                      end                    ,Cell.new(
                      begin
                          _y
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:346"] + __e.backtrace ) ; raise __e
                      end
                             )))              ,Cell.new(
                begin
                    _z
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:346"] + __e.backtrace ) ; raise __e
                end
                       )))
      }
#------------------------------

  @_assq_ref = 
      Proc.new { |_obj,_alst| 
          if ( 
            @___gensym__32 = 
                callProcedure( 'assq',
                    begin
                      if (self.instance_variables.include?(:@_assq)) then
                        @_assq
                      else raise NameError.new( "Error: undefined variable _assq", "_assq" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:349"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          _obj
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:349"] + __e.backtrace ) ; raise __e
                      end                    ,Cell.new(
                      begin
                          _alst
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:349"] + __e.backtrace ) ; raise __e
                      end
                             )))
           ) then
              callProcedure( 'cdr',
                  begin
                    if (self.instance_variables.include?(:@_cdr)) then
                      @_cdr
                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:349"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    begin
                      if (self.instance_variables.include?(:@___gensym__32)) then
                        @___gensym__32
                      else raise NameError.new( "Error: undefined variable ___gensym__32", "___gensym__32" ) end
                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                    end
                           ))
          else
              if ( 
              true
               ) then
                  begin
                    nil
                  end
              end
          end
      }
#------------------------------

  @_assv_ref = 
      Proc.new { |_obj,_alst| 
          if ( 
            @___gensym__34 = 
                callProcedure( 'assv',
                    begin
                      if (self.instance_variables.include?(:@_assv)) then
                        @_assv
                      else raise NameError.new( "Error: undefined variable _assv", "_assv" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:352"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          _obj
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:352"] + __e.backtrace ) ; raise __e
                      end                    ,Cell.new(
                      begin
                          _alst
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:352"] + __e.backtrace ) ; raise __e
                      end
                             )))
           ) then
              callProcedure( 'cdr',
                  begin
                    if (self.instance_variables.include?(:@_cdr)) then
                      @_cdr
                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:352"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    begin
                      if (self.instance_variables.include?(:@___gensym__34)) then
                        @___gensym__34
                      else raise NameError.new( "Error: undefined variable ___gensym__34", "___gensym__34" ) end
                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                    end
                           ))
          else
              if ( 
              true
               ) then
                  begin
                    nil
                  end
              end
          end
      }
#------------------------------

  @_assoc_ref = 
      Proc.new { |_obj,_alst| 
          if ( 
            @___gensym__36 = 
                callProcedure( 'assoc',
                    begin
                      if (self.instance_variables.include?(:@_assoc)) then
                        @_assoc
                      else raise NameError.new( "Error: undefined variable _assoc", "_assoc" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:355"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          _obj
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:355"] + __e.backtrace ) ; raise __e
                      end                    ,Cell.new(
                      begin
                          _alst
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:355"] + __e.backtrace ) ; raise __e
                      end
                             )))
           ) then
              callProcedure( 'cdr',
                  begin
                    if (self.instance_variables.include?(:@_cdr)) then
                      @_cdr
                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:355"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    begin
                      if (self.instance_variables.include?(:@___gensym__36)) then
                        @___gensym__36
                      else raise NameError.new( "Error: undefined variable ___gensym__36", "___gensym__36" ) end
                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                    end
                           ))
          else
              if ( 
              true
               ) then
                  begin
                    nil
                  end
              end
          end
      }
#------------------------------

  @_map = 
      Proc.new { |_pred,_lst| 
          if ( 
            callProcedure( 'null?',
                begin
                  if (self.instance_variables.include?(:@_null_QMARK)) then
                    @_null_QMARK
                  else raise NameError.new( "Error: undefined variable _null_QMARK", "_null_QMARK" ) end
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:363"] + __e.backtrace ) ; raise __e
                end              ,
                Cell.new(
                  begin
                      _lst
                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:367"] + __e.backtrace ) ; raise __e
                  end
                         ))
           ) then
            Nil.new
          else
              callProcedure( 'cons',
                  begin
                    if (self.instance_variables.include?(:@_cons)) then
                      @_cons
                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:365"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    callProcedure( 'pred',
                        begin
                            _pred
                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:367"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          callProcedure( 'car',
                              begin
                                if (self.instance_variables.include?(:@_car)) then
                                  @_car
                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:366"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    _lst
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:367"] + __e.backtrace ) ; raise __e
                                end
                                       ))
                                 ))                  ,Cell.new(
                    callProcedure( 'map',
                        begin
                          if (self.instance_variables.include?(:@_map)) then
                            @_map
                          else raise NameError.new( "Error: undefined variable _map", "_map" ) end
                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:367"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              _pred
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:367"] + __e.backtrace ) ; raise __e
                          end                        ,Cell.new(
                          callProcedure( 'cdr',
                              begin
                                if (self.instance_variables.include?(:@_cdr)) then
                                  @_cdr
                                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:367"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    _lst
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:367"] + __e.backtrace ) ; raise __e
                                end
                                       ))
                                 )))
                           )))
          end
      }
#------------------------------

  @_for_each = 
      begin
        if (self.instance_variables.include?(:@_map)) then
          @_map
        else raise NameError.new( "Error: undefined variable _map", "_map" ) end
        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:368"] + __e.backtrace ) ; raise __e
      end
#------------------------------

  @_filter = 
      Proc.new { |_pred,_lst| 
          if ( 
            callProcedure( 'null?',
                begin
                  if (self.instance_variables.include?(:@_null_QMARK)) then
                    @_null_QMARK
                  else raise NameError.new( "Error: undefined variable _null_QMARK", "_null_QMARK" ) end
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:371"] + __e.backtrace ) ; raise __e
                end              ,
                Cell.new(
                  begin
                      _lst
                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:377"] + __e.backtrace ) ; raise __e
                  end
                         ))
           ) then
            Nil.new
          else
              if ( 
                callProcedure( 'pred',
                    begin
                        _pred
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:377"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      callProcedure( 'car',
                          begin
                            if (self.instance_variables.include?(:@_car)) then
                              @_car
                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:375"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                _lst
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:377"] + __e.backtrace ) ; raise __e
                            end
                                   ))
                             ))
               ) then
                  callProcedure( 'cons',
                      begin
                        if (self.instance_variables.include?(:@_cons)) then
                          @_cons
                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:374"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                        callProcedure( 'car',
                            begin
                              if (self.instance_variables.include?(:@_car)) then
                                @_car
                              else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:375"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  _lst
                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:377"] + __e.backtrace ) ; raise __e
                              end
                                     ))                      ,Cell.new(
                        callProcedure( 'filter',
                            begin
                              if (self.instance_variables.include?(:@_filter)) then
                                @_filter
                              else raise NameError.new( "Error: undefined variable _filter", "_filter" ) end
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:377"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  _pred
                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:377"] + __e.backtrace ) ; raise __e
                              end                            ,Cell.new(
                              callProcedure( 'cdr',
                                  begin
                                    if (self.instance_variables.include?(:@_cdr)) then
                                      @_cdr
                                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:377"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        _lst
                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:377"] + __e.backtrace ) ; raise __e
                                    end
                                           ))
                                     )))
                               )))
              else
                  callProcedure( 'filter',
                      begin
                        if (self.instance_variables.include?(:@_filter)) then
                          @_filter
                        else raise NameError.new( "Error: undefined variable _filter", "_filter" ) end
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:377"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                        begin
                            _pred
                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:377"] + __e.backtrace ) ; raise __e
                        end                      ,Cell.new(
                        callProcedure( 'cdr',
                            begin
                              if (self.instance_variables.include?(:@_cdr)) then
                                @_cdr
                              else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:377"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  _lst
                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:377"] + __e.backtrace ) ; raise __e
                              end
                                     ))
                               )))
              end
          end
      }
#------------------------------

  @_filter_map = 
      Proc.new { |_pred,_lst| 
          if ( 
            callProcedure( 'null?',
                begin
                  if (self.instance_variables.include?(:@_null_QMARK)) then
                    @_null_QMARK
                  else raise NameError.new( "Error: undefined variable _null_QMARK", "_null_QMARK" ) end
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:381"] + __e.backtrace ) ; raise __e
                end              ,
                Cell.new(
                  begin
                      _lst
                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:388"] + __e.backtrace ) ; raise __e
                  end
                         ))
           ) then
            Nil.new
          else
              begin
                ___lambda = lambda { |_result| 
                    if ( 
                      begin
                          _result
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:386"] + __e.backtrace ) ; raise __e
                      end
                     ) then
                        callProcedure( 'cons',
                            begin
                              if (self.instance_variables.include?(:@_cons)) then
                                @_cons
                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:385"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  _result
                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:386"] + __e.backtrace ) ; raise __e
                              end                            ,Cell.new(
                              callProcedure( 'filter_map',
                                  begin
                                    if (self.instance_variables.include?(:@_filter_map)) then
                                      @_filter_map
                                    else raise NameError.new( "Error: undefined variable _filter_map", "_filter_map" ) end
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:388"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        _pred
                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:388"] + __e.backtrace ) ; raise __e
                                    end                                  ,Cell.new(
                                    callProcedure( 'cdr',
                                        begin
                                          if (self.instance_variables.include?(:@_cdr)) then
                                            @_cdr
                                          else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:388"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          begin
                                              _lst
                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:388"] + __e.backtrace ) ; raise __e
                                          end
                                                 ))
                                           )))
                                     )))
                    else
                        callProcedure( 'filter_map',
                            begin
                              if (self.instance_variables.include?(:@_filter_map)) then
                                @_filter_map
                              else raise NameError.new( "Error: undefined variable _filter_map", "_filter_map" ) end
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:388"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  _pred
                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:388"] + __e.backtrace ) ; raise __e
                              end                            ,Cell.new(
                              callProcedure( 'cdr',
                                  begin
                                    if (self.instance_variables.include?(:@_cdr)) then
                                      @_cdr
                                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:388"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        _lst
                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:388"] + __e.backtrace ) ; raise __e
                                    end
                                           ))
                                     )))
                    end
                } ; ___lambda.call(
                      callProcedure( 'pred',
                          begin
                              _pred
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:388"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'car',
                                begin
                                  if (self.instance_variables.include?(:@_car)) then
                                    @_car
                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:383"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _lst
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:388"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                                   ))
                           )
              end
          end
      }
#------------------------------

  @_lambda = 
      LispMacro.new { |*__rest__| _src = __rest__[0] ;  
          if ( 
            callProcedure( 'not',
                begin
                  if (self.instance_variables.include?(:@_not)) then
                    @_not
                  else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:407"] + __e.backtrace ) ; raise __e
                end              ,
                Cell.new(
                  callProcedure( 'list?',
                      begin
                        if (self.instance_variables.include?(:@_list_QMARK)) then
                          @_list_QMARK
                        else raise NameError.new( "Error: undefined variable _list_QMARK", "_list_QMARK" ) end
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:396"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                        callProcedure( 'cadr',
                            begin
                              if (self.instance_variables.include?(:@_cadr)) then
                                @_cadr
                              else raise NameError.new( "Error: undefined variable _cadr", "_cadr" ) end
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:417"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  _src
                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:422"] + __e.backtrace ) ; raise __e
                              end
                                     ))
                               ))
                         ))
           ) then
              callProcedure( 'cons',
                  begin
                    if (self.instance_variables.include?(:@_cons)) then
                      @_cons
                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:385"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"lambda"                  ,Cell.new(
                    begin
                        _src
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:422"] + __e.backtrace ) ; raise __e
                    end
                           )))
          else
              begin
                ___lambda = lambda { |_body| 
                    if ( 
                      callProcedure( 'not',
                          begin
                            if (self.instance_variables.include?(:@_not)) then
                              @_not
                            else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:407"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'list?',
                                begin
                                  if (self.instance_variables.include?(:@_list_QMARK)) then
                                    @_list_QMARK
                                  else raise NameError.new( "Error: undefined variable _list_QMARK", "_list_QMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:396"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  callProcedure( 'car',
                                      begin
                                        if (self.instance_variables.include?(:@_car)) then
                                          @_car
                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:412"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _body
                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:409"] + __e.backtrace ) ; raise __e
                                        end
                                               ))
                                         ))
                                   ))
                     ) then
                        callProcedure( 'cons',
                            begin
                              if (self.instance_variables.include?(:@_cons)) then
                                @_cons
                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:385"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                            :"lambda"                            ,Cell.new(
                              begin
                                  _src
                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:422"] + __e.backtrace ) ; raise __e
                              end
                                     )))
                    else
                        begin
                          ___lambda = lambda { |_defs,_rest| 
                              if ( 
                                callProcedure( '<',
                                    begin
                                      if (self.instance_variables.include?(:@_lt_QMARK)) then
                                        @_lt_QMARK
                                      else raise NameError.new( "Error: undefined variable _lt_QMARK", "_lt_QMARK" ) end
                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:410"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                    0                                    ,Cell.new(
                                      callProcedure( 'length',
                                          begin
                                            if (self.instance_variables.include?(:@_length)) then
                                              @_length
                                            else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:410"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                _defs
                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:419"] + __e.backtrace ) ; raise __e
                                            end
                                                   ))
                                             )))
                               ) then
                                  callProcedure( 'cons',
                                      begin
                                        if (self.instance_variables.include?(:@_cons)) then
                                          @_cons
                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:385"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                      :"lambda"                                      ,Cell.new(
                                        callProcedure( 'cons',
                                            begin
                                              if (self.instance_variables.include?(:@_cons)) then
                                                @_cons
                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:385"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              callProcedure( 'car',
                                                  begin
                                                    if (self.instance_variables.include?(:@_car)) then
                                                      @_car
                                                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:412"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    begin
                                                        _src
                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:422"] + __e.backtrace ) ; raise __e
                                                    end
                                                           ))                                            ,Cell.new(
                                              callProcedure( 'cons',
                                                  begin
                                                    if (self.instance_variables.include?(:@_cons)) then
                                                      @_cons
                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:385"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    callProcedure( 'cons',
                                                        begin
                                                          if (self.instance_variables.include?(:@_cons)) then
                                                            @_cons
                                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:385"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                        :"letrec"                                                        ,Cell.new(
                                                          callProcedure( 'cons',
                                                              begin
                                                                if (self.instance_variables.include?(:@_cons)) then
                                                                  @_cons
                                                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:385"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                                callProcedure( 'map',
                                                                    begin
                                                                      if (self.instance_variables.include?(:@_map)) then
                                                                        @_map
                                                                      else raise NameError.new( "Error: undefined variable _map", "_map" ) end
                                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:414"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                    Cell.new(
                                                                      Proc.new { |_x| 
                                                                          callProcedure( 'list',
                                                                              begin
                                                                                if (self.instance_variables.include?(:@_list)) then
                                                                                  @_list
                                                                                else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:416"] + __e.backtrace ) ; raise __e
                                                                              end                                                                            ,
                                                                              Cell.new(
                                                                                callProcedure( 'cadr',
                                                                                    begin
                                                                                      if (self.instance_variables.include?(:@_cadr)) then
                                                                                        @_cadr
                                                                                      else raise NameError.new( "Error: undefined variable _cadr", "_cadr" ) end
                                                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:417"] + __e.backtrace ) ; raise __e
                                                                                    end                                                                                  ,
                                                                                    Cell.new(
                                                                                      begin
                                                                                          _x
                                                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:418"] + __e.backtrace ) ; raise __e
                                                                                      end
                                                                                             ))                                                                              ,Cell.new(
                                                                                callProcedure( 'caddr',
                                                                                    begin
                                                                                      if (self.instance_variables.include?(:@_caddr)) then
                                                                                        @_caddr
                                                                                      else raise NameError.new( "Error: undefined variable _caddr", "_caddr" ) end
                                                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:418"] + __e.backtrace ) ; raise __e
                                                                                    end                                                                                  ,
                                                                                    Cell.new(
                                                                                      begin
                                                                                          _x
                                                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:418"] + __e.backtrace ) ; raise __e
                                                                                      end
                                                                                             ))
                                                                                       )))
                                                                      }                                                                    ,Cell.new(
                                                                      begin
                                                                          _defs
                                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:419"] + __e.backtrace ) ; raise __e
                                                                      end
                                                                             )))                                                              ,Cell.new(
                                                                begin
                                                                    _rest
                                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:420"] + __e.backtrace ) ; raise __e
                                                                end
                                                                       )))
                                                                 )))                                                  ,Cell.new(
                                                  
                                                           )))
                                                     )))
                                               )))
                              else
                                  callProcedure( 'cons',
                                      begin
                                        if (self.instance_variables.include?(:@_cons)) then
                                          @_cons
                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:385"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                      :"lambda"                                      ,Cell.new(
                                        begin
                                            _src
                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:422"] + __e.backtrace ) ; raise __e
                                        end
                                               )))
                              end
                          } ; ___lambda.call(
                                callProcedure( 'filter',
                                    begin
                                      if (self.instance_variables.include?(:@_filter)) then
                                        @_filter
                                      else raise NameError.new( "Error: undefined variable _filter", "_filter" ) end
                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:405"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      Proc.new { |_x| 
                                          if ( 
                                            callProcedure( 'not',
                                                begin
                                                  if (self.instance_variables.include?(:@_not)) then
                                                    @_not
                                                  else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:407"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  callProcedure( 'eq?',
                                                      begin
                                                        if (self.instance_variables.include?(:@_eq_QMARK)) then
                                                          @_eq_QMARK
                                                        else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:407"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                      false                                                      ,Cell.new(
                                                        callProcedure( 'eq?',
                                                            begin
                                                              if (self.instance_variables.include?(:@_eq_QMARK)) then
                                                                @_eq_QMARK
                                                              else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:407"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                            :"define"                                                            ,Cell.new(
                                                              callProcedure( 'car',
                                                                  begin
                                                                    if (self.instance_variables.include?(:@_car)) then
                                                                      @_car
                                                                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:412"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                    begin
                                                                        _x
                                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:418"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                           ))
                                                                     )))
                                                               )))
                                                         ))
                                           ) then
                                              callProcedure( 'symbol?',
                                                  begin
                                                    if (self.instance_variables.include?(:@_symbol_QMARK)) then
                                                      @_symbol_QMARK
                                                    else raise NameError.new( "Error: undefined variable _symbol_QMARK", "_symbol_QMARK" ) end
                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:408"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    callProcedure( 'cadr',
                                                        begin
                                                          if (self.instance_variables.include?(:@_cadr)) then
                                                            @_cadr
                                                          else raise NameError.new( "Error: undefined variable _cadr", "_cadr" ) end
                                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:417"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                          begin
                                                              _x
                                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:418"] + __e.backtrace ) ; raise __e
                                                          end
                                                                 ))
                                                           ))
                                          else
                                            false
                                          end
                                      }                                    ,Cell.new(
                                      begin
                                          _body
                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:409"] + __e.backtrace ) ; raise __e
                                      end
                                             )))                              ,
                                callProcedure( 'filter',
                                    begin
                                      if (self.instance_variables.include?(:@_filter)) then
                                        @_filter
                                      else raise NameError.new( "Error: undefined variable _filter", "_filter" ) end
                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:405"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      Proc.new { |_x| 
                                          callProcedure( 'not',
                                              begin
                                                if (self.instance_variables.include?(:@_not)) then
                                                  @_not
                                                else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:407"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                if ( 
                                                  callProcedure( 'not',
                                                      begin
                                                        if (self.instance_variables.include?(:@_not)) then
                                                          @_not
                                                        else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:407"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        callProcedure( 'eq?',
                                                            begin
                                                              if (self.instance_variables.include?(:@_eq_QMARK)) then
                                                                @_eq_QMARK
                                                              else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:407"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                            false                                                            ,Cell.new(
                                                              callProcedure( 'eq?',
                                                                  begin
                                                                    if (self.instance_variables.include?(:@_eq_QMARK)) then
                                                                      @_eq_QMARK
                                                                    else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:407"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                  :"define"                                                                  ,Cell.new(
                                                                    callProcedure( 'car',
                                                                        begin
                                                                          if (self.instance_variables.include?(:@_car)) then
                                                                            @_car
                                                                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:412"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                        Cell.new(
                                                                          begin
                                                                              _x
                                                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:418"] + __e.backtrace ) ; raise __e
                                                                          end
                                                                                 ))
                                                                           )))
                                                                     )))
                                                               ))
                                                 ) then
                                                    callProcedure( 'symbol?',
                                                        begin
                                                          if (self.instance_variables.include?(:@_symbol_QMARK)) then
                                                            @_symbol_QMARK
                                                          else raise NameError.new( "Error: undefined variable _symbol_QMARK", "_symbol_QMARK" ) end
                                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:408"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                          callProcedure( 'cadr',
                                                              begin
                                                                if (self.instance_variables.include?(:@_cadr)) then
                                                                  @_cadr
                                                                else raise NameError.new( "Error: undefined variable _cadr", "_cadr" ) end
                                                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:417"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                                begin
                                                                    _x
                                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:418"] + __e.backtrace ) ; raise __e
                                                                end
                                                                       ))
                                                                 ))
                                                else
                                                  false
                                                end
                                                       ))
                                      }                                    ,Cell.new(
                                      begin
                                          _body
                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:409"] + __e.backtrace ) ; raise __e
                                      end
                                             )))
                                     )
                        end
                    end
                } ; ___lambda.call(
                      callProcedure( 'cdr',
                          begin
                            if (self.instance_variables.include?(:@_cdr)) then
                              @_cdr
                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:395"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                _src
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:422"] + __e.backtrace ) ; raise __e
                            end
                                   ))
                           )
              end
          end
      }
#------------------------------

  @_case = 
      LispMacro.new { |_cond_exp,*__rest__| _body = __rest__[0] ;  
          begin
            ___lambda = lambda { |_case_block,_case_iter| 
                _case_block                 = 
                  Proc.new { |_val,*__rest__| _elem = __rest__[0] ;  
                      begin
                        ___lambda = lambda { |_block| 
                            begin
                              ___lambda = lambda { |_cond_vals,_body| 
                                  begin
                                    ___lambda = lambda { |_v| 
                                        callProcedure( 'cons',
                                            begin
                                              if (self.instance_variables.include?(:@_cons)) then
                                                @_cons
                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:438"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              callProcedure( 'cons',
                                                  begin
                                                    if (self.instance_variables.include?(:@_cons)) then
                                                      @_cons
                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:438"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    begin
                                                        _v
                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:443"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,Cell.new(
                                                    begin
                                                        _body
                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:460"] + __e.backtrace ) ; raise __e
                                                    end
                                                           )))                                            ,Cell.new(
                                            
                                                     )))
                                    } ; ___lambda.call(
                                          if ( 
                                            callProcedure( 'eq?',
                                                begin
                                                  if (self.instance_variables.include?(:@_eq_QMARK)) then
                                                    @_eq_QMARK
                                                  else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:451"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                :"else"                                                ,Cell.new(
                                                  begin
                                                      _cond_vals
                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:442"] + __e.backtrace ) ; raise __e
                                                  end
                                                         )))
                                           ) then
                                              begin
                                                  _cond_vals
                                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:442"] + __e.backtrace ) ; raise __e
                                              end
                                          else
                                              callProcedure( 'cons',
                                                  begin
                                                    if (self.instance_variables.include?(:@_cons)) then
                                                      @_cons
                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:438"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                  :"or"                                                  ,Cell.new(
                                                    callProcedure( 'map',
                                                        begin
                                                          if (self.instance_variables.include?(:@_map)) then
                                                            @_map
                                                          else raise NameError.new( "Error: undefined variable _map", "_map" ) end
                                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:439"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                          Proc.new { |_x| 
                                                              callProcedure( 'cons',
                                                                  begin
                                                                    if (self.instance_variables.include?(:@_cons)) then
                                                                      @_cons
                                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:438"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                  :"eqv?"                                                                  ,Cell.new(
                                                                    callProcedure( 'cons',
                                                                        begin
                                                                          if (self.instance_variables.include?(:@_cons)) then
                                                                            @_cons
                                                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:438"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                        Cell.new(
                                                                          begin
                                                                              _x
                                                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:441"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,Cell.new(
                                                                          callProcedure( 'cons',
                                                                              begin
                                                                                if (self.instance_variables.include?(:@_cons)) then
                                                                                  @_cons
                                                                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:438"] + __e.backtrace ) ; raise __e
                                                                              end                                                                            ,
                                                                              Cell.new(
                                                                                begin
                                                                                    _val
                                                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:455"] + __e.backtrace ) ; raise __e
                                                                                end                                                                              ,Cell.new(
                                                                              
                                                                                       )))
                                                                                 )))
                                                                           )))
                                                          }                                                        ,Cell.new(
                                                          begin
                                                              _cond_vals
                                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:442"] + __e.backtrace ) ; raise __e
                                                          end
                                                                 )))
                                                           )))
                                          end
                                               )
                                  end
                              } ; ___lambda.call(
                                    callProcedure( 'car',
                                        begin
                                          if (self.instance_variables.include?(:@_car)) then
                                            @_car
                                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:454"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          begin
                                              _block
                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:434"] + __e.backtrace ) ; raise __e
                                          end
                                                 ))                                  ,
                                    callProcedure( 'cdr',
                                        begin
                                          if (self.instance_variables.include?(:@_cdr)) then
                                            @_cdr
                                          else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:455"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          begin
                                              _block
                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:434"] + __e.backtrace ) ; raise __e
                                          end
                                                 ))
                                         )
                            end
                        } ; ___lambda.call(
                              callProcedure( 'car',
                                  begin
                                    if (self.instance_variables.include?(:@_car)) then
                                      @_car
                                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:454"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        _elem
                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:432"] + __e.backtrace ) ; raise __e
                                    end
                                           ))
                                   )
                      end
                  }
                _case_iter                 = 
                  Proc.new { |_val,_lst| 
                      if ( 
                        callProcedure( 'eq?',
                            begin
                              if (self.instance_variables.include?(:@_eq_QMARK)) then
                                @_eq_QMARK
                              else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:451"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                            0                            ,Cell.new(
                              callProcedure( 'length',
                                  begin
                                    if (self.instance_variables.include?(:@_length)) then
                                      @_length
                                    else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:451"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        _lst
                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:455"] + __e.backtrace ) ; raise __e
                                    end
                                           ))
                                     )))
                       ) then
                          begin
                            Nil.new
                          end
                      else
                          if ( 
                            callProcedure( 'eq?',
                                begin
                                  if (self.instance_variables.include?(:@_eq_QMARK)) then
                                    @_eq_QMARK
                                  else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:451"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                1                                ,Cell.new(
                                  callProcedure( 'length',
                                      begin
                                        if (self.instance_variables.include?(:@_length)) then
                                          @_length
                                        else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:451"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _lst
                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:455"] + __e.backtrace ) ; raise __e
                                        end
                                               ))
                                         )))
                           ) then
                              begin
                                  callProcedure( 'case_block',
                                      begin
                                          _case_block
                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:454"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _val
                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:455"] + __e.backtrace ) ; raise __e
                                        end                                      ,Cell.new(
                                        callProcedure( 'car',
                                            begin
                                              if (self.instance_variables.include?(:@_car)) then
                                                @_car
                                              else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:454"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              begin
                                                  _lst
                                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:455"] + __e.backtrace ) ; raise __e
                                              end
                                                     ))
                                               )))
                              end
                          else
                              if ( 
                              true
                               ) then
                                  begin
                                      callProcedure( 'append',
                                          begin
                                            if (self.instance_variables.include?(:@_append)) then
                                              @_append
                                            else raise NameError.new( "Error: undefined variable _append", "_append" ) end
                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:454"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            callProcedure( 'case_block',
                                                begin
                                                    _case_block
                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:454"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  begin
                                                      _val
                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:455"] + __e.backtrace ) ; raise __e
                                                  end                                                ,Cell.new(
                                                  callProcedure( 'car',
                                                      begin
                                                        if (self.instance_variables.include?(:@_car)) then
                                                          @_car
                                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:454"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        begin
                                                            _lst
                                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:455"] + __e.backtrace ) ; raise __e
                                                        end
                                                               ))
                                                         )))                                          ,Cell.new(
                                            callProcedure( 'case_iter',
                                                begin
                                                    _case_iter
                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:460"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  begin
                                                      _val
                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:455"] + __e.backtrace ) ; raise __e
                                                  end                                                ,Cell.new(
                                                  callProcedure( 'cdr',
                                                      begin
                                                        if (self.instance_variables.include?(:@_cdr)) then
                                                          @_cdr
                                                        else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:455"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        begin
                                                            _lst
                                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:455"] + __e.backtrace ) ; raise __e
                                                        end
                                                               ))
                                                         )))
                                                   )))
                                  end
                              end
                          end
                      end
                  }
                begin
                  ___lambda = lambda { |_sym| 
                      callProcedure( 'cons',
                          begin
                            if (self.instance_variables.include?(:@_cons)) then
                              @_cons
                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:438"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                          :"let1"                          ,Cell.new(
                            callProcedure( 'cons',
                                begin
                                  if (self.instance_variables.include?(:@_cons)) then
                                    @_cons
                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:438"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _sym
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:460"] + __e.backtrace ) ; raise __e
                                  end                                ,Cell.new(
                                  callProcedure( 'cons',
                                      begin
                                        if (self.instance_variables.include?(:@_cons)) then
                                          @_cons
                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:438"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            _cond_exp
                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:458"] + __e.backtrace ) ; raise __e
                                        end                                      ,Cell.new(
                                        callProcedure( 'cons',
                                            begin
                                              if (self.instance_variables.include?(:@_cons)) then
                                                @_cons
                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:438"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              callProcedure( 'cons',
                                                  begin
                                                    if (self.instance_variables.include?(:@_cons)) then
                                                      @_cons
                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:438"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                  :"cond"                                                  ,Cell.new(
                                                    callProcedure( 'case_iter',
                                                        begin
                                                            _case_iter
                                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:460"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                          begin
                                                              _sym
                                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:460"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,Cell.new(
                                                          begin
                                                              _body
                                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:460"] + __e.backtrace ) ; raise __e
                                                          end
                                                                 )))
                                                           )))                                            ,Cell.new(
                                            
                                                     )))
                                               )))
                                         )))
                                   )))
                  } ; ___lambda.call(
                        callProcedure( 'gensym',
                            begin
                              if (self.instance_variables.include?(:@_gensym)) then
                                @_gensym
                              else raise NameError.new( "Error: undefined variable _gensym", "_gensym" ) end
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:457"] + __e.backtrace ) ; raise __e
                            end                          ,
                          Cell.new(
                                     ))
                             )
                end
            } ; ___lambda.call(
            nil,nil
                       )
          end
      }
#------------------------------

  @_let_AMARK = 
      LispMacro.new { |_exps,*__rest__| _body = __rest__[0] ;  
          begin
            ___lambda = lambda { |_let_AMARK_expand| 
                _let_AMARK_expand                 = 
                  Proc.new { |_rest,_body| 
                      begin
                        ___lambda = lambda { |___gensym__40| 
                            if ( 
                              begin
                                ___lambda = lambda { |___gensym__44| 
                                    if ( 
                                      begin
                                          ___gensym__44
                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                      end
                                     ) then
                                        begin
                                            ___gensym__44
                                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                        end
                                    else
                                      false
                                    end
                                } ; ___lambda.call(
                                      callProcedure( 'eqv?',
                                          begin
                                            if (self.instance_variables.include?(:@_eqv_QMARK)) then
                                              @_eqv_QMARK
                                            else raise NameError.new( "Error: undefined variable _eqv_QMARK", "_eqv_QMARK" ) end
                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:441"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                          0                                          ,Cell.new(
                                            begin
                                                ___gensym__40
                                              rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                            end
                                                   )))
                                           )
                              end
                             ) then
                                begin
                                  Nil.new
                                end
                            else
                                if ( 
                                  begin
                                    ___lambda = lambda { |___gensym__45| 
                                        if ( 
                                          begin
                                              ___gensym__45
                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                          end
                                         ) then
                                            begin
                                                ___gensym__45
                                              rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                            end
                                        else
                                          false
                                        end
                                    } ; ___lambda.call(
                                          callProcedure( 'eqv?',
                                              begin
                                                if (self.instance_variables.include?(:@_eqv_QMARK)) then
                                                  @_eqv_QMARK
                                                else raise NameError.new( "Error: undefined variable _eqv_QMARK", "_eqv_QMARK" ) end
                                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:441"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                              1                                              ,Cell.new(
                                                begin
                                                    ___gensym__40
                                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                end
                                                       )))
                                               )
                                  end
                                 ) then
                                    begin
                                        callProcedure( 'cons',
                                            begin
                                              if (self.instance_variables.include?(:@_cons)) then
                                                @_cons
                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:438"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                            :"let"                                            ,Cell.new(
                                              callProcedure( 'cons',
                                                  begin
                                                    if (self.instance_variables.include?(:@_cons)) then
                                                      @_cons
                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:438"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    callProcedure( 'cons',
                                                        begin
                                                          if (self.instance_variables.include?(:@_cons)) then
                                                            @_cons
                                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:438"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                          callProcedure( 'car',
                                                              begin
                                                                if (self.instance_variables.include?(:@_car)) then
                                                                  @_car
                                                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:474"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                                begin
                                                                    _rest
                                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:475"] + __e.backtrace ) ; raise __e
                                                                end
                                                                       ))                                                        ,Cell.new(
                                                        
                                                                 )))                                                  ,Cell.new(
                                                    begin
                                                        _body
                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:477"] + __e.backtrace ) ; raise __e
                                                    end
                                                           )))
                                                     )))
                                    end
                                else
                                    if ( 
                                    true
                                     ) then
                                        begin
                                            callProcedure( 'cons',
                                                begin
                                                  if (self.instance_variables.include?(:@_cons)) then
                                                    @_cons
                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:438"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                :"let"                                                ,Cell.new(
                                                  callProcedure( 'cons',
                                                      begin
                                                        if (self.instance_variables.include?(:@_cons)) then
                                                          @_cons
                                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:438"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        callProcedure( 'cons',
                                                            begin
                                                              if (self.instance_variables.include?(:@_cons)) then
                                                                @_cons
                                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:438"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              callProcedure( 'car',
                                                                  begin
                                                                    if (self.instance_variables.include?(:@_car)) then
                                                                      @_car
                                                                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:474"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                    begin
                                                                        _rest
                                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:475"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                           ))                                                            ,Cell.new(
                                                            
                                                                     )))                                                      ,Cell.new(
                                                        callProcedure( 'cons',
                                                            begin
                                                              if (self.instance_variables.include?(:@_cons)) then
                                                                @_cons
                                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:438"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              callProcedure( 'let*_expand',
                                                                  begin
                                                                      _let_AMARK_expand
                                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:477"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                    callProcedure( 'cdr',
                                                                        begin
                                                                          if (self.instance_variables.include?(:@_cdr)) then
                                                                            @_cdr
                                                                          else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:475"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                        Cell.new(
                                                                          begin
                                                                              _rest
                                                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:475"] + __e.backtrace ) ; raise __e
                                                                          end
                                                                                 ))                                                                  ,Cell.new(
                                                                    begin
                                                                        _body
                                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:477"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                           )))                                                            ,Cell.new(
                                                            
                                                                     )))
                                                               )))
                                                         )))
                                        end
                                    end
                                end
                            end
                        } ; ___lambda.call(
                              callProcedure( 'length',
                                  begin
                                    if (self.instance_variables.include?(:@_length)) then
                                      @_length
                                    else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:467"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        _rest
                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:475"] + __e.backtrace ) ; raise __e
                                    end
                                           ))
                                   )
                      end
                  }
                callProcedure( 'let*_expand',
                    begin
                        _let_AMARK_expand
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:477"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          _exps
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:477"] + __e.backtrace ) ; raise __e
                      end                    ,Cell.new(
                      begin
                          _body
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:477"] + __e.backtrace ) ; raise __e
                      end
                             )))
            } ; ___lambda.call(
            nil
                       )
          end
      }
#------------------------------

  @_dot_operator = 
      LispMacro.new { |*__rest__| _lst = __rest__[0] ;  
          begin
            ___lambda = lambda { |_dot_operator_iter| 
                _dot_operator_iter                 = 
                  Proc.new { |_lst| 
                      if ( 
                        callProcedure( 'null?',
                            begin
                              if (self.instance_variables.include?(:@_null_QMARK)) then
                                @_null_QMARK
                              else raise NameError.new( "Error: undefined variable _null_QMARK", "_null_QMARK" ) end
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:489"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  _lst
                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:516"] + __e.backtrace ) ; raise __e
                              end
                                     ))
                       ) then
                          begin
                            Nil.new
                          end
                      else
                          if ( 
                            callProcedure( 'pair?',
                                begin
                                  if (self.instance_variables.include?(:@_pair_QMARK)) then
                                    @_pair_QMARK
                                  else raise NameError.new( "Error: undefined variable _pair_QMARK", "_pair_QMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:497"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _lst
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:516"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                           ) then
                              begin
                                  if ( 
                                    callProcedure( 'eq?',
                                        begin
                                          if (self.instance_variables.include?(:@_eq_QMARK)) then
                                            @_eq_QMARK
                                          else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:511"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                        :"dot_operator"                                        ,Cell.new(
                                          callProcedure( 'car',
                                              begin
                                                if (self.instance_variables.include?(:@_car)) then
                                                  @_car
                                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:513"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                begin
                                                    _lst
                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:516"] + __e.backtrace ) ; raise __e
                                                end
                                                       ))
                                                 )))
                                   ) then
                                      callProcedure( 'intern',
                                          begin
                                            if (self.instance_variables.include?(:@_intern)) then
                                              @_intern
                                            else raise NameError.new( "Error: undefined variable _intern", "_intern" ) end
                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:513"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            callProcedure( 'string_join',
                                                begin
                                                  if (self.instance_variables.include?(:@_string_join)) then
                                                    @_string_join
                                                  else raise NameError.new( "Error: undefined variable _string_join", "_string_join" ) end
                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:494"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  callProcedure( 'map',
                                                      begin
                                                        if (self.instance_variables.include?(:@_map)) then
                                                          @_map
                                                        else raise NameError.new( "Error: undefined variable _map", "_map" ) end
                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:495"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        Proc.new { |_x| 
                                                            if ( 
                                                              callProcedure( 'pair?',
                                                                  begin
                                                                    if (self.instance_variables.include?(:@_pair_QMARK)) then
                                                                      @_pair_QMARK
                                                                    else raise NameError.new( "Error: undefined variable _pair_QMARK", "_pair_QMARK" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:497"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                    begin
                                                                        _x
                                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:501"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                           ))
                                                             ) then
                                                                callProcedure( 'to_s',
                                                                    begin
                                                                      if (self.instance_variables.include?(:@_to_s)) then
                                                                        @_to_s
                                                                      else raise NameError.new( "Error: undefined variable _to_s", "_to_s" ) end
                                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:513"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                    Cell.new(
                                                                      callProcedure( 'dot_operator_iter',
                                                                          begin
                                                                              _dot_operator_iter
                                                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:515"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                          Cell.new(
                                                                            begin
                                                                                _x
                                                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:501"] + __e.backtrace ) ; raise __e
                                                                            end
                                                                                   ))
                                                                             ))
                                                            else
                                                                if ( 
                                                                  callProcedure( 'symbol?',
                                                                      begin
                                                                        if (self.instance_variables.include?(:@_symbol_QMARK)) then
                                                                          @_symbol_QMARK
                                                                        else raise NameError.new( "Error: undefined variable _symbol_QMARK", "_symbol_QMARK" ) end
                                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:512"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                      Cell.new(
                                                                        begin
                                                                            _x
                                                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:501"] + __e.backtrace ) ; raise __e
                                                                        end
                                                                               ))
                                                                 ) then
                                                                    callProcedure( 'to_s',
                                                                        begin
                                                                          if (self.instance_variables.include?(:@_to_s)) then
                                                                            @_to_s
                                                                          else raise NameError.new( "Error: undefined variable _to_s", "_to_s" ) end
                                                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:513"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                        Cell.new(
                                                                          begin
                                                                              _x
                                                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:501"] + __e.backtrace ) ; raise __e
                                                                          end
                                                                                 ))
                                                                else
                                                                  begin raise RuntimeError, ["callProcedure( 'sprintf',", [["begin", ["if (self.instance_variables.include?(:@_sprintf)) then", ["@_sprintf"], "else raise NameError.new( \"Error: undefined variable _sprintf\", \"_sprintf\" ) end", "rescue => __e ; __e.set_backtrace( [\"/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:501\"] + __e.backtrace ) ; raise __e"], "end"], ","], [["Cell.new(", "\"dot-operator requires symbol, but got %s\"", ",Cell.new("], [["begin", [["_x"], "rescue => __e ; __e.set_backtrace( [\"/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:501\"] + __e.backtrace ) ; raise __e"], "end"]]], "             )))"] ; rescue => __e ;  __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:510"] + __e.backtrace ) ; raise __e ; end 
                                                                end
                                                            end
                                                        }                                                      ,Cell.new(
                                                        callProcedure( 'cdr',
                                                            begin
                                                              if (self.instance_variables.include?(:@_cdr)) then
                                                                @_cdr
                                                              else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:502"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              begin
                                                                  _lst
                                                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:516"] + __e.backtrace ) ; raise __e
                                                              end
                                                                     ))
                                                               )))                                                ,Cell.new(
                                                "."
                                                         )))
                                                   ))
                                  else
                                    begin raise RuntimeError, "dot-operator requires symbol or (. symbol symbol) form." ; rescue => __e ;  __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:510"] + __e.backtrace ) ; raise __e ; end 
                                  end
                              end
                          else
                              if ( 
                              true
                               ) then
                                  begin
                                      begin
                                          _lst
                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:516"] + __e.backtrace ) ; raise __e
                                      end
                                  end
                              end
                          end
                      end
                  }
                if ( 
                  callProcedure( 'eq?',
                      begin
                        if (self.instance_variables.include?(:@_eq_QMARK)) then
                          @_eq_QMARK
                        else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:511"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                      0                      ,Cell.new(
                        callProcedure( 'length',
                            begin
                              if (self.instance_variables.include?(:@_length)) then
                                @_length
                              else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:511"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  _lst
                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:516"] + __e.backtrace ) ; raise __e
                              end
                                     ))
                               )))
                 ) then
                    begin
                      begin raise RuntimeError, ". operator requires argument" ; rescue => __e ;  __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:510"] + __e.backtrace ) ; raise __e ; end 
                    end
                else
                    if ( 
                      if ( 
                        callProcedure( 'not',
                            begin
                              if (self.instance_variables.include?(:@_not)) then
                                @_not
                              else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:407"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              callProcedure( 'eq?',
                                  begin
                                    if (self.instance_variables.include?(:@_eq_QMARK)) then
                                      @_eq_QMARK
                                    else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:511"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                  false                                  ,Cell.new(
                                    callProcedure( 'eq?',
                                        begin
                                          if (self.instance_variables.include?(:@_eq_QMARK)) then
                                            @_eq_QMARK
                                          else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:511"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                        1                                        ,Cell.new(
                                          callProcedure( 'length',
                                              begin
                                                if (self.instance_variables.include?(:@_length)) then
                                                  @_length
                                                else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:511"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                begin
                                                    _lst
                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:516"] + __e.backtrace ) ; raise __e
                                                end
                                                       ))
                                                 )))
                                           )))
                                     ))
                       ) then
                          callProcedure( 'symbol?',
                              begin
                                if (self.instance_variables.include?(:@_symbol_QMARK)) then
                                  @_symbol_QMARK
                                else raise NameError.new( "Error: undefined variable _symbol_QMARK", "_symbol_QMARK" ) end
                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:512"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                callProcedure( 'car',
                                    begin
                                      if (self.instance_variables.include?(:@_car)) then
                                        @_car
                                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:513"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          _lst
                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:516"] + __e.backtrace ) ; raise __e
                                      end
                                             ))
                                       ))
                      else
                        false
                      end
                     ) then
                        begin
                            callProcedure( 'intern',
                                begin
                                  if (self.instance_variables.include?(:@_intern)) then
                                    @_intern
                                  else raise NameError.new( "Error: undefined variable _intern", "_intern" ) end
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:513"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  callProcedure( '+',
                                      begin
                                        if (self.instance_variables.include?(:@_plus)) then
                                          @_plus
                                        else raise NameError.new( "Error: undefined variable _plus", "_plus" ) end
                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:513"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                      "."                                      ,Cell.new(
                                        callProcedure( 'to_s',
                                            begin
                                              if (self.instance_variables.include?(:@_to_s)) then
                                                @_to_s
                                              else raise NameError.new( "Error: undefined variable _to_s", "_to_s" ) end
                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:513"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              callProcedure( 'car',
                                                  begin
                                                    if (self.instance_variables.include?(:@_car)) then
                                                      @_car
                                                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:513"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    begin
                                                        _lst
                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:516"] + __e.backtrace ) ; raise __e
                                                    end
                                                           ))
                                                     ))
                                               )))
                                         ))
                        end
                    else
                        if ( 
                        true
                         ) then
                            begin
                                callProcedure( 'dot_operator_iter',
                                    begin
                                        _dot_operator_iter
                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:515"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      callProcedure( 'cons',
                                          begin
                                            if (self.instance_variables.include?(:@_cons)) then
                                              @_cons
                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:516"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                          :"dot_operator"                                          ,Cell.new(
                                            begin
                                                _lst
                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:516"] + __e.backtrace ) ; raise __e
                                            end
                                                   )))
                                             ))
                            end
                        end
                    end
                end
            } ; ___lambda.call(
            nil
                       )
          end
      }
#------------------------------

  @_with_open = 
      Proc.new { |_filename,_pred,*__rest__| _lst = __rest__[0] ;  
          begin
            ___lambda = lambda { |_len| 
                begin
                  ___lambda = lambda { |_f| 
                      begin
                        ___lambda = lambda { |_result| 
                            begin
                                _f.close(
                                  )
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:528"] + __e.backtrace ) ; raise __e
                            end
                            begin
                                _result
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:529"] + __e.backtrace ) ; raise __e
                            end
                        } ; ___lambda.call(
                              callProcedure( 'pred',
                                  begin
                                      _pred
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:527"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        _f
                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:527"] + __e.backtrace ) ; raise __e
                                    end
                                           ))
                                   )
                      end
                  } ; ___lambda.call(
                        if ( 
                          callProcedure( '=',
                              begin
                                if (self.instance_variables.include?(:@_eq_QMARK)) then
                                  @_eq_QMARK
                                else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:521"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                              0                              ,Cell.new(
                                begin
                                    _len
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:523"] + __e.backtrace ) ; raise __e
                                end
                                       )))
                         ) then
                            begin
                                begin
                                    Kernel.open(
                                          begin
                                              _filename
                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:524"] + __e.backtrace ) ; raise __e
                                          end
                                      )
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:524"] + __e.backtrace ) ; raise __e
                                end
                            end
                        else
                            if ( 
                              callProcedure( '<',
                                  begin
                                    if (self.instance_variables.include?(:@_lt_QMARK)) then
                                      @_lt_QMARK
                                    else raise NameError.new( "Error: undefined variable _lt_QMARK", "_lt_QMARK" ) end
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:523"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                  0                                  ,Cell.new(
                                    begin
                                        _len
                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:523"] + __e.backtrace ) ; raise __e
                                    end
                                           )))
                             ) then
                                begin
                                    begin
                                        Kernel.open(
                                              begin
                                                  _filename
                                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:524"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              callProcedure( 'car',
                                                  begin
                                                    if (self.instance_variables.include?(:@_car)) then
                                                      @_car
                                                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:524"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    begin
                                                        _lst
                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:524"] + __e.backtrace ) ; raise __e
                                                    end
                                                           ))
                                          )
                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:524"] + __e.backtrace ) ; raise __e
                                    end
                                end
                            else
                                if ( 
                                true
                                 ) then
                                    begin
                                      begin raise RuntimeError, "with-open requires 2 or 3 arguments." ; rescue => __e ;  __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:526"] + __e.backtrace ) ; raise __e ; end 
                                    end
                                end
                            end
                        end
                             )
                end
            } ; ___lambda.call(
                  callProcedure( 'length',
                      begin
                        if (self.instance_variables.include?(:@_length)) then
                          @_length
                        else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:519"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                        begin
                            _lst
                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:524"] + __e.backtrace ) ; raise __e
                        end
                               ))
                       )
          end
      }
#------------------------------

  @_last_pair = 
      Proc.new { |_x| 
          if ( 
            callProcedure( 'pair?',
                begin
                  if (self.instance_variables.include?(:@_pair_QMARK)) then
                    @_pair_QMARK
                  else raise NameError.new( "Error: undefined variable _pair_QMARK", "_pair_QMARK" ) end
                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:536"] + __e.backtrace ) ; raise __e
                end              ,
                Cell.new(
                  callProcedure( 'cdr',
                      begin
                        if (self.instance_variables.include?(:@_cdr)) then
                          @_cdr
                        else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:537"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                        begin
                            _x
                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:538"] + __e.backtrace ) ; raise __e
                        end
                               ))
                         ))
           ) then
              callProcedure( 'last_pair',
                  begin
                    if (self.instance_variables.include?(:@_last_pair)) then
                      @_last_pair
                    else raise NameError.new( "Error: undefined variable _last_pair", "_last_pair" ) end
                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:537"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    callProcedure( 'cdr',
                        begin
                          if (self.instance_variables.include?(:@_cdr)) then
                            @_cdr
                          else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:537"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              _x
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:538"] + __e.backtrace ) ; raise __e
                          end
                                 ))
                           ))
          else
              begin
                  _x
                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:538"] + __e.backtrace ) ; raise __e
              end
          end
      }
#------------------------------

  @_debug_print_length = 
    63
#------------------------------

  @_debug_print_output_func = 
      Proc.new { |_str| 
          begin
              STDERR.print(
                    begin
                        _str
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:547"] + __e.backtrace ) ; raise __e
                    end
                )
            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:547"] + __e.backtrace ) ; raise __e
          end
      }
#------------------------------

  @_debug_print = 
      Proc.new { |_val,_sourcefile,_lineno,_sourcesexp| 
          begin
            ___lambda = lambda { |_limit_length| 
                _limit_length                 = 
                  Proc.new { |_x| 
                      callProcedure( '+',
                          begin
                            if (self.instance_variables.include?(:@_plus)) then
                              @_plus
                            else raise NameError.new( "Error: undefined variable _plus", "_plus" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:553"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            if ( 
                              callProcedure( '<',
                                  begin
                                    if (self.instance_variables.include?(:@_lt_QMARK)) then
                                      @_lt_QMARK
                                    else raise NameError.new( "Error: undefined variable _lt_QMARK", "_lt_QMARK" ) end
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:551"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                      if (self.instance_variables.include?(:@_debug_print_length)) then
                                        @_debug_print_length
                                      else raise NameError.new( "Error: undefined variable _debug_print_length", "_debug_print_length" ) end
                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:551"] + __e.backtrace ) ; raise __e
                                    end                                  ,Cell.new(
                                    begin
                                        _x.length
                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:551"] + __e.backtrace ) ; raise __e
                                    end
                                           )))
                             ) then
                                begin
                                  ___lambda = lambda { |_n| 
                                      callProcedure( 'sprintf',
                                          begin
                                            if (self.instance_variables.include?(:@_sprintf)) then
                                              @_sprintf
                                            else raise NameError.new( "Error: undefined variable _sprintf", "_sprintf" ) end
                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:558"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            callProcedure( '+',
                                                begin
                                                  if (self.instance_variables.include?(:@_plus)) then
                                                    @_plus
                                                  else raise NameError.new( "Error: undefined variable _plus", "_plus" ) end
                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:553"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                "%"                                                ,Cell.new(
                                                  begin
                                                      _n
                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:553"] + __e.backtrace ) ; raise __e
                                                  end                                                ,Cell.new(
                                                "."                                                ,Cell.new(
                                                  begin
                                                      _n
                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:553"] + __e.backtrace ) ; raise __e
                                                  end                                                ,Cell.new(
                                                "s ..."
                                                         ))))))                                          ,Cell.new(
                                            begin
                                                _x
                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:554"] + __e.backtrace ) ; raise __e
                                            end
                                                   )))
                                  } ; ___lambda.call(
                                        begin
                                          if (self.instance_variables.include?(:@_debug_print_length)) then
                                            @_debug_print_length.to_s
                                          else raise NameError.new( "Error: undefined variable _debug_print_length", "_debug_print_length" ) end
                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:552"] + __e.backtrace ) ; raise __e
                                        end
                                             )
                                end
                            else
                                begin
                                    _x
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:554"] + __e.backtrace ) ; raise __e
                                end
                            end                          ,Cell.new(
                          "\n"
                                   )))
                  }
                begin
                  ___lambda = lambda { |_disp_val| 
                      callProcedure( 'debug_print_output_func',
                          begin
                            if (self.instance_variables.include?(:@_debug_print_output_func)) then
                              @_debug_print_output_func
                            else raise NameError.new( "Error: undefined variable _debug_print_output_func", "_debug_print_output_func" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:558"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'limit_length',
                                begin
                                    _limit_length
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:558"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  callProcedure( 'sprintf',
                                      begin
                                        if (self.instance_variables.include?(:@_sprintf)) then
                                          @_sprintf
                                        else raise NameError.new( "Error: undefined variable _sprintf", "_sprintf" ) end
                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:558"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                      "#?=%s:%s:%s"                                      ,Cell.new(
                                        begin
                                            _sourcefile
                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:557"] + __e.backtrace ) ; raise __e
                                        end                                      ,Cell.new(
                                        begin
                                            _lineno
                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:557"] + __e.backtrace ) ; raise __e
                                        end                                      ,Cell.new(
                                        callProcedure( 'write_to_string',
                                            begin
                                              if (self.instance_variables.include?(:@_write_to_string)) then
                                                @_write_to_string
                                              else raise NameError.new( "Error: undefined variable _write_to_string", "_write_to_string" ) end
                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:557"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              begin
                                                  _sourcesexp
                                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:557"] + __e.backtrace ) ; raise __e
                                              end
                                                     ))
                                               )))))
                                         ))
                                   ))
                      callProcedure( 'debug_print_output_func',
                          begin
                            if (self.instance_variables.include?(:@_debug_print_output_func)) then
                              @_debug_print_output_func
                            else raise NameError.new( "Error: undefined variable _debug_print_output_func", "_debug_print_output_func" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:558"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            callProcedure( 'limit_length',
                                begin
                                    _limit_length
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:558"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  callProcedure( 'sprintf',
                                      begin
                                        if (self.instance_variables.include?(:@_sprintf)) then
                                          @_sprintf
                                        else raise NameError.new( "Error: undefined variable _sprintf", "_sprintf" ) end
                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:558"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                      "#?-    %s"                                      ,Cell.new(
                                        begin
                                            _disp_val
                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:558"] + __e.backtrace ) ; raise __e
                                        end
                                               )))
                                         ))
                                   ))
                      begin
                          _val
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:559"] + __e.backtrace ) ; raise __e
                      end
                  } ; ___lambda.call(
                        callProcedure( 'write_to_string',
                            begin
                              if (self.instance_variables.include?(:@_write_to_string)) then
                                @_write_to_string
                              else raise NameError.new( "Error: undefined variable _write_to_string", "_write_to_string" ) end
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:557"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  _val
                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:559"] + __e.backtrace ) ; raise __e
                              end
                                     ))
                             )
                end
            } ; ___lambda.call(
            nil
                       )
          end
      }
#------------------------------

  @_pretty_print = 
      Proc.new { |_s| 
          begin
            ___lambda = lambda { |_do_indent| 
                _do_indent                 = 
                  Proc.new { |_level| 
                      callProcedure( 'for_each',
                          begin
                            if (self.instance_variables.include?(:@_for_each)) then
                              @_for_each
                            else raise NameError.new( "Error: undefined variable _for_each", "_for_each" ) end
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:569"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            Proc.new { |_x| 
                                callProcedure( 'display',
                                    begin
                                      if (self.instance_variables.include?(:@_display)) then
                                        @_display
                                      else raise NameError.new( "Error: undefined variable _display", "_display" ) end
                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:575"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                    " "
                                             ))
                            }                          ,Cell.new(
                            callProcedure( 'range',
                                begin
                                  if (self.instance_variables.include?(:@_range)) then
                                    @_range
                                  else raise NameError.new( "Error: undefined variable _range", "_range" ) end
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:569"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _level
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:587"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                                   )))
                  }
                @_pp_parenl = 
                    Proc.new { || 
                        callProcedure( 'display',
                            begin
                              if (self.instance_variables.include?(:@_display)) then
                                @_display
                              else raise NameError.new( "Error: undefined variable _display", "_display" ) end
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:575"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                            "("
                                     ))
                    }
                @_pp_parenr = 
                    Proc.new { || 
                        callProcedure( 'display',
                            begin
                              if (self.instance_variables.include?(:@_display)) then
                                @_display
                              else raise NameError.new( "Error: undefined variable _display", "_display" ) end
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:575"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                            ")"
                                     ))
                    }
                @_pp_atom = 
                    Proc.new { |_e,_prefix| 
                        if ( 
                          begin
                              _prefix
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:588"] + __e.backtrace ) ; raise __e
                          end
                         ) then
                            begin
                                callProcedure( 'display',
                                    begin
                                      if (self.instance_variables.include?(:@_display)) then
                                        @_display
                                      else raise NameError.new( "Error: undefined variable _display", "_display" ) end
                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:575"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                    " "
                                             ))
                            end
                        end
                        callProcedure( 'write',
                            begin
                              if (self.instance_variables.include?(:@_write)) then
                                @_write
                              else raise NameError.new( "Error: undefined variable _write", "_write" ) end
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:592"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  _e
                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:588"] + __e.backtrace ) ; raise __e
                              end
                                     ))
                    }
                @_pp_list = 
                    Proc.new { |_s,_level,_prefix| 
                        if ( 
                          callProcedure( 'not',
                              begin
                                if (self.instance_variables.include?(:@_not)) then
                                  @_not
                                else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:407"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                callProcedure( 'eq?',
                                    begin
                                      if (self.instance_variables.include?(:@_eq_QMARK)) then
                                        @_eq_QMARK
                                      else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:511"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                    false                                    ,Cell.new(
                                      begin
                                          _prefix
                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:588"] + __e.backtrace ) ; raise __e
                                      end
                                             )))
                                       ))
                         ) then
                            callProcedure( 'do_indent',
                                begin
                                    _do_indent
                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:578"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      _level
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:587"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                        else
                          false
                        end
                        callProcedure( 'pp_parenl',
                            begin
                              if (self.instance_variables.include?(:@_pp_parenl)) then
                                @_pp_parenl
                              else raise NameError.new( "Error: undefined variable _pp_parenl", "_pp_parenl" ) end
                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:579"] + __e.backtrace ) ; raise __e
                            end                          ,
                          Cell.new(
                                     ))
                        begin
                          ___lambda = lambda { |_loop| 
                              _loop                               = 
                                Proc.new { |_s,_prefix| 
                                    if ( 
                                      callProcedure( 'null?',
                                          begin
                                            if (self.instance_variables.include?(:@_null_QMARK)) then
                                              @_null_QMARK
                                            else raise NameError.new( "Error: undefined variable _null_QMARK", "_null_QMARK" ) end
                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:582"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                _s
                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:592"] + __e.backtrace ) ; raise __e
                                            end
                                                   ))
                                     ) then
                                        callProcedure( 'pp_parenr',
                                            begin
                                              if (self.instance_variables.include?(:@_pp_parenr)) then
                                                @_pp_parenr
                                              else raise NameError.new( "Error: undefined variable _pp_parenr", "_pp_parenr" ) end
                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:583"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                          Cell.new(
                                                     ))
                                    else
                                        begin
                                          ___lambda = lambda { |_e| 
                                              if ( 
                                                callProcedure( 'list?',
                                                    begin
                                                      if (self.instance_variables.include?(:@_list_QMARK)) then
                                                        @_list_QMARK
                                                      else raise NameError.new( "Error: undefined variable _list_QMARK", "_list_QMARK" ) end
                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:590"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      begin
                                                          _e
                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:588"] + __e.backtrace ) ; raise __e
                                                      end
                                                             ))
                                               ) then
                                                  begin
                                                      if ( 
                                                        callProcedure( 'not',
                                                            begin
                                                              if (self.instance_variables.include?(:@_not)) then
                                                                @_not
                                                              else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:407"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              callProcedure( 'eq?',
                                                                  begin
                                                                    if (self.instance_variables.include?(:@_eq_QMARK)) then
                                                                      @_eq_QMARK
                                                                    else raise NameError.new( "Error: undefined variable _eq_QMARK", "_eq_QMARK" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:511"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                  false                                                                  ,Cell.new(
                                                                    begin
                                                                        _prefix
                                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:588"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                           )))
                                                                     ))
                                                       ) then
                                                          callProcedure( 'newline',
                                                              begin
                                                                if (self.instance_variables.include?(:@_newline)) then
                                                                  @_newline
                                                                else raise NameError.new( "Error: undefined variable _newline", "_newline" ) end
                                                                rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:593"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                            Cell.new(
                                                                       ))
                                                      else
                                                        false
                                                      end
                                                      callProcedure( 'pp_list',
                                                          begin
                                                            if (self.instance_variables.include?(:@_pp_list)) then
                                                              @_pp_list
                                                            else raise NameError.new( "Error: undefined variable _pp_list", "_pp_list" ) end
                                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:591"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            begin
                                                                _e
                                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:588"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,Cell.new(
                                                            callProcedure( '+',
                                                                begin
                                                                  if (self.instance_variables.include?(:@_plus)) then
                                                                    @_plus
                                                                  else raise NameError.new( "Error: undefined variable _plus", "_plus" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:587"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                  begin
                                                                      _level
                                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:587"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,Cell.new(
                                                                1
                                                                         )))                                                          ,Cell.new(
                                                            begin
                                                                _prefix
                                                              rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:588"] + __e.backtrace ) ; raise __e
                                                            end
                                                                   ))))
                                                  end
                                              else
                                                  callProcedure( 'pp_atom',
                                                      begin
                                                        if (self.instance_variables.include?(:@_pp_atom)) then
                                                          @_pp_atom
                                                        else raise NameError.new( "Error: undefined variable _pp_atom", "_pp_atom" ) end
                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:588"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        begin
                                                            _e
                                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:588"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,Cell.new(
                                                        begin
                                                            _prefix
                                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:588"] + __e.backtrace ) ; raise __e
                                                        end
                                                               )))
                                              end
                                              callProcedure( 'loop',
                                                  begin
                                                      _loop
                                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:589"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    callProcedure( 'cdr',
                                                        begin
                                                          if (self.instance_variables.include?(:@_cdr)) then
                                                            @_cdr
                                                          else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:589"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                          begin
                                                              _s
                                                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:592"] + __e.backtrace ) ; raise __e
                                                          end
                                                                 ))                                                  ,Cell.new(
                                                  true
                                                           )))
                                          } ; ___lambda.call(
                                                callProcedure( 'car',
                                                    begin
                                                      if (self.instance_variables.include?(:@_car)) then
                                                        @_car
                                                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:584"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      begin
                                                          _s
                                                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:592"] + __e.backtrace ) ; raise __e
                                                      end
                                                             ))
                                                     )
                                        end
                                    end
                                }
                              callProcedure( 'loop',
                                  begin
                                      _loop
                                    rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:589"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        _s
                                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:592"] + __e.backtrace ) ; raise __e
                                    end                                  ,Cell.new(
                                  false
                                           )))
                          } ; ___lambda.call(
                          nil
                                     )
                        end
                    }
                if ( 
                  callProcedure( 'list?',
                      begin
                        if (self.instance_variables.include?(:@_list_QMARK)) then
                          @_list_QMARK
                        else raise NameError.new( "Error: undefined variable _list_QMARK", "_list_QMARK" ) end
                        rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:590"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                        begin
                            _s
                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:592"] + __e.backtrace ) ; raise __e
                        end
                               ))
                 ) then
                    callProcedure( 'pp_list',
                        begin
                          if (self.instance_variables.include?(:@_pp_list)) then
                            @_pp_list
                          else raise NameError.new( "Error: undefined variable _pp_list", "_pp_list" ) end
                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:591"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              _s
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:592"] + __e.backtrace ) ; raise __e
                          end                        ,Cell.new(
                        0                        ,Cell.new(
                        false
                                 ))))
                else
                    callProcedure( 'write',
                        begin
                          if (self.instance_variables.include?(:@_write)) then
                            @_write
                          else raise NameError.new( "Error: undefined variable _write", "_write" ) end
                          rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:592"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              _s
                            rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:592"] + __e.backtrace ) ; raise __e
                          end
                                 ))
                end
                callProcedure( 'newline',
                    begin
                      if (self.instance_variables.include?(:@_newline)) then
                        @_newline
                      else raise NameError.new( "Error: undefined variable _newline", "_newline" ) end
                      rescue => __e ; __e.set_backtrace( ["/Volumes/CaseSensitive/kiyoka/work/github/nendo/lib/init.nnd:593"] + __e.backtrace ) ; raise __e
                    end                  ,
                  Cell.new(
                             ))
            } ; ___lambda.call(
            nil
                       )
          end
      }
#------------------------------

true
#------------------------------

true
