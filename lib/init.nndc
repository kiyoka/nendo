#
#    This file is nendo's compiled library file. 
#    generated  "nendo -c src" command. 
# 

trampCall( 
  begin
      def self._define_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_define'] = self.method( :_define_METHOD )
    @_define = 
    trampCall(
          LispMacro.new { |_arg,*__rest__| _body = __rest__[0] ;  
              if ( 
                trampCall( self._not_METHOD(  'not',
                    begin
                      if @global_lisp_binding.has_key?('_not') then
                        trampCall(@_not)
                      else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:42"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      trampCall( self._pair_QUMARK_METHOD(  'pair?',
                          begin
                            if @global_lisp_binding.has_key?('_pair_QUMARK') then
                              trampCall(@_pair_QUMARK)
                            else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:50"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                trampCall(_arg)
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:56"] + __e.backtrace ) ; raise __e
                            end
                                   )))
                             )))
               ) then
                  trampCall( self._cons_METHOD(  'cons',
                      begin
                        if @global_lisp_binding.has_key?('_cons') then
                          trampCall(@_cons)
                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:56"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                      :"define"                      ,Cell.new(
                        trampCall( self._cons_METHOD(  'cons',
                            begin
                              if @global_lisp_binding.has_key?('_cons') then
                                trampCall(@_cons)
                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:56"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  trampCall(_arg)
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:56"] + __e.backtrace ) ; raise __e
                              end                            ,Cell.new(
                              begin
                                  trampCall(_body)
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:57"] + __e.backtrace ) ; raise __e
                              end
                                     ))))
                               ))))
              else
                  begin
                      if ( 
                        trampCall( self._pair_QUMARK_METHOD(  'pair?',
                            begin
                              if @global_lisp_binding.has_key?('_pair_QUMARK') then
                                trampCall(@_pair_QUMARK)
                              else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:50"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              trampCall( self._cdr_METHOD(  'cdr',
                                  begin
                                    if @global_lisp_binding.has_key?('_cdr') then
                                      trampCall(@_cdr)
                                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:56"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        trampCall(_arg)
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:56"] + __e.backtrace ) ; raise __e
                                    end
                                           )))
                                     )))
                       ) then
                          if ( 
                            trampCall( self._pair_QUMARK_METHOD(  'pair?',
                                begin
                                  if @global_lisp_binding.has_key?('_pair_QUMARK') then
                                    trampCall(@_pair_QUMARK)
                                  else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:50"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  trampCall( self._car_METHOD(  'car',
                                      begin
                                        if @global_lisp_binding.has_key?('_car') then
                                          trampCall(@_car)
                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:53"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        trampCall( self._cdr_METHOD(  'cdr',
                                            begin
                                              if @global_lisp_binding.has_key?('_cdr') then
                                                trampCall(@_cdr)
                                              else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:56"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              begin
                                                  trampCall(_arg)
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:56"] + __e.backtrace ) ; raise __e
                                              end
                                                     )))
                                               )))
                                         )))
                           ) then
                              begin raise RuntimeError, 
                              "Error: define syntax error."
                              rescue => __e 
                                __e.set_backtrace( ["./lib/init.nnd:51"] + __e.backtrace )
                                raise __e
                              end 
                          end
                      end
                      trampCall( self._cons_METHOD(  'cons',
                          begin
                            if @global_lisp_binding.has_key?('_cons') then
                              trampCall(@_cons)
                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:56"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                          :"define"                          ,Cell.new(
                            trampCall( self._cons_METHOD(  'cons',
                                begin
                                  if @global_lisp_binding.has_key?('_cons') then
                                    trampCall(@_cons)
                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:56"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  trampCall( self._car_METHOD(  'car',
                                      begin
                                        if @global_lisp_binding.has_key?('_car') then
                                          trampCall(@_car)
                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:53"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            trampCall(_arg)
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:56"] + __e.backtrace ) ; raise __e
                                        end
                                               )))                                ,Cell.new(
                                  trampCall( self._list_METHOD(  'list',
                                      begin
                                        if @global_lisp_binding.has_key?('_list') then
                                          trampCall(@_list)
                                        else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:54"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        trampCall( self._cons_METHOD(  'cons',
                                            begin
                                              if @global_lisp_binding.has_key?('_cons') then
                                                trampCall(@_cons)
                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:56"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                            :"lambda"                                            ,Cell.new(
                                              trampCall( self._cons_METHOD(  'cons',
                                                  begin
                                                    if @global_lisp_binding.has_key?('_cons') then
                                                      trampCall(@_cons)
                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:56"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    trampCall( self._cdr_METHOD(  'cdr',
                                                        begin
                                                          if @global_lisp_binding.has_key?('_cdr') then
                                                            trampCall(@_cdr)
                                                          else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:56"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                          begin
                                                              trampCall(_arg)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:56"] + __e.backtrace ) ; raise __e
                                                          end
                                                                 )))                                                  ,Cell.new(
                                                    begin
                                                        trampCall(_body)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:57"] + __e.backtrace ) ; raise __e
                                                    end
                                                           ))))
                                                     ))))
                                               )))
                                         ))))
                                   ))))
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._debug_MIMARKprint_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_debug_MIMARKprint'] = self.method( :_debug_MIMARKprint_METHOD )
    @_debug_MIMARKprint = 
    trampCall(
          LispMacro.new { |__form,_sourcefile,_lineno,_sourcesexp| 
              begin
                  trampCall(__form)
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:64"] + __e.backtrace ) ; raise __e
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._caar_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_caar'] = self.method( :_caar_METHOD )
    @_caar = 
    trampCall(
          Proc.new { |_x| 
              delayCall( 'car',
                  begin
                    if @global_lisp_binding.has_key?('_car') then
                      trampCall(@_car)
                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:69"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    trampCall( self._car_METHOD(  'car',
                        begin
                          if @global_lisp_binding.has_key?('_car') then
                            trampCall(@_car)
                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:69"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              trampCall(_x)
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:69"] + __e.backtrace ) ; raise __e
                          end
                                 )))
                           ))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._cadr_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_cadr'] = self.method( :_cadr_METHOD )
    @_cadr = 
    trampCall(
          Proc.new { |_x| 
              delayCall( 'car',
                  begin
                    if @global_lisp_binding.has_key?('_car') then
                      trampCall(@_car)
                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:70"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    trampCall( self._cdr_METHOD(  'cdr',
                        begin
                          if @global_lisp_binding.has_key?('_cdr') then
                            trampCall(@_cdr)
                          else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:70"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              trampCall(_x)
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:70"] + __e.backtrace ) ; raise __e
                          end
                                 )))
                           ))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._cdar_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_cdar'] = self.method( :_cdar_METHOD )
    @_cdar = 
    trampCall(
          Proc.new { |_x| 
              delayCall( 'cdr',
                  begin
                    if @global_lisp_binding.has_key?('_cdr') then
                      trampCall(@_cdr)
                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:71"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    trampCall( self._car_METHOD(  'car',
                        begin
                          if @global_lisp_binding.has_key?('_car') then
                            trampCall(@_car)
                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:71"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              trampCall(_x)
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:71"] + __e.backtrace ) ; raise __e
                          end
                                 )))
                           ))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._cddr_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_cddr'] = self.method( :_cddr_METHOD )
    @_cddr = 
    trampCall(
          Proc.new { |_x| 
              delayCall( 'cdr',
                  begin
                    if @global_lisp_binding.has_key?('_cdr') then
                      trampCall(@_cdr)
                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:72"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    trampCall( self._cdr_METHOD(  'cdr',
                        begin
                          if @global_lisp_binding.has_key?('_cdr') then
                            trampCall(@_cdr)
                          else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:72"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              trampCall(_x)
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:72"] + __e.backtrace ) ; raise __e
                          end
                                 )))
                           ))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._caaar_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_caaar'] = self.method( :_caaar_METHOD )
    @_caaar = 
    trampCall(
          Proc.new { |_x| 
              delayCall( 'car',
                  begin
                    if @global_lisp_binding.has_key?('_car') then
                      trampCall(@_car)
                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:73"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    trampCall( self._car_METHOD(  'car',
                        begin
                          if @global_lisp_binding.has_key?('_car') then
                            trampCall(@_car)
                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:73"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          trampCall( self._car_METHOD(  'car',
                              begin
                                if @global_lisp_binding.has_key?('_car') then
                                  trampCall(@_car)
                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:73"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    trampCall(_x)
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:73"] + __e.backtrace ) ; raise __e
                                end
                                       )))
                                 )))
                           ))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._caadr_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_caadr'] = self.method( :_caadr_METHOD )
    @_caadr = 
    trampCall(
          Proc.new { |_x| 
              delayCall( 'car',
                  begin
                    if @global_lisp_binding.has_key?('_car') then
                      trampCall(@_car)
                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:74"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    trampCall( self._car_METHOD(  'car',
                        begin
                          if @global_lisp_binding.has_key?('_car') then
                            trampCall(@_car)
                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:74"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          trampCall( self._cdr_METHOD(  'cdr',
                              begin
                                if @global_lisp_binding.has_key?('_cdr') then
                                  trampCall(@_cdr)
                                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:74"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    trampCall(_x)
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:74"] + __e.backtrace ) ; raise __e
                                end
                                       )))
                                 )))
                           ))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._cadar_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_cadar'] = self.method( :_cadar_METHOD )
    @_cadar = 
    trampCall(
          Proc.new { |_x| 
              delayCall( 'car',
                  begin
                    if @global_lisp_binding.has_key?('_car') then
                      trampCall(@_car)
                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:75"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    trampCall( self._cdr_METHOD(  'cdr',
                        begin
                          if @global_lisp_binding.has_key?('_cdr') then
                            trampCall(@_cdr)
                          else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:75"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          trampCall( self._car_METHOD(  'car',
                              begin
                                if @global_lisp_binding.has_key?('_car') then
                                  trampCall(@_car)
                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:75"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    trampCall(_x)
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:75"] + __e.backtrace ) ; raise __e
                                end
                                       )))
                                 )))
                           ))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._caddr_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_caddr'] = self.method( :_caddr_METHOD )
    @_caddr = 
    trampCall(
          Proc.new { |_x| 
              delayCall( 'car',
                  begin
                    if @global_lisp_binding.has_key?('_car') then
                      trampCall(@_car)
                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:76"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    trampCall( self._cdr_METHOD(  'cdr',
                        begin
                          if @global_lisp_binding.has_key?('_cdr') then
                            trampCall(@_cdr)
                          else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:76"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          trampCall( self._cdr_METHOD(  'cdr',
                              begin
                                if @global_lisp_binding.has_key?('_cdr') then
                                  trampCall(@_cdr)
                                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:76"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    trampCall(_x)
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:76"] + __e.backtrace ) ; raise __e
                                end
                                       )))
                                 )))
                           ))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._cdaar_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_cdaar'] = self.method( :_cdaar_METHOD )
    @_cdaar = 
    trampCall(
          Proc.new { |_x| 
              delayCall( 'cdr',
                  begin
                    if @global_lisp_binding.has_key?('_cdr') then
                      trampCall(@_cdr)
                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:77"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    trampCall( self._car_METHOD(  'car',
                        begin
                          if @global_lisp_binding.has_key?('_car') then
                            trampCall(@_car)
                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:77"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          trampCall( self._car_METHOD(  'car',
                              begin
                                if @global_lisp_binding.has_key?('_car') then
                                  trampCall(@_car)
                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:77"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    trampCall(_x)
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:77"] + __e.backtrace ) ; raise __e
                                end
                                       )))
                                 )))
                           ))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._cdadr_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_cdadr'] = self.method( :_cdadr_METHOD )
    @_cdadr = 
    trampCall(
          Proc.new { |_x| 
              delayCall( 'cdr',
                  begin
                    if @global_lisp_binding.has_key?('_cdr') then
                      trampCall(@_cdr)
                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:78"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    trampCall( self._car_METHOD(  'car',
                        begin
                          if @global_lisp_binding.has_key?('_car') then
                            trampCall(@_car)
                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:78"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          trampCall( self._cdr_METHOD(  'cdr',
                              begin
                                if @global_lisp_binding.has_key?('_cdr') then
                                  trampCall(@_cdr)
                                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:78"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    trampCall(_x)
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:78"] + __e.backtrace ) ; raise __e
                                end
                                       )))
                                 )))
                           ))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._cddar_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_cddar'] = self.method( :_cddar_METHOD )
    @_cddar = 
    trampCall(
          Proc.new { |_x| 
              delayCall( 'cdr',
                  begin
                    if @global_lisp_binding.has_key?('_cdr') then
                      trampCall(@_cdr)
                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:79"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    trampCall( self._cdr_METHOD(  'cdr',
                        begin
                          if @global_lisp_binding.has_key?('_cdr') then
                            trampCall(@_cdr)
                          else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:79"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          trampCall( self._car_METHOD(  'car',
                              begin
                                if @global_lisp_binding.has_key?('_car') then
                                  trampCall(@_car)
                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:79"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    trampCall(_x)
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:79"] + __e.backtrace ) ; raise __e
                                end
                                       )))
                                 )))
                           ))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._cdddr_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_cdddr'] = self.method( :_cdddr_METHOD )
    @_cdddr = 
    trampCall(
          Proc.new { |_x| 
              delayCall( 'cdr',
                  begin
                    if @global_lisp_binding.has_key?('_cdr') then
                      trampCall(@_cdr)
                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:80"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    trampCall( self._cdr_METHOD(  'cdr',
                        begin
                          if @global_lisp_binding.has_key?('_cdr') then
                            trampCall(@_cdr)
                          else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:80"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          trampCall( self._cdr_METHOD(  'cdr',
                              begin
                                if @global_lisp_binding.has_key?('_cdr') then
                                  trampCall(@_cdr)
                                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:80"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    trampCall(_x)
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:80"] + __e.backtrace ) ; raise __e
                                end
                                       )))
                                 )))
                           ))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._caaaar_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_caaaar'] = self.method( :_caaaar_METHOD )
    @_caaaar = 
    trampCall(
          Proc.new { |_x| 
              delayCall( 'car',
                  begin
                    if @global_lisp_binding.has_key?('_car') then
                      trampCall(@_car)
                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:81"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    trampCall( self._car_METHOD(  'car',
                        begin
                          if @global_lisp_binding.has_key?('_car') then
                            trampCall(@_car)
                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:81"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          trampCall( self._car_METHOD(  'car',
                              begin
                                if @global_lisp_binding.has_key?('_car') then
                                  trampCall(@_car)
                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:81"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                trampCall( self._car_METHOD(  'car',
                                    begin
                                      if @global_lisp_binding.has_key?('_car') then
                                        trampCall(@_car)
                                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:81"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          trampCall(_x)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:81"] + __e.backtrace ) ; raise __e
                                      end
                                             )))
                                       )))
                                 )))
                           ))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._caaadr_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_caaadr'] = self.method( :_caaadr_METHOD )
    @_caaadr = 
    trampCall(
          Proc.new { |_x| 
              delayCall( 'car',
                  begin
                    if @global_lisp_binding.has_key?('_car') then
                      trampCall(@_car)
                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:82"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    trampCall( self._car_METHOD(  'car',
                        begin
                          if @global_lisp_binding.has_key?('_car') then
                            trampCall(@_car)
                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:82"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          trampCall( self._car_METHOD(  'car',
                              begin
                                if @global_lisp_binding.has_key?('_car') then
                                  trampCall(@_car)
                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:82"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                trampCall( self._cdr_METHOD(  'cdr',
                                    begin
                                      if @global_lisp_binding.has_key?('_cdr') then
                                        trampCall(@_cdr)
                                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:82"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          trampCall(_x)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:82"] + __e.backtrace ) ; raise __e
                                      end
                                             )))
                                       )))
                                 )))
                           ))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._caadar_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_caadar'] = self.method( :_caadar_METHOD )
    @_caadar = 
    trampCall(
          Proc.new { |_x| 
              delayCall( 'car',
                  begin
                    if @global_lisp_binding.has_key?('_car') then
                      trampCall(@_car)
                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:83"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    trampCall( self._car_METHOD(  'car',
                        begin
                          if @global_lisp_binding.has_key?('_car') then
                            trampCall(@_car)
                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:83"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          trampCall( self._cdr_METHOD(  'cdr',
                              begin
                                if @global_lisp_binding.has_key?('_cdr') then
                                  trampCall(@_cdr)
                                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:83"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                trampCall( self._car_METHOD(  'car',
                                    begin
                                      if @global_lisp_binding.has_key?('_car') then
                                        trampCall(@_car)
                                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:83"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          trampCall(_x)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:83"] + __e.backtrace ) ; raise __e
                                      end
                                             )))
                                       )))
                                 )))
                           ))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._caaddr_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_caaddr'] = self.method( :_caaddr_METHOD )
    @_caaddr = 
    trampCall(
          Proc.new { |_x| 
              delayCall( 'car',
                  begin
                    if @global_lisp_binding.has_key?('_car') then
                      trampCall(@_car)
                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:84"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    trampCall( self._car_METHOD(  'car',
                        begin
                          if @global_lisp_binding.has_key?('_car') then
                            trampCall(@_car)
                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:84"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          trampCall( self._cdr_METHOD(  'cdr',
                              begin
                                if @global_lisp_binding.has_key?('_cdr') then
                                  trampCall(@_cdr)
                                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:84"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                trampCall( self._cdr_METHOD(  'cdr',
                                    begin
                                      if @global_lisp_binding.has_key?('_cdr') then
                                        trampCall(@_cdr)
                                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:84"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          trampCall(_x)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:84"] + __e.backtrace ) ; raise __e
                                      end
                                             )))
                                       )))
                                 )))
                           ))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._cadaar_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_cadaar'] = self.method( :_cadaar_METHOD )
    @_cadaar = 
    trampCall(
          Proc.new { |_x| 
              delayCall( 'car',
                  begin
                    if @global_lisp_binding.has_key?('_car') then
                      trampCall(@_car)
                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:85"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    trampCall( self._cdr_METHOD(  'cdr',
                        begin
                          if @global_lisp_binding.has_key?('_cdr') then
                            trampCall(@_cdr)
                          else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:85"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          trampCall( self._car_METHOD(  'car',
                              begin
                                if @global_lisp_binding.has_key?('_car') then
                                  trampCall(@_car)
                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:85"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                trampCall( self._car_METHOD(  'car',
                                    begin
                                      if @global_lisp_binding.has_key?('_car') then
                                        trampCall(@_car)
                                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:85"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          trampCall(_x)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:85"] + __e.backtrace ) ; raise __e
                                      end
                                             )))
                                       )))
                                 )))
                           ))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._cadadr_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_cadadr'] = self.method( :_cadadr_METHOD )
    @_cadadr = 
    trampCall(
          Proc.new { |_x| 
              delayCall( 'car',
                  begin
                    if @global_lisp_binding.has_key?('_car') then
                      trampCall(@_car)
                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:86"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    trampCall( self._cdr_METHOD(  'cdr',
                        begin
                          if @global_lisp_binding.has_key?('_cdr') then
                            trampCall(@_cdr)
                          else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:86"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          trampCall( self._car_METHOD(  'car',
                              begin
                                if @global_lisp_binding.has_key?('_car') then
                                  trampCall(@_car)
                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:86"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                trampCall( self._cdr_METHOD(  'cdr',
                                    begin
                                      if @global_lisp_binding.has_key?('_cdr') then
                                        trampCall(@_cdr)
                                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:86"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          trampCall(_x)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:86"] + __e.backtrace ) ; raise __e
                                      end
                                             )))
                                       )))
                                 )))
                           ))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._caddar_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_caddar'] = self.method( :_caddar_METHOD )
    @_caddar = 
    trampCall(
          Proc.new { |_x| 
              delayCall( 'car',
                  begin
                    if @global_lisp_binding.has_key?('_car') then
                      trampCall(@_car)
                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:87"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    trampCall( self._cdr_METHOD(  'cdr',
                        begin
                          if @global_lisp_binding.has_key?('_cdr') then
                            trampCall(@_cdr)
                          else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:87"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          trampCall( self._cdr_METHOD(  'cdr',
                              begin
                                if @global_lisp_binding.has_key?('_cdr') then
                                  trampCall(@_cdr)
                                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:87"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                trampCall( self._car_METHOD(  'car',
                                    begin
                                      if @global_lisp_binding.has_key?('_car') then
                                        trampCall(@_car)
                                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:87"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          trampCall(_x)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:87"] + __e.backtrace ) ; raise __e
                                      end
                                             )))
                                       )))
                                 )))
                           ))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._cadddr_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_cadddr'] = self.method( :_cadddr_METHOD )
    @_cadddr = 
    trampCall(
          Proc.new { |_x| 
              delayCall( 'car',
                  begin
                    if @global_lisp_binding.has_key?('_car') then
                      trampCall(@_car)
                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:88"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    trampCall( self._cdr_METHOD(  'cdr',
                        begin
                          if @global_lisp_binding.has_key?('_cdr') then
                            trampCall(@_cdr)
                          else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:88"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          trampCall( self._cdr_METHOD(  'cdr',
                              begin
                                if @global_lisp_binding.has_key?('_cdr') then
                                  trampCall(@_cdr)
                                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:88"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                trampCall( self._cdr_METHOD(  'cdr',
                                    begin
                                      if @global_lisp_binding.has_key?('_cdr') then
                                        trampCall(@_cdr)
                                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:88"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          trampCall(_x)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:88"] + __e.backtrace ) ; raise __e
                                      end
                                             )))
                                       )))
                                 )))
                           ))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._cdaaar_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_cdaaar'] = self.method( :_cdaaar_METHOD )
    @_cdaaar = 
    trampCall(
          Proc.new { |_x| 
              delayCall( 'cdr',
                  begin
                    if @global_lisp_binding.has_key?('_cdr') then
                      trampCall(@_cdr)
                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:89"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    trampCall( self._car_METHOD(  'car',
                        begin
                          if @global_lisp_binding.has_key?('_car') then
                            trampCall(@_car)
                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:89"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          trampCall( self._car_METHOD(  'car',
                              begin
                                if @global_lisp_binding.has_key?('_car') then
                                  trampCall(@_car)
                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:89"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                trampCall( self._car_METHOD(  'car',
                                    begin
                                      if @global_lisp_binding.has_key?('_car') then
                                        trampCall(@_car)
                                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:89"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          trampCall(_x)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:89"] + __e.backtrace ) ; raise __e
                                      end
                                             )))
                                       )))
                                 )))
                           ))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._cdaadr_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_cdaadr'] = self.method( :_cdaadr_METHOD )
    @_cdaadr = 
    trampCall(
          Proc.new { |_x| 
              delayCall( 'cdr',
                  begin
                    if @global_lisp_binding.has_key?('_cdr') then
                      trampCall(@_cdr)
                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:90"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    trampCall( self._car_METHOD(  'car',
                        begin
                          if @global_lisp_binding.has_key?('_car') then
                            trampCall(@_car)
                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:90"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          trampCall( self._car_METHOD(  'car',
                              begin
                                if @global_lisp_binding.has_key?('_car') then
                                  trampCall(@_car)
                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:90"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                trampCall( self._cdr_METHOD(  'cdr',
                                    begin
                                      if @global_lisp_binding.has_key?('_cdr') then
                                        trampCall(@_cdr)
                                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:90"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          trampCall(_x)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:90"] + __e.backtrace ) ; raise __e
                                      end
                                             )))
                                       )))
                                 )))
                           ))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._cdadar_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_cdadar'] = self.method( :_cdadar_METHOD )
    @_cdadar = 
    trampCall(
          Proc.new { |_x| 
              delayCall( 'cdr',
                  begin
                    if @global_lisp_binding.has_key?('_cdr') then
                      trampCall(@_cdr)
                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:91"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    trampCall( self._car_METHOD(  'car',
                        begin
                          if @global_lisp_binding.has_key?('_car') then
                            trampCall(@_car)
                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:91"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          trampCall( self._cdr_METHOD(  'cdr',
                              begin
                                if @global_lisp_binding.has_key?('_cdr') then
                                  trampCall(@_cdr)
                                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:91"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                trampCall( self._car_METHOD(  'car',
                                    begin
                                      if @global_lisp_binding.has_key?('_car') then
                                        trampCall(@_car)
                                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:91"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          trampCall(_x)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:91"] + __e.backtrace ) ; raise __e
                                      end
                                             )))
                                       )))
                                 )))
                           ))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._cdaddr_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_cdaddr'] = self.method( :_cdaddr_METHOD )
    @_cdaddr = 
    trampCall(
          Proc.new { |_x| 
              delayCall( 'cdr',
                  begin
                    if @global_lisp_binding.has_key?('_cdr') then
                      trampCall(@_cdr)
                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:92"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    trampCall( self._car_METHOD(  'car',
                        begin
                          if @global_lisp_binding.has_key?('_car') then
                            trampCall(@_car)
                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:92"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          trampCall( self._cdr_METHOD(  'cdr',
                              begin
                                if @global_lisp_binding.has_key?('_cdr') then
                                  trampCall(@_cdr)
                                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:92"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                trampCall( self._cdr_METHOD(  'cdr',
                                    begin
                                      if @global_lisp_binding.has_key?('_cdr') then
                                        trampCall(@_cdr)
                                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:92"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          trampCall(_x)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:92"] + __e.backtrace ) ; raise __e
                                      end
                                             )))
                                       )))
                                 )))
                           ))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._cddaar_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_cddaar'] = self.method( :_cddaar_METHOD )
    @_cddaar = 
    trampCall(
          Proc.new { |_x| 
              delayCall( 'cdr',
                  begin
                    if @global_lisp_binding.has_key?('_cdr') then
                      trampCall(@_cdr)
                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:93"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    trampCall( self._cdr_METHOD(  'cdr',
                        begin
                          if @global_lisp_binding.has_key?('_cdr') then
                            trampCall(@_cdr)
                          else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:93"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          trampCall( self._car_METHOD(  'car',
                              begin
                                if @global_lisp_binding.has_key?('_car') then
                                  trampCall(@_car)
                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:93"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                trampCall( self._car_METHOD(  'car',
                                    begin
                                      if @global_lisp_binding.has_key?('_car') then
                                        trampCall(@_car)
                                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:93"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          trampCall(_x)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:93"] + __e.backtrace ) ; raise __e
                                      end
                                             )))
                                       )))
                                 )))
                           ))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._cddadr_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_cddadr'] = self.method( :_cddadr_METHOD )
    @_cddadr = 
    trampCall(
          Proc.new { |_x| 
              delayCall( 'cdr',
                  begin
                    if @global_lisp_binding.has_key?('_cdr') then
                      trampCall(@_cdr)
                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:94"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    trampCall( self._cdr_METHOD(  'cdr',
                        begin
                          if @global_lisp_binding.has_key?('_cdr') then
                            trampCall(@_cdr)
                          else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:94"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          trampCall( self._car_METHOD(  'car',
                              begin
                                if @global_lisp_binding.has_key?('_car') then
                                  trampCall(@_car)
                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:94"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                trampCall( self._cdr_METHOD(  'cdr',
                                    begin
                                      if @global_lisp_binding.has_key?('_cdr') then
                                        trampCall(@_cdr)
                                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:94"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          trampCall(_x)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:94"] + __e.backtrace ) ; raise __e
                                      end
                                             )))
                                       )))
                                 )))
                           ))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._cdddar_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_cdddar'] = self.method( :_cdddar_METHOD )
    @_cdddar = 
    trampCall(
          Proc.new { |_x| 
              delayCall( 'cdr',
                  begin
                    if @global_lisp_binding.has_key?('_cdr') then
                      trampCall(@_cdr)
                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:95"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    trampCall( self._cdr_METHOD(  'cdr',
                        begin
                          if @global_lisp_binding.has_key?('_cdr') then
                            trampCall(@_cdr)
                          else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:95"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          trampCall( self._cdr_METHOD(  'cdr',
                              begin
                                if @global_lisp_binding.has_key?('_cdr') then
                                  trampCall(@_cdr)
                                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:95"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                trampCall( self._car_METHOD(  'car',
                                    begin
                                      if @global_lisp_binding.has_key?('_car') then
                                        trampCall(@_car)
                                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:95"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          trampCall(_x)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:95"] + __e.backtrace ) ; raise __e
                                      end
                                             )))
                                       )))
                                 )))
                           ))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._cddddr_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_cddddr'] = self.method( :_cddddr_METHOD )
    @_cddddr = 
    trampCall(
          Proc.new { |_x| 
              delayCall( 'cdr',
                  begin
                    if @global_lisp_binding.has_key?('_cdr') then
                      trampCall(@_cdr)
                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:96"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    trampCall( self._cdr_METHOD(  'cdr',
                        begin
                          if @global_lisp_binding.has_key?('_cdr') then
                            trampCall(@_cdr)
                          else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:96"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          trampCall( self._cdr_METHOD(  'cdr',
                              begin
                                if @global_lisp_binding.has_key?('_cdr') then
                                  trampCall(@_cdr)
                                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:96"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                trampCall( self._cdr_METHOD(  'cdr',
                                    begin
                                      if @global_lisp_binding.has_key?('_cdr') then
                                        trampCall(@_cdr)
                                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:96"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          trampCall(_x)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:96"] + __e.backtrace ) ; raise __e
                                      end
                                             )))
                                       )))
                                 )))
                           ))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._iota_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_iota'] = self.method( :_iota_METHOD )
    @_iota = 
    trampCall(
          begin
            if @global_lisp_binding.has_key?('_range') then
              trampCall(@_range)
            else raise NameError.new( "Error: undefined variable _range", "_range" ) end
            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:102"] + __e.backtrace ) ; raise __e
          end
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._append_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_append'] = self.method( :_append_METHOD )
    @_append = 
    trampCall(
          Proc.new { |_a,_b| 
              begin
                ___lambda = lambda { |_append_MIMARKreverse| 
                    _append_MIMARKreverse                     = 
                      Proc.new { |_a,_b| 
                          if ( 
                            trampCall( self._pair_QUMARK_METHOD(  'pair?',
                                begin
                                  if @global_lisp_binding.has_key?('_pair_QUMARK') then
                                    trampCall(@_pair_QUMARK)
                                  else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:107"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      trampCall(_a)
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:110"] + __e.backtrace ) ; raise __e
                                  end
                                         )))
                           ) then
                              delayCall( 'append-reverse',
                                  begin
                                      trampCall(_append_MIMARKreverse)
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:110"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    trampCall( self._cdr_METHOD(  'cdr',
                                        begin
                                          if @global_lisp_binding.has_key?('_cdr') then
                                            trampCall(@_cdr)
                                          else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:108"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          begin
                                              trampCall(_a)
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:110"] + __e.backtrace ) ; raise __e
                                          end
                                                 )))                                  ,Cell.new(
                                    trampCall( self._cons_METHOD(  'cons',
                                        begin
                                          if @global_lisp_binding.has_key?('_cons') then
                                            trampCall(@_cons)
                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:108"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          trampCall( self._car_METHOD(  'car',
                                              begin
                                                if @global_lisp_binding.has_key?('_car') then
                                                  trampCall(@_car)
                                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:108"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                begin
                                                    trampCall(_a)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:110"] + __e.backtrace ) ; raise __e
                                                end
                                                       )))                                        ,Cell.new(
                                          begin
                                              trampCall(_b)
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:110"] + __e.backtrace ) ; raise __e
                                          end
                                                 ))))
                                           )))
                          else
                              begin
                                  trampCall(_b)
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:110"] + __e.backtrace ) ; raise __e
                              end
                          end
                      }
                    delayCall( 'append-reverse',
                        begin
                            trampCall(_append_MIMARKreverse)
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:110"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          trampCall( self._reverse_METHOD(  'reverse',
                              begin
                                if @global_lisp_binding.has_key?('_reverse') then
                                  trampCall(@_reverse)
                                else raise NameError.new( "Error: undefined variable _reverse", "_reverse" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:110"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    trampCall(_a)
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:110"] + __e.backtrace ) ; raise __e
                                end
                                       )))                        ,Cell.new(
                          begin
                              trampCall(_b)
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:110"] + __e.backtrace ) ; raise __e
                          end
                                 )))
                } ; ___lambda.call(
                nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._vector_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_vector'] = self.method( :_vector_METHOD )
    @_vector = 
    trampCall(
          Proc.new { |*__rest__| _lst = __rest__[0] ;  
              delayCall( 'to-arr',
                  begin
                    if @global_lisp_binding.has_key?('_to_MIMARKarr') then
                      trampCall(@_to_MIMARKarr)
                    else raise NameError.new( "Error: undefined variable _to_MIMARKarr", "_to_MIMARKarr" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:115"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    begin
                        trampCall(_lst)
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:115"] + __e.backtrace ) ; raise __e
                    end
                           ))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._list_QUMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_list_QUMARK'] = self.method( :_list_QUMARK_METHOD )
    @_list_QUMARK = 
    trampCall(
          Proc.new { |_arg| 
              if ( 
                trampCall( self._pair_QUMARK_METHOD(  'pair?',
                    begin
                      if @global_lisp_binding.has_key?('_pair_QUMARK') then
                        trampCall(@_pair_QUMARK)
                      else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:117"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          trampCall(_arg)
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:119"] + __e.backtrace ) ; raise __e
                      end
                             )))
               ) then
                  delayCall( 'list?',
                      begin
                        if @global_lisp_binding.has_key?('_list_QUMARK') then
                          trampCall(@_list_QUMARK)
                        else raise NameError.new( "Error: undefined variable _list_QUMARK", "_list_QUMARK" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:118"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                        trampCall( self._cdr_METHOD(  'cdr',
                            begin
                              if @global_lisp_binding.has_key?('_cdr') then
                                trampCall(@_cdr)
                              else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:118"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  trampCall(_arg)
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:119"] + __e.backtrace ) ; raise __e
                              end
                                     )))
                               ))
              else
                  delayCall( 'null?',
                      begin
                        if @global_lisp_binding.has_key?('_null_QUMARK') then
                          trampCall(@_null_QUMARK)
                        else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:119"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                        begin
                            trampCall(_arg)
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:119"] + __e.backtrace ) ; raise __e
                        end
                               ))
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._even_QUMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_even_QUMARK'] = self.method( :_even_QUMARK_METHOD )
    @_even_QUMARK = 
    trampCall(
          Proc.new { |_n| 
              delayCall( '=',
                  begin
                    if @global_lisp_binding.has_key?('__EQMARK') then
                      trampCall(@__EQMARK)
                    else raise NameError.new( "Error: undefined variable __EQMARK", "__EQMARK" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:120"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    trampCall( self.__PAMARK_METHOD(  '%',
                        begin
                          if @global_lisp_binding.has_key?('__PAMARK') then
                            trampCall(@__PAMARK)
                          else raise NameError.new( "Error: undefined variable __PAMARK", "__PAMARK" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:120"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              trampCall(_n)
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:120"] + __e.backtrace ) ; raise __e
                          end                        ,Cell.new(
                        2
                                 ))))                  ,Cell.new(
                  0
                           )))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._odd_QUMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_odd_QUMARK'] = self.method( :_odd_QUMARK_METHOD )
    @_odd_QUMARK = 
    trampCall(
          Proc.new { |_n| 
              delayCall( 'not',
                  begin
                    if @global_lisp_binding.has_key?('_not') then
                      trampCall(@_not)
                    else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:121"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    trampCall( self.__EQMARK_METHOD(  '=',
                        begin
                          if @global_lisp_binding.has_key?('__EQMARK') then
                            trampCall(@__EQMARK)
                          else raise NameError.new( "Error: undefined variable __EQMARK", "__EQMARK" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:121"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          trampCall( self.__PAMARK_METHOD(  '%',
                              begin
                                if @global_lisp_binding.has_key?('__PAMARK') then
                                  trampCall(@__PAMARK)
                                else raise NameError.new( "Error: undefined variable __PAMARK", "__PAMARK" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:121"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    trampCall(_n)
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:121"] + __e.backtrace ) ; raise __e
                                end                              ,Cell.new(
                              2
                                       ))))                        ,Cell.new(
                        0
                                 ))))
                           ))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._zero_QUMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_zero_QUMARK'] = self.method( :_zero_QUMARK_METHOD )
    @_zero_QUMARK = 
    trampCall(
          Proc.new { |_n| 
              delayCall( '=',
                  begin
                    if @global_lisp_binding.has_key?('__EQMARK') then
                      trampCall(@__EQMARK)
                    else raise NameError.new( "Error: undefined variable __EQMARK", "__EQMARK" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:122"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    begin
                        trampCall(_n)
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:122"] + __e.backtrace ) ; raise __e
                    end                  ,Cell.new(
                  0
                           )))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._positive_QUMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_positive_QUMARK'] = self.method( :_positive_QUMARK_METHOD )
    @_positive_QUMARK = 
    trampCall(
          Proc.new { |_n| 
              delayCall( '>',
                  begin
                    if @global_lisp_binding.has_key?('__GTMARK') then
                      trampCall(@__GTMARK)
                    else raise NameError.new( "Error: undefined variable __GTMARK", "__GTMARK" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:123"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    begin
                        trampCall(_n)
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:123"] + __e.backtrace ) ; raise __e
                    end                  ,Cell.new(
                  0
                           )))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._negative_QUMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_negative_QUMARK'] = self.method( :_negative_QUMARK_METHOD )
    @_negative_QUMARK = 
    trampCall(
          Proc.new { |_n| 
              delayCall( '<',
                  begin
                    if @global_lisp_binding.has_key?('__LTMARK') then
                      trampCall(@__LTMARK)
                    else raise NameError.new( "Error: undefined variable __LTMARK", "__LTMARK" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:124"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    begin
                        trampCall(_n)
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:124"] + __e.backtrace ) ; raise __e
                    end                  ,Cell.new(
                  0
                           )))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._abs_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_abs'] = self.method( :_abs_METHOD )
    @_abs = 
    trampCall(
          Proc.new { |_n| 
              if ( 
                trampCall( self.__GTMARK_EQMARK_METHOD(  '>=',
                    begin
                      if @global_lisp_binding.has_key?('__GTMARK_EQMARK') then
                        trampCall(@__GTMARK_EQMARK)
                      else raise NameError.new( "Error: undefined variable __GTMARK_EQMARK", "__GTMARK_EQMARK" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:125"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          trampCall(_n)
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:125"] + __e.backtrace ) ; raise __e
                      end                    ,Cell.new(
                    0
                             ))))
               ) then
                  begin
                      trampCall(_n)
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:125"] + __e.backtrace ) ; raise __e
                  end
              else
                  delayCall( '-',
                      begin
                        if @global_lisp_binding.has_key?('__MIMARK') then
                          trampCall(@__MIMARK)
                        else raise NameError.new( "Error: undefined variable __MIMARK", "__MIMARK" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:125"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                        begin
                            trampCall(_n)
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:125"] + __e.backtrace ) ; raise __e
                        end
                               ))
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._max_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_max'] = self.method( :_max_METHOD )
    @_max = 
    trampCall(
          Proc.new { |*__rest__| _lst = __rest__[0] ;  
              delayCall( 'fold-right',
                  begin
                    if @global_lisp_binding.has_key?('_fold_MIMARKright') then
                      trampCall(@_fold_MIMARKright)
                    else raise NameError.new( "Error: undefined variable _fold_MIMARKright", "_fold_MIMARKright" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:127"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    Proc.new { |_a,_b| 
                        if ( 
                          trampCall( self.__GTMARK_METHOD(  '>',
                              begin
                                if @global_lisp_binding.has_key?('__GTMARK') then
                                  trampCall(@__GTMARK)
                                else raise NameError.new( "Error: undefined variable __GTMARK", "__GTMARK" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:127"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    trampCall(_a)
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:127"] + __e.backtrace ) ; raise __e
                                end                              ,Cell.new(
                                begin
                                    trampCall(_b)
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:127"] + __e.backtrace ) ; raise __e
                                end
                                       ))))
                         ) then
                            begin
                                trampCall(_a)
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:127"] + __e.backtrace ) ; raise __e
                            end
                        else
                            begin
                                trampCall(_b)
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:127"] + __e.backtrace ) ; raise __e
                            end
                        end
                    }                  ,Cell.new(
                    trampCall( self._car_METHOD(  'car',
                        begin
                          if @global_lisp_binding.has_key?('_car') then
                            trampCall(@_car)
                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:127"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              trampCall(_lst)
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:127"] + __e.backtrace ) ; raise __e
                          end
                                 )))                  ,Cell.new(
                    trampCall( self._cdr_METHOD(  'cdr',
                        begin
                          if @global_lisp_binding.has_key?('_cdr') then
                            trampCall(@_cdr)
                          else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:127"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              trampCall(_lst)
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:127"] + __e.backtrace ) ; raise __e
                          end
                                 )))
                           ))))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._min_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_min'] = self.method( :_min_METHOD )
    @_min = 
    trampCall(
          Proc.new { |*__rest__| _lst = __rest__[0] ;  
              delayCall( 'fold-right',
                  begin
                    if @global_lisp_binding.has_key?('_fold_MIMARKright') then
                      trampCall(@_fold_MIMARKright)
                    else raise NameError.new( "Error: undefined variable _fold_MIMARKright", "_fold_MIMARKright" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:129"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    Proc.new { |_a,_b| 
                        if ( 
                          trampCall( self.__LTMARK_METHOD(  '<',
                              begin
                                if @global_lisp_binding.has_key?('__LTMARK') then
                                  trampCall(@__LTMARK)
                                else raise NameError.new( "Error: undefined variable __LTMARK", "__LTMARK" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:129"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    trampCall(_a)
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:129"] + __e.backtrace ) ; raise __e
                                end                              ,Cell.new(
                                begin
                                    trampCall(_b)
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:129"] + __e.backtrace ) ; raise __e
                                end
                                       ))))
                         ) then
                            begin
                                trampCall(_a)
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:129"] + __e.backtrace ) ; raise __e
                            end
                        else
                            begin
                                trampCall(_b)
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:129"] + __e.backtrace ) ; raise __e
                            end
                        end
                    }                  ,Cell.new(
                    trampCall( self._car_METHOD(  'car',
                        begin
                          if @global_lisp_binding.has_key?('_car') then
                            trampCall(@_car)
                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:129"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              trampCall(_lst)
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:129"] + __e.backtrace ) ; raise __e
                          end
                                 )))                  ,Cell.new(
                    trampCall( self._cdr_METHOD(  'cdr',
                        begin
                          if @global_lisp_binding.has_key?('_cdr') then
                            trampCall(@_cdr)
                          else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:129"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              trampCall(_lst)
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:129"] + __e.backtrace ) ; raise __e
                          end
                                 )))
                           ))))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._succ_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_succ'] = self.method( :_succ_METHOD )
    @_succ = 
    trampCall(
          Proc.new { |_x| 
              delayCall( '+',
                  begin
                    if @global_lisp_binding.has_key?('__PLMARK') then
                      trampCall(@__PLMARK)
                    else raise NameError.new( "Error: undefined variable __PLMARK", "__PLMARK" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:130"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    begin
                        trampCall(_x)
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:130"] + __e.backtrace ) ; raise __e
                    end                  ,Cell.new(
                  1
                           )))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._pred_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_pred'] = self.method( :_pred_METHOD )
    @_pred = 
    trampCall(
          Proc.new { |_x| 
              delayCall( '-',
                  begin
                    if @global_lisp_binding.has_key?('__MIMARK') then
                      trampCall(@__MIMARK)
                    else raise NameError.new( "Error: undefined variable __MIMARK", "__MIMARK" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:131"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    begin
                        trampCall(_x)
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:131"] + __e.backtrace ) ; raise __e
                    end                  ,Cell.new(
                  1
                           )))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._nth_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_nth'] = self.method( :_nth_METHOD )
    @_nth = 
    trampCall(
          Proc.new { |_n,_lst| 
              begin
                ___lambda = lambda { |_nth_MIMARKiter| 
                    _nth_MIMARKiter                     = 
                      Proc.new { |_n,_index,_lst| 
                          if ( 
                            trampCall( self._null_QUMARK_METHOD(  'null?',
                                begin
                                  if @global_lisp_binding.has_key?('_null_QUMARK') then
                                    trampCall(@_null_QUMARK)
                                  else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:135"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      trampCall(_lst)
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:142"] + __e.backtrace ) ; raise __e
                                  end
                                         )))
                           ) then
                            Cell.new()
                          else
                              if ( 
                                trampCall( self._not_METHOD(  'not',
                                    begin
                                      if @global_lisp_binding.has_key?('_not') then
                                        trampCall(@_not)
                                      else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:137"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      trampCall( self._pair_QUMARK_METHOD(  'pair?',
                                          begin
                                            if @global_lisp_binding.has_key?('_pair_QUMARK') then
                                              trampCall(@_pair_QUMARK)
                                            else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:137"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                trampCall(_lst)
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:142"] + __e.backtrace ) ; raise __e
                                            end
                                                   )))
                                             )))
                               ) then
                                  begin raise RuntimeError, 
                                  "Error: nth got improper list."
                                  rescue => __e 
                                    __e.set_backtrace( ["./lib/init.nnd:138"] + __e.backtrace )
                                    raise __e
                                  end 
                              else
                                  if ( 
                                    trampCall( self._eqv_QUMARK_METHOD(  'eqv?',
                                        begin
                                          if @global_lisp_binding.has_key?('_eqv_QUMARK') then
                                            trampCall(@_eqv_QUMARK)
                                          else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:139"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          begin
                                              trampCall(_n)
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:142"] + __e.backtrace ) ; raise __e
                                          end                                        ,Cell.new(
                                          begin
                                              trampCall(_index)
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:141"] + __e.backtrace ) ; raise __e
                                          end
                                                 ))))
                                   ) then
                                      delayCall( 'car',
                                          begin
                                            if @global_lisp_binding.has_key?('_car') then
                                              trampCall(@_car)
                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:140"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                trampCall(_lst)
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:142"] + __e.backtrace ) ; raise __e
                                            end
                                                   ))
                                  else
                                      delayCall( 'nth-iter',
                                          begin
                                              trampCall(_nth_MIMARKiter)
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:142"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                trampCall(_n)
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:142"] + __e.backtrace ) ; raise __e
                                            end                                          ,Cell.new(
                                            trampCall( self.__PLMARK_METHOD(  '+',
                                                begin
                                                  if @global_lisp_binding.has_key?('__PLMARK') then
                                                    trampCall(@__PLMARK)
                                                  else raise NameError.new( "Error: undefined variable __PLMARK", "__PLMARK" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:141"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  begin
                                                      trampCall(_index)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:141"] + __e.backtrace ) ; raise __e
                                                  end                                                ,Cell.new(
                                                1
                                                         ))))                                          ,Cell.new(
                                            trampCall( self._cdr_METHOD(  'cdr',
                                                begin
                                                  if @global_lisp_binding.has_key?('_cdr') then
                                                    trampCall(@_cdr)
                                                  else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:141"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  begin
                                                      trampCall(_lst)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:142"] + __e.backtrace ) ; raise __e
                                                  end
                                                         )))
                                                   ))))
                                  end
                              end
                          end
                      }
                    delayCall( 'nth-iter',
                        begin
                            trampCall(_nth_MIMARKiter)
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:142"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              trampCall(_n)
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:142"] + __e.backtrace ) ; raise __e
                          end                        ,Cell.new(
                        0                        ,Cell.new(
                          begin
                              trampCall(_lst)
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:142"] + __e.backtrace ) ; raise __e
                          end
                                 ))))
                } ; ___lambda.call(
                nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._first_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_first'] = self.method( :_first_METHOD )
    @_first = 
    trampCall(
          Proc.new { |_lst| 
              delayCall( 'nth',
                  begin
                    if @global_lisp_binding.has_key?('_nth') then
                      trampCall(@_nth)
                    else raise NameError.new( "Error: undefined variable _nth", "_nth" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:143"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  0                  ,Cell.new(
                    begin
                        trampCall(_lst)
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:143"] + __e.backtrace ) ; raise __e
                    end
                           )))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._second_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_second'] = self.method( :_second_METHOD )
    @_second = 
    trampCall(
          Proc.new { |_lst| 
              delayCall( 'nth',
                  begin
                    if @global_lisp_binding.has_key?('_nth') then
                      trampCall(@_nth)
                    else raise NameError.new( "Error: undefined variable _nth", "_nth" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:144"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  1                  ,Cell.new(
                    begin
                        trampCall(_lst)
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:144"] + __e.backtrace ) ; raise __e
                    end
                           )))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._third_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_third'] = self.method( :_third_METHOD )
    @_third = 
    trampCall(
          Proc.new { |_lst| 
              delayCall( 'nth',
                  begin
                    if @global_lisp_binding.has_key?('_nth') then
                      trampCall(@_nth)
                    else raise NameError.new( "Error: undefined variable _nth", "_nth" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:145"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  2                  ,Cell.new(
                    begin
                        trampCall(_lst)
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:145"] + __e.backtrace ) ; raise __e
                    end
                           )))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._fourth_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_fourth'] = self.method( :_fourth_METHOD )
    @_fourth = 
    trampCall(
          Proc.new { |_lst| 
              delayCall( 'nth',
                  begin
                    if @global_lisp_binding.has_key?('_nth') then
                      trampCall(@_nth)
                    else raise NameError.new( "Error: undefined variable _nth", "_nth" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:146"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  3                  ,Cell.new(
                    begin
                        trampCall(_lst)
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:146"] + __e.backtrace ) ; raise __e
                    end
                           )))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._fifth_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_fifth'] = self.method( :_fifth_METHOD )
    @_fifth = 
    trampCall(
          Proc.new { |_lst| 
              delayCall( 'nth',
                  begin
                    if @global_lisp_binding.has_key?('_nth') then
                      trampCall(@_nth)
                    else raise NameError.new( "Error: undefined variable _nth", "_nth" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:147"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  4                  ,Cell.new(
                    begin
                        trampCall(_lst)
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:147"] + __e.backtrace ) ; raise __e
                    end
                           )))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._sixth_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_sixth'] = self.method( :_sixth_METHOD )
    @_sixth = 
    trampCall(
          Proc.new { |_lst| 
              delayCall( 'nth',
                  begin
                    if @global_lisp_binding.has_key?('_nth') then
                      trampCall(@_nth)
                    else raise NameError.new( "Error: undefined variable _nth", "_nth" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:148"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  5                  ,Cell.new(
                    begin
                        trampCall(_lst)
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:148"] + __e.backtrace ) ; raise __e
                    end
                           )))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._seventh_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_seventh'] = self.method( :_seventh_METHOD )
    @_seventh = 
    trampCall(
          Proc.new { |_lst| 
              delayCall( 'nth',
                  begin
                    if @global_lisp_binding.has_key?('_nth') then
                      trampCall(@_nth)
                    else raise NameError.new( "Error: undefined variable _nth", "_nth" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:149"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  6                  ,Cell.new(
                    begin
                        trampCall(_lst)
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:149"] + __e.backtrace ) ; raise __e
                    end
                           )))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._eighth_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_eighth'] = self.method( :_eighth_METHOD )
    @_eighth = 
    trampCall(
          Proc.new { |_lst| 
              delayCall( 'nth',
                  begin
                    if @global_lisp_binding.has_key?('_nth') then
                      trampCall(@_nth)
                    else raise NameError.new( "Error: undefined variable _nth", "_nth" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:150"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  7                  ,Cell.new(
                    begin
                        trampCall(_lst)
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:150"] + __e.backtrace ) ; raise __e
                    end
                           )))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._ninth_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_ninth'] = self.method( :_ninth_METHOD )
    @_ninth = 
    trampCall(
          Proc.new { |_lst| 
              delayCall( 'nth',
                  begin
                    if @global_lisp_binding.has_key?('_nth') then
                      trampCall(@_nth)
                    else raise NameError.new( "Error: undefined variable _nth", "_nth" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:151"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  8                  ,Cell.new(
                    begin
                        trampCall(_lst)
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:151"] + __e.backtrace ) ; raise __e
                    end
                           )))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._tenth_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_tenth'] = self.method( :_tenth_METHOD )
    @_tenth = 
    trampCall(
          Proc.new { |_lst| 
              delayCall( 'nth',
                  begin
                    if @global_lisp_binding.has_key?('_nth') then
                      trampCall(@_nth)
                    else raise NameError.new( "Error: undefined variable _nth", "_nth" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:152"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  9                  ,Cell.new(
                    begin
                        trampCall(_lst)
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:152"] + __e.backtrace ) ; raise __e
                    end
                           )))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._x_MIMARK_GTMARKstring_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_x_MIMARK_GTMARKstring'] = self.method( :_x_MIMARK_GTMARKstring_METHOD )
    @_x_MIMARK_GTMARKstring = 
    trampCall(
          Proc.new { |_object| 
              delayCall( 'to-s',
                  begin
                    if @global_lisp_binding.has_key?('_to_MIMARKs') then
                      trampCall(@_to_MIMARKs)
                    else raise NameError.new( "Error: undefined variable _to_MIMARKs", "_to_MIMARKs" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:154"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    begin
                        trampCall(_object)
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:154"] + __e.backtrace ) ; raise __e
                    end
                           ))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._macroexpand_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_macroexpand'] = self.method( :_macroexpand_METHOD )
    @_macroexpand = 
    trampCall(
          Proc.new { |_sexp| 
              begin
                ___lambda = lambda { |_newsexp| 
                    if ( 
                      trampCall( self._not_METHOD(  'not',
                          begin
                            if @global_lisp_binding.has_key?('_not') then
                              trampCall(@_not)
                            else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:161"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            trampCall( self._equal_QUMARK_METHOD(  'equal?',
                                begin
                                  if @global_lisp_binding.has_key?('_equal_QUMARK') then
                                    trampCall(@_equal_QUMARK)
                                  else raise NameError.new( "Error: undefined variable _equal_QUMARK", "_equal_QUMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:161"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      trampCall(_sexp)
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:161"] + __e.backtrace ) ; raise __e
                                  end                                ,Cell.new(
                                  begin
                                      trampCall(_newsexp)
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:163"] + __e.backtrace ) ; raise __e
                                  end
                                         ))))
                                   )))
                     ) then
                        delayCall( 'macroexpand',
                            begin
                              if @global_lisp_binding.has_key?('_macroexpand') then
                                trampCall(@_macroexpand)
                              else raise NameError.new( "Error: undefined variable _macroexpand", "_macroexpand" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:162"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  trampCall(_newsexp)
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:163"] + __e.backtrace ) ; raise __e
                              end
                                     ))
                    else
                        begin
                            trampCall(_newsexp)
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:163"] + __e.backtrace ) ; raise __e
                        end
                    end
                } ; ___lambda.call(
                      trampCall( self._macroexpand_MIMARK1_METHOD(  'macroexpand-1',
                          begin
                            if @global_lisp_binding.has_key?('_macroexpand_MIMARK1') then
                              trampCall(@_macroexpand_MIMARK1)
                            else raise NameError.new( "Error: undefined variable _macroexpand_MIMARK1", "_macroexpand_MIMARK1" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:160"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                trampCall(_sexp)
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:161"] + __e.backtrace ) ; raise __e
                            end
                                   )))
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._feedto_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_feedto'] = self.method( :_feedto_METHOD )
    @_feedto = 
    trampCall(
          Proc.new { || 
              begin raise RuntimeError, 
              "=> (feedto) appeared outside cond or case."
              rescue => __e 
                __e.set_backtrace( ["./lib/init.nnd:166"] + __e.backtrace )
                raise __e
              end 
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._cond_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_cond'] = self.method( :_cond_METHOD )
    @_cond = 
    trampCall(
          LispMacro.new { |*__rest__| _lst = __rest__[0] ;  
              begin
                ___lambda = lambda { |_case_MIMARKblock,_cond_MIMARKiter| 
                    _case_MIMARKblock                     = 
                      Proc.new { |_elem,*__rest__| _elseblock = __rest__[0] ;  
                          begin
                            ___lambda = lambda { |_condition,_body,_tmpsym| 
                                trampCall( self._append_METHOD(  'append',
                                    begin
                                      if @global_lisp_binding.has_key?('_append') then
                                        trampCall(@_append)
                                      else raise NameError.new( "Error: undefined variable _append", "_append" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:182"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      if ( 
                                        trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                            begin
                                              if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                trampCall(@_eq_QUMARK)
                                              else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:199"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                            :"feedto"                                            ,Cell.new(
                                              trampCall( self._car_METHOD(  'car',
                                                  begin
                                                    if @global_lisp_binding.has_key?('_car') then
                                                      trampCall(@_car)
                                                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:201"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    begin
                                                        trampCall(_body)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:191"] + __e.backtrace ) ; raise __e
                                                    end
                                                           )))
                                                     ))))
                                       ) then
                                          trampCall( self._cons_METHOD(  'cons',
                                              begin
                                                if @global_lisp_binding.has_key?('_cons') then
                                                  trampCall(@_cons)
                                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:191"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                              :"if"                                              ,Cell.new(
                                                trampCall( self._list_METHOD(  'list',
                                                    begin
                                                      if @global_lisp_binding.has_key?('_list') then
                                                        trampCall(@_list)
                                                      else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:189"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      trampCall( self._list_METHOD(  'list',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_list') then
                                                              trampCall(@_list)
                                                            else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:189"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                          :"set!"                                                          ,Cell.new(
                                                            begin
                                                                trampCall(_tmpsym)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:187"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,Cell.new(
                                                            begin
                                                                trampCall(_condition)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:190"] + __e.backtrace ) ; raise __e
                                                            end
                                                                   )))))                                                    ,Cell.new(
                                                      trampCall( self._list_METHOD(  'list',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_list') then
                                                              trampCall(@_list)
                                                            else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:189"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            trampCall( self._cadr_METHOD(  'cadr',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_cadr') then
                                                                    trampCall(@_cadr)
                                                                  else raise NameError.new( "Error: undefined variable _cadr", "_cadr" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:187"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                  begin
                                                                      trampCall(_body)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:191"] + __e.backtrace ) ; raise __e
                                                                  end
                                                                         )))                                                          ,Cell.new(
                                                            begin
                                                                trampCall(_tmpsym)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:187"] + __e.backtrace ) ; raise __e
                                                            end
                                                                   ))))
                                                             ))))
                                                       ))))
                                      else
                                          trampCall( self._cons_METHOD(  'cons',
                                              begin
                                                if @global_lisp_binding.has_key?('_cons') then
                                                  trampCall(@_cons)
                                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:191"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                              :"if"                                              ,Cell.new(
                                                trampCall( self._list_METHOD(  'list',
                                                    begin
                                                      if @global_lisp_binding.has_key?('_list') then
                                                        trampCall(@_list)
                                                      else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:189"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      begin
                                                          trampCall(_condition)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:190"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,Cell.new(
                                                      trampCall( self._cons_METHOD(  'cons',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_cons') then
                                                              trampCall(@_cons)
                                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:191"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                          :"begin"                                                          ,Cell.new(
                                                            begin
                                                                trampCall(_body)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:191"] + __e.backtrace ) ; raise __e
                                                            end
                                                                   ))))
                                                             ))))
                                                       ))))
                                      end                                    ,Cell.new(
                                      if ( 
                                        trampCall( self.__LTMARK_METHOD(  '<',
                                            begin
                                              if @global_lisp_binding.has_key?('__LTMARK') then
                                                trampCall(@__LTMARK)
                                              else raise NameError.new( "Error: undefined variable __LTMARK", "__LTMARK" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:192"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                            0                                            ,Cell.new(
                                              trampCall( self._length_METHOD(  'length',
                                                  begin
                                                    if @global_lisp_binding.has_key?('_length') then
                                                      trampCall(@_length)
                                                    else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:199"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    begin
                                                        trampCall(_elseblock)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:193"] + __e.backtrace ) ; raise __e
                                                    end
                                                           )))
                                                     ))))
                                       ) then
                                          begin
                                              trampCall(_elseblock)
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:193"] + __e.backtrace ) ; raise __e
                                          end
                                      else
                                        Cell.new()
                                      end
                                             ))))
                            } ; ___lambda.call(
                                  if ( 
                                    trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                        begin
                                          if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                            trampCall(@_eq_QUMARK)
                                          else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:199"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                        :"else"                                        ,Cell.new(
                                          trampCall( self._car_METHOD(  'car',
                                              begin
                                                if @global_lisp_binding.has_key?('_car') then
                                                  trampCall(@_car)
                                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:201"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                begin
                                                    trampCall(_elem)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:177"] + __e.backtrace ) ; raise __e
                                                end
                                                       )))
                                                 ))))
                                   ) then
                                    true
                                  else
                                      trampCall( self._car_METHOD(  'car',
                                          begin
                                            if @global_lisp_binding.has_key?('_car') then
                                              trampCall(@_car)
                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:201"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                trampCall(_elem)
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:177"] + __e.backtrace ) ; raise __e
                                            end
                                                   )))
                                  end                                ,
                                  if ( 
                                    trampCall( self._null_QUMARK_METHOD(  'null?',
                                        begin
                                          if @global_lisp_binding.has_key?('_null_QUMARK') then
                                            trampCall(@_null_QUMARK)
                                          else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:175"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          trampCall( self._cdr_METHOD(  'cdr',
                                              begin
                                                if @global_lisp_binding.has_key?('_cdr') then
                                                  trampCall(@_cdr)
                                                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:202"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                begin
                                                    trampCall(_elem)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:177"] + __e.backtrace ) ; raise __e
                                                end
                                                       )))
                                                 )))
                                   ) then
                                    Cell.new(true)
                                  else
                                      trampCall( self._cdr_METHOD(  'cdr',
                                          begin
                                            if @global_lisp_binding.has_key?('_cdr') then
                                              trampCall(@_cdr)
                                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:202"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                trampCall(_elem)
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:177"] + __e.backtrace ) ; raise __e
                                            end
                                                   )))
                                  end                                ,
                                  trampCall( self._gensym_METHOD(  'gensym',
                                      begin
                                        if @global_lisp_binding.has_key?('_gensym') then
                                          trampCall(@_gensym)
                                        else raise NameError.new( "Error: undefined variable _gensym", "_gensym" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:178"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                    Cell.new(
                                               )))
                                       )
                          end
                      }
                    _cond_MIMARKiter                     = 
                      Proc.new { |_lst| 
                          if ( 
                            trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                begin
                                  if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                    trampCall(@_eq_QUMARK)
                                  else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:199"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                0                                ,Cell.new(
                                  trampCall( self._length_METHOD(  'length',
                                      begin
                                        if @global_lisp_binding.has_key?('_length') then
                                          trampCall(@_length)
                                        else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:199"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            trampCall(_lst)
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:203"] + __e.backtrace ) ; raise __e
                                        end
                                               )))
                                         ))))
                           ) then
                            Cell.new()
                          else
                              if ( 
                                trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                    begin
                                      if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                        trampCall(@_eq_QUMARK)
                                      else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:199"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                    1                                    ,Cell.new(
                                      trampCall( self._length_METHOD(  'length',
                                          begin
                                            if @global_lisp_binding.has_key?('_length') then
                                              trampCall(@_length)
                                            else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:199"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                trampCall(_lst)
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:203"] + __e.backtrace ) ; raise __e
                                            end
                                                   )))
                                             ))))
                               ) then
                                  trampCall( callProcedure(   'case-block',
                                      begin
                                          trampCall(_case_MIMARKblock)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:201"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        trampCall( self._car_METHOD(  'car',
                                            begin
                                              if @global_lisp_binding.has_key?('_car') then
                                                trampCall(@_car)
                                              else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:201"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              begin
                                                  trampCall(_lst)
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:203"] + __e.backtrace ) ; raise __e
                                              end
                                                     )))                                      ,Cell.new(
                                      Cell.new()
                                               ))))
                              else
                                  trampCall( callProcedure(   'case-block',
                                      begin
                                          trampCall(_case_MIMARKblock)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:201"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        trampCall( self._car_METHOD(  'car',
                                            begin
                                              if @global_lisp_binding.has_key?('_car') then
                                                trampCall(@_car)
                                              else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:201"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              begin
                                                  trampCall(_lst)
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:203"] + __e.backtrace ) ; raise __e
                                              end
                                                     )))                                      ,Cell.new(
                                        trampCall( callProcedure(   'cond-iter',
                                            begin
                                                trampCall(_cond_MIMARKiter)
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:203"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              trampCall( self._cdr_METHOD(  'cdr',
                                                  begin
                                                    if @global_lisp_binding.has_key?('_cdr') then
                                                      trampCall(@_cdr)
                                                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:202"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    begin
                                                        trampCall(_lst)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:203"] + __e.backtrace ) ; raise __e
                                                    end
                                                           )))
                                                     )))
                                               ))))
                              end
                          end
                      }
                    trampCall( callProcedure(   'cond-iter',
                        begin
                            trampCall(_cond_MIMARKiter)
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:203"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              trampCall(_lst)
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:203"] + __e.backtrace ) ; raise __e
                          end
                                 )))
                } ; ___lambda.call(
                nil,nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._let1_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_let1'] = self.method( :_let1_METHOD )
    @_let1 = 
    trampCall(
          LispMacro.new { |_var,_expr,*__rest__| _body = __rest__[0] ;  
              trampCall( self._append_METHOD(  'append',
                  begin
                    if @global_lisp_binding.has_key?('_append') then
                      trampCall(@_append)
                    else raise NameError.new( "Error: undefined variable _append", "_append" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:207"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    trampCall( self._list_METHOD(  'list',
                        begin
                          if @global_lisp_binding.has_key?('_list') then
                            trampCall(@_list)
                          else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:208"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                        :"let"                        ,Cell.new(
                          trampCall( self._list_METHOD(  'list',
                              begin
                                if @global_lisp_binding.has_key?('_list') then
                                  trampCall(@_list)
                                else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:208"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                trampCall( self._list_METHOD(  'list',
                                    begin
                                      if @global_lisp_binding.has_key?('_list') then
                                        trampCall(@_list)
                                      else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:208"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          trampCall(_var)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:208"] + __e.backtrace ) ; raise __e
                                      end                                    ,Cell.new(
                                      begin
                                          trampCall(_expr)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:208"] + __e.backtrace ) ; raise __e
                                      end
                                             ))))
                                       )))
                                 ))))                  ,Cell.new(
                    begin
                        trampCall(_body)
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:209"] + __e.backtrace ) ; raise __e
                    end
                           ))))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._or_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_or'] = self.method( :_or_METHOD )
    @_or = 
    trampCall(
          LispMacro.new { |*__rest__| _lst = __rest__[0] ;  
              begin
                ___lambda = lambda { |_or_MIMARKiter| 
                    _or_MIMARKiter                     = 
                      Proc.new { |_lst| 
                          if ( 
                            trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                begin
                                  if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                    trampCall(@_eq_QUMARK)
                                  else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:218"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                0                                ,Cell.new(
                                  trampCall( self._length_METHOD(  'length',
                                      begin
                                        if @global_lisp_binding.has_key?('_length') then
                                          trampCall(@_length)
                                        else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:218"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            trampCall(_lst)
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:226"] + __e.backtrace ) ; raise __e
                                        end
                                               )))
                                         ))))
                           ) then
                              begin
                                false
                              end
                          else
                              if ( 
                                trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                    begin
                                      if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                        trampCall(@_eq_QUMARK)
                                      else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:218"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                    1                                    ,Cell.new(
                                      trampCall( self._length_METHOD(  'length',
                                          begin
                                            if @global_lisp_binding.has_key?('_length') then
                                              trampCall(@_length)
                                            else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:218"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                trampCall(_lst)
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:226"] + __e.backtrace ) ; raise __e
                                            end
                                                   )))
                                             ))))
                               ) then
                                  begin
                                      begin
                                        ___lambda = lambda { |_sym| 
                                            trampCall( self._list_METHOD(  'list',
                                                begin
                                                  if @global_lisp_binding.has_key?('_list') then
                                                    trampCall(@_list)
                                                  else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:225"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                :"let1"                                                ,Cell.new(
                                                  begin
                                                      trampCall(_sym)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:225"] + __e.backtrace ) ; raise __e
                                                  end                                                ,Cell.new(
                                                  trampCall( self._car_METHOD(  'car',
                                                      begin
                                                        if @global_lisp_binding.has_key?('_car') then
                                                          trampCall(@_car)
                                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:224"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        begin
                                                            trampCall(_lst)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:226"] + __e.backtrace ) ; raise __e
                                                        end
                                                               )))                                                ,Cell.new(
                                                  trampCall( self._list_METHOD(  'list',
                                                      begin
                                                        if @global_lisp_binding.has_key?('_list') then
                                                          trampCall(@_list)
                                                        else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:225"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                      :"if"                                                      ,Cell.new(
                                                        begin
                                                            trampCall(_sym)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:225"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,Cell.new(
                                                        begin
                                                            trampCall(_sym)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:225"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,Cell.new(
                                                      false
                                                               ))))))
                                                         ))))))
                                        } ; ___lambda.call(
                                              trampCall( self._gensym_METHOD(  'gensym',
                                                  begin
                                                    if @global_lisp_binding.has_key?('_gensym') then
                                                      trampCall(@_gensym)
                                                    else raise NameError.new( "Error: undefined variable _gensym", "_gensym" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:223"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                Cell.new(
                                                           )))
                                                   )
                                      end
                                  end
                              else
                                  if ( 
                                  true
                                   ) then
                                      begin
                                          begin
                                            ___lambda = lambda { |_sym| 
                                                trampCall( self._list_METHOD(  'list',
                                                    begin
                                                      if @global_lisp_binding.has_key?('_list') then
                                                        trampCall(@_list)
                                                      else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:225"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                    :"let1"                                                    ,Cell.new(
                                                      begin
                                                          trampCall(_sym)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:225"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,Cell.new(
                                                      trampCall( self._car_METHOD(  'car',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_car') then
                                                              trampCall(@_car)
                                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:224"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            begin
                                                                trampCall(_lst)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:226"] + __e.backtrace ) ; raise __e
                                                            end
                                                                   )))                                                    ,Cell.new(
                                                      trampCall( self._list_METHOD(  'list',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_list') then
                                                              trampCall(@_list)
                                                            else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:225"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                          :"if"                                                          ,Cell.new(
                                                            begin
                                                                trampCall(_sym)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:225"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,Cell.new(
                                                            begin
                                                                trampCall(_sym)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:225"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,Cell.new(
                                                            trampCall( callProcedure(   'or-iter',
                                                                begin
                                                                    trampCall(_or_MIMARKiter)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:226"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                  trampCall( self._cdr_METHOD(  'cdr',
                                                                      begin
                                                                        if @global_lisp_binding.has_key?('_cdr') then
                                                                          trampCall(@_cdr)
                                                                        else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:225"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                      Cell.new(
                                                                        begin
                                                                            trampCall(_lst)
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:226"] + __e.backtrace ) ; raise __e
                                                                        end
                                                                               )))
                                                                         )))
                                                                   ))))))
                                                             ))))))
                                            } ; ___lambda.call(
                                                  trampCall( self._gensym_METHOD(  'gensym',
                                                      begin
                                                        if @global_lisp_binding.has_key?('_gensym') then
                                                          trampCall(@_gensym)
                                                        else raise NameError.new( "Error: undefined variable _gensym", "_gensym" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:223"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                    Cell.new(
                                                               )))
                                                       )
                                          end
                                      end
                                  else
                                      Cell.new()
                                  end
                              end
                          end
                      }
                    trampCall( callProcedure(   'or-iter',
                        begin
                            trampCall(_or_MIMARKiter)
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:226"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              trampCall(_lst)
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:226"] + __e.backtrace ) ; raise __e
                          end
                                 )))
                } ; ___lambda.call(
                nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._and_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_and'] = self.method( :_and_METHOD )
    @_and = 
    trampCall(
          LispMacro.new { |*__rest__| _lst = __rest__[0] ;  
              begin
                ___lambda = lambda { |_and_MIMARKiter| 
                    _and_MIMARKiter                     = 
                      Proc.new { |_lst| 
                          if ( 
                            trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                begin
                                  if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                    trampCall(@_eq_QUMARK)
                                  else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:238"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                0                                ,Cell.new(
                                  trampCall( self._length_METHOD(  'length',
                                      begin
                                        if @global_lisp_binding.has_key?('_length') then
                                          trampCall(@_length)
                                        else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:235"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            trampCall(_lst)
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:241"] + __e.backtrace ) ; raise __e
                                        end
                                               )))
                                         ))))
                           ) then
                              begin
                                true
                              end
                          else
                              if ( 
                                trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                    begin
                                      if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                        trampCall(@_eq_QUMARK)
                                      else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:238"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                    1                                    ,Cell.new(
                                      trampCall( self._length_METHOD(  'length',
                                          begin
                                            if @global_lisp_binding.has_key?('_length') then
                                              trampCall(@_length)
                                            else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:235"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                trampCall(_lst)
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:241"] + __e.backtrace ) ; raise __e
                                            end
                                                   )))
                                             ))))
                               ) then
                                  begin
                                      trampCall( self._car_METHOD(  'car',
                                          begin
                                            if @global_lisp_binding.has_key?('_car') then
                                              trampCall(@_car)
                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:238"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                trampCall(_lst)
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:241"] + __e.backtrace ) ; raise __e
                                            end
                                                   )))
                                  end
                              else
                                  if ( 
                                  true
                                   ) then
                                      begin
                                          trampCall( self._list_METHOD(  'list',
                                              begin
                                                if @global_lisp_binding.has_key?('_list') then
                                                  trampCall(@_list)
                                                else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:238"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                              :"if"                                              ,Cell.new(
                                                trampCall( self._list_METHOD(  'list',
                                                    begin
                                                      if @global_lisp_binding.has_key?('_list') then
                                                        trampCall(@_list)
                                                      else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:238"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                    :"not"                                                    ,Cell.new(
                                                      trampCall( self._list_METHOD(  'list',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_list') then
                                                              trampCall(@_list)
                                                            else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:238"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                          :"eq?"                                                          ,Cell.new(
                                                          false                                                          ,Cell.new(
                                                            trampCall( self._car_METHOD(  'car',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_car') then
                                                                    trampCall(@_car)
                                                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:238"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                  begin
                                                                      trampCall(_lst)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:241"] + __e.backtrace ) ; raise __e
                                                                  end
                                                                         )))
                                                                   )))))
                                                             ))))                                              ,Cell.new(
                                                trampCall( callProcedure(   'and-iter',
                                                    begin
                                                        trampCall(_and_MIMARKiter)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:241"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      trampCall( self._cdr_METHOD(  'cdr',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_cdr') then
                                                              trampCall(@_cdr)
                                                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:239"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            begin
                                                                trampCall(_lst)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:241"] + __e.backtrace ) ; raise __e
                                                            end
                                                                   )))
                                                             )))                                              ,Cell.new(
                                              false
                                                       ))))))
                                      end
                                  else
                                      Cell.new()
                                  end
                              end
                          end
                      }
                    trampCall( callProcedure(   'and-iter',
                        begin
                            trampCall(_and_MIMARKiter)
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:241"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              trampCall(_lst)
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:241"] + __e.backtrace ) ; raise __e
                          end
                                 )))
                } ; ___lambda.call(
                nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._apply_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_apply'] = self.method( :_apply_METHOD )
    @_apply = 
    trampCall(
          Proc.new { |_proc,*__rest__| _args = __rest__[0] ;  
              if ( 
                trampCall( self._null_QUMARK_METHOD(  'null?',
                    begin
                      if @global_lisp_binding.has_key?('_null_QUMARK') then
                        trampCall(@_null_QUMARK)
                      else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:245"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          trampCall(_args)
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:249"] + __e.backtrace ) ; raise __e
                      end
                             )))
               ) then
                  delayCall( 'proc',
                      begin
                          trampCall(_proc)
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:248"] + __e.backtrace ) ; raise __e
                      end                    ,
                    Cell.new(
                               ))
              else
                  trampCall( callProcedure( 'anonymouse', 
                      Proc.new { |_lol| 
                          trampCall( self._apply1_METHOD(  'apply1',
                              begin
                                if @global_lisp_binding.has_key?('_apply1') then
                                  trampCall(@_apply1)
                                else raise NameError.new( "Error: undefined variable _apply1", "_apply1" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:248"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    trampCall(_proc)
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:248"] + __e.backtrace ) ; raise __e
                                end                              ,Cell.new(
                                trampCall( self._append_METHOD(  'append',
                                    begin
                                      if @global_lisp_binding.has_key?('_append') then
                                        trampCall(@_append)
                                      else raise NameError.new( "Error: undefined variable _append", "_append" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:248"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      trampCall( self._reverse_METHOD(  'reverse',
                                          begin
                                            if @global_lisp_binding.has_key?('_reverse') then
                                              trampCall(@_reverse)
                                            else raise NameError.new( "Error: undefined variable _reverse", "_reverse" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:249"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            trampCall( self._cdr_METHOD(  'cdr',
                                                begin
                                                  if @global_lisp_binding.has_key?('_cdr') then
                                                    trampCall(@_cdr)
                                                  else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:248"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  begin
                                                      trampCall(_lol)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:248"] + __e.backtrace ) ; raise __e
                                                  end
                                                         )))
                                                   )))                                    ,Cell.new(
                                      trampCall( self._car_METHOD(  'car',
                                          begin
                                            if @global_lisp_binding.has_key?('_car') then
                                              trampCall(@_car)
                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:248"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                trampCall(_lol)
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:248"] + __e.backtrace ) ; raise __e
                                            end
                                                   )))
                                             ))))
                                       ))))
                      }                    ,
                      Cell.new(
                        trampCall( self._reverse_METHOD(  'reverse',
                            begin
                              if @global_lisp_binding.has_key?('_reverse') then
                                trampCall(@_reverse)
                              else raise NameError.new( "Error: undefined variable _reverse", "_reverse" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:249"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  trampCall(_args)
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:249"] + __e.backtrace ) ; raise __e
                              end
                                     )))
                               )))
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._quasiquote_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_quasiquote'] = self.method( :_quasiquote_METHOD )
    @_quasiquote = 
    trampCall(
          LispMacro.new { |_l| 
              begin
                ___lambda = lambda { |_mcons,_mappend,_foo| 
                    _mcons                     = 
                      Proc.new { |_f,_l,_r| 
                          if ( 
                            if ( 
                              trampCall( self._not_METHOD(  'not',
                                  begin
                                    if @global_lisp_binding.has_key?('_not') then
                                      trampCall(@_not)
                                    else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:283"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                        begin
                                          if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                            trampCall(@_eq_QUMARK)
                                          else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:304"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                        false                                        ,Cell.new(
                                          trampCall( self._pair_QUMARK_METHOD(  'pair?',
                                              begin
                                                if @global_lisp_binding.has_key?('_pair_QUMARK') then
                                                  trampCall(@_pair_QUMARK)
                                                else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:295"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                begin
                                                    trampCall(_r)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:280"] + __e.backtrace ) ; raise __e
                                                end
                                                       )))
                                                 ))))
                                           )))
                             ) then
                                if ( 
                                  trampCall( self._not_METHOD(  'not',
                                      begin
                                        if @global_lisp_binding.has_key?('_not') then
                                          trampCall(@_not)
                                        else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:283"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                            begin
                                              if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                trampCall(@_eq_QUMARK)
                                              else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:304"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                            false                                            ,Cell.new(
                                              trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                                  begin
                                                    if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                      trampCall(@_eq_QUMARK)
                                                    else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:304"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    trampCall( self._car_METHOD(  'car',
                                                        begin
                                                          if @global_lisp_binding.has_key?('_car') then
                                                            trampCall(@_car)
                                                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:307"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                          begin
                                                              trampCall(_r)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:280"] + __e.backtrace ) ; raise __e
                                                          end
                                                                 )))                                                  ,Cell.new(
                                                  :"quote"
                                                           ))))
                                                     ))))
                                               )))
                                 ) then
                                    if ( 
                                      trampCall( self._not_METHOD(  'not',
                                          begin
                                            if @global_lisp_binding.has_key?('_not') then
                                              trampCall(@_not)
                                            else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:283"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                                begin
                                                  if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                    trampCall(@_eq_QUMARK)
                                                  else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:304"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                false                                                ,Cell.new(
                                                  trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                                      begin
                                                        if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                          trampCall(@_eq_QUMARK)
                                                        else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:304"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        trampCall( self._car_METHOD(  'car',
                                                            begin
                                                              if @global_lisp_binding.has_key?('_car') then
                                                                trampCall(@_car)
                                                              else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:307"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              trampCall( self._cdr_METHOD(  'cdr',
                                                                  begin
                                                                    if @global_lisp_binding.has_key?('_cdr') then
                                                                      trampCall(@_cdr)
                                                                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                    begin
                                                                        trampCall(_r)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:280"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                           )))
                                                                     )))                                                      ,Cell.new(
                                                        trampCall( self._cdr_METHOD(  'cdr',
                                                            begin
                                                              if @global_lisp_binding.has_key?('_cdr') then
                                                                trampCall(@_cdr)
                                                              else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              begin
                                                                  trampCall(_f)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:275"] + __e.backtrace ) ; raise __e
                                                              end
                                                                     )))
                                                               ))))
                                                         ))))
                                                   )))
                                     ) then
                                        if ( 
                                          trampCall( self._not_METHOD(  'not',
                                              begin
                                                if @global_lisp_binding.has_key?('_not') then
                                                  trampCall(@_not)
                                                else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:283"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                                    begin
                                                      if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                        trampCall(@_eq_QUMARK)
                                                      else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:304"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                    false                                                    ,Cell.new(
                                                      trampCall( self._pair_QUMARK_METHOD(  'pair?',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_pair_QUMARK') then
                                                              trampCall(@_pair_QUMARK)
                                                            else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:295"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            begin
                                                                trampCall(_l)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:309"] + __e.backtrace ) ; raise __e
                                                            end
                                                                   )))
                                                             ))))
                                                       )))
                                         ) then
                                            if ( 
                                              trampCall( self._not_METHOD(  'not',
                                                  begin
                                                    if @global_lisp_binding.has_key?('_not') then
                                                      trampCall(@_not)
                                                    else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:283"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                                        begin
                                                          if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                            trampCall(@_eq_QUMARK)
                                                          else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:304"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                        false                                                        ,Cell.new(
                                                          trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                                              begin
                                                                if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                                  trampCall(@_eq_QUMARK)
                                                                else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:304"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                                trampCall( self._car_METHOD(  'car',
                                                                    begin
                                                                      if @global_lisp_binding.has_key?('_car') then
                                                                        trampCall(@_car)
                                                                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:307"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                    Cell.new(
                                                                      begin
                                                                          trampCall(_l)
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:309"] + __e.backtrace ) ; raise __e
                                                                      end
                                                                             )))                                                              ,Cell.new(
                                                              :"quote"
                                                                       ))))
                                                                 ))))
                                                           )))
                                             ) then
                                                trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                                    begin
                                                      if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                        trampCall(@_eq_QUMARK)
                                                      else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:304"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      trampCall( self._car_METHOD(  'car',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_car') then
                                                              trampCall(@_car)
                                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:307"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            trampCall( self._cdr_METHOD(  'cdr',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_cdr') then
                                                                    trampCall(@_cdr)
                                                                  else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                  begin
                                                                      trampCall(_l)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:309"] + __e.backtrace ) ; raise __e
                                                                  end
                                                                         )))
                                                                   )))                                                    ,Cell.new(
                                                      trampCall( self._car_METHOD(  'car',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_car') then
                                                              trampCall(@_car)
                                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:307"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            begin
                                                                trampCall(_f)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:275"] + __e.backtrace ) ; raise __e
                                                            end
                                                                   )))
                                                             ))))
                                            else
                                              false
                                            end
                                        else
                                          false
                                        end
                                    else
                                      false
                                    end
                                else
                                  false
                                end
                            else
                              false
                            end
                           ) then
                              if ( 
                                begin
                                  ___lambda = lambda { |___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20129| 
                                      if ( 
                                        begin
                                            trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20129)
                                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                        end
                                       ) then
                                          begin
                                              trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20129)
                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                          end
                                      else
                                          begin
                                            ___lambda = lambda { |___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20130| 
                                                if ( 
                                                  begin
                                                      trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20130)
                                                    rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                  end
                                                 ) then
                                                    begin
                                                        trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20130)
                                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                    end
                                                else
                                                    begin
                                                      ___lambda = lambda { |___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20131| 
                                                          if ( 
                                                            begin
                                                                trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20131)
                                                              rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                            end
                                                           ) then
                                                              begin
                                                                  trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20131)
                                                                rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                              end
                                                          else
                                                            false
                                                          end
                                                      } ; ___lambda.call(
                                                            trampCall( self._string_QUMARK_METHOD(  'string?',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_string_QUMARK') then
                                                                    trampCall(@_string_QUMARK)
                                                                  else raise NameError.new( "Error: undefined variable _string_QUMARK", "_string_QUMARK" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:284"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                  begin
                                                                      trampCall(_f)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:275"] + __e.backtrace ) ; raise __e
                                                                  end
                                                                         )))
                                                                 )
                                                    end
                                                end
                                            } ; ___lambda.call(
                                                  trampCall( self._number_QUMARK_METHOD(  'number?',
                                                      begin
                                                        if @global_lisp_binding.has_key?('_number_QUMARK') then
                                                          trampCall(@_number_QUMARK)
                                                        else raise NameError.new( "Error: undefined variable _number_QUMARK", "_number_QUMARK" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:284"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        begin
                                                            trampCall(_f)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:275"] + __e.backtrace ) ; raise __e
                                                        end
                                                               )))
                                                       )
                                          end
                                      end
                                  } ; ___lambda.call(
                                        trampCall( self._procedure_QUMARK_METHOD(  'procedure?',
                                            begin
                                              if @global_lisp_binding.has_key?('_procedure_QUMARK') then
                                                trampCall(@_procedure_QUMARK)
                                              else raise NameError.new( "Error: undefined variable _procedure_QUMARK", "_procedure_QUMARK" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:284"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              begin
                                                  trampCall(_f)
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:275"] + __e.backtrace ) ; raise __e
                                              end
                                                     )))
                                             )
                                end
                               ) then
                                  begin
                                      trampCall(_f)
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:275"] + __e.backtrace ) ; raise __e
                                  end
                              else
                                  trampCall( self._list_METHOD(  'list',
                                      begin
                                        if @global_lisp_binding.has_key?('_list') then
                                          trampCall(@_list)
                                        else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:286"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                      :"quote"                                      ,Cell.new(
                                        begin
                                            trampCall(_f)
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:275"] + __e.backtrace ) ; raise __e
                                        end
                                               ))))
                              end
                          else
                              if ( 
                                trampCall( self._eqv_QUMARK_METHOD(  'eqv?',
                                    begin
                                      if @global_lisp_binding.has_key?('_eqv_QUMARK') then
                                        trampCall(@_eqv_QUMARK)
                                      else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:268"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          trampCall(_l)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:309"] + __e.backtrace ) ; raise __e
                                      end                                    ,Cell.new(
                                      begin
                                        if @global_lisp_binding.has_key?('_vector') then
                                          trampCall(@_vector)
                                        else raise NameError.new( "Error: undefined variable _vector", "_vector" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:268"] + __e.backtrace ) ; raise __e
                                      end
                                             ))))
                               ) then
                                  trampCall( self._apply_METHOD(  'apply',
                                      begin
                                        if @global_lisp_binding.has_key?('_apply') then
                                          trampCall(@_apply)
                                        else raise NameError.new( "Error: undefined variable _apply", "_apply" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:269"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            trampCall(_l)
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:309"] + __e.backtrace ) ; raise __e
                                        end                                      ,Cell.new(
                                        trampCall( self._eval_METHOD(  'eval',
                                            begin
                                              if @global_lisp_binding.has_key?('_eval') then
                                                trampCall(@_eval)
                                              else raise NameError.new( "Error: undefined variable _eval", "_eval" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:269"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              begin
                                                  trampCall(_r)
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:280"] + __e.backtrace ) ; raise __e
                                              end
                                                     )))
                                               ))))
                              else
                                  trampCall( self._list_METHOD(  'list',
                                      begin
                                        if @global_lisp_binding.has_key?('_list') then
                                          trampCall(@_list)
                                        else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:286"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                      :"cons"                                      ,Cell.new(
                                        begin
                                            trampCall(_l)
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:309"] + __e.backtrace ) ; raise __e
                                        end                                      ,Cell.new(
                                        begin
                                            trampCall(_r)
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:280"] + __e.backtrace ) ; raise __e
                                        end
                                               )))))
                              end
                          end
                      }
                    _mappend                     = 
                      Proc.new { |_f,_l,_r| 
                          if ( 
                            begin
                              ___lambda = lambda { |___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20132| 
                                  if ( 
                                    begin
                                        trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20132)
                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                    end
                                   ) then
                                      begin
                                          trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20132)
                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                      end
                                  else
                                      begin
                                        ___lambda = lambda { |___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20133| 
                                            if ( 
                                              begin
                                                  trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20133)
                                                rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                              end
                                             ) then
                                                begin
                                                    trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20133)
                                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                end
                                            else
                                              false
                                            end
                                        } ; ___lambda.call(
                                              if ( 
                                                trampCall( self._not_METHOD(  'not',
                                                    begin
                                                      if @global_lisp_binding.has_key?('_not') then
                                                        trampCall(@_not)
                                                      else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:283"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                              trampCall(@_eq_QUMARK)
                                                            else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:304"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                          false                                                          ,Cell.new(
                                                            trampCall( self._pair_QUMARK_METHOD(  'pair?',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_pair_QUMARK') then
                                                                    trampCall(@_pair_QUMARK)
                                                                  else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:295"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                  begin
                                                                      trampCall(_r)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:280"] + __e.backtrace ) ; raise __e
                                                                  end
                                                                         )))
                                                                   ))))
                                                             )))
                                               ) then
                                                  if ( 
                                                    trampCall( self._not_METHOD(  'not',
                                                        begin
                                                          if @global_lisp_binding.has_key?('_not') then
                                                            trampCall(@_not)
                                                          else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:283"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                          trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                                              begin
                                                                if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                                  trampCall(@_eq_QUMARK)
                                                                else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:304"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                              false                                                              ,Cell.new(
                                                                trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                                                    begin
                                                                      if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                                        trampCall(@_eq_QUMARK)
                                                                      else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:304"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                    Cell.new(
                                                                      trampCall( self._car_METHOD(  'car',
                                                                          begin
                                                                            if @global_lisp_binding.has_key?('_car') then
                                                                              trampCall(@_car)
                                                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:307"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                          Cell.new(
                                                                            begin
                                                                                trampCall(_r)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:280"] + __e.backtrace ) ; raise __e
                                                                            end
                                                                                   )))                                                                    ,Cell.new(
                                                                    :"quote"
                                                                             ))))
                                                                       ))))
                                                                 )))
                                                   ) then
                                                      trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                              trampCall(@_eq_QUMARK)
                                                            else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:304"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            trampCall( self._car_METHOD(  'car',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_car') then
                                                                    trampCall(@_car)
                                                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:307"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                  trampCall( self._cdr_METHOD(  'cdr',
                                                                      begin
                                                                        if @global_lisp_binding.has_key?('_cdr') then
                                                                          trampCall(@_cdr)
                                                                        else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                      Cell.new(
                                                                        begin
                                                                            trampCall(_r)
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:280"] + __e.backtrace ) ; raise __e
                                                                        end
                                                                               )))
                                                                         )))                                                          ,Cell.new(
                                                          Cell.new()
                                                                   ))))
                                                  else
                                                    false
                                                  end
                                              else
                                                false
                                              end
                                                   )
                                      end
                                  end
                              } ; ___lambda.call(
                                    trampCall( self._null_QUMARK_METHOD(  'null?',
                                        begin
                                          if @global_lisp_binding.has_key?('_null_QUMARK') then
                                            trampCall(@_null_QUMARK)
                                          else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:275"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          trampCall( self._cdr_METHOD(  'cdr',
                                              begin
                                                if @global_lisp_binding.has_key?('_cdr') then
                                                  trampCall(@_cdr)
                                                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                begin
                                                    trampCall(_f)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:275"] + __e.backtrace ) ; raise __e
                                                end
                                                       )))
                                                 )))
                                         )
                            end
                           ) then
                              begin
                                  trampCall(_l)
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:309"] + __e.backtrace ) ; raise __e
                              end
                          else
                              trampCall( self._list_METHOD(  'list',
                                  begin
                                    if @global_lisp_binding.has_key?('_list') then
                                      trampCall(@_list)
                                    else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:286"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                  :"append"                                  ,Cell.new(
                                    begin
                                        trampCall(_l)
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:309"] + __e.backtrace ) ; raise __e
                                    end                                  ,Cell.new(
                                    begin
                                        trampCall(_r)
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:280"] + __e.backtrace ) ; raise __e
                                    end
                                           )))))
                          end
                      }
                    _foo                     = 
                      Proc.new { |_level,_form| 
                          if ( 
                            trampCall( self._not_METHOD(  'not',
                                begin
                                  if @global_lisp_binding.has_key?('_not') then
                                    trampCall(@_not)
                                  else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:283"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  trampCall( self._pair_QUMARK_METHOD(  'pair?',
                                      begin
                                        if @global_lisp_binding.has_key?('_pair_QUMARK') then
                                          trampCall(@_pair_QUMARK)
                                        else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:295"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            trampCall(_form)
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                        end
                                               )))
                                         )))
                           ) then
                              begin
                                  if ( 
                                    begin
                                      ___lambda = lambda { |___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20137| 
                                          if ( 
                                            begin
                                                trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20137)
                                              rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                            end
                                           ) then
                                              begin
                                                  trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20137)
                                                rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                              end
                                          else
                                              begin
                                                ___lambda = lambda { |___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20138| 
                                                    if ( 
                                                      begin
                                                          trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20138)
                                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                      end
                                                     ) then
                                                        begin
                                                            trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20138)
                                                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                        end
                                                    else
                                                        begin
                                                          ___lambda = lambda { |___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20139| 
                                                              if ( 
                                                                begin
                                                                    trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20139)
                                                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                end
                                                               ) then
                                                                  begin
                                                                      trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20139)
                                                                    rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                  end
                                                              else
                                                                false
                                                              end
                                                          } ; ___lambda.call(
                                                                trampCall( self._string_QUMARK_METHOD(  'string?',
                                                                    begin
                                                                      if @global_lisp_binding.has_key?('_string_QUMARK') then
                                                                        trampCall(@_string_QUMARK)
                                                                      else raise NameError.new( "Error: undefined variable _string_QUMARK", "_string_QUMARK" ) end
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:284"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                    Cell.new(
                                                                      begin
                                                                          trampCall(_form)
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                                      end
                                                                             )))
                                                                     )
                                                        end
                                                    end
                                                } ; ___lambda.call(
                                                      trampCall( self._number_QUMARK_METHOD(  'number?',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_number_QUMARK') then
                                                              trampCall(@_number_QUMARK)
                                                            else raise NameError.new( "Error: undefined variable _number_QUMARK", "_number_QUMARK" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:284"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            begin
                                                                trampCall(_form)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                            end
                                                                   )))
                                                           )
                                              end
                                          end
                                      } ; ___lambda.call(
                                            trampCall( self._procedure_QUMARK_METHOD(  'procedure?',
                                                begin
                                                  if @global_lisp_binding.has_key?('_procedure_QUMARK') then
                                                    trampCall(@_procedure_QUMARK)
                                                  else raise NameError.new( "Error: undefined variable _procedure_QUMARK", "_procedure_QUMARK" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:284"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  begin
                                                      trampCall(_form)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                  end
                                                         )))
                                                 )
                                    end
                                   ) then
                                      begin
                                          trampCall(_form)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                      end
                                  else
                                      trampCall( self._list_METHOD(  'list',
                                          begin
                                            if @global_lisp_binding.has_key?('_list') then
                                              trampCall(@_list)
                                            else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:286"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                          :"quote"                                          ,Cell.new(
                                            begin
                                                trampCall(_form)
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                            end
                                                   ))))
                                  end
                              end
                          else
                              if ( 
                                trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                    begin
                                      if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                        trampCall(@_eq_QUMARK)
                                      else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:304"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                    :"quasiquote"                                    ,Cell.new(
                                      trampCall( self._car_METHOD(  'car',
                                          begin
                                            if @global_lisp_binding.has_key?('_car') then
                                              trampCall(@_car)
                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:307"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                trampCall(_form)
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                            end
                                                   )))
                                             ))))
                               ) then
                                  begin
                                      trampCall( callProcedure(   'mcons',
                                          begin
                                              trampCall(_mcons)
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:307"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                trampCall(_form)
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                            end                                          ,Cell.new(
                                          Cell.new(:"quote",Cell.new(:"quasiquote"))                                          ,Cell.new(
                                            trampCall( callProcedure(   'foo',
                                                begin
                                                    trampCall(_foo)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:309"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  trampCall( self.__PLMARK_METHOD(  '+',
                                                      begin
                                                        if @global_lisp_binding.has_key?('__PLMARK') then
                                                          trampCall(@__PLMARK)
                                                        else raise NameError.new( "Error: undefined variable __PLMARK", "__PLMARK" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:293"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        begin
                                                            trampCall(_level)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,Cell.new(
                                                      1
                                                               ))))                                                ,Cell.new(
                                                  trampCall( self._cdr_METHOD(  'cdr',
                                                      begin
                                                        if @global_lisp_binding.has_key?('_cdr') then
                                                          trampCall(@_cdr)
                                                        else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        begin
                                                            trampCall(_form)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                        end
                                                               )))
                                                         ))))
                                                   )))))
                                  end
                              else
                                  if ( 
                                  true
                                   ) then
                                      begin
                                          if ( 
                                            trampCall( self._zero_QUMARK_METHOD(  'zero?',
                                                begin
                                                  if @global_lisp_binding.has_key?('_zero_QUMARK') then
                                                    trampCall(@_zero_QUMARK)
                                                  else raise NameError.new( "Error: undefined variable _zero_QUMARK", "_zero_QUMARK" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:290"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  begin
                                                      trampCall(_level)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                  end
                                                         )))
                                           ) then
                                              if ( 
                                                trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                                    begin
                                                      if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                        trampCall(@_eq_QUMARK)
                                                      else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:304"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      trampCall( self._car_METHOD(  'car',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_car') then
                                                              trampCall(@_car)
                                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:307"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            begin
                                                                trampCall(_form)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                            end
                                                                   )))                                                    ,Cell.new(
                                                    :"unquote"
                                                             ))))
                                               ) then
                                                  begin
                                                      trampCall( self._car_METHOD(  'car',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_car') then
                                                              trampCall(@_car)
                                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:307"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            trampCall( self._cdr_METHOD(  'cdr',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_cdr') then
                                                                    trampCall(@_cdr)
                                                                  else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                  begin
                                                                      trampCall(_form)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                                  end
                                                                         )))
                                                                   )))
                                                  end
                                              else
                                                  if ( 
                                                    trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                                        begin
                                                          if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                            trampCall(@_eq_QUMARK)
                                                          else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:304"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                          trampCall( self._car_METHOD(  'car',
                                                              begin
                                                                if @global_lisp_binding.has_key?('_car') then
                                                                  trampCall(@_car)
                                                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:307"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                                begin
                                                                    trampCall(_form)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                                end
                                                                       )))                                                        ,Cell.new(
                                                        :"unquote-splicing"
                                                                 ))))
                                                   ) then
                                                      begin
                                                          trampCall( self._raise_METHOD(  'raise',
                                                              begin
                                                                if @global_lisp_binding.has_key?('_raise') then
                                                                  trampCall(@_raise)
                                                                else raise NameError.new( "Error: undefined variable _raise", "_raise" ) end
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:293"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                                begin
                                                                    trampCall(RuntimeError)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:293"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,Cell.new(
                                                                trampCall( self.__PLMARK_METHOD(  '+',
                                                                    begin
                                                                      if @global_lisp_binding.has_key?('__PLMARK') then
                                                                        trampCall(@__PLMARK)
                                                                      else raise NameError.new( "Error: undefined variable __PLMARK", "__PLMARK" ) end
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:293"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                    Cell.new(
                                                                    "Error: Unquote-splicing wasn't in a list: "                                                                    ,Cell.new(
                                                                      trampCall( self._write_MIMARKto_MIMARKstring_METHOD(  'write-to-string',
                                                                          begin
                                                                            if @global_lisp_binding.has_key?('_write_MIMARKto_MIMARKstring') then
                                                                              trampCall(@_write_MIMARKto_MIMARKstring)
                                                                            else raise NameError.new( "Error: undefined variable _write_MIMARKto_MIMARKstring", "_write_MIMARKto_MIMARKstring" ) end
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:293"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                          Cell.new(
                                                                            begin
                                                                                trampCall(_form)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                                            end
                                                                                   )))
                                                                             ))))                                                              ,Cell.new(
                                                                trampCall( self._sprintf_METHOD(  'sprintf',
                                                                    begin
                                                                      if @global_lisp_binding.has_key?('_sprintf') then
                                                                        trampCall(@_sprintf)
                                                                      else raise NameError.new( "Error: undefined variable _sprintf", "_sprintf" ) end
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:294"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                    Cell.new(
                                                                    "%s:%s outside list."                                                                    ,Cell.new(
                                                                      trampCall( self.__ASMARKFILE_ASMARK_METHOD(  '*FILE*',
                                                                          begin
                                                                            if @global_lisp_binding.has_key?('__ASMARKFILE_ASMARK') then
                                                                              trampCall(@__ASMARKFILE_ASMARK)
                                                                            else raise NameError.new( "Error: undefined variable __ASMARKFILE_ASMARK", "__ASMARKFILE_ASMARK" ) end
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:294"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                        Cell.new(
                                                                                   )))                                                                    ,Cell.new(
                                                                      trampCall( self.__ASMARKLINE_ASMARK_METHOD(  '*LINE*',
                                                                          begin
                                                                            if @global_lisp_binding.has_key?('__ASMARKLINE_ASMARK') then
                                                                              trampCall(@__ASMARKLINE_ASMARK)
                                                                            else raise NameError.new( "Error: undefined variable __ASMARKLINE_ASMARK", "__ASMARKLINE_ASMARK" ) end
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:294"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                        Cell.new(
                                                                                   )))
                                                                             )))))
                                                                       )))))
                                                      end
                                                  else
                                                      if ( 
                                                        if ( 
                                                          trampCall( self._not_METHOD(  'not',
                                                              begin
                                                                if @global_lisp_binding.has_key?('_not') then
                                                                  trampCall(@_not)
                                                                else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:283"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                                trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                                                    begin
                                                                      if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                                        trampCall(@_eq_QUMARK)
                                                                      else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:304"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                    Cell.new(
                                                                    false                                                                    ,Cell.new(
                                                                      trampCall( self._pair_QUMARK_METHOD(  'pair?',
                                                                          begin
                                                                            if @global_lisp_binding.has_key?('_pair_QUMARK') then
                                                                              trampCall(@_pair_QUMARK)
                                                                            else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:295"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                          Cell.new(
                                                                            trampCall( self._car_METHOD(  'car',
                                                                                begin
                                                                                  if @global_lisp_binding.has_key?('_car') then
                                                                                    trampCall(@_car)
                                                                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:307"] + __e.backtrace ) ; raise __e
                                                                                end                                                                              ,
                                                                                Cell.new(
                                                                                  begin
                                                                                      trampCall(_form)
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                                                  end
                                                                                         )))
                                                                                   )))
                                                                             ))))
                                                                       )))
                                                         ) then
                                                            trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                                    trampCall(@_eq_QUMARK)
                                                                  else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:304"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                  trampCall( self._car_METHOD(  'car',
                                                                      begin
                                                                        if @global_lisp_binding.has_key?('_car') then
                                                                          trampCall(@_car)
                                                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:307"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                      Cell.new(
                                                                        trampCall( self._car_METHOD(  'car',
                                                                            begin
                                                                              if @global_lisp_binding.has_key?('_car') then
                                                                                trampCall(@_car)
                                                                              else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:307"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                            Cell.new(
                                                                              begin
                                                                                  trampCall(_form)
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                                              end
                                                                                     )))
                                                                               )))                                                                ,Cell.new(
                                                                :"unquote-splicing"
                                                                         ))))
                                                        else
                                                          false
                                                        end
                                                       ) then
                                                          begin
                                                              trampCall( callProcedure(   'mappend',
                                                                  begin
                                                                      trampCall(_mappend)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:297"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                    begin
                                                                        trampCall(_form)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,Cell.new(
                                                                    trampCall( self._car_METHOD(  'car',
                                                                        begin
                                                                          if @global_lisp_binding.has_key?('_car') then
                                                                            trampCall(@_car)
                                                                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:307"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                        Cell.new(
                                                                          trampCall( self._cdr_METHOD(  'cdr',
                                                                              begin
                                                                                if @global_lisp_binding.has_key?('_cdr') then
                                                                                  trampCall(@_cdr)
                                                                                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                                              end                                                                            ,
                                                                              Cell.new(
                                                                                trampCall( self._car_METHOD(  'car',
                                                                                    begin
                                                                                      if @global_lisp_binding.has_key?('_car') then
                                                                                        trampCall(@_car)
                                                                                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:307"] + __e.backtrace ) ; raise __e
                                                                                    end                                                                                  ,
                                                                                    Cell.new(
                                                                                      begin
                                                                                          trampCall(_form)
                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                                                      end
                                                                                             )))
                                                                                       )))
                                                                                 )))                                                                  ,Cell.new(
                                                                    trampCall( callProcedure(   'foo',
                                                                        begin
                                                                            trampCall(_foo)
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:309"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                        Cell.new(
                                                                          begin
                                                                              trampCall(_level)
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,Cell.new(
                                                                          trampCall( self._cdr_METHOD(  'cdr',
                                                                              begin
                                                                                if @global_lisp_binding.has_key?('_cdr') then
                                                                                  trampCall(@_cdr)
                                                                                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                                              end                                                                            ,
                                                                              Cell.new(
                                                                                begin
                                                                                    trampCall(_form)
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                                                end
                                                                                       )))
                                                                                 ))))
                                                                           )))))
                                                          end
                                                      else
                                                          if ( 
                                                          true
                                                           ) then
                                                              begin
                                                                  trampCall( callProcedure(   'mcons',
                                                                      begin
                                                                          trampCall(_mcons)
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:307"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                      Cell.new(
                                                                        begin
                                                                            trampCall(_form)
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,Cell.new(
                                                                        trampCall( callProcedure(   'foo',
                                                                            begin
                                                                                trampCall(_foo)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:309"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                            Cell.new(
                                                                              begin
                                                                                  trampCall(_level)
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                                              end                                                                            ,Cell.new(
                                                                              trampCall( self._car_METHOD(  'car',
                                                                                  begin
                                                                                    if @global_lisp_binding.has_key?('_car') then
                                                                                      trampCall(@_car)
                                                                                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:307"] + __e.backtrace ) ; raise __e
                                                                                  end                                                                                ,
                                                                                  Cell.new(
                                                                                    begin
                                                                                        trampCall(_form)
                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                                                    end
                                                                                           )))
                                                                                     ))))                                                                      ,Cell.new(
                                                                        trampCall( callProcedure(   'foo',
                                                                            begin
                                                                                trampCall(_foo)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:309"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                            Cell.new(
                                                                              begin
                                                                                  trampCall(_level)
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                                              end                                                                            ,Cell.new(
                                                                              trampCall( self._cdr_METHOD(  'cdr',
                                                                                  begin
                                                                                    if @global_lisp_binding.has_key?('_cdr') then
                                                                                      trampCall(@_cdr)
                                                                                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                                                  end                                                                                ,
                                                                                  Cell.new(
                                                                                    begin
                                                                                        trampCall(_form)
                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                                                    end
                                                                                           )))
                                                                                     ))))
                                                                               )))))
                                                              end
                                                          else
                                                              Cell.new()
                                                          end
                                                      end
                                                  end
                                              end
                                          else
                                              if ( 
                                                trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                                    begin
                                                      if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                        trampCall(@_eq_QUMARK)
                                                      else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:304"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      trampCall( self._car_METHOD(  'car',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_car') then
                                                              trampCall(@_car)
                                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:307"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            begin
                                                                trampCall(_form)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                            end
                                                                   )))                                                    ,Cell.new(
                                                    :"unquote"
                                                             ))))
                                               ) then
                                                  begin
                                                      trampCall( callProcedure(   'mcons',
                                                          begin
                                                              trampCall(_mcons)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:307"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            begin
                                                                trampCall(_form)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,Cell.new(
                                                          Cell.new(:"quote",Cell.new(:"unquote"))                                                          ,Cell.new(
                                                            trampCall( callProcedure(   'foo',
                                                                begin
                                                                    trampCall(_foo)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:309"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                  trampCall( self.__MIMARK_METHOD(  '-',
                                                                      begin
                                                                        if @global_lisp_binding.has_key?('__MIMARK') then
                                                                          trampCall(@__MIMARK)
                                                                        else raise NameError.new( "Error: undefined variable __MIMARK", "__MIMARK" ) end
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:306"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                      Cell.new(
                                                                        begin
                                                                            trampCall(_level)
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,Cell.new(
                                                                      1
                                                                               ))))                                                                ,Cell.new(
                                                                  trampCall( self._cdr_METHOD(  'cdr',
                                                                      begin
                                                                        if @global_lisp_binding.has_key?('_cdr') then
                                                                          trampCall(@_cdr)
                                                                        else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                      Cell.new(
                                                                        begin
                                                                            trampCall(_form)
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                                        end
                                                                               )))
                                                                         ))))
                                                                   )))))
                                                  end
                                              else
                                                  if ( 
                                                    trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                                        begin
                                                          if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                            trampCall(@_eq_QUMARK)
                                                          else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:304"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                          trampCall( self._car_METHOD(  'car',
                                                              begin
                                                                if @global_lisp_binding.has_key?('_car') then
                                                                  trampCall(@_car)
                                                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:307"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                                begin
                                                                    trampCall(_form)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                                end
                                                                       )))                                                        ,Cell.new(
                                                        :"unquote-splicing"
                                                                 ))))
                                                   ) then
                                                      begin
                                                          trampCall( callProcedure(   'mcons',
                                                              begin
                                                                  trampCall(_mcons)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:307"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                                begin
                                                                    trampCall(_form)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,Cell.new(
                                                              Cell.new(:"quote",Cell.new(:"unquote-splicing"))                                                              ,Cell.new(
                                                                trampCall( callProcedure(   'foo',
                                                                    begin
                                                                        trampCall(_foo)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:309"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                    Cell.new(
                                                                      trampCall( self.__MIMARK_METHOD(  '-',
                                                                          begin
                                                                            if @global_lisp_binding.has_key?('__MIMARK') then
                                                                              trampCall(@__MIMARK)
                                                                            else raise NameError.new( "Error: undefined variable __MIMARK", "__MIMARK" ) end
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:306"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                          Cell.new(
                                                                            begin
                                                                                trampCall(_level)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,Cell.new(
                                                                          1
                                                                                   ))))                                                                    ,Cell.new(
                                                                      trampCall( self._cdr_METHOD(  'cdr',
                                                                          begin
                                                                            if @global_lisp_binding.has_key?('_cdr') then
                                                                              trampCall(@_cdr)
                                                                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                          Cell.new(
                                                                            begin
                                                                                trampCall(_form)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                                            end
                                                                                   )))
                                                                             ))))
                                                                       )))))
                                                      end
                                                  else
                                                      if ( 
                                                      true
                                                       ) then
                                                          begin
                                                              trampCall( callProcedure(   'mcons',
                                                                  begin
                                                                      trampCall(_mcons)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:307"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                    begin
                                                                        trampCall(_form)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,Cell.new(
                                                                    trampCall( callProcedure(   'foo',
                                                                        begin
                                                                            trampCall(_foo)
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:309"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                        Cell.new(
                                                                          begin
                                                                              trampCall(_level)
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,Cell.new(
                                                                          trampCall( self._car_METHOD(  'car',
                                                                              begin
                                                                                if @global_lisp_binding.has_key?('_car') then
                                                                                  trampCall(@_car)
                                                                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:307"] + __e.backtrace ) ; raise __e
                                                                              end                                                                            ,
                                                                              Cell.new(
                                                                                begin
                                                                                    trampCall(_form)
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                                                end
                                                                                       )))
                                                                                 ))))                                                                  ,Cell.new(
                                                                    trampCall( callProcedure(   'foo',
                                                                        begin
                                                                            trampCall(_foo)
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:309"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                        Cell.new(
                                                                          begin
                                                                              trampCall(_level)
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,Cell.new(
                                                                          trampCall( self._cdr_METHOD(  'cdr',
                                                                              begin
                                                                                if @global_lisp_binding.has_key?('_cdr') then
                                                                                  trampCall(@_cdr)
                                                                                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                                              end                                                                            ,
                                                                              Cell.new(
                                                                                begin
                                                                                    trampCall(_form)
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:308"] + __e.backtrace ) ; raise __e
                                                                                end
                                                                                       )))
                                                                                 ))))
                                                                           )))))
                                                          end
                                                      else
                                                          Cell.new()
                                                      end
                                                  end
                                              end
                                          end
                                      end
                                  else
                                      Cell.new()
                                  end
                              end
                          end
                      }
                    trampCall( callProcedure(   'foo',
                        begin
                            trampCall(_foo)
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:309"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                        0                        ,Cell.new(
                          begin
                              trampCall(_l)
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:309"] + __e.backtrace ) ; raise __e
                          end
                                 ))))
                } ; ___lambda.call(
                nil,nil,nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._unquote_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_unquote'] = self.method( :_unquote_METHOD )
    @_unquote = 
    trampCall(
          LispMacro.new { |_lst| 
              trampCall( self._raise_METHOD(  'raise',
                  begin
                    if @global_lisp_binding.has_key?('_raise') then
                      trampCall(@_raise)
                    else raise NameError.new( "Error: undefined variable _raise", "_raise" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:313"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    begin
                        trampCall(RuntimeError)
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:313"] + __e.backtrace ) ; raise __e
                    end                  ,Cell.new(
                  "Error: unquote appeared outside quasiquote"                  ,Cell.new(
                    trampCall( self._sprintf_METHOD(  'sprintf',
                        begin
                          if @global_lisp_binding.has_key?('_sprintf') then
                            trampCall(@_sprintf)
                          else raise NameError.new( "Error: undefined variable _sprintf", "_sprintf" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:313"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                        "%s:%s outside quasiquote"                        ,Cell.new(
                          trampCall( self.__ASMARKFILE_ASMARK_METHOD(  '*FILE*',
                              begin
                                if @global_lisp_binding.has_key?('__ASMARKFILE_ASMARK') then
                                  trampCall(@__ASMARKFILE_ASMARK)
                                else raise NameError.new( "Error: undefined variable __ASMARKFILE_ASMARK", "__ASMARKFILE_ASMARK" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:313"] + __e.backtrace ) ; raise __e
                              end                            ,
                            Cell.new(
                                       )))                        ,Cell.new(
                          trampCall( self.__ASMARKLINE_ASMARK_METHOD(  '*LINE*',
                              begin
                                if @global_lisp_binding.has_key?('__ASMARKLINE_ASMARK') then
                                  trampCall(@__ASMARKLINE_ASMARK)
                                else raise NameError.new( "Error: undefined variable __ASMARKLINE_ASMARK", "__ASMARKLINE_ASMARK" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:313"] + __e.backtrace ) ; raise __e
                              end                            ,
                            Cell.new(
                                       )))
                                 )))))
                           )))))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._unquote_MIMARKsplicing_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_unquote_MIMARKsplicing'] = self.method( :_unquote_MIMARKsplicing_METHOD )
    @_unquote_MIMARKsplicing = 
    trampCall(
          LispMacro.new { |_lst| 
              trampCall( self._raise_METHOD(  'raise',
                  begin
                    if @global_lisp_binding.has_key?('_raise') then
                      trampCall(@_raise)
                    else raise NameError.new( "Error: undefined variable _raise", "_raise" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:318"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    begin
                        trampCall(RuntimeError)
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:318"] + __e.backtrace ) ; raise __e
                    end                  ,Cell.new(
                  "Error: unquote-splicing appeared outside quasiquote"                  ,Cell.new(
                    trampCall( self._sprintf_METHOD(  'sprintf',
                        begin
                          if @global_lisp_binding.has_key?('_sprintf') then
                            trampCall(@_sprintf)
                          else raise NameError.new( "Error: undefined variable _sprintf", "_sprintf" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:318"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                        "%s:%s outside quasiquote"                        ,Cell.new(
                          trampCall( self.__ASMARKFILE_ASMARK_METHOD(  '*FILE*',
                              begin
                                if @global_lisp_binding.has_key?('__ASMARKFILE_ASMARK') then
                                  trampCall(@__ASMARKFILE_ASMARK)
                                else raise NameError.new( "Error: undefined variable __ASMARKFILE_ASMARK", "__ASMARKFILE_ASMARK" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:318"] + __e.backtrace ) ; raise __e
                              end                            ,
                            Cell.new(
                                       )))                        ,Cell.new(
                          trampCall( self.__ASMARKLINE_ASMARK_METHOD(  '*LINE*',
                              begin
                                if @global_lisp_binding.has_key?('__ASMARKLINE_ASMARK') then
                                  trampCall(@__ASMARKLINE_ASMARK)
                                else raise NameError.new( "Error: undefined variable __ASMARKLINE_ASMARK", "__ASMARKLINE_ASMARK" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:318"] + __e.backtrace ) ; raise __e
                              end                            ,
                            Cell.new(
                                       )))
                                 )))))
                           )))))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._when_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_when'] = self.method( :_when_METHOD )
    @_when = 
    trampCall(
          LispMacro.new { |*__rest__| _form = __rest__[0] ;  
              trampCall( self._cons_METHOD(  'cons',
                  begin
                    if @global_lisp_binding.has_key?('_cons') then
                      trampCall(@_cons)
                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"if"                  ,Cell.new(
                    trampCall( self._cons_METHOD(  'cons',
                        begin
                          if @global_lisp_binding.has_key?('_cons') then
                            trampCall(@_cons)
                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          trampCall( self._car_METHOD(  'car',
                              begin
                                if @global_lisp_binding.has_key?('_car') then
                                  trampCall(@_car)
                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:323"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    trampCall(_form)
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:323"] + __e.backtrace ) ; raise __e
                                end
                                       )))                        ,Cell.new(
                          trampCall( self._cons_METHOD(  'cons',
                              begin
                                if @global_lisp_binding.has_key?('_cons') then
                                  trampCall(@_cons)
                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                trampCall( self._cons_METHOD(  'cons',
                                    begin
                                      if @global_lisp_binding.has_key?('_cons') then
                                        trampCall(@_cons)
                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                    :"begin"                                    ,Cell.new(
                                      trampCall( self._cdr_METHOD(  'cdr',
                                          begin
                                            if @global_lisp_binding.has_key?('_cdr') then
                                              trampCall(@_cdr)
                                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:323"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                trampCall(_form)
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:323"] + __e.backtrace ) ; raise __e
                                            end
                                                   )))
                                             ))))                              ,Cell.new(
                              
                                       ))))
                                 ))))
                           ))))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._unless_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_unless'] = self.method( :_unless_METHOD )
    @_unless = 
    trampCall(
          LispMacro.new { |*__rest__| _form = __rest__[0] ;  
              trampCall( self._cons_METHOD(  'cons',
                  begin
                    if @global_lisp_binding.has_key?('_cons') then
                      trampCall(@_cons)
                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"if"                  ,Cell.new(
                    trampCall( self._cons_METHOD(  'cons',
                        begin
                          if @global_lisp_binding.has_key?('_cons') then
                            trampCall(@_cons)
                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          trampCall( self._cons_METHOD(  'cons',
                              begin
                                if @global_lisp_binding.has_key?('_cons') then
                                  trampCall(@_cons)
                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                              :"not"                              ,Cell.new(
                                trampCall( self._cons_METHOD(  'cons',
                                    begin
                                      if @global_lisp_binding.has_key?('_cons') then
                                        trampCall(@_cons)
                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      trampCall( self._car_METHOD(  'car',
                                          begin
                                            if @global_lisp_binding.has_key?('_car') then
                                              trampCall(@_car)
                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:327"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                trampCall(_form)
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:327"] + __e.backtrace ) ; raise __e
                                            end
                                                   )))                                    ,Cell.new(
                                    
                                             ))))
                                       ))))                        ,Cell.new(
                          trampCall( self._cons_METHOD(  'cons',
                              begin
                                if @global_lisp_binding.has_key?('_cons') then
                                  trampCall(@_cons)
                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                trampCall( self._cons_METHOD(  'cons',
                                    begin
                                      if @global_lisp_binding.has_key?('_cons') then
                                        trampCall(@_cons)
                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                    :"begin"                                    ,Cell.new(
                                      trampCall( self._cdr_METHOD(  'cdr',
                                          begin
                                            if @global_lisp_binding.has_key?('_cdr') then
                                              trampCall(@_cdr)
                                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:327"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                trampCall(_form)
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:327"] + __e.backtrace ) ; raise __e
                                            end
                                                   )))
                                             ))))                              ,Cell.new(
                              
                                       ))))
                                 ))))
                           ))))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._while_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_while'] = self.method( :_while_METHOD )
    @_while = 
    trampCall(
          LispMacro.new { |*__rest__| _form = __rest__[0] ;  
              begin
                ___lambda = lambda { |_sym| 
                    trampCall( self._cons_METHOD(  'cons',
                        begin
                          if @global_lisp_binding.has_key?('_cons') then
                            trampCall(@_cons)
                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                        :"begin"                        ,Cell.new(
                          trampCall( self._cons_METHOD(  'cons',
                              begin
                                if @global_lisp_binding.has_key?('_cons') then
                                  trampCall(@_cons)
                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                trampCall( self._cons_METHOD(  'cons',
                                    begin
                                      if @global_lisp_binding.has_key?('_cons') then
                                        trampCall(@_cons)
                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                    :"define"                                    ,Cell.new(
                                      trampCall( self._cons_METHOD(  'cons',
                                          begin
                                            if @global_lisp_binding.has_key?('_cons') then
                                              trampCall(@_cons)
                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                trampCall(_sym)
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:338"] + __e.backtrace ) ; raise __e
                                            end                                          ,Cell.new(
                                            trampCall( self._cons_METHOD(  'cons',
                                                begin
                                                  if @global_lisp_binding.has_key?('_cons') then
                                                    trampCall(@_cons)
                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  trampCall( self._cons_METHOD(  'cons',
                                                      begin
                                                        if @global_lisp_binding.has_key?('_cons') then
                                                          trampCall(@_cons)
                                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                      :"lambda"                                                      ,Cell.new(
                                                        trampCall( self._cons_METHOD(  'cons',
                                                            begin
                                                              if @global_lisp_binding.has_key?('_cons') then
                                                                trampCall(@_cons)
                                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                            Cell.new()                                                            ,Cell.new(
                                                              trampCall( self._cons_METHOD(  'cons',
                                                                  begin
                                                                    if @global_lisp_binding.has_key?('_cons') then
                                                                      trampCall(@_cons)
                                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                    trampCall( self._cons_METHOD(  'cons',
                                                                        begin
                                                                          if @global_lisp_binding.has_key?('_cons') then
                                                                            trampCall(@_cons)
                                                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                        Cell.new(
                                                                        :"if"                                                                        ,Cell.new(
                                                                          trampCall( self._cons_METHOD(  'cons',
                                                                              begin
                                                                                if @global_lisp_binding.has_key?('_cons') then
                                                                                  trampCall(@_cons)
                                                                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                                                              end                                                                            ,
                                                                              Cell.new(
                                                                                trampCall( self._car_METHOD(  'car',
                                                                                    begin
                                                                                      if @global_lisp_binding.has_key?('_car') then
                                                                                        trampCall(@_car)
                                                                                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:335"] + __e.backtrace ) ; raise __e
                                                                                    end                                                                                  ,
                                                                                    Cell.new(
                                                                                      begin
                                                                                          trampCall(_form)
                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:336"] + __e.backtrace ) ; raise __e
                                                                                      end
                                                                                             )))                                                                              ,Cell.new(
                                                                                trampCall( self._cons_METHOD(  'cons',
                                                                                    begin
                                                                                      if @global_lisp_binding.has_key?('_cons') then
                                                                                        trampCall(@_cons)
                                                                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                                                                    end                                                                                  ,
                                                                                    Cell.new(
                                                                                      trampCall( self._cons_METHOD(  'cons',
                                                                                          begin
                                                                                            if @global_lisp_binding.has_key?('_cons') then
                                                                                              trampCall(@_cons)
                                                                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                                                                          end                                                                                        ,
                                                                                          Cell.new(
                                                                                          :"begin"                                                                                          ,Cell.new(
                                                                                            trampCall( self._append_METHOD(  'append',
                                                                                                begin
                                                                                                  if @global_lisp_binding.has_key?('_append') then
                                                                                                    trampCall(@_append)
                                                                                                  else raise NameError.new( "Error: undefined variable _append", "_append" ) end
                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:280"] + __e.backtrace ) ; raise __e
                                                                                                end                                                                                              ,
                                                                                                Cell.new(
                                                                                                  trampCall( self._cdr_METHOD(  'cdr',
                                                                                                      begin
                                                                                                        if @global_lisp_binding.has_key?('_cdr') then
                                                                                                          trampCall(@_cdr)
                                                                                                        else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:336"] + __e.backtrace ) ; raise __e
                                                                                                      end                                                                                                    ,
                                                                                                      Cell.new(
                                                                                                        begin
                                                                                                            trampCall(_form)
                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:336"] + __e.backtrace ) ; raise __e
                                                                                                        end
                                                                                                               )))                                                                                                ,Cell.new(
                                                                                                  trampCall( self._cons_METHOD(  'cons',
                                                                                                      begin
                                                                                                        if @global_lisp_binding.has_key?('_cons') then
                                                                                                          trampCall(@_cons)
                                                                                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                                                                                      end                                                                                                    ,
                                                                                                      Cell.new(
                                                                                                        trampCall( self._cons_METHOD(  'cons',
                                                                                                            begin
                                                                                                              if @global_lisp_binding.has_key?('_cons') then
                                                                                                                trampCall(@_cons)
                                                                                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                                                                                            end                                                                                                          ,
                                                                                                            Cell.new(
                                                                                                              begin
                                                                                                                  trampCall(_sym)
                                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:338"] + __e.backtrace ) ; raise __e
                                                                                                              end                                                                                                            ,Cell.new(
                                                                                                            
                                                                                                                     ))))                                                                                                      ,Cell.new(
                                                                                                      
                                                                                                               ))))
                                                                                                         ))))
                                                                                                   ))))                                                                                    ,Cell.new(
                                                                                    
                                                                                             ))))
                                                                                       ))))
                                                                                 ))))                                                                  ,Cell.new(
                                                                  
                                                                           ))))
                                                                     ))))
                                                               ))))                                                ,Cell.new(
                                                
                                                         ))))
                                                   ))))
                                             ))))                              ,Cell.new(
                                trampCall( self._cons_METHOD(  'cons',
                                    begin
                                      if @global_lisp_binding.has_key?('_cons') then
                                        trampCall(@_cons)
                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      trampCall( self._cons_METHOD(  'cons',
                                          begin
                                            if @global_lisp_binding.has_key?('_cons') then
                                              trampCall(@_cons)
                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                trampCall(_sym)
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:338"] + __e.backtrace ) ; raise __e
                                            end                                          ,Cell.new(
                                          
                                                   ))))                                    ,Cell.new(
                                    
                                             ))))
                                       ))))
                                 ))))
                } ; ___lambda.call(
                      trampCall( self._gensym_METHOD(  'gensym',
                          begin
                            if @global_lisp_binding.has_key?('_gensym') then
                              trampCall(@_gensym)
                            else raise NameError.new( "Error: undefined variable _gensym", "_gensym" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:331"] + __e.backtrace ) ; raise __e
                          end                        ,
                        Cell.new(
                                   )))
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._until_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_until'] = self.method( :_until_METHOD )
    @_until = 
    trampCall(
          LispMacro.new { |*__rest__| _form = __rest__[0] ;  
              trampCall( self._cons_METHOD(  'cons',
                  begin
                    if @global_lisp_binding.has_key?('_cons') then
                      trampCall(@_cons)
                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"while"                  ,Cell.new(
                    trampCall( self._cons_METHOD(  'cons',
                        begin
                          if @global_lisp_binding.has_key?('_cons') then
                            trampCall(@_cons)
                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          trampCall( self._cons_METHOD(  'cons',
                              begin
                                if @global_lisp_binding.has_key?('_cons') then
                                  trampCall(@_cons)
                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                              :"not"                              ,Cell.new(
                                trampCall( self._cons_METHOD(  'cons',
                                    begin
                                      if @global_lisp_binding.has_key?('_cons') then
                                        trampCall(@_cons)
                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      trampCall( self._car_METHOD(  'car',
                                          begin
                                            if @global_lisp_binding.has_key?('_car') then
                                              trampCall(@_car)
                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:342"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                trampCall(_form)
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:343"] + __e.backtrace ) ; raise __e
                                            end
                                                   )))                                    ,Cell.new(
                                    
                                             ))))
                                       ))))                        ,Cell.new(
                          trampCall( self._cdr_METHOD(  'cdr',
                              begin
                                if @global_lisp_binding.has_key?('_cdr') then
                                  trampCall(@_cdr)
                                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:343"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    trampCall(_form)
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:343"] + __e.backtrace ) ; raise __e
                                end
                                       )))
                                 ))))
                           ))))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._let_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_let'] = self.method( :_let_METHOD )
    @_let = 
    trampCall(
          LispMacro.new { |*__rest__| _lst = __rest__[0] ;  
              if ( 
                trampCall( self._symbol_QUMARK_METHOD(  'symbol?',
                    begin
                      if @global_lisp_binding.has_key?('_symbol_QUMARK') then
                        trampCall(@_symbol_QUMARK)
                      else raise NameError.new( "Error: undefined variable _symbol_QUMARK", "_symbol_QUMARK" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:348"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      trampCall( self._car_METHOD(  'car',
                          begin
                            if @global_lisp_binding.has_key?('_car') then
                              trampCall(@_car)
                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:348"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                trampCall(_lst)
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:363"] + __e.backtrace ) ; raise __e
                            end
                                   )))
                             )))
               ) then
                  trampCall( self._cons_METHOD(  'cons',
                      begin
                        if @global_lisp_binding.has_key?('_cons') then
                          trampCall(@_cons)
                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                      :"letrec"                      ,Cell.new(
                        trampCall( self._cons_METHOD(  'cons',
                            begin
                              if @global_lisp_binding.has_key?('_cons') then
                                trampCall(@_cons)
                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              trampCall( self._cons_METHOD(  'cons',
                                  begin
                                    if @global_lisp_binding.has_key?('_cons') then
                                      trampCall(@_cons)
                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    trampCall( self._cons_METHOD(  'cons',
                                        begin
                                          if @global_lisp_binding.has_key?('_cons') then
                                            trampCall(@_cons)
                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          trampCall( self._first_METHOD(  'first',
                                              begin
                                                if @global_lisp_binding.has_key?('_first') then
                                                  trampCall(@_first)
                                                else raise NameError.new( "Error: undefined variable _first", "_first" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:356"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                begin
                                                    trampCall(_lst)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:363"] + __e.backtrace ) ; raise __e
                                                end
                                                       )))                                        ,Cell.new(
                                          trampCall( self._cons_METHOD(  'cons',
                                              begin
                                                if @global_lisp_binding.has_key?('_cons') then
                                                  trampCall(@_cons)
                                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                trampCall( self._cons_METHOD(  'cons',
                                                    begin
                                                      if @global_lisp_binding.has_key?('_cons') then
                                                        trampCall(@_cons)
                                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                    :"lambda"                                                    ,Cell.new(
                                                      trampCall( self._cons_METHOD(  'cons',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_cons') then
                                                              trampCall(@_cons)
                                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            trampCall( self._map_METHOD(  'map',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_map') then
                                                                    trampCall(@_map)
                                                                  else raise NameError.new( "Error: undefined variable _map", "_map" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:357"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                  Proc.new { |_x| 
                                                                      trampCall( self._first_METHOD(  'first',
                                                                          begin
                                                                            if @global_lisp_binding.has_key?('_first') then
                                                                              trampCall(@_first)
                                                                            else raise NameError.new( "Error: undefined variable _first", "_first" ) end
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:356"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                          Cell.new(
                                                                            begin
                                                                                trampCall(_x)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:359"] + __e.backtrace ) ; raise __e
                                                                            end
                                                                                   )))
                                                                  }                                                                ,Cell.new(
                                                                  trampCall( self._second_METHOD(  'second',
                                                                      begin
                                                                        if @global_lisp_binding.has_key?('_second') then
                                                                          trampCall(@_second)
                                                                        else raise NameError.new( "Error: undefined variable _second", "_second" ) end
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:360"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                      Cell.new(
                                                                        begin
                                                                            trampCall(_lst)
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:363"] + __e.backtrace ) ; raise __e
                                                                        end
                                                                               )))
                                                                         ))))                                                          ,Cell.new(
                                                            trampCall( self._cddr_METHOD(  'cddr',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_cddr') then
                                                                    trampCall(@_cddr)
                                                                  else raise NameError.new( "Error: undefined variable _cddr", "_cddr" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:355"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                  begin
                                                                      trampCall(_lst)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:363"] + __e.backtrace ) ; raise __e
                                                                  end
                                                                         )))
                                                                   ))))
                                                             ))))                                              ,Cell.new(
                                              
                                                       ))))
                                                 ))))                                  ,Cell.new(
                                  
                                           ))))                            ,Cell.new(
                              trampCall( self._cons_METHOD(  'cons',
                                  begin
                                    if @global_lisp_binding.has_key?('_cons') then
                                      trampCall(@_cons)
                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    trampCall( self._cons_METHOD(  'cons',
                                        begin
                                          if @global_lisp_binding.has_key?('_cons') then
                                            trampCall(@_cons)
                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          trampCall( self._first_METHOD(  'first',
                                              begin
                                                if @global_lisp_binding.has_key?('_first') then
                                                  trampCall(@_first)
                                                else raise NameError.new( "Error: undefined variable _first", "_first" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:356"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                begin
                                                    trampCall(_lst)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:363"] + __e.backtrace ) ; raise __e
                                                end
                                                       )))                                        ,Cell.new(
                                          trampCall( self._map_METHOD(  'map',
                                              begin
                                                if @global_lisp_binding.has_key?('_map') then
                                                  trampCall(@_map)
                                                else raise NameError.new( "Error: undefined variable _map", "_map" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:357"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                Proc.new { |_x| 
                                                    trampCall( self._second_METHOD(  'second',
                                                        begin
                                                          if @global_lisp_binding.has_key?('_second') then
                                                            trampCall(@_second)
                                                          else raise NameError.new( "Error: undefined variable _second", "_second" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:360"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                          begin
                                                              trampCall(_x)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:359"] + __e.backtrace ) ; raise __e
                                                          end
                                                                 )))
                                                }                                              ,Cell.new(
                                                trampCall( self._second_METHOD(  'second',
                                                    begin
                                                      if @global_lisp_binding.has_key?('_second') then
                                                        trampCall(@_second)
                                                      else raise NameError.new( "Error: undefined variable _second", "_second" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:360"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      begin
                                                          trampCall(_lst)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:363"] + __e.backtrace ) ; raise __e
                                                      end
                                                             )))
                                                       ))))
                                                 ))))                                  ,Cell.new(
                                  
                                           ))))
                                     ))))
                               ))))
              else
                  trampCall( self._cons_METHOD(  'cons',
                      begin
                        if @global_lisp_binding.has_key?('_cons') then
                          trampCall(@_cons)
                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                      :"let"                      ,Cell.new(
                        begin
                            trampCall(_lst)
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:363"] + __e.backtrace ) ; raise __e
                        end
                               ))))
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._errorf_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_errorf'] = self.method( :_errorf_METHOD )
    @_errorf = 
    trampCall(
          LispMacro.new { |_format,*__rest__| _args = __rest__[0] ;  
              trampCall( self._cons_METHOD(  'cons',
                  begin
                    if @global_lisp_binding.has_key?('_cons') then
                      trampCall(@_cons)
                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"error"                  ,Cell.new(
                    trampCall( self._cons_METHOD(  'cons',
                        begin
                          if @global_lisp_binding.has_key?('_cons') then
                            trampCall(@_cons)
                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          trampCall( self._cons_METHOD(  'cons',
                              begin
                                if @global_lisp_binding.has_key?('_cons') then
                                  trampCall(@_cons)
                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                              :"sprintf"                              ,Cell.new(
                                trampCall( self._cons_METHOD(  'cons',
                                    begin
                                      if @global_lisp_binding.has_key?('_cons') then
                                        trampCall(@_cons)
                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          trampCall(_format)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:371"] + __e.backtrace ) ; raise __e
                                      end                                    ,Cell.new(
                                      begin
                                          trampCall(_args)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:371"] + __e.backtrace ) ; raise __e
                                      end
                                             ))))
                                       ))))                        ,Cell.new(
                        
                                 ))))
                           ))))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._get_MIMARKoptional_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_get_MIMARKoptional'] = self.method( :_get_MIMARKoptional_METHOD )
    @_get_MIMARKoptional = 
    trampCall(
          LispMacro.new { |_restarg,_default| 
              begin
                ___lambda = lambda { |__restarg| 
                    trampCall( self._cons_METHOD(  'cons',
                        begin
                          if @global_lisp_binding.has_key?('_cons') then
                            trampCall(@_cons)
                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                        :"let1"                        ,Cell.new(
                          trampCall( self._cons_METHOD(  'cons',
                              begin
                                if @global_lisp_binding.has_key?('_cons') then
                                  trampCall(@_cons)
                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    trampCall(__restarg)
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:383"] + __e.backtrace ) ; raise __e
                                end                              ,Cell.new(
                                trampCall( self._cons_METHOD(  'cons',
                                    begin
                                      if @global_lisp_binding.has_key?('_cons') then
                                        trampCall(@_cons)
                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          trampCall(_restarg)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:380"] + __e.backtrace ) ; raise __e
                                      end                                    ,Cell.new(
                                      trampCall( self._cons_METHOD(  'cons',
                                          begin
                                            if @global_lisp_binding.has_key?('_cons') then
                                              trampCall(@_cons)
                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            trampCall( self._cons_METHOD(  'cons',
                                                begin
                                                  if @global_lisp_binding.has_key?('_cons') then
                                                    trampCall(@_cons)
                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                :"if"                                                ,Cell.new(
                                                  trampCall( self._cons_METHOD(  'cons',
                                                      begin
                                                        if @global_lisp_binding.has_key?('_cons') then
                                                          trampCall(@_cons)
                                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        trampCall( self._cons_METHOD(  'cons',
                                                            begin
                                                              if @global_lisp_binding.has_key?('_cons') then
                                                                trampCall(@_cons)
                                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                            :"null?"                                                            ,Cell.new(
                                                              trampCall( self._cons_METHOD(  'cons',
                                                                  begin
                                                                    if @global_lisp_binding.has_key?('_cons') then
                                                                      trampCall(@_cons)
                                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                    begin
                                                                        trampCall(__restarg)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:383"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,Cell.new(
                                                                  
                                                                           ))))
                                                                     ))))                                                      ,Cell.new(
                                                        trampCall( self._cons_METHOD(  'cons',
                                                            begin
                                                              if @global_lisp_binding.has_key?('_cons') then
                                                                trampCall(@_cons)
                                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              begin
                                                                  trampCall(_default)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:382"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,Cell.new(
                                                              trampCall( self._cons_METHOD(  'cons',
                                                                  begin
                                                                    if @global_lisp_binding.has_key?('_cons') then
                                                                      trampCall(@_cons)
                                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                    trampCall( self._cons_METHOD(  'cons',
                                                                        begin
                                                                          if @global_lisp_binding.has_key?('_cons') then
                                                                            trampCall(@_cons)
                                                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                        Cell.new(
                                                                        :"car"                                                                        ,Cell.new(
                                                                          trampCall( self._cons_METHOD(  'cons',
                                                                              begin
                                                                                if @global_lisp_binding.has_key?('_cons') then
                                                                                  trampCall(@_cons)
                                                                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                                                              end                                                                            ,
                                                                              Cell.new(
                                                                                begin
                                                                                    trampCall(__restarg)
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:383"] + __e.backtrace ) ; raise __e
                                                                                end                                                                              ,Cell.new(
                                                                              
                                                                                       ))))
                                                                                 ))))                                                                  ,Cell.new(
                                                                  
                                                                           ))))
                                                                     ))))
                                                               ))))
                                                         ))))                                          ,Cell.new(
                                          
                                                   ))))
                                             ))))
                                       ))))
                                 ))))
                } ; ___lambda.call(
                      trampCall( self._gensym_METHOD(  'gensym',
                          begin
                            if @global_lisp_binding.has_key?('_gensym') then
                              trampCall(@_gensym)
                            else raise NameError.new( "Error: undefined variable _gensym", "_gensym" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:379"] + __e.backtrace ) ; raise __e
                          end                        ,
                        Cell.new(
                                   )))
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._check_MIMARKarg_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_check_MIMARKarg'] = self.method( :_check_MIMARKarg_METHOD )
    @_check_MIMARKarg = 
    trampCall(
          LispMacro.new { |_a,_b,*__rest__| _c = __rest__[0] ;  
            Cell.new(:"begin")
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._do_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_do'] = self.method( :_do_METHOD )
    @_do = 
    trampCall(
          LispMacro.new { |*__rest__| _do_MIMARKmacro = __rest__[0] ;  
              trampCall( self._apply_METHOD(  'apply',
                  begin
                    if @global_lisp_binding.has_key?('_apply') then
                      trampCall(@_apply)
                    else raise NameError.new( "Error: undefined variable _apply", "_apply" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:399"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    Proc.new { |_vars,_endtest,*__rest__| _body = __rest__[0] ;  
                        begin
                          ___lambda = lambda { |_do_MIMARKloop| 
                              trampCall( self._cons_METHOD(  'cons',
                                  begin
                                    if @global_lisp_binding.has_key?('_cons') then
                                      trampCall(@_cons)
                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                  :"letrec"                                  ,Cell.new(
                                    trampCall( self._cons_METHOD(  'cons',
                                        begin
                                          if @global_lisp_binding.has_key?('_cons') then
                                            trampCall(@_cons)
                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          trampCall( self._cons_METHOD(  'cons',
                                              begin
                                                if @global_lisp_binding.has_key?('_cons') then
                                                  trampCall(@_cons)
                                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                trampCall( self._cons_METHOD(  'cons',
                                                    begin
                                                      if @global_lisp_binding.has_key?('_cons') then
                                                        trampCall(@_cons)
                                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      begin
                                                          trampCall(_do_MIMARKloop)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:416"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,Cell.new(
                                                      trampCall( self._cons_METHOD(  'cons',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_cons') then
                                                              trampCall(@_cons)
                                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            trampCall( self._cons_METHOD(  'cons',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_cons') then
                                                                    trampCall(@_cons)
                                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                :"lambda"                                                                ,Cell.new(
                                                                  trampCall( self._cons_METHOD(  'cons',
                                                                      begin
                                                                        if @global_lisp_binding.has_key?('_cons') then
                                                                          trampCall(@_cons)
                                                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                      Cell.new(
                                                                        trampCall( self._map_METHOD(  'map',
                                                                            begin
                                                                              if @global_lisp_binding.has_key?('_map') then
                                                                                trampCall(@_map)
                                                                              else raise NameError.new( "Error: undefined variable _map", "_map" ) end
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:417"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                            Cell.new(
                                                                              Proc.new { |_x| 
                                                                                  if ( 
                                                                                    trampCall( self._pair_QUMARK_METHOD(  'pair?',
                                                                                        begin
                                                                                          if @global_lisp_binding.has_key?('_pair_QUMARK') then
                                                                                            trampCall(@_pair_QUMARK)
                                                                                          else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:418"] + __e.backtrace ) ; raise __e
                                                                                        end                                                                                      ,
                                                                                        Cell.new(
                                                                                          begin
                                                                                              trampCall(_x)
                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:419"] + __e.backtrace ) ; raise __e
                                                                                          end
                                                                                                 )))
                                                                                   ) then
                                                                                      trampCall( self._car_METHOD(  'car',
                                                                                          begin
                                                                                            if @global_lisp_binding.has_key?('_car') then
                                                                                              trampCall(@_car)
                                                                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:419"] + __e.backtrace ) ; raise __e
                                                                                          end                                                                                        ,
                                                                                          Cell.new(
                                                                                            begin
                                                                                                trampCall(_x)
                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:419"] + __e.backtrace ) ; raise __e
                                                                                            end
                                                                                                   )))
                                                                                  else
                                                                                      begin
                                                                                          trampCall(_x)
                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:419"] + __e.backtrace ) ; raise __e
                                                                                      end
                                                                                  end
                                                                              }                                                                            ,Cell.new(
                                                                              begin
                                                                                  trampCall(_vars)
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:421"] + __e.backtrace ) ; raise __e
                                                                              end
                                                                                     ))))                                                                      ,Cell.new(
                                                                        trampCall( self._cons_METHOD(  'cons',
                                                                            begin
                                                                              if @global_lisp_binding.has_key?('_cons') then
                                                                                trampCall(@_cons)
                                                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                            Cell.new(
                                                                              trampCall( self._cons_METHOD(  'cons',
                                                                                  begin
                                                                                    if @global_lisp_binding.has_key?('_cons') then
                                                                                      trampCall(@_cons)
                                                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                                                                  end                                                                                ,
                                                                                  Cell.new(
                                                                                  :"if"                                                                                  ,Cell.new(
                                                                                    trampCall( self._cons_METHOD(  'cons',
                                                                                        begin
                                                                                          if @global_lisp_binding.has_key?('_cons') then
                                                                                            trampCall(@_cons)
                                                                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                                                                        end                                                                                      ,
                                                                                        Cell.new(
                                                                                          trampCall( self._car_METHOD(  'car',
                                                                                              begin
                                                                                                if @global_lisp_binding.has_key?('_car') then
                                                                                                  trampCall(@_car)
                                                                                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:419"] + __e.backtrace ) ; raise __e
                                                                                              end                                                                                            ,
                                                                                              Cell.new(
                                                                                                begin
                                                                                                    trampCall(_endtest)
                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:406"] + __e.backtrace ) ; raise __e
                                                                                                end
                                                                                                       )))                                                                                        ,Cell.new(
                                                                                          trampCall( self._cons_METHOD(  'cons',
                                                                                              begin
                                                                                                if @global_lisp_binding.has_key?('_cons') then
                                                                                                  trampCall(@_cons)
                                                                                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                                                                              end                                                                                            ,
                                                                                              Cell.new(
                                                                                                trampCall( self._cons_METHOD(  'cons',
                                                                                                    begin
                                                                                                      if @global_lisp_binding.has_key?('_cons') then
                                                                                                        trampCall(@_cons)
                                                                                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                                                                                    end                                                                                                  ,
                                                                                                    Cell.new(
                                                                                                    :"begin"                                                                                                    ,Cell.new(
                                                                                                      trampCall( self._cdr_METHOD(  'cdr',
                                                                                                          begin
                                                                                                            if @global_lisp_binding.has_key?('_cdr') then
                                                                                                              trampCall(@_cdr)
                                                                                                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:419"] + __e.backtrace ) ; raise __e
                                                                                                          end                                                                                                        ,
                                                                                                          Cell.new(
                                                                                                            begin
                                                                                                                trampCall(_endtest)
                                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:406"] + __e.backtrace ) ; raise __e
                                                                                                            end
                                                                                                                   )))
                                                                                                             ))))                                                                                              ,Cell.new(
                                                                                                trampCall( self._cons_METHOD(  'cons',
                                                                                                    begin
                                                                                                      if @global_lisp_binding.has_key?('_cons') then
                                                                                                        trampCall(@_cons)
                                                                                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                                                                                    end                                                                                                  ,
                                                                                                    Cell.new(
                                                                                                      trampCall( self._cons_METHOD(  'cons',
                                                                                                          begin
                                                                                                            if @global_lisp_binding.has_key?('_cons') then
                                                                                                              trampCall(@_cons)
                                                                                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                                                                                          end                                                                                                        ,
                                                                                                          Cell.new(
                                                                                                          :"begin"                                                                                                          ,Cell.new(
                                                                                                            trampCall( self._append_METHOD(  'append',
                                                                                                                begin
                                                                                                                  if @global_lisp_binding.has_key?('_append') then
                                                                                                                    trampCall(@_append)
                                                                                                                  else raise NameError.new( "Error: undefined variable _append", "_append" ) end
                                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:280"] + __e.backtrace ) ; raise __e
                                                                                                                end                                                                                                              ,
                                                                                                                Cell.new(
                                                                                                                  begin
                                                                                                                      trampCall(_body)
                                                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:408"] + __e.backtrace ) ; raise __e
                                                                                                                  end                                                                                                                ,Cell.new(
                                                                                                                  trampCall( self._cons_METHOD(  'cons',
                                                                                                                      begin
                                                                                                                        if @global_lisp_binding.has_key?('_cons') then
                                                                                                                          trampCall(@_cons)
                                                                                                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                                                                                                      end                                                                                                                    ,
                                                                                                                      Cell.new(
                                                                                                                        trampCall( self._cons_METHOD(  'cons',
                                                                                                                            begin
                                                                                                                              if @global_lisp_binding.has_key?('_cons') then
                                                                                                                                trampCall(@_cons)
                                                                                                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                                                                                                            end                                                                                                                          ,
                                                                                                                            Cell.new(
                                                                                                                              begin
                                                                                                                                  trampCall(_do_MIMARKloop)
                                                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:416"] + __e.backtrace ) ; raise __e
                                                                                                                              end                                                                                                                            ,Cell.new(
                                                                                                                              trampCall( self._map_METHOD(  'map',
                                                                                                                                  begin
                                                                                                                                    if @global_lisp_binding.has_key?('_map') then
                                                                                                                                      trampCall(@_map)
                                                                                                                                    else raise NameError.new( "Error: undefined variable _map", "_map" ) end
                                                                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:417"] + __e.backtrace ) ; raise __e
                                                                                                                                  end                                                                                                                                ,
                                                                                                                                  Cell.new(
                                                                                                                                    Proc.new { |_x| 
                                                                                                                                        if ( 
                                                                                                                                          trampCall( self._not_METHOD(  'not',
                                                                                                                                              begin
                                                                                                                                                if @global_lisp_binding.has_key?('_not') then
                                                                                                                                                  trampCall(@_not)
                                                                                                                                                else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:412"] + __e.backtrace ) ; raise __e
                                                                                                                                              end                                                                                                                                            ,
                                                                                                                                              Cell.new(
                                                                                                                                                trampCall( self._pair_QUMARK_METHOD(  'pair?',
                                                                                                                                                    begin
                                                                                                                                                      if @global_lisp_binding.has_key?('_pair_QUMARK') then
                                                                                                                                                        trampCall(@_pair_QUMARK)
                                                                                                                                                      else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                                                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:418"] + __e.backtrace ) ; raise __e
                                                                                                                                                    end                                                                                                                                                  ,
                                                                                                                                                    Cell.new(
                                                                                                                                                      begin
                                                                                                                                                          trampCall(_x)
                                                                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:419"] + __e.backtrace ) ; raise __e
                                                                                                                                                      end
                                                                                                                                                             )))
                                                                                                                                                       )))
                                                                                                                                         ) then
                                                                                                                                            begin
                                                                                                                                                begin
                                                                                                                                                    trampCall(_x)
                                                                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:419"] + __e.backtrace ) ; raise __e
                                                                                                                                                end
                                                                                                                                            end
                                                                                                                                        else
                                                                                                                                            if ( 
                                                                                                                                              trampCall( self.__LTMARK_METHOD(  '<',
                                                                                                                                                  begin
                                                                                                                                                    if @global_lisp_binding.has_key?('__LTMARK') then
                                                                                                                                                      trampCall(@__LTMARK)
                                                                                                                                                    else raise NameError.new( "Error: undefined variable __LTMARK", "__LTMARK" ) end
                                                                                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:413"] + __e.backtrace ) ; raise __e
                                                                                                                                                  end                                                                                                                                                ,
                                                                                                                                                  Cell.new(
                                                                                                                                                    trampCall( self._length_METHOD(  'length',
                                                                                                                                                        begin
                                                                                                                                                          if @global_lisp_binding.has_key?('_length') then
                                                                                                                                                            trampCall(@_length)
                                                                                                                                                          else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                                                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:413"] + __e.backtrace ) ; raise __e
                                                                                                                                                        end                                                                                                                                                      ,
                                                                                                                                                        Cell.new(
                                                                                                                                                          begin
                                                                                                                                                              trampCall(_x)
                                                                                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:419"] + __e.backtrace ) ; raise __e
                                                                                                                                                          end
                                                                                                                                                                 )))                                                                                                                                                  ,Cell.new(
                                                                                                                                                  3
                                                                                                                                                           ))))
                                                                                                                                             ) then
                                                                                                                                                begin
                                                                                                                                                    trampCall( self._car_METHOD(  'car',
                                                                                                                                                        begin
                                                                                                                                                          if @global_lisp_binding.has_key?('_car') then
                                                                                                                                                            trampCall(@_car)
                                                                                                                                                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:419"] + __e.backtrace ) ; raise __e
                                                                                                                                                        end                                                                                                                                                      ,
                                                                                                                                                        Cell.new(
                                                                                                                                                          begin
                                                                                                                                                              trampCall(_x)
                                                                                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:419"] + __e.backtrace ) ; raise __e
                                                                                                                                                          end
                                                                                                                                                                 )))
                                                                                                                                                end
                                                                                                                                            else
                                                                                                                                                if ( 
                                                                                                                                                true
                                                                                                                                                 ) then
                                                                                                                                                    begin
                                                                                                                                                        trampCall( self._car_METHOD(  'car',
                                                                                                                                                            begin
                                                                                                                                                              if @global_lisp_binding.has_key?('_car') then
                                                                                                                                                                trampCall(@_car)
                                                                                                                                                              else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:419"] + __e.backtrace ) ; raise __e
                                                                                                                                                            end                                                                                                                                                          ,
                                                                                                                                                            Cell.new(
                                                                                                                                                              trampCall( self._cdr_METHOD(  'cdr',
                                                                                                                                                                  begin
                                                                                                                                                                    if @global_lisp_binding.has_key?('_cdr') then
                                                                                                                                                                      trampCall(@_cdr)
                                                                                                                                                                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                                                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:419"] + __e.backtrace ) ; raise __e
                                                                                                                                                                  end                                                                                                                                                                ,
                                                                                                                                                                  Cell.new(
                                                                                                                                                                    trampCall( self._cdr_METHOD(  'cdr',
                                                                                                                                                                        begin
                                                                                                                                                                          if @global_lisp_binding.has_key?('_cdr') then
                                                                                                                                                                            trampCall(@_cdr)
                                                                                                                                                                          else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:419"] + __e.backtrace ) ; raise __e
                                                                                                                                                                        end                                                                                                                                                                      ,
                                                                                                                                                                        Cell.new(
                                                                                                                                                                          begin
                                                                                                                                                                              trampCall(_x)
                                                                                                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:419"] + __e.backtrace ) ; raise __e
                                                                                                                                                                          end
                                                                                                                                                                                 )))
                                                                                                                                                                           )))
                                                                                                                                                                     )))
                                                                                                                                                    end
                                                                                                                                                else
                                                                                                                                                    Cell.new()
                                                                                                                                                end
                                                                                                                                            end
                                                                                                                                        end
                                                                                                                                    }                                                                                                                                  ,Cell.new(
                                                                                                                                    begin
                                                                                                                                        trampCall(_vars)
                                                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:421"] + __e.backtrace ) ; raise __e
                                                                                                                                    end
                                                                                                                                           ))))
                                                                                                                                     ))))                                                                                                                      ,Cell.new(
                                                                                                                      
                                                                                                                               ))))
                                                                                                                         ))))
                                                                                                                   ))))                                                                                                    ,Cell.new(
                                                                                                    
                                                                                                             ))))
                                                                                                       ))))
                                                                                                 ))))
                                                                                           ))))                                                                            ,Cell.new(
                                                                            
                                                                                     ))))
                                                                               ))))
                                                                         ))))                                                          ,Cell.new(
                                                          
                                                                   ))))
                                                             ))))                                              ,Cell.new(
                                              
                                                       ))))                                        ,Cell.new(
                                          trampCall( self._cons_METHOD(  'cons',
                                              begin
                                                if @global_lisp_binding.has_key?('_cons') then
                                                  trampCall(@_cons)
                                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                trampCall( self._cons_METHOD(  'cons',
                                                    begin
                                                      if @global_lisp_binding.has_key?('_cons') then
                                                        trampCall(@_cons)
                                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:270"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      begin
                                                          trampCall(_do_MIMARKloop)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:416"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,Cell.new(
                                                      trampCall( self._map_METHOD(  'map',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_map') then
                                                              trampCall(@_map)
                                                            else raise NameError.new( "Error: undefined variable _map", "_map" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:417"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            Proc.new { |_x| 
                                                                if ( 
                                                                  if ( 
                                                                    trampCall( self._not_METHOD(  'not',
                                                                        begin
                                                                          if @global_lisp_binding.has_key?('_not') then
                                                                            trampCall(@_not)
                                                                          else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:412"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                        Cell.new(
                                                                          trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                                                              begin
                                                                                if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                                                  trampCall(@_eq_QUMARK)
                                                                                else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:304"] + __e.backtrace ) ; raise __e
                                                                              end                                                                            ,
                                                                              Cell.new(
                                                                              false                                                                              ,Cell.new(
                                                                                trampCall( self._pair_QUMARK_METHOD(  'pair?',
                                                                                    begin
                                                                                      if @global_lisp_binding.has_key?('_pair_QUMARK') then
                                                                                        trampCall(@_pair_QUMARK)
                                                                                      else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:418"] + __e.backtrace ) ; raise __e
                                                                                    end                                                                                  ,
                                                                                    Cell.new(
                                                                                      begin
                                                                                          trampCall(_x)
                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:419"] + __e.backtrace ) ; raise __e
                                                                                      end
                                                                                             )))
                                                                                       ))))
                                                                                 )))
                                                                   ) then
                                                                      trampCall( self._cdr_METHOD(  'cdr',
                                                                          begin
                                                                            if @global_lisp_binding.has_key?('_cdr') then
                                                                              trampCall(@_cdr)
                                                                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:419"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                          Cell.new(
                                                                            begin
                                                                                trampCall(_x)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:419"] + __e.backtrace ) ; raise __e
                                                                            end
                                                                                   )))
                                                                  else
                                                                    false
                                                                  end
                                                                 ) then
                                                                    trampCall( self._car_METHOD(  'car',
                                                                        begin
                                                                          if @global_lisp_binding.has_key?('_car') then
                                                                            trampCall(@_car)
                                                                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:419"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                        Cell.new(
                                                                          trampCall( self._cdr_METHOD(  'cdr',
                                                                              begin
                                                                                if @global_lisp_binding.has_key?('_cdr') then
                                                                                  trampCall(@_cdr)
                                                                                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:419"] + __e.backtrace ) ; raise __e
                                                                              end                                                                            ,
                                                                              Cell.new(
                                                                                begin
                                                                                    trampCall(_x)
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:419"] + __e.backtrace ) ; raise __e
                                                                                end
                                                                                       )))
                                                                                 )))
                                                                else
                                                                  Cell.new()
                                                                end
                                                            }                                                          ,Cell.new(
                                                            begin
                                                                trampCall(_vars)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:421"] + __e.backtrace ) ; raise __e
                                                            end
                                                                   ))))
                                                             ))))                                              ,Cell.new(
                                              
                                                       ))))
                                                 ))))
                                           ))))
                          } ; ___lambda.call(
                                trampCall( self._gensym_METHOD(  'gensym',
                                    begin
                                      if @global_lisp_binding.has_key?('_gensym') then
                                        trampCall(@_gensym)
                                      else raise NameError.new( "Error: undefined variable _gensym", "_gensym" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:400"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                  Cell.new(
                                             )))
                                     )
                        end
                    }                  ,Cell.new(
                    begin
                        trampCall(_do_MIMARKmacro)
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:422"] + __e.backtrace ) ; raise __e
                    end
                           ))))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._generic_MIMARKmember_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_generic_MIMARKmember'] = self.method( :_generic_MIMARKmember_METHOD )
    @_generic_MIMARKmember = 
    trampCall(
          Proc.new { |_cmp,_obj,_lst| 
              if ( 
                trampCall( self._null_QUMARK_METHOD(  'null?',
                    begin
                      if @global_lisp_binding.has_key?('_null_QUMARK') then
                        trampCall(@_null_QUMARK)
                      else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:428"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          trampCall(_lst)
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:430"] + __e.backtrace ) ; raise __e
                      end
                             )))
               ) then
                  begin
                    false
                  end
              else
                  if ( 
                    trampCall( callProcedure(   'cmp',
                        begin
                            trampCall(_cmp)
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:430"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              trampCall(_obj)
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:430"] + __e.backtrace ) ; raise __e
                          end                        ,Cell.new(
                          trampCall( self._car_METHOD(  'car',
                              begin
                                if @global_lisp_binding.has_key?('_car') then
                                  trampCall(@_car)
                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:429"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    trampCall(_lst)
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:430"] + __e.backtrace ) ; raise __e
                                end
                                       )))
                                 ))))
                   ) then
                      begin
                          begin
                              trampCall(_lst)
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:430"] + __e.backtrace ) ; raise __e
                          end
                      end
                  else
                      if ( 
                      true
                       ) then
                          begin
                              delayCall( 'generic-member',
                                  begin
                                    if @global_lisp_binding.has_key?('_generic_MIMARKmember') then
                                      trampCall(@_generic_MIMARKmember)
                                    else raise NameError.new( "Error: undefined variable _generic_MIMARKmember", "_generic_MIMARKmember" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:430"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        trampCall(_cmp)
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:430"] + __e.backtrace ) ; raise __e
                                    end                                  ,Cell.new(
                                    begin
                                        trampCall(_obj)
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:430"] + __e.backtrace ) ; raise __e
                                    end                                  ,Cell.new(
                                    trampCall( self._cdr_METHOD(  'cdr',
                                        begin
                                          if @global_lisp_binding.has_key?('_cdr') then
                                            trampCall(@_cdr)
                                          else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:430"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          begin
                                              trampCall(_lst)
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:430"] + __e.backtrace ) ; raise __e
                                          end
                                                 )))
                                           ))))
                          end
                      else
                          Cell.new()
                      end
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._memq_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_memq'] = self.method( :_memq_METHOD )
    @_memq = 
    trampCall(
          Proc.new { |_obj,_lst| 
              delayCall( 'generic-member',
                  begin
                    if @global_lisp_binding.has_key?('_generic_MIMARKmember') then
                      trampCall(@_generic_MIMARKmember)
                    else raise NameError.new( "Error: undefined variable _generic_MIMARKmember", "_generic_MIMARKmember" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:433"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    begin
                      if @global_lisp_binding.has_key?('_eq_QUMARK') then
                        trampCall(@_eq_QUMARK)
                      else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:433"] + __e.backtrace ) ; raise __e
                    end                  ,Cell.new(
                    begin
                        trampCall(_obj)
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:433"] + __e.backtrace ) ; raise __e
                    end                  ,Cell.new(
                    begin
                        trampCall(_lst)
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:433"] + __e.backtrace ) ; raise __e
                    end
                           ))))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._memv_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_memv'] = self.method( :_memv_METHOD )
    @_memv = 
    trampCall(
          Proc.new { |_obj,_lst| 
              delayCall( 'generic-member',
                  begin
                    if @global_lisp_binding.has_key?('_generic_MIMARKmember') then
                      trampCall(@_generic_MIMARKmember)
                    else raise NameError.new( "Error: undefined variable _generic_MIMARKmember", "_generic_MIMARKmember" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:435"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    begin
                      if @global_lisp_binding.has_key?('_eqv_QUMARK') then
                        trampCall(@_eqv_QUMARK)
                      else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:435"] + __e.backtrace ) ; raise __e
                    end                  ,Cell.new(
                    begin
                        trampCall(_obj)
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:435"] + __e.backtrace ) ; raise __e
                    end                  ,Cell.new(
                    begin
                        trampCall(_lst)
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:435"] + __e.backtrace ) ; raise __e
                    end
                           ))))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._member_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_member'] = self.method( :_member_METHOD )
    @_member = 
    trampCall(
          Proc.new { |_obj,_lst| 
              delayCall( 'generic-member',
                  begin
                    if @global_lisp_binding.has_key?('_generic_MIMARKmember') then
                      trampCall(@_generic_MIMARKmember)
                    else raise NameError.new( "Error: undefined variable _generic_MIMARKmember", "_generic_MIMARKmember" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:437"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    begin
                      if @global_lisp_binding.has_key?('_equal_QUMARK') then
                        trampCall(@_equal_QUMARK)
                      else raise NameError.new( "Error: undefined variable _equal_QUMARK", "_equal_QUMARK" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:437"] + __e.backtrace ) ; raise __e
                    end                  ,Cell.new(
                    begin
                        trampCall(_obj)
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:437"] + __e.backtrace ) ; raise __e
                    end                  ,Cell.new(
                    begin
                        trampCall(_lst)
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:437"] + __e.backtrace ) ; raise __e
                    end
                           ))))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._generic_MIMARKassoc_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_generic_MIMARKassoc'] = self.method( :_generic_MIMARKassoc_METHOD )
    @_generic_MIMARKassoc = 
    trampCall(
          Proc.new { |_cmp,_obj,_alst| 
              if ( 
                trampCall( self._null_QUMARK_METHOD(  'null?',
                    begin
                      if @global_lisp_binding.has_key?('_null_QUMARK') then
                        trampCall(@_null_QUMARK)
                      else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:442"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          trampCall(_alst)
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:444"] + __e.backtrace ) ; raise __e
                      end
                             )))
               ) then
                  begin
                    false
                  end
              else
                  if ( 
                    trampCall( callProcedure(   'cmp',
                        begin
                            trampCall(_cmp)
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:444"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              trampCall(_obj)
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:444"] + __e.backtrace ) ; raise __e
                          end                        ,Cell.new(
                          trampCall( self._caar_METHOD(  'caar',
                              begin
                                if @global_lisp_binding.has_key?('_caar') then
                                  trampCall(@_caar)
                                else raise NameError.new( "Error: undefined variable _caar", "_caar" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:443"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    trampCall(_alst)
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:444"] + __e.backtrace ) ; raise __e
                                end
                                       )))
                                 ))))
                   ) then
                      begin
                          delayCall( 'car',
                              begin
                                if @global_lisp_binding.has_key?('_car') then
                                  trampCall(@_car)
                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:443"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    trampCall(_alst)
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:444"] + __e.backtrace ) ; raise __e
                                end
                                       ))
                      end
                  else
                      if ( 
                      true
                       ) then
                          begin
                              delayCall( 'generic-assoc',
                                  begin
                                    if @global_lisp_binding.has_key?('_generic_MIMARKassoc') then
                                      trampCall(@_generic_MIMARKassoc)
                                    else raise NameError.new( "Error: undefined variable _generic_MIMARKassoc", "_generic_MIMARKassoc" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:444"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        trampCall(_cmp)
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:444"] + __e.backtrace ) ; raise __e
                                    end                                  ,Cell.new(
                                    begin
                                        trampCall(_obj)
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:444"] + __e.backtrace ) ; raise __e
                                    end                                  ,Cell.new(
                                    trampCall( self._cdr_METHOD(  'cdr',
                                        begin
                                          if @global_lisp_binding.has_key?('_cdr') then
                                            trampCall(@_cdr)
                                          else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:444"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          begin
                                              trampCall(_alst)
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:444"] + __e.backtrace ) ; raise __e
                                          end
                                                 )))
                                           ))))
                          end
                      else
                          Cell.new()
                      end
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._assq_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_assq'] = self.method( :_assq_METHOD )
    @_assq = 
    trampCall(
          Proc.new { |_obj,_alst| 
              delayCall( 'generic-assoc',
                  begin
                    if @global_lisp_binding.has_key?('_generic_MIMARKassoc') then
                      trampCall(@_generic_MIMARKassoc)
                    else raise NameError.new( "Error: undefined variable _generic_MIMARKassoc", "_generic_MIMARKassoc" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:447"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    begin
                      if @global_lisp_binding.has_key?('_eq_QUMARK') then
                        trampCall(@_eq_QUMARK)
                      else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:447"] + __e.backtrace ) ; raise __e
                    end                  ,Cell.new(
                    begin
                        trampCall(_obj)
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:447"] + __e.backtrace ) ; raise __e
                    end                  ,Cell.new(
                    begin
                        trampCall(_alst)
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:447"] + __e.backtrace ) ; raise __e
                    end
                           ))))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._assv_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_assv'] = self.method( :_assv_METHOD )
    @_assv = 
    trampCall(
          Proc.new { |_obj,_alst| 
              delayCall( 'generic-assoc',
                  begin
                    if @global_lisp_binding.has_key?('_generic_MIMARKassoc') then
                      trampCall(@_generic_MIMARKassoc)
                    else raise NameError.new( "Error: undefined variable _generic_MIMARKassoc", "_generic_MIMARKassoc" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:449"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    begin
                      if @global_lisp_binding.has_key?('_eqv_QUMARK') then
                        trampCall(@_eqv_QUMARK)
                      else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:449"] + __e.backtrace ) ; raise __e
                    end                  ,Cell.new(
                    begin
                        trampCall(_obj)
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:449"] + __e.backtrace ) ; raise __e
                    end                  ,Cell.new(
                    begin
                        trampCall(_alst)
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:449"] + __e.backtrace ) ; raise __e
                    end
                           ))))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._assoc_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_assoc'] = self.method( :_assoc_METHOD )
    @_assoc = 
    trampCall(
          Proc.new { |_obj,_alst| 
              delayCall( 'generic-assoc',
                  begin
                    if @global_lisp_binding.has_key?('_generic_MIMARKassoc') then
                      trampCall(@_generic_MIMARKassoc)
                    else raise NameError.new( "Error: undefined variable _generic_MIMARKassoc", "_generic_MIMARKassoc" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:451"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    begin
                      if @global_lisp_binding.has_key?('_equal_QUMARK') then
                        trampCall(@_equal_QUMARK)
                      else raise NameError.new( "Error: undefined variable _equal_QUMARK", "_equal_QUMARK" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:451"] + __e.backtrace ) ; raise __e
                    end                  ,Cell.new(
                    begin
                        trampCall(_obj)
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:451"] + __e.backtrace ) ; raise __e
                    end                  ,Cell.new(
                    begin
                        trampCall(_alst)
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:451"] + __e.backtrace ) ; raise __e
                    end
                           ))))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._acons_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_acons'] = self.method( :_acons_METHOD )
    @_acons = 
    trampCall(
          Proc.new { |_x,_y,_z| 
              delayCall( 'cons',
                  begin
                    if @global_lisp_binding.has_key?('_cons') then
                      trampCall(@_cons)
                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:453"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    trampCall( self._cons_METHOD(  'cons',
                        begin
                          if @global_lisp_binding.has_key?('_cons') then
                            trampCall(@_cons)
                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:453"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              trampCall(_x)
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:453"] + __e.backtrace ) ; raise __e
                          end                        ,Cell.new(
                          begin
                              trampCall(_y)
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:453"] + __e.backtrace ) ; raise __e
                          end
                                 ))))                  ,Cell.new(
                    begin
                        trampCall(_z)
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:453"] + __e.backtrace ) ; raise __e
                    end
                           )))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._assq_MIMARKref_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_assq_MIMARKref'] = self.method( :_assq_MIMARKref_METHOD )
    @_assq_MIMARKref = 
    trampCall(
          Proc.new { |_obj,_alst| 
              if ( 
                begin
                    def self.___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20157_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
                    @global_lisp_binding['___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20157'] = self.method( :___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20157_METHOD )
                  @___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20157 = 
                  trampCall(
                        trampCall( self._assq_METHOD(  'assq',
                            begin
                              if @global_lisp_binding.has_key?('_assq') then
                                trampCall(@_assq)
                              else raise NameError.new( "Error: undefined variable _assq", "_assq" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:456"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  trampCall(_obj)
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:456"] + __e.backtrace ) ; raise __e
                              end                            ,Cell.new(
                              begin
                                  trampCall(_alst)
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:456"] + __e.backtrace ) ; raise __e
                              end
                                     ))))
                  )
                end
               ) then
                  delayCall( 'cdr',
                      begin
                        if @global_lisp_binding.has_key?('_cdr') then
                          trampCall(@_cdr)
                        else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:456"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                        begin
                          if @global_lisp_binding.has_key?('___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20157') then
                            trampCall(@___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20157)
                          else raise NameError.new( "Error: undefined variable ___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20157", "___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20157" ) end
                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                        end
                               ))
              else
                  if ( 
                  true
                   ) then
                      begin
                        nil
                      end
                  else
                      Cell.new()
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._assv_MIMARKref_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_assv_MIMARKref'] = self.method( :_assv_MIMARKref_METHOD )
    @_assv_MIMARKref = 
    trampCall(
          Proc.new { |_obj,_alst| 
              if ( 
                begin
                    def self.___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20159_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
                    @global_lisp_binding['___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20159'] = self.method( :___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20159_METHOD )
                  @___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20159 = 
                  trampCall(
                        trampCall( self._assv_METHOD(  'assv',
                            begin
                              if @global_lisp_binding.has_key?('_assv') then
                                trampCall(@_assv)
                              else raise NameError.new( "Error: undefined variable _assv", "_assv" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:459"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  trampCall(_obj)
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:459"] + __e.backtrace ) ; raise __e
                              end                            ,Cell.new(
                              begin
                                  trampCall(_alst)
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:459"] + __e.backtrace ) ; raise __e
                              end
                                     ))))
                  )
                end
               ) then
                  delayCall( 'cdr',
                      begin
                        if @global_lisp_binding.has_key?('_cdr') then
                          trampCall(@_cdr)
                        else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:459"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                        begin
                          if @global_lisp_binding.has_key?('___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20159') then
                            trampCall(@___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20159)
                          else raise NameError.new( "Error: undefined variable ___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20159", "___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20159" ) end
                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                        end
                               ))
              else
                  if ( 
                  true
                   ) then
                      begin
                        nil
                      end
                  else
                      Cell.new()
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._assoc_MIMARKref_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_assoc_MIMARKref'] = self.method( :_assoc_MIMARKref_METHOD )
    @_assoc_MIMARKref = 
    trampCall(
          Proc.new { |_obj,_alst| 
              if ( 
                begin
                    def self.___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20161_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
                    @global_lisp_binding['___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20161'] = self.method( :___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20161_METHOD )
                  @___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20161 = 
                  trampCall(
                        trampCall( self._assoc_METHOD(  'assoc',
                            begin
                              if @global_lisp_binding.has_key?('_assoc') then
                                trampCall(@_assoc)
                              else raise NameError.new( "Error: undefined variable _assoc", "_assoc" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:462"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  trampCall(_obj)
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:462"] + __e.backtrace ) ; raise __e
                              end                            ,Cell.new(
                              begin
                                  trampCall(_alst)
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:462"] + __e.backtrace ) ; raise __e
                              end
                                     ))))
                  )
                end
               ) then
                  delayCall( 'cdr',
                      begin
                        if @global_lisp_binding.has_key?('_cdr') then
                          trampCall(@_cdr)
                        else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:462"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                        begin
                          if @global_lisp_binding.has_key?('___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20161') then
                            trampCall(@___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20161)
                          else raise NameError.new( "Error: undefined variable ___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20161", "___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20161" ) end
                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                        end
                               ))
              else
                  if ( 
                  true
                   ) then
                      begin
                        nil
                      end
                  else
                      Cell.new()
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._fold_MIMARKright_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_fold_MIMARKright'] = self.method( :_fold_MIMARKright_METHOD )
    @_fold_MIMARKright = 
    trampCall(
          Proc.new { |_f,_x,_lst| 
              if ( 
                trampCall( self._null_QUMARK_METHOD(  'null?',
                    begin
                      if @global_lisp_binding.has_key?('_null_QUMARK') then
                        trampCall(@_null_QUMARK)
                      else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:472"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          trampCall(_lst)
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:474"] + __e.backtrace ) ; raise __e
                      end
                             )))
               ) then
                  begin
                      trampCall(_x)
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:474"] + __e.backtrace ) ; raise __e
                  end
              else
                  delayCall( 'fold-right',
                      begin
                        if @global_lisp_binding.has_key?('_fold_MIMARKright') then
                          trampCall(@_fold_MIMARKright)
                        else raise NameError.new( "Error: undefined variable _fold_MIMARKright", "_fold_MIMARKright" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:474"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                        begin
                            trampCall(_f)
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:474"] + __e.backtrace ) ; raise __e
                        end                      ,Cell.new(
                        trampCall( callProcedure(   'f',
                            begin
                                trampCall(_f)
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:474"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  trampCall(_x)
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:474"] + __e.backtrace ) ; raise __e
                              end                            ,Cell.new(
                              trampCall( self._car_METHOD(  'car',
                                  begin
                                    if @global_lisp_binding.has_key?('_car') then
                                      trampCall(@_car)
                                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:474"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        trampCall(_lst)
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:474"] + __e.backtrace ) ; raise __e
                                    end
                                           )))
                                     ))))                      ,Cell.new(
                        trampCall( self._cdr_METHOD(  'cdr',
                            begin
                              if @global_lisp_binding.has_key?('_cdr') then
                                trampCall(@_cdr)
                              else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:474"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  trampCall(_lst)
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:474"] + __e.backtrace ) ; raise __e
                              end
                                     )))
                               ))))
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._unzip1_MIMARKwith_MIMARKcdr_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_unzip1_MIMARKwith_MIMARKcdr'] = self.method( :_unzip1_MIMARKwith_MIMARKcdr_METHOD )
    @_unzip1_MIMARKwith_MIMARKcdr = 
    trampCall(
          Proc.new { |*__rest__| _lists = __rest__[0] ;  
              delayCall( 'unzip1-with-cdr-iterative',
                  begin
                    if @global_lisp_binding.has_key?('_unzip1_MIMARKwith_MIMARKcdr_MIMARKiterative') then
                      trampCall(@_unzip1_MIMARKwith_MIMARKcdr_MIMARKiterative)
                    else raise NameError.new( "Error: undefined variable _unzip1_MIMARKwith_MIMARKcdr_MIMARKiterative", "_unzip1_MIMARKwith_MIMARKcdr_MIMARKiterative" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:477"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    begin
                        trampCall(_lists)
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:477"] + __e.backtrace ) ; raise __e
                    end                  ,Cell.new(
                  Cell.new()                  ,Cell.new(
                  Cell.new()
                           ))))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._unzip1_MIMARKwith_MIMARKcdr_MIMARKiterative_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_unzip1_MIMARKwith_MIMARKcdr_MIMARKiterative'] = self.method( :_unzip1_MIMARKwith_MIMARKcdr_MIMARKiterative_METHOD )
    @_unzip1_MIMARKwith_MIMARKcdr_MIMARKiterative = 
    trampCall(
          Proc.new { |_lists,_cars,_cdrs| 
              if ( 
                trampCall( self._null_QUMARK_METHOD(  'null?',
                    begin
                      if @global_lisp_binding.has_key?('_null_QUMARK') then
                        trampCall(@_null_QUMARK)
                      else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:480"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          trampCall(_lists)
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:485"] + __e.backtrace ) ; raise __e
                      end
                             )))
               ) then
                  delayCall( 'cons',
                      begin
                        if @global_lisp_binding.has_key?('_cons') then
                          trampCall(@_cons)
                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:481"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                        begin
                            trampCall(_cars)
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:486"] + __e.backtrace ) ; raise __e
                        end                      ,Cell.new(
                        begin
                            trampCall(_cdrs)
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:487"] + __e.backtrace ) ; raise __e
                        end
                               )))
              else
                  begin
                    ___lambda = lambda { |_car1,_cdr1| 
                        delayCall( 'unzip1-with-cdr-iterative',
                            begin
                              if @global_lisp_binding.has_key?('_unzip1_MIMARKwith_MIMARKcdr_MIMARKiterative') then
                                trampCall(@_unzip1_MIMARKwith_MIMARKcdr_MIMARKiterative)
                              else raise NameError.new( "Error: undefined variable _unzip1_MIMARKwith_MIMARKcdr_MIMARKiterative", "_unzip1_MIMARKwith_MIMARKcdr_MIMARKiterative" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:484"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              trampCall( self._cdr_METHOD(  'cdr',
                                  begin
                                    if @global_lisp_binding.has_key?('_cdr') then
                                      trampCall(@_cdr)
                                    else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:485"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        trampCall(_lists)
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:485"] + __e.backtrace ) ; raise __e
                                    end
                                           )))                            ,Cell.new(
                              trampCall( self._append_METHOD(  'append',
                                  begin
                                    if @global_lisp_binding.has_key?('_append') then
                                      trampCall(@_append)
                                    else raise NameError.new( "Error: undefined variable _append", "_append" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:487"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        trampCall(_cars)
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:486"] + __e.backtrace ) ; raise __e
                                    end                                  ,Cell.new(
                                    trampCall( self._list_METHOD(  'list',
                                        begin
                                          if @global_lisp_binding.has_key?('_list') then
                                            trampCall(@_list)
                                          else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:487"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          begin
                                              trampCall(_car1)
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:486"] + __e.backtrace ) ; raise __e
                                          end
                                                 )))
                                           ))))                            ,Cell.new(
                              trampCall( self._append_METHOD(  'append',
                                  begin
                                    if @global_lisp_binding.has_key?('_append') then
                                      trampCall(@_append)
                                    else raise NameError.new( "Error: undefined variable _append", "_append" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:487"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        trampCall(_cdrs)
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:487"] + __e.backtrace ) ; raise __e
                                    end                                  ,Cell.new(
                                    trampCall( self._list_METHOD(  'list',
                                        begin
                                          if @global_lisp_binding.has_key?('_list') then
                                            trampCall(@_list)
                                          else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:487"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          begin
                                              trampCall(_cdr1)
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:487"] + __e.backtrace ) ; raise __e
                                          end
                                                 )))
                                           ))))
                                     ))))
                    } ; ___lambda.call(
                          trampCall( self._caar_METHOD(  'caar',
                              begin
                                if @global_lisp_binding.has_key?('_caar') then
                                  trampCall(@_caar)
                                else raise NameError.new( "Error: undefined variable _caar", "_caar" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:482"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    trampCall(_lists)
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:485"] + __e.backtrace ) ; raise __e
                                end
                                       )))                        ,
                          trampCall( self._cdar_METHOD(  'cdar',
                              begin
                                if @global_lisp_binding.has_key?('_cdar') then
                                  trampCall(@_cdar)
                                else raise NameError.new( "Error: undefined variable _cdar", "_cdar" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:483"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    trampCall(_lists)
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:485"] + __e.backtrace ) ; raise __e
                                end
                                       )))
                               )
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self.__PAMARKmap_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['__PAMARKmap'] = self.method( :__PAMARKmap_METHOD )
    @__PAMARKmap = 
    trampCall(
          Proc.new { |_proc,*__rest__| _lists = __rest__[0] ;  
              begin
                ___lambda = lambda { |_result,__PAMARKmap_MIMARKarg1| 
                    _result                     = 
                    Cell.new()
                    __PAMARKmap_MIMARKarg1                     = 
                      Proc.new { |_proc,_lst| 
                          if ( 
                            trampCall( self._null_QUMARK_METHOD(  'null?',
                                begin
                                  if @global_lisp_binding.has_key?('_null_QUMARK') then
                                    trampCall(@_null_QUMARK)
                                  else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:514"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      trampCall(_lst)
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:500"] + __e.backtrace ) ; raise __e
                                  end
                                         )))
                           ) then
                            true
                          else
                              begin
                                  begin
                                    
                                    _result = 
                                    trampCall(
                                          trampCall( self._cons_METHOD(  'cons',
                                              begin
                                                if @global_lisp_binding.has_key?('_cons') then
                                                  trampCall(@_cons)
                                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:516"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                trampCall( callProcedure(   'proc',
                                                    begin
                                                        trampCall(_proc)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:516"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      trampCall( self._car_METHOD(  'car',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_car') then
                                                              trampCall(@_car)
                                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:511"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            begin
                                                                trampCall(_lst)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:500"] + __e.backtrace ) ; raise __e
                                                            end
                                                                   )))
                                                             )))                                              ,Cell.new(
                                                begin
                                                    trampCall(_result)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:506"] + __e.backtrace ) ; raise __e
                                                end
                                                       ))))
                                    )
                                  end
                                  delayCall( '%map-arg1',
                                      begin
                                          trampCall(__PAMARKmap_MIMARKarg1)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:505"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            trampCall(_proc)
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:516"] + __e.backtrace ) ; raise __e
                                        end                                      ,Cell.new(
                                        trampCall( self._cdr_METHOD(  'cdr',
                                            begin
                                              if @global_lisp_binding.has_key?('_cdr') then
                                                trampCall(@_cdr)
                                              else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:512"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              begin
                                                  trampCall(_lst)
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:500"] + __e.backtrace ) ; raise __e
                                              end
                                                     )))
                                               )))
                              end
                          end
                      }
                    if ( 
                      trampCall( self._null_QUMARK_METHOD(  'null?',
                          begin
                            if @global_lisp_binding.has_key?('_null_QUMARK') then
                              trampCall(@_null_QUMARK)
                            else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:514"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                trampCall(_lists)
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:510"] + __e.backtrace ) ; raise __e
                            end
                                   )))
                     ) then
                        begin
                            delayCall( 'apply',
                                begin
                                  if @global_lisp_binding.has_key?('_apply') then
                                    trampCall(@_apply)
                                  else raise NameError.new( "Error: undefined variable _apply", "_apply" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:516"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      trampCall(_proc)
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:516"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                        end
                    else
                        if ( 
                          trampCall( self._eq_QUMARK_METHOD(  'eq?',
                              begin
                                if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                  trampCall(@_eq_QUMARK)
                                else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:504"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                              1                              ,Cell.new(
                                trampCall( self._length_METHOD(  'length',
                                    begin
                                      if @global_lisp_binding.has_key?('_length') then
                                        trampCall(@_length)
                                      else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:504"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          trampCall(_lists)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:510"] + __e.backtrace ) ; raise __e
                                      end
                                             )))
                                       ))))
                         ) then
                            begin
                                trampCall( callProcedure(   '%map-arg1',
                                    begin
                                        trampCall(__PAMARKmap_MIMARKarg1)
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:505"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          trampCall(_proc)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:516"] + __e.backtrace ) ; raise __e
                                      end                                    ,Cell.new(
                                      trampCall( self._car_METHOD(  'car',
                                          begin
                                            if @global_lisp_binding.has_key?('_car') then
                                              trampCall(@_car)
                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:511"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                trampCall(_lists)
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:510"] + __e.backtrace ) ; raise __e
                                            end
                                                   )))
                                             ))))
                                delayCall( 'reverse',
                                    begin
                                      if @global_lisp_binding.has_key?('_reverse') then
                                        trampCall(@_reverse)
                                      else raise NameError.new( "Error: undefined variable _reverse", "_reverse" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:506"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          trampCall(_result)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:506"] + __e.backtrace ) ; raise __e
                                      end
                                             ))
                            end
                        else
                            if ( 
                            true
                             ) then
                                begin
                                    if ( 
                                      trampCall( self._null_QUMARK_METHOD(  'null?',
                                          begin
                                            if @global_lisp_binding.has_key?('_null_QUMARK') then
                                              trampCall(@_null_QUMARK)
                                            else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:514"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            trampCall( self._car_METHOD(  'car',
                                                begin
                                                  if @global_lisp_binding.has_key?('_car') then
                                                    trampCall(@_car)
                                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:511"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  begin
                                                      trampCall(_lists)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:510"] + __e.backtrace ) ; raise __e
                                                  end
                                                         )))
                                                   )))
                                     ) then
                                      Cell.new()
                                    else
                                        begin
                                          ___lambda = lambda { |_unz| 
                                              begin
                                                ___lambda = lambda { |_cars,_cdrs| 
                                                    delayCall( 'cons',
                                                        begin
                                                          if @global_lisp_binding.has_key?('_cons') then
                                                            trampCall(@_cons)
                                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:516"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                          trampCall( self._apply_METHOD(  'apply',
                                                              begin
                                                                if @global_lisp_binding.has_key?('_apply') then
                                                                  trampCall(@_apply)
                                                                else raise NameError.new( "Error: undefined variable _apply", "_apply" ) end
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:516"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                                begin
                                                                    trampCall(_proc)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:516"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,Cell.new(
                                                                begin
                                                                    trampCall(_cars)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:513"] + __e.backtrace ) ; raise __e
                                                                end
                                                                       ))))                                                        ,Cell.new(
                                                          if ( 
                                                            trampCall( self._null_QUMARK_METHOD(  'null?',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_null_QUMARK') then
                                                                    trampCall(@_null_QUMARK)
                                                                  else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:514"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                  begin
                                                                      trampCall(_cdrs)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:516"] + __e.backtrace ) ; raise __e
                                                                  end
                                                                         )))
                                                           ) then
                                                            Cell.new()
                                                          else
                                                              trampCall( self._apply_METHOD(  'apply',
                                                                  begin
                                                                    if @global_lisp_binding.has_key?('_apply') then
                                                                      trampCall(@_apply)
                                                                    else raise NameError.new( "Error: undefined variable _apply", "_apply" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:516"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                    begin
                                                                      if @global_lisp_binding.has_key?('__PAMARKmap') then
                                                                        trampCall(@__PAMARKmap)
                                                                      else raise NameError.new( "Error: undefined variable __PAMARKmap", "__PAMARKmap" ) end
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:516"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,Cell.new(
                                                                    trampCall( self._cons_METHOD(  'cons',
                                                                        begin
                                                                          if @global_lisp_binding.has_key?('_cons') then
                                                                            trampCall(@_cons)
                                                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:516"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                        Cell.new(
                                                                          begin
                                                                              trampCall(_proc)
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:516"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,Cell.new(
                                                                          begin
                                                                              trampCall(_cdrs)
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:516"] + __e.backtrace ) ; raise __e
                                                                          end
                                                                                 ))))
                                                                           ))))
                                                          end
                                                                 )))
                                                } ; ___lambda.call(
                                                      trampCall( self._car_METHOD(  'car',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_car') then
                                                              trampCall(@_car)
                                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:511"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            begin
                                                                trampCall(_unz)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:512"] + __e.backtrace ) ; raise __e
                                                            end
                                                                   )))                                                    ,
                                                      trampCall( self._cdr_METHOD(  'cdr',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_cdr') then
                                                              trampCall(@_cdr)
                                                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:512"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            begin
                                                                trampCall(_unz)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:512"] + __e.backtrace ) ; raise __e
                                                            end
                                                                   )))
                                                           )
                                              end
                                          } ; ___lambda.call(
                                                trampCall( self._apply_METHOD(  'apply',
                                                    begin
                                                      if @global_lisp_binding.has_key?('_apply') then
                                                        trampCall(@_apply)
                                                      else raise NameError.new( "Error: undefined variable _apply", "_apply" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:516"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      begin
                                                        if @global_lisp_binding.has_key?('_unzip1_MIMARKwith_MIMARKcdr') then
                                                          trampCall(@_unzip1_MIMARKwith_MIMARKcdr)
                                                        else raise NameError.new( "Error: undefined variable _unzip1_MIMARKwith_MIMARKcdr", "_unzip1_MIMARKwith_MIMARKcdr" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:510"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,Cell.new(
                                                      begin
                                                          trampCall(_lists)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:510"] + __e.backtrace ) ; raise __e
                                                      end
                                                             ))))
                                                     )
                                        end
                                    end
                                end
                            else
                                Cell.new()
                            end
                        end
                    end
                } ; ___lambda.call(
                nil,nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self.__PAMARKfor_MIMARKeach_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['__PAMARKfor_MIMARKeach'] = self.method( :__PAMARKfor_MIMARKeach_METHOD )
    @__PAMARKfor_MIMARKeach = 
    trampCall(
          Proc.new { |_proc,*__rest__| _lists = __rest__[0] ;  
              begin
                ___lambda = lambda { |__PAMARKfor_MIMARKeach_MIMARKarg1| 
                    __PAMARKfor_MIMARKeach_MIMARKarg1                     = 
                      Proc.new { |_proc,_lst| 
                          if ( 
                            trampCall( self._null_QUMARK_METHOD(  'null?',
                                begin
                                  if @global_lisp_binding.has_key?('_null_QUMARK') then
                                    trampCall(@_null_QUMARK)
                                  else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:538"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      trampCall(_lst)
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:525"] + __e.backtrace ) ; raise __e
                                  end
                                         )))
                           ) then
                            true
                          else
                              begin
                                  trampCall( callProcedure(   'proc',
                                      begin
                                          trampCall(_proc)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:540"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        trampCall( self._car_METHOD(  'car',
                                            begin
                                              if @global_lisp_binding.has_key?('_car') then
                                                trampCall(@_car)
                                              else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:535"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              begin
                                                  trampCall(_lst)
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:525"] + __e.backtrace ) ; raise __e
                                              end
                                                     )))
                                               )))
                                  delayCall( '%for-each-arg1',
                                      begin
                                          trampCall(__PAMARKfor_MIMARKeach_MIMARKarg1)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:530"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            trampCall(_proc)
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:540"] + __e.backtrace ) ; raise __e
                                        end                                      ,Cell.new(
                                        trampCall( self._cdr_METHOD(  'cdr',
                                            begin
                                              if @global_lisp_binding.has_key?('_cdr') then
                                                trampCall(@_cdr)
                                              else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:536"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              begin
                                                  trampCall(_lst)
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:525"] + __e.backtrace ) ; raise __e
                                              end
                                                     )))
                                               )))
                              end
                          end
                      }
                    if ( 
                      trampCall( self._null_QUMARK_METHOD(  'null?',
                          begin
                            if @global_lisp_binding.has_key?('_null_QUMARK') then
                              trampCall(@_null_QUMARK)
                            else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:538"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                trampCall(_lists)
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:534"] + __e.backtrace ) ; raise __e
                            end
                                   )))
                     ) then
                        begin
                            delayCall( 'apply',
                                begin
                                  if @global_lisp_binding.has_key?('_apply') then
                                    trampCall(@_apply)
                                  else raise NameError.new( "Error: undefined variable _apply", "_apply" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:540"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      trampCall(_proc)
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:540"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                        end
                    else
                        if ( 
                          trampCall( self._eq_QUMARK_METHOD(  'eq?',
                              begin
                                if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                  trampCall(@_eq_QUMARK)
                                else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:529"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                              1                              ,Cell.new(
                                trampCall( self._length_METHOD(  'length',
                                    begin
                                      if @global_lisp_binding.has_key?('_length') then
                                        trampCall(@_length)
                                      else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:529"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          trampCall(_lists)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:534"] + __e.backtrace ) ; raise __e
                                      end
                                             )))
                                       ))))
                         ) then
                            begin
                                delayCall( '%for-each-arg1',
                                    begin
                                        trampCall(__PAMARKfor_MIMARKeach_MIMARKarg1)
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:530"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          trampCall(_proc)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:540"] + __e.backtrace ) ; raise __e
                                      end                                    ,Cell.new(
                                      trampCall( self._car_METHOD(  'car',
                                          begin
                                            if @global_lisp_binding.has_key?('_car') then
                                              trampCall(@_car)
                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:535"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                trampCall(_lists)
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:534"] + __e.backtrace ) ; raise __e
                                            end
                                                   )))
                                             )))
                            end
                        else
                            if ( 
                            true
                             ) then
                                begin
                                    if ( 
                                      trampCall( self._null_QUMARK_METHOD(  'null?',
                                          begin
                                            if @global_lisp_binding.has_key?('_null_QUMARK') then
                                              trampCall(@_null_QUMARK)
                                            else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:538"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            trampCall( self._car_METHOD(  'car',
                                                begin
                                                  if @global_lisp_binding.has_key?('_car') then
                                                    trampCall(@_car)
                                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:535"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  begin
                                                      trampCall(_lists)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:534"] + __e.backtrace ) ; raise __e
                                                  end
                                                         )))
                                                   )))
                                     ) then
                                      true
                                    else
                                        begin
                                          ___lambda = lambda { |_unz| 
                                              begin
                                                ___lambda = lambda { |_cars,_cdrs| 
                                                    trampCall( self._apply_METHOD(  'apply',
                                                        begin
                                                          if @global_lisp_binding.has_key?('_apply') then
                                                            trampCall(@_apply)
                                                          else raise NameError.new( "Error: undefined variable _apply", "_apply" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:540"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                          begin
                                                              trampCall(_proc)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:540"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,Cell.new(
                                                          begin
                                                              trampCall(_cars)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:537"] + __e.backtrace ) ; raise __e
                                                          end
                                                                 ))))
                                                    if ( 
                                                      trampCall( self._null_QUMARK_METHOD(  'null?',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_null_QUMARK') then
                                                              trampCall(@_null_QUMARK)
                                                            else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:538"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            begin
                                                                trampCall(_cdrs)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:540"] + __e.backtrace ) ; raise __e
                                                            end
                                                                   )))
                                                     ) then
                                                      Cell.new()
                                                    else
                                                        delayCall( 'apply',
                                                            begin
                                                              if @global_lisp_binding.has_key?('_apply') then
                                                                trampCall(@_apply)
                                                              else raise NameError.new( "Error: undefined variable _apply", "_apply" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:540"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              begin
                                                                if @global_lisp_binding.has_key?('__PAMARKfor_MIMARKeach') then
                                                                  trampCall(@__PAMARKfor_MIMARKeach)
                                                                else raise NameError.new( "Error: undefined variable __PAMARKfor_MIMARKeach", "__PAMARKfor_MIMARKeach" ) end
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:540"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,Cell.new(
                                                              trampCall( self._cons_METHOD(  'cons',
                                                                  begin
                                                                    if @global_lisp_binding.has_key?('_cons') then
                                                                      trampCall(@_cons)
                                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:540"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                    begin
                                                                        trampCall(_proc)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:540"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,Cell.new(
                                                                    begin
                                                                        trampCall(_cdrs)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:540"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                           ))))
                                                                     )))
                                                    end
                                                } ; ___lambda.call(
                                                      trampCall( self._car_METHOD(  'car',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_car') then
                                                              trampCall(@_car)
                                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:535"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            begin
                                                                trampCall(_unz)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:536"] + __e.backtrace ) ; raise __e
                                                            end
                                                                   )))                                                    ,
                                                      trampCall( self._cdr_METHOD(  'cdr',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_cdr') then
                                                              trampCall(@_cdr)
                                                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:536"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            begin
                                                                trampCall(_unz)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:536"] + __e.backtrace ) ; raise __e
                                                            end
                                                                   )))
                                                           )
                                              end
                                          } ; ___lambda.call(
                                                trampCall( self._apply_METHOD(  'apply',
                                                    begin
                                                      if @global_lisp_binding.has_key?('_apply') then
                                                        trampCall(@_apply)
                                                      else raise NameError.new( "Error: undefined variable _apply", "_apply" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:540"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      begin
                                                        if @global_lisp_binding.has_key?('_unzip1_MIMARKwith_MIMARKcdr') then
                                                          trampCall(@_unzip1_MIMARKwith_MIMARKcdr)
                                                        else raise NameError.new( "Error: undefined variable _unzip1_MIMARKwith_MIMARKcdr", "_unzip1_MIMARKwith_MIMARKcdr" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:534"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,Cell.new(
                                                      begin
                                                          trampCall(_lists)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:534"] + __e.backtrace ) ; raise __e
                                                      end
                                                             ))))
                                                     )
                                        end
                                    end
                                end
                            else
                                Cell.new()
                            end
                        end
                    end
                } ; ___lambda.call(
                nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self.__PAMARKfilter_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['__PAMARKfilter'] = self.method( :__PAMARKfilter_METHOD )
    @__PAMARKfilter = 
    trampCall(
          Proc.new { |_pred,_lst| 
              begin
                ___lambda = lambda { |_result,__PAMARKfilter_MIMARKarg1| 
                    _result                     = 
                    Cell.new()
                    __PAMARKfilter_MIMARKarg1                     = 
                      Proc.new { |_proc,_lst| 
                          if ( 
                            trampCall( self._null_QUMARK_METHOD(  'null?',
                                begin
                                  if @global_lisp_binding.has_key?('_null_QUMARK') then
                                    trampCall(@_null_QUMARK)
                                  else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:547"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      trampCall(_lst)
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:554"] + __e.backtrace ) ; raise __e
                                  end
                                         )))
                           ) then
                            Cell.new()
                          else
                              begin
                                ___lambda = lambda { |_v| 
                                    if ( 
                                      begin
                                          trampCall(_v)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:550"] + __e.backtrace ) ; raise __e
                                      end
                                     ) then
                                        begin
                                            begin
                                              
                                              _result = 
                                              trampCall(
                                                    trampCall( self._cons_METHOD(  'cons',
                                                        begin
                                                          if @global_lisp_binding.has_key?('_cons') then
                                                            trampCall(@_cons)
                                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:551"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                          trampCall( self._car_METHOD(  'car',
                                                              begin
                                                                if @global_lisp_binding.has_key?('_car') then
                                                                  trampCall(@_car)
                                                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:551"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                                begin
                                                                    trampCall(_lst)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:554"] + __e.backtrace ) ; raise __e
                                                                end
                                                                       )))                                                        ,Cell.new(
                                                          begin
                                                              trampCall(_result)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:555"] + __e.backtrace ) ; raise __e
                                                          end
                                                                 ))))
                                              )
                                            end
                                        end
                                    end
                                    delayCall( '%filter-arg1',
                                        begin
                                            trampCall(__PAMARKfilter_MIMARKarg1)
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:554"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          begin
                                              trampCall(_proc)
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:552"] + __e.backtrace ) ; raise __e
                                          end                                        ,Cell.new(
                                          trampCall( self._cdr_METHOD(  'cdr',
                                              begin
                                                if @global_lisp_binding.has_key?('_cdr') then
                                                  trampCall(@_cdr)
                                                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:552"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                begin
                                                    trampCall(_lst)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:554"] + __e.backtrace ) ; raise __e
                                                end
                                                       )))
                                                 )))
                                } ; ___lambda.call(
                                      trampCall( callProcedure(   'proc',
                                          begin
                                              trampCall(_proc)
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:552"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            trampCall( self._car_METHOD(  'car',
                                                begin
                                                  if @global_lisp_binding.has_key?('_car') then
                                                    trampCall(@_car)
                                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:551"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  begin
                                                      trampCall(_lst)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:554"] + __e.backtrace ) ; raise __e
                                                  end
                                                         )))
                                                   )))
                                           )
                              end
                          end
                      }
                    trampCall( callProcedure(   '%filter-arg1',
                        begin
                            trampCall(__PAMARKfilter_MIMARKarg1)
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:554"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              trampCall(_pred)
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:554"] + __e.backtrace ) ; raise __e
                          end                        ,Cell.new(
                          begin
                              trampCall(_lst)
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:554"] + __e.backtrace ) ; raise __e
                          end
                                 ))))
                    delayCall( 'reverse',
                        begin
                          if @global_lisp_binding.has_key?('_reverse') then
                            trampCall(@_reverse)
                          else raise NameError.new( "Error: undefined variable _reverse", "_reverse" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:555"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              trampCall(_result)
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:555"] + __e.backtrace ) ; raise __e
                          end
                                 ))
                } ; ___lambda.call(
                nil,nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self.__PAMARKfilter_MIMARKmap_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['__PAMARKfilter_MIMARKmap'] = self.method( :__PAMARKfilter_MIMARKmap_METHOD )
    @__PAMARKfilter_MIMARKmap = 
    trampCall(
          Proc.new { |_pred,_lst| 
              begin
                ___lambda = lambda { |_result,__PAMARKfilter_MIMARKmap_MIMARKarg1| 
                    _result                     = 
                    Cell.new()
                    __PAMARKfilter_MIMARKmap_MIMARKarg1                     = 
                      Proc.new { |_proc,_lst| 
                          if ( 
                            trampCall( self._null_QUMARK_METHOD(  'null?',
                                begin
                                  if @global_lisp_binding.has_key?('_null_QUMARK') then
                                    trampCall(@_null_QUMARK)
                                  else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:561"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      trampCall(_lst)
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:568"] + __e.backtrace ) ; raise __e
                                  end
                                         )))
                           ) then
                            Cell.new()
                          else
                              begin
                                ___lambda = lambda { |_v| 
                                    if ( 
                                      begin
                                          trampCall(_v)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:565"] + __e.backtrace ) ; raise __e
                                      end
                                     ) then
                                        begin
                                            begin
                                              
                                              _result = 
                                              trampCall(
                                                    trampCall( self._cons_METHOD(  'cons',
                                                        begin
                                                          if @global_lisp_binding.has_key?('_cons') then
                                                            trampCall(@_cons)
                                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:565"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                          begin
                                                              trampCall(_v)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:565"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,Cell.new(
                                                          begin
                                                              trampCall(_result)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:569"] + __e.backtrace ) ; raise __e
                                                          end
                                                                 ))))
                                              )
                                            end
                                        end
                                    end
                                    delayCall( '%filter-map-arg1',
                                        begin
                                            trampCall(__PAMARKfilter_MIMARKmap_MIMARKarg1)
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:568"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          begin
                                              trampCall(_proc)
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:566"] + __e.backtrace ) ; raise __e
                                          end                                        ,Cell.new(
                                          trampCall( self._cdr_METHOD(  'cdr',
                                              begin
                                                if @global_lisp_binding.has_key?('_cdr') then
                                                  trampCall(@_cdr)
                                                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:566"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                begin
                                                    trampCall(_lst)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:568"] + __e.backtrace ) ; raise __e
                                                end
                                                       )))
                                                 )))
                                } ; ___lambda.call(
                                      trampCall( callProcedure(   'proc',
                                          begin
                                              trampCall(_proc)
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:566"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            trampCall( self._car_METHOD(  'car',
                                                begin
                                                  if @global_lisp_binding.has_key?('_car') then
                                                    trampCall(@_car)
                                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:563"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  begin
                                                      trampCall(_lst)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:568"] + __e.backtrace ) ; raise __e
                                                  end
                                                         )))
                                                   )))
                                           )
                              end
                          end
                      }
                    trampCall( callProcedure(   '%filter-map-arg1',
                        begin
                            trampCall(__PAMARKfilter_MIMARKmap_MIMARKarg1)
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:568"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              trampCall(_pred)
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:568"] + __e.backtrace ) ; raise __e
                          end                        ,Cell.new(
                          begin
                              trampCall(_lst)
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:568"] + __e.backtrace ) ; raise __e
                          end
                                 ))))
                    delayCall( 'reverse',
                        begin
                          if @global_lisp_binding.has_key?('_reverse') then
                            trampCall(@_reverse)
                          else raise NameError.new( "Error: undefined variable _reverse", "_reverse" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:569"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              trampCall(_result)
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:569"] + __e.backtrace ) ; raise __e
                          end
                                 ))
                } ; ___lambda.call(
                nil,nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._find_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_find'] = self.method( :_find_METHOD )
    @_find = 
    trampCall(
          Proc.new { |_pred,_lst| 
              begin
                ___lambda = lambda { |_result| 
                    if ( 
                      trampCall( self._null_QUMARK_METHOD(  'null?',
                          begin
                            if @global_lisp_binding.has_key?('_null_QUMARK') then
                              trampCall(@_null_QUMARK)
                            else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:574"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                trampCall(_result)
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:576"] + __e.backtrace ) ; raise __e
                            end
                                   )))
                     ) then
                      false
                    else
                        delayCall( 'car',
                            begin
                              if @global_lisp_binding.has_key?('_car') then
                                trampCall(@_car)
                              else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:576"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  trampCall(_result)
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:576"] + __e.backtrace ) ; raise __e
                              end
                                     ))
                    end
                } ; ___lambda.call(
                      trampCall( self.__PAMARKfilter_METHOD(  '%filter',
                          begin
                            if @global_lisp_binding.has_key?('__PAMARKfilter') then
                              trampCall(@__PAMARKfilter)
                            else raise NameError.new( "Error: undefined variable __PAMARKfilter", "__PAMARKfilter" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:573"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                trampCall(_pred)
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:573"] + __e.backtrace ) ; raise __e
                            end                          ,Cell.new(
                            begin
                                trampCall(_lst)
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:573"] + __e.backtrace ) ; raise __e
                            end
                                   ))))
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._map_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_map'] = self.method( :_map_METHOD )
    @_map = 
    trampCall(
          begin
            if @global_lisp_binding.has_key?('__PAMARKmap') then
              trampCall(@__PAMARKmap)
            else raise NameError.new( "Error: undefined variable __PAMARKmap", "__PAMARKmap" ) end
            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:578"] + __e.backtrace ) ; raise __e
          end
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._for_MIMARKeach_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_for_MIMARKeach'] = self.method( :_for_MIMARKeach_METHOD )
    @_for_MIMARKeach = 
    trampCall(
          begin
            if @global_lisp_binding.has_key?('__PAMARKfor_MIMARKeach') then
              trampCall(@__PAMARKfor_MIMARKeach)
            else raise NameError.new( "Error: undefined variable __PAMARKfor_MIMARKeach", "__PAMARKfor_MIMARKeach" ) end
            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:579"] + __e.backtrace ) ; raise __e
          end
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._filter_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_filter'] = self.method( :_filter_METHOD )
    @_filter = 
    trampCall(
          begin
            if @global_lisp_binding.has_key?('__PAMARKfilter') then
              trampCall(@__PAMARKfilter)
            else raise NameError.new( "Error: undefined variable __PAMARKfilter", "__PAMARKfilter" ) end
            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:580"] + __e.backtrace ) ; raise __e
          end
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._filter_MIMARKmap_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_filter_MIMARKmap'] = self.method( :_filter_MIMARKmap_METHOD )
    @_filter_MIMARKmap = 
    trampCall(
          begin
            if @global_lisp_binding.has_key?('__PAMARKfilter_MIMARKmap') then
              trampCall(@__PAMARKfilter_MIMARKmap)
            else raise NameError.new( "Error: undefined variable __PAMARKfilter_MIMARKmap", "__PAMARKfilter_MIMARKmap" ) end
            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:581"] + __e.backtrace ) ; raise __e
          end
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._lambda_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_lambda'] = self.method( :_lambda_METHOD )
    @_lambda = 
    trampCall(
          LispMacro.new { |*__rest__| _src = __rest__[0] ;  
              if ( 
                trampCall( self._not_METHOD(  'not',
                    begin
                      if @global_lisp_binding.has_key?('_not') then
                        trampCall(@_not)
                      else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:603"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      trampCall( self._list_QUMARK_METHOD(  'list?',
                          begin
                            if @global_lisp_binding.has_key?('_list_QUMARK') then
                              trampCall(@_list_QUMARK)
                            else raise NameError.new( "Error: undefined variable _list_QUMARK", "_list_QUMARK" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:589"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            trampCall( self._cadr_METHOD(  'cadr',
                                begin
                                  if @global_lisp_binding.has_key?('_cadr') then
                                    trampCall(@_cadr)
                                  else raise NameError.new( "Error: undefined variable _cadr", "_cadr" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:614"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      trampCall(_src)
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:619"] + __e.backtrace ) ; raise __e
                                  end
                                         )))
                                   )))
                             )))
               ) then
                  trampCall( self._cons_METHOD(  'cons',
                      begin
                        if @global_lisp_binding.has_key?('_cons') then
                          trampCall(@_cons)
                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:565"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                      :"lambda"                      ,Cell.new(
                        begin
                            trampCall(_src)
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:619"] + __e.backtrace ) ; raise __e
                        end
                               ))))
              else
                  begin
                    ___lambda = lambda { |_body| 
                        if ( 
                          trampCall( self._not_METHOD(  'not',
                              begin
                                if @global_lisp_binding.has_key?('_not') then
                                  trampCall(@_not)
                                else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:603"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                trampCall( self._list_QUMARK_METHOD(  'list?',
                                    begin
                                      if @global_lisp_binding.has_key?('_list_QUMARK') then
                                        trampCall(@_list_QUMARK)
                                      else raise NameError.new( "Error: undefined variable _list_QUMARK", "_list_QUMARK" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:589"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      trampCall( self._car_METHOD(  'car',
                                          begin
                                            if @global_lisp_binding.has_key?('_car') then
                                              trampCall(@_car)
                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:609"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                trampCall(_body)
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:606"] + __e.backtrace ) ; raise __e
                                            end
                                                   )))
                                             )))
                                       )))
                         ) then
                            trampCall( self._cons_METHOD(  'cons',
                                begin
                                  if @global_lisp_binding.has_key?('_cons') then
                                    trampCall(@_cons)
                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:565"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                :"lambda"                                ,Cell.new(
                                  begin
                                      trampCall(_src)
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:619"] + __e.backtrace ) ; raise __e
                                  end
                                         ))))
                        else
                            begin
                              ___lambda = lambda { |_defs,_rest| 
                                  if ( 
                                    trampCall( self.__LTMARK_METHOD(  '<',
                                        begin
                                          if @global_lisp_binding.has_key?('__LTMARK') then
                                            trampCall(@__LTMARK)
                                          else raise NameError.new( "Error: undefined variable __LTMARK", "__LTMARK" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:607"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                        0                                        ,Cell.new(
                                          trampCall( self._length_METHOD(  'length',
                                              begin
                                                if @global_lisp_binding.has_key?('_length') then
                                                  trampCall(@_length)
                                                else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:607"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                begin
                                                    trampCall(_defs)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:616"] + __e.backtrace ) ; raise __e
                                                end
                                                       )))
                                                 ))))
                                   ) then
                                      trampCall( self._cons_METHOD(  'cons',
                                          begin
                                            if @global_lisp_binding.has_key?('_cons') then
                                              trampCall(@_cons)
                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:565"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                          :"lambda"                                          ,Cell.new(
                                            trampCall( self._cons_METHOD(  'cons',
                                                begin
                                                  if @global_lisp_binding.has_key?('_cons') then
                                                    trampCall(@_cons)
                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:565"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  trampCall( self._car_METHOD(  'car',
                                                      begin
                                                        if @global_lisp_binding.has_key?('_car') then
                                                          trampCall(@_car)
                                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:609"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        begin
                                                            trampCall(_src)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:619"] + __e.backtrace ) ; raise __e
                                                        end
                                                               )))                                                ,Cell.new(
                                                  trampCall( self._cons_METHOD(  'cons',
                                                      begin
                                                        if @global_lisp_binding.has_key?('_cons') then
                                                          trampCall(@_cons)
                                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:565"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        trampCall( self._cons_METHOD(  'cons',
                                                            begin
                                                              if @global_lisp_binding.has_key?('_cons') then
                                                                trampCall(@_cons)
                                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:565"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                            :"letrec"                                                            ,Cell.new(
                                                              trampCall( self._cons_METHOD(  'cons',
                                                                  begin
                                                                    if @global_lisp_binding.has_key?('_cons') then
                                                                      trampCall(@_cons)
                                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:565"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                    trampCall( self._map_METHOD(  'map',
                                                                        begin
                                                                          if @global_lisp_binding.has_key?('_map') then
                                                                            trampCall(@_map)
                                                                          else raise NameError.new( "Error: undefined variable _map", "_map" ) end
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:611"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                        Cell.new(
                                                                          Proc.new { |_x| 
                                                                              trampCall( self._list_METHOD(  'list',
                                                                                  begin
                                                                                    if @global_lisp_binding.has_key?('_list') then
                                                                                      trampCall(@_list)
                                                                                    else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:613"] + __e.backtrace ) ; raise __e
                                                                                  end                                                                                ,
                                                                                  Cell.new(
                                                                                    trampCall( self._cadr_METHOD(  'cadr',
                                                                                        begin
                                                                                          if @global_lisp_binding.has_key?('_cadr') then
                                                                                            trampCall(@_cadr)
                                                                                          else raise NameError.new( "Error: undefined variable _cadr", "_cadr" ) end
                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:614"] + __e.backtrace ) ; raise __e
                                                                                        end                                                                                      ,
                                                                                        Cell.new(
                                                                                          begin
                                                                                              trampCall(_x)
                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:615"] + __e.backtrace ) ; raise __e
                                                                                          end
                                                                                                 )))                                                                                  ,Cell.new(
                                                                                    trampCall( self._caddr_METHOD(  'caddr',
                                                                                        begin
                                                                                          if @global_lisp_binding.has_key?('_caddr') then
                                                                                            trampCall(@_caddr)
                                                                                          else raise NameError.new( "Error: undefined variable _caddr", "_caddr" ) end
                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:615"] + __e.backtrace ) ; raise __e
                                                                                        end                                                                                      ,
                                                                                        Cell.new(
                                                                                          begin
                                                                                              trampCall(_x)
                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:615"] + __e.backtrace ) ; raise __e
                                                                                          end
                                                                                                 )))
                                                                                           ))))
                                                                          }                                                                        ,Cell.new(
                                                                          begin
                                                                              trampCall(_defs)
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:616"] + __e.backtrace ) ; raise __e
                                                                          end
                                                                                 ))))                                                                  ,Cell.new(
                                                                    begin
                                                                        trampCall(_rest)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:617"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                           ))))
                                                                     ))))                                                      ,Cell.new(
                                                      
                                                               ))))
                                                         ))))
                                                   ))))
                                  else
                                      trampCall( self._cons_METHOD(  'cons',
                                          begin
                                            if @global_lisp_binding.has_key?('_cons') then
                                              trampCall(@_cons)
                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:565"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                          :"lambda"                                          ,Cell.new(
                                            begin
                                                trampCall(_src)
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:619"] + __e.backtrace ) ; raise __e
                                            end
                                                   ))))
                                  end
                              } ; ___lambda.call(
                                    trampCall( self._filter_METHOD(  'filter',
                                        begin
                                          if @global_lisp_binding.has_key?('_filter') then
                                            trampCall(@_filter)
                                          else raise NameError.new( "Error: undefined variable _filter", "_filter" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:600"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          Proc.new { |_x| 
                                              if ( 
                                                trampCall( self._pair_QUMARK_METHOD(  'pair?',
                                                    begin
                                                      if @global_lisp_binding.has_key?('_pair_QUMARK') then
                                                        trampCall(@_pair_QUMARK)
                                                      else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:602"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      begin
                                                          trampCall(_x)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:615"] + __e.backtrace ) ; raise __e
                                                      end
                                                             )))
                                               ) then
                                                  if ( 
                                                    trampCall( self._not_METHOD(  'not',
                                                        begin
                                                          if @global_lisp_binding.has_key?('_not') then
                                                            trampCall(@_not)
                                                          else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:603"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                          trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                                              begin
                                                                if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                                  trampCall(@_eq_QUMARK)
                                                                else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:603"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                              false                                                              ,Cell.new(
                                                                trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                                                    begin
                                                                      if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                                        trampCall(@_eq_QUMARK)
                                                                      else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:603"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                    Cell.new(
                                                                    :"define"                                                                    ,Cell.new(
                                                                      trampCall( self._car_METHOD(  'car',
                                                                          begin
                                                                            if @global_lisp_binding.has_key?('_car') then
                                                                              trampCall(@_car)
                                                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:609"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                          Cell.new(
                                                                            begin
                                                                                trampCall(_x)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:615"] + __e.backtrace ) ; raise __e
                                                                            end
                                                                                   )))
                                                                             ))))
                                                                       ))))
                                                                 )))
                                                   ) then
                                                      trampCall( self._symbol_QUMARK_METHOD(  'symbol?',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_symbol_QUMARK') then
                                                              trampCall(@_symbol_QUMARK)
                                                            else raise NameError.new( "Error: undefined variable _symbol_QUMARK", "_symbol_QUMARK" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:604"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            trampCall( self._cadr_METHOD(  'cadr',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_cadr') then
                                                                    trampCall(@_cadr)
                                                                  else raise NameError.new( "Error: undefined variable _cadr", "_cadr" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:614"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                  begin
                                                                      trampCall(_x)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:615"] + __e.backtrace ) ; raise __e
                                                                  end
                                                                         )))
                                                                   )))
                                                  else
                                                    false
                                                  end
                                              else
                                                false
                                              end
                                          }                                        ,Cell.new(
                                          begin
                                              trampCall(_body)
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:606"] + __e.backtrace ) ; raise __e
                                          end
                                                 ))))                                  ,
                                    trampCall( self._filter_METHOD(  'filter',
                                        begin
                                          if @global_lisp_binding.has_key?('_filter') then
                                            trampCall(@_filter)
                                          else raise NameError.new( "Error: undefined variable _filter", "_filter" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:600"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          Proc.new { |_x| 
                                              if ( 
                                                trampCall( self._pair_QUMARK_METHOD(  'pair?',
                                                    begin
                                                      if @global_lisp_binding.has_key?('_pair_QUMARK') then
                                                        trampCall(@_pair_QUMARK)
                                                      else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:602"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      begin
                                                          trampCall(_x)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:615"] + __e.backtrace ) ; raise __e
                                                      end
                                                             )))
                                               ) then
                                                  trampCall( self._not_METHOD(  'not',
                                                      begin
                                                        if @global_lisp_binding.has_key?('_not') then
                                                          trampCall(@_not)
                                                        else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:603"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        if ( 
                                                          trampCall( self._not_METHOD(  'not',
                                                              begin
                                                                if @global_lisp_binding.has_key?('_not') then
                                                                  trampCall(@_not)
                                                                else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:603"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                                trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                                                    begin
                                                                      if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                                        trampCall(@_eq_QUMARK)
                                                                      else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:603"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                    Cell.new(
                                                                    false                                                                    ,Cell.new(
                                                                      trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                                                          begin
                                                                            if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                                              trampCall(@_eq_QUMARK)
                                                                            else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:603"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                          Cell.new(
                                                                          :"define"                                                                          ,Cell.new(
                                                                            trampCall( self._car_METHOD(  'car',
                                                                                begin
                                                                                  if @global_lisp_binding.has_key?('_car') then
                                                                                    trampCall(@_car)
                                                                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:609"] + __e.backtrace ) ; raise __e
                                                                                end                                                                              ,
                                                                                Cell.new(
                                                                                  begin
                                                                                      trampCall(_x)
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:615"] + __e.backtrace ) ; raise __e
                                                                                  end
                                                                                         )))
                                                                                   ))))
                                                                             ))))
                                                                       )))
                                                         ) then
                                                            trampCall( self._symbol_QUMARK_METHOD(  'symbol?',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_symbol_QUMARK') then
                                                                    trampCall(@_symbol_QUMARK)
                                                                  else raise NameError.new( "Error: undefined variable _symbol_QUMARK", "_symbol_QUMARK" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:604"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                  trampCall( self._cadr_METHOD(  'cadr',
                                                                      begin
                                                                        if @global_lisp_binding.has_key?('_cadr') then
                                                                          trampCall(@_cadr)
                                                                        else raise NameError.new( "Error: undefined variable _cadr", "_cadr" ) end
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:614"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                      Cell.new(
                                                                        begin
                                                                            trampCall(_x)
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:615"] + __e.backtrace ) ; raise __e
                                                                        end
                                                                               )))
                                                                         )))
                                                        else
                                                          false
                                                        end
                                                               )))
                                              else
                                                false
                                              end
                                          }                                        ,Cell.new(
                                          begin
                                              trampCall(_body)
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:606"] + __e.backtrace ) ; raise __e
                                          end
                                                 ))))
                                         )
                            end
                        end
                    } ; ___lambda.call(
                          trampCall( self._cdr_METHOD(  'cdr',
                              begin
                                if @global_lisp_binding.has_key?('_cdr') then
                                  trampCall(@_cdr)
                                else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:588"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    trampCall(_src)
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:619"] + __e.backtrace ) ; raise __e
                                end
                                       )))
                               )
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._case_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_case'] = self.method( :_case_METHOD )
    @_case = 
    trampCall(
          LispMacro.new { |_cond_MIMARKexp,*__rest__| _body = __rest__[0] ;  
              begin
                ___lambda = lambda { |_case_MIMARKblock,_case_MIMARKiter| 
                    _case_MIMARKblock                     = 
                      Proc.new { |_val,*__rest__| _elem = __rest__[0] ;  
                          begin
                            ___lambda = lambda { |_block| 
                                begin
                                  ___lambda = lambda { |_cond_MIMARKvals,_body| 
                                      begin
                                        ___lambda = lambda { |_v| 
                                            trampCall( self._cons_METHOD(  'cons',
                                                begin
                                                  if @global_lisp_binding.has_key?('_cons') then
                                                    trampCall(@_cons)
                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  trampCall( self._cons_METHOD(  'cons',
                                                      begin
                                                        if @global_lisp_binding.has_key?('_cons') then
                                                          trampCall(@_cons)
                                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        begin
                                                            trampCall(_v)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:640"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,Cell.new(
                                                        begin
                                                            trampCall(_body)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                                                        end
                                                               ))))                                                ,Cell.new(
                                                
                                                         ))))
                                        } ; ___lambda.call(
                                              if ( 
                                                trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                                    begin
                                                      if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                        trampCall(@_eq_QUMARK)
                                                      else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:648"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                    :"else"                                                    ,Cell.new(
                                                      begin
                                                          trampCall(_cond_MIMARKvals)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:639"] + __e.backtrace ) ; raise __e
                                                      end
                                                             ))))
                                               ) then
                                                  begin
                                                      trampCall(_cond_MIMARKvals)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:639"] + __e.backtrace ) ; raise __e
                                                  end
                                              else
                                                  trampCall( self._cons_METHOD(  'cons',
                                                      begin
                                                        if @global_lisp_binding.has_key?('_cons') then
                                                          trampCall(@_cons)
                                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                      :"or"                                                      ,Cell.new(
                                                        trampCall( self._map_METHOD(  'map',
                                                            begin
                                                              if @global_lisp_binding.has_key?('_map') then
                                                                trampCall(@_map)
                                                              else raise NameError.new( "Error: undefined variable _map", "_map" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:636"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              Proc.new { |_x| 
                                                                  trampCall( self._cons_METHOD(  'cons',
                                                                      begin
                                                                        if @global_lisp_binding.has_key?('_cons') then
                                                                          trampCall(@_cons)
                                                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                      Cell.new(
                                                                      :"eqv?"                                                                      ,Cell.new(
                                                                        trampCall( self._cons_METHOD(  'cons',
                                                                            begin
                                                                              if @global_lisp_binding.has_key?('_cons') then
                                                                                trampCall(@_cons)
                                                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                            Cell.new(
                                                                              begin
                                                                                  trampCall(_x)
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:638"] + __e.backtrace ) ; raise __e
                                                                              end                                                                            ,Cell.new(
                                                                              trampCall( self._cons_METHOD(  'cons',
                                                                                  begin
                                                                                    if @global_lisp_binding.has_key?('_cons') then
                                                                                      trampCall(@_cons)
                                                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
                                                                                  end                                                                                ,
                                                                                  Cell.new(
                                                                                    begin
                                                                                        trampCall(_val)
                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:652"] + __e.backtrace ) ; raise __e
                                                                                    end                                                                                  ,Cell.new(
                                                                                  
                                                                                           ))))
                                                                                     ))))
                                                                               ))))
                                                              }                                                            ,Cell.new(
                                                              begin
                                                                  trampCall(_cond_MIMARKvals)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:639"] + __e.backtrace ) ; raise __e
                                                              end
                                                                     ))))
                                                               ))))
                                              end
                                                   )
                                      end
                                  } ; ___lambda.call(
                                        trampCall( self._car_METHOD(  'car',
                                            begin
                                              if @global_lisp_binding.has_key?('_car') then
                                                trampCall(@_car)
                                              else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:651"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              begin
                                                  trampCall(_block)
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:631"] + __e.backtrace ) ; raise __e
                                              end
                                                     )))                                      ,
                                        trampCall( self._cdr_METHOD(  'cdr',
                                            begin
                                              if @global_lisp_binding.has_key?('_cdr') then
                                                trampCall(@_cdr)
                                              else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:652"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              begin
                                                  trampCall(_block)
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:631"] + __e.backtrace ) ; raise __e
                                              end
                                                     )))
                                             )
                                end
                            } ; ___lambda.call(
                                  trampCall( self._car_METHOD(  'car',
                                      begin
                                        if @global_lisp_binding.has_key?('_car') then
                                          trampCall(@_car)
                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:651"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            trampCall(_elem)
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:629"] + __e.backtrace ) ; raise __e
                                        end
                                               )))
                                       )
                          end
                      }
                    _case_MIMARKiter                     = 
                      Proc.new { |_val,_lst| 
                          if ( 
                            trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                begin
                                  if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                    trampCall(@_eq_QUMARK)
                                  else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:648"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                0                                ,Cell.new(
                                  trampCall( self._length_METHOD(  'length',
                                      begin
                                        if @global_lisp_binding.has_key?('_length') then
                                          trampCall(@_length)
                                        else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:648"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            trampCall(_lst)
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:652"] + __e.backtrace ) ; raise __e
                                        end
                                               )))
                                         ))))
                           ) then
                              begin
                                Cell.new()
                              end
                          else
                              if ( 
                                trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                    begin
                                      if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                        trampCall(@_eq_QUMARK)
                                      else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:648"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                    1                                    ,Cell.new(
                                      trampCall( self._length_METHOD(  'length',
                                          begin
                                            if @global_lisp_binding.has_key?('_length') then
                                              trampCall(@_length)
                                            else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:648"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                trampCall(_lst)
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:652"] + __e.backtrace ) ; raise __e
                                            end
                                                   )))
                                             ))))
                               ) then
                                  begin
                                      trampCall( callProcedure(   'case-block',
                                          begin
                                              trampCall(_case_MIMARKblock)
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:651"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                trampCall(_val)
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:652"] + __e.backtrace ) ; raise __e
                                            end                                          ,Cell.new(
                                            trampCall( self._car_METHOD(  'car',
                                                begin
                                                  if @global_lisp_binding.has_key?('_car') then
                                                    trampCall(@_car)
                                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:651"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  begin
                                                      trampCall(_lst)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:652"] + __e.backtrace ) ; raise __e
                                                  end
                                                         )))
                                                   ))))
                                  end
                              else
                                  if ( 
                                  true
                                   ) then
                                      begin
                                          trampCall( self._append_METHOD(  'append',
                                              begin
                                                if @global_lisp_binding.has_key?('_append') then
                                                  trampCall(@_append)
                                                else raise NameError.new( "Error: undefined variable _append", "_append" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:651"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                trampCall( callProcedure(   'case-block',
                                                    begin
                                                        trampCall(_case_MIMARKblock)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:651"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      begin
                                                          trampCall(_val)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:652"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,Cell.new(
                                                      trampCall( self._car_METHOD(  'car',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_car') then
                                                              trampCall(@_car)
                                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:651"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            begin
                                                                trampCall(_lst)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:652"] + __e.backtrace ) ; raise __e
                                                            end
                                                                   )))
                                                             ))))                                              ,Cell.new(
                                                trampCall( callProcedure(   'case-iter',
                                                    begin
                                                        trampCall(_case_MIMARKiter)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      begin
                                                          trampCall(_val)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:652"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,Cell.new(
                                                      trampCall( self._cdr_METHOD(  'cdr',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_cdr') then
                                                              trampCall(@_cdr)
                                                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:652"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            begin
                                                                trampCall(_lst)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:652"] + __e.backtrace ) ; raise __e
                                                            end
                                                                   )))
                                                             ))))
                                                       ))))
                                      end
                                  else
                                      Cell.new()
                                  end
                              end
                          end
                      }
                    begin
                      ___lambda = lambda { |_sym| 
                          trampCall( self._cons_METHOD(  'cons',
                              begin
                                if @global_lisp_binding.has_key?('_cons') then
                                  trampCall(@_cons)
                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                              :"let1"                              ,Cell.new(
                                trampCall( self._cons_METHOD(  'cons',
                                    begin
                                      if @global_lisp_binding.has_key?('_cons') then
                                        trampCall(@_cons)
                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          trampCall(_sym)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                                      end                                    ,Cell.new(
                                      trampCall( self._cons_METHOD(  'cons',
                                          begin
                                            if @global_lisp_binding.has_key?('_cons') then
                                              trampCall(@_cons)
                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                trampCall(_cond_MIMARKexp)
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:655"] + __e.backtrace ) ; raise __e
                                            end                                          ,Cell.new(
                                            trampCall( self._cons_METHOD(  'cons',
                                                begin
                                                  if @global_lisp_binding.has_key?('_cons') then
                                                    trampCall(@_cons)
                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  trampCall( self._cons_METHOD(  'cons',
                                                      begin
                                                        if @global_lisp_binding.has_key?('_cons') then
                                                          trampCall(@_cons)
                                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                      :"cond"                                                      ,Cell.new(
                                                        trampCall( callProcedure(   'case-iter',
                                                            begin
                                                                trampCall(_case_MIMARKiter)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              begin
                                                                  trampCall(_sym)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,Cell.new(
                                                              begin
                                                                  trampCall(_body)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:657"] + __e.backtrace ) ; raise __e
                                                              end
                                                                     ))))
                                                               ))))                                                ,Cell.new(
                                                
                                                         ))))
                                                   ))))
                                             ))))
                                       ))))
                      } ; ___lambda.call(
                            trampCall( self._gensym_METHOD(  'gensym',
                                begin
                                  if @global_lisp_binding.has_key?('_gensym') then
                                    trampCall(@_gensym)
                                  else raise NameError.new( "Error: undefined variable _gensym", "_gensym" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:654"] + __e.backtrace ) ; raise __e
                                end                              ,
                              Cell.new(
                                         )))
                                 )
                    end
                } ; ___lambda.call(
                nil,nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._let_ASMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_let_ASMARK'] = self.method( :_let_ASMARK_METHOD )
    @_let_ASMARK = 
    trampCall(
          LispMacro.new { |_exps,*__rest__| _body = __rest__[0] ;  
              begin
                ___lambda = lambda { |_let_ASMARK_MIMARKexpand| 
                    _let_ASMARK_MIMARKexpand                     = 
                      Proc.new { |_rest,_body| 
                          begin
                            ___lambda = lambda { |___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20171| 
                                if ( 
                                  begin
                                    ___lambda = lambda { |___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20175| 
                                        if ( 
                                          begin
                                              trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20175)
                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                          end
                                         ) then
                                            begin
                                                trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20175)
                                              rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                            end
                                        else
                                          false
                                        end
                                    } ; ___lambda.call(
                                          trampCall( self._eqv_QUMARK_METHOD(  'eqv?',
                                              begin
                                                if @global_lisp_binding.has_key?('_eqv_QUMARK') then
                                                  trampCall(@_eqv_QUMARK)
                                                else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:638"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                              0                                              ,Cell.new(
                                                begin
                                                    trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20171)
                                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                end
                                                       ))))
                                               )
                                  end
                                 ) then
                                    begin
                                      Cell.new()
                                    end
                                else
                                    if ( 
                                      begin
                                        ___lambda = lambda { |___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20176| 
                                            if ( 
                                              begin
                                                  trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20176)
                                                rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                              end
                                             ) then
                                                begin
                                                    trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20176)
                                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                end
                                            else
                                              false
                                            end
                                        } ; ___lambda.call(
                                              trampCall( self._eqv_QUMARK_METHOD(  'eqv?',
                                                  begin
                                                    if @global_lisp_binding.has_key?('_eqv_QUMARK') then
                                                      trampCall(@_eqv_QUMARK)
                                                    else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:638"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                  1                                                  ,Cell.new(
                                                    begin
                                                        trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20171)
                                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                    end
                                                           ))))
                                                   )
                                      end
                                     ) then
                                        begin
                                            trampCall( self._cons_METHOD(  'cons',
                                                begin
                                                  if @global_lisp_binding.has_key?('_cons') then
                                                    trampCall(@_cons)
                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                :"let"                                                ,Cell.new(
                                                  trampCall( self._cons_METHOD(  'cons',
                                                      begin
                                                        if @global_lisp_binding.has_key?('_cons') then
                                                          trampCall(@_cons)
                                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        trampCall( self._cons_METHOD(  'cons',
                                                            begin
                                                              if @global_lisp_binding.has_key?('_cons') then
                                                                trampCall(@_cons)
                                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              trampCall( self._car_METHOD(  'car',
                                                                  begin
                                                                    if @global_lisp_binding.has_key?('_car') then
                                                                      trampCall(@_car)
                                                                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:671"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                    begin
                                                                        trampCall(_rest)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:672"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                           )))                                                            ,Cell.new(
                                                            
                                                                     ))))                                                      ,Cell.new(
                                                        begin
                                                            trampCall(_body)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:674"] + __e.backtrace ) ; raise __e
                                                        end
                                                               ))))
                                                         ))))
                                        end
                                    else
                                        if ( 
                                        true
                                         ) then
                                            begin
                                                trampCall( self._cons_METHOD(  'cons',
                                                    begin
                                                      if @global_lisp_binding.has_key?('_cons') then
                                                        trampCall(@_cons)
                                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                    :"let"                                                    ,Cell.new(
                                                      trampCall( self._cons_METHOD(  'cons',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_cons') then
                                                              trampCall(@_cons)
                                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            trampCall( self._cons_METHOD(  'cons',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_cons') then
                                                                    trampCall(@_cons)
                                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                  trampCall( self._car_METHOD(  'car',
                                                                      begin
                                                                        if @global_lisp_binding.has_key?('_car') then
                                                                          trampCall(@_car)
                                                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:671"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                      Cell.new(
                                                                        begin
                                                                            trampCall(_rest)
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:672"] + __e.backtrace ) ; raise __e
                                                                        end
                                                                               )))                                                                ,Cell.new(
                                                                
                                                                         ))))                                                          ,Cell.new(
                                                            trampCall( self._cons_METHOD(  'cons',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_cons') then
                                                                    trampCall(@_cons)
                                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                  trampCall( callProcedure(   'let*-expand',
                                                                      begin
                                                                          trampCall(_let_ASMARK_MIMARKexpand)
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:674"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                      Cell.new(
                                                                        trampCall( self._cdr_METHOD(  'cdr',
                                                                            begin
                                                                              if @global_lisp_binding.has_key?('_cdr') then
                                                                                trampCall(@_cdr)
                                                                              else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:672"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                            Cell.new(
                                                                              begin
                                                                                  trampCall(_rest)
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:672"] + __e.backtrace ) ; raise __e
                                                                              end
                                                                                     )))                                                                      ,Cell.new(
                                                                        begin
                                                                            trampCall(_body)
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:674"] + __e.backtrace ) ; raise __e
                                                                        end
                                                                               ))))                                                                ,Cell.new(
                                                                
                                                                         ))))
                                                                   ))))
                                                             ))))
                                            end
                                        else
                                            Cell.new()
                                        end
                                    end
                                end
                            } ; ___lambda.call(
                                  trampCall( self._length_METHOD(  'length',
                                      begin
                                        if @global_lisp_binding.has_key?('_length') then
                                          trampCall(@_length)
                                        else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:664"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            trampCall(_rest)
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:672"] + __e.backtrace ) ; raise __e
                                        end
                                               )))
                                       )
                          end
                      }
                    trampCall( callProcedure(   'let*-expand',
                        begin
                            trampCall(_let_ASMARK_MIMARKexpand)
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:674"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              trampCall(_exps)
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:674"] + __e.backtrace ) ; raise __e
                          end                        ,Cell.new(
                          begin
                              trampCall(_body)
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:674"] + __e.backtrace ) ; raise __e
                          end
                                 ))))
                } ; ___lambda.call(
                nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._begin0_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_begin0'] = self.method( :_begin0_METHOD )
    @_begin0 = 
    trampCall(
          LispMacro.new { |*__rest__| _body = __rest__[0] ;  
              if ( 
                trampCall( self._null_QUMARK_METHOD(  'null?',
                    begin
                      if @global_lisp_binding.has_key?('_null_QUMARK') then
                        trampCall(@_null_QUMARK)
                      else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:679"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          trampCall(_body)
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:684"] + __e.backtrace ) ; raise __e
                      end
                             )))
               ) then
                Cell.new(:"begin",Cell.new(false))
              else
                  begin
                    ___lambda = lambda { |_result| 
                        trampCall( self._cons_METHOD(  'cons',
                            begin
                              if @global_lisp_binding.has_key?('_cons') then
                                trampCall(@_cons)
                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                            :"receive"                            ,Cell.new(
                              trampCall( self._cons_METHOD(  'cons',
                                  begin
                                    if @global_lisp_binding.has_key?('_cons') then
                                      trampCall(@_cons)
                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        trampCall(_result)
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:685"] + __e.backtrace ) ; raise __e
                                    end                                  ,Cell.new(
                                    trampCall( self._cons_METHOD(  'cons',
                                        begin
                                          if @global_lisp_binding.has_key?('_cons') then
                                            trampCall(@_cons)
                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          trampCall( self._car_METHOD(  'car',
                                              begin
                                                if @global_lisp_binding.has_key?('_car') then
                                                  trampCall(@_car)
                                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:683"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                begin
                                                    trampCall(_body)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:684"] + __e.backtrace ) ; raise __e
                                                end
                                                       )))                                        ,Cell.new(
                                          trampCall( self._append_METHOD(  'append',
                                              begin
                                                if @global_lisp_binding.has_key?('_append') then
                                                  trampCall(@_append)
                                                else raise NameError.new( "Error: undefined variable _append", "_append" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:651"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                trampCall( self._cdr_METHOD(  'cdr',
                                                    begin
                                                      if @global_lisp_binding.has_key?('_cdr') then
                                                        trampCall(@_cdr)
                                                      else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:684"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      begin
                                                          trampCall(_body)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:684"] + __e.backtrace ) ; raise __e
                                                      end
                                                             )))                                              ,Cell.new(
                                                trampCall( self._cons_METHOD(  'cons',
                                                    begin
                                                      if @global_lisp_binding.has_key?('_cons') then
                                                        trampCall(@_cons)
                                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      trampCall( self._cons_METHOD(  'cons',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_cons') then
                                                              trampCall(@_cons)
                                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                          :"apply"                                                          ,Cell.new(
                                                            trampCall( self._cons_METHOD(  'cons',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_cons') then
                                                                    trampCall(@_cons)
                                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                :"values"                                                                ,Cell.new(
                                                                  trampCall( self._cons_METHOD(  'cons',
                                                                      begin
                                                                        if @global_lisp_binding.has_key?('_cons') then
                                                                          trampCall(@_cons)
                                                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                      Cell.new(
                                                                        begin
                                                                            trampCall(_result)
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:685"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,Cell.new(
                                                                      
                                                                               ))))
                                                                         ))))
                                                                   ))))                                                    ,Cell.new(
                                                    
                                                             ))))
                                                       ))))
                                                 ))))
                                           ))))
                                     ))))
                    } ; ___lambda.call(
                          trampCall( self._gensym_METHOD(  'gensym',
                              begin
                                if @global_lisp_binding.has_key?('_gensym') then
                                  trampCall(@_gensym)
                                else raise NameError.new( "Error: undefined variable _gensym", "_gensym" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:682"] + __e.backtrace ) ; raise __e
                              end                            ,
                            Cell.new(
                                       )))
                               )
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._values_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_values'] = self.method( :_values_METHOD )
    @_values = 
    trampCall(
          Proc.new { |*__rest__| _args = __rest__[0] ;  
              begin
                ___lambda = lambda { |___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20177| 
                    if ( 
                      begin
                        ___lambda = lambda { |___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20180| 
                            if ( 
                              begin
                                  trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20180)
                                rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                              end
                             ) then
                                begin
                                    trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20180)
                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                end
                            else
                              false
                            end
                        } ; ___lambda.call(
                              trampCall( self._eqv_QUMARK_METHOD(  'eqv?',
                                  begin
                                    if @global_lisp_binding.has_key?('_eqv_QUMARK') then
                                      trampCall(@_eqv_QUMARK)
                                    else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:638"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                  1                                  ,Cell.new(
                                    begin
                                        trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20177)
                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                    end
                                           ))))
                                   )
                      end
                     ) then
                        begin
                            delayCall( 'car',
                                begin
                                  if @global_lisp_binding.has_key?('_car') then
                                    trampCall(@_car)
                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:694"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      trampCall(_args)
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:696"] + __e.backtrace ) ; raise __e
                                  end
                                         ))
                        end
                    else
                        if ( 
                        true
                         ) then
                            begin
                                delayCall( 'make-values',
                                    begin
                                      if @global_lisp_binding.has_key?('_make_MIMARKvalues') then
                                        trampCall(@_make_MIMARKvalues)
                                      else raise NameError.new( "Error: undefined variable _make_MIMARKvalues", "_make_MIMARKvalues" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:696"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          trampCall(_args)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:696"] + __e.backtrace ) ; raise __e
                                      end
                                             ))
                            end
                        else
                            Cell.new()
                        end
                    end
                } ; ___lambda.call(
                      trampCall( self._length_METHOD(  'length',
                          begin
                            if @global_lisp_binding.has_key?('_length') then
                              trampCall(@_length)
                            else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:692"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                trampCall(_args)
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:696"] + __e.backtrace ) ; raise __e
                            end
                                   )))
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._call_MIMARKwith_MIMARKvalues_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_call_MIMARKwith_MIMARKvalues'] = self.method( :_call_MIMARKwith_MIMARKvalues_METHOD )
    @_call_MIMARKwith_MIMARKvalues = 
    trampCall(
          Proc.new { |_producer,_consumer| 
              begin
                ___lambda = lambda { |_v| 
                    if ( 
                      trampCall( self._values_QUMARK_METHOD(  'values?',
                          begin
                            if @global_lisp_binding.has_key?('_values_QUMARK') then
                              trampCall(@_values_QUMARK)
                            else raise NameError.new( "Error: undefined variable _values_QUMARK", "_values_QUMARK" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:701"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                trampCall(_v)
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:703"] + __e.backtrace ) ; raise __e
                            end
                                   )))
                     ) then
                        delayCall( 'apply',
                            begin
                              if @global_lisp_binding.has_key?('_apply') then
                                trampCall(@_apply)
                              else raise NameError.new( "Error: undefined variable _apply", "_apply" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:702"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  trampCall(_consumer)
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:703"] + __e.backtrace ) ; raise __e
                              end                            ,Cell.new(
                              trampCall( self._values_MIMARKvalues_METHOD(  'values-values',
                                  begin
                                    if @global_lisp_binding.has_key?('_values_MIMARKvalues') then
                                      trampCall(@_values_MIMARKvalues)
                                    else raise NameError.new( "Error: undefined variable _values_MIMARKvalues", "_values_MIMARKvalues" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:702"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        trampCall(_v)
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:703"] + __e.backtrace ) ; raise __e
                                    end
                                           )))
                                     )))
                    else
                        delayCall( 'consumer',
                            begin
                                trampCall(_consumer)
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:703"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  trampCall(_v)
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:703"] + __e.backtrace ) ; raise __e
                              end
                                     ))
                    end
                } ; ___lambda.call(
                      trampCall( callProcedure(   'producer',
                          begin
                              trampCall(_producer)
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:700"] + __e.backtrace ) ; raise __e
                          end                        ,
                        Cell.new(
                                   )))
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._receive_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_receive'] = self.method( :_receive_METHOD )
    @_receive = 
    trampCall(
          LispMacro.new { |_vars,_expr,*__rest__| _body = __rest__[0] ;  
              trampCall( self._cons_METHOD(  'cons',
                  begin
                    if @global_lisp_binding.has_key?('_cons') then
                      trampCall(@_cons)
                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"call-with-values"                  ,Cell.new(
                    trampCall( self._cons_METHOD(  'cons',
                        begin
                          if @global_lisp_binding.has_key?('_cons') then
                            trampCall(@_cons)
                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          trampCall( self._cons_METHOD(  'cons',
                              begin
                                if @global_lisp_binding.has_key?('_cons') then
                                  trampCall(@_cons)
                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                              :"lambda"                              ,Cell.new(
                                trampCall( self._cons_METHOD(  'cons',
                                    begin
                                      if @global_lisp_binding.has_key?('_cons') then
                                        trampCall(@_cons)
                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                    Cell.new()                                    ,Cell.new(
                                      trampCall( self._cons_METHOD(  'cons',
                                          begin
                                            if @global_lisp_binding.has_key?('_cons') then
                                              trampCall(@_cons)
                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                trampCall(_expr)
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:709"] + __e.backtrace ) ; raise __e
                                            end                                          ,Cell.new(
                                          
                                                   ))))
                                             ))))
                                       ))))                        ,Cell.new(
                          trampCall( self._cons_METHOD(  'cons',
                              begin
                                if @global_lisp_binding.has_key?('_cons') then
                                  trampCall(@_cons)
                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                trampCall( self._cons_METHOD(  'cons',
                                    begin
                                      if @global_lisp_binding.has_key?('_cons') then
                                        trampCall(@_cons)
                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                    :"lambda"                                    ,Cell.new(
                                      trampCall( self._cons_METHOD(  'cons',
                                          begin
                                            if @global_lisp_binding.has_key?('_cons') then
                                              trampCall(@_cons)
                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                trampCall(_vars)
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:710"] + __e.backtrace ) ; raise __e
                                            end                                          ,Cell.new(
                                            begin
                                                trampCall(_body)
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:710"] + __e.backtrace ) ; raise __e
                                            end
                                                   ))))
                                             ))))                              ,Cell.new(
                              
                                       ))))
                                 ))))
                           ))))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._get_MIMARKkeyword_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_get_MIMARKkeyword'] = self.method( :_get_MIMARKkeyword_METHOD )
    @_get_MIMARKkeyword = 
    trampCall(
          Proc.new { |_key,_kv_MIMARKlist,*__rest__| _fallback = __rest__[0] ;  
              if ( 
                begin
                  ___lambda = lambda { |___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20183| 
                      if ( 
                        begin
                            trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20183)
                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                        end
                       ) then
                          begin
                              trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20183)
                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                          end
                      else
                          begin
                            ___lambda = lambda { |___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20184| 
                                if ( 
                                  begin
                                      trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20184)
                                    rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                  end
                                 ) then
                                    begin
                                        trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20184)
                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                    end
                                else
                                  false
                                end
                            } ; ___lambda.call(
                                  trampCall( self.__GTMARK_EQMARK_METHOD(  '>=',
                                      begin
                                        if @global_lisp_binding.has_key?('__GTMARK_EQMARK') then
                                          trampCall(@__GTMARK_EQMARK)
                                        else raise NameError.new( "Error: undefined variable __GTMARK_EQMARK", "__GTMARK_EQMARK" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:718"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                      2                                      ,Cell.new(
                                        trampCall( self._length_METHOD(  'length',
                                            begin
                                              if @global_lisp_binding.has_key?('_length') then
                                                trampCall(@_length)
                                              else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:728"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              begin
                                                  trampCall(_kv_MIMARKlist)
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:734"] + __e.backtrace ) ; raise __e
                                              end
                                                     )))
                                               ))))
                                       )
                          end
                      end
                  } ; ___lambda.call(
                        trampCall( self._not_METHOD(  'not',
                            begin
                              if @global_lisp_binding.has_key?('_not') then
                                trampCall(@_not)
                              else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:718"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              trampCall( self._list_QUMARK_METHOD(  'list?',
                                  begin
                                    if @global_lisp_binding.has_key?('_list_QUMARK') then
                                      trampCall(@_list_QUMARK)
                                    else raise NameError.new( "Error: undefined variable _list_QUMARK", "_list_QUMARK" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:718"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        trampCall(_kv_MIMARKlist)
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:734"] + __e.backtrace ) ; raise __e
                                    end
                                           )))
                                     )))
                             )
                end
               ) then
                  begin
                      if ( 
                        trampCall( self._null_QUMARK_METHOD(  'null?',
                            begin
                              if @global_lisp_binding.has_key?('_null_QUMARK') then
                                trampCall(@_null_QUMARK)
                              else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:730"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  trampCall(_fallback)
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:732"] + __e.backtrace ) ; raise __e
                              end
                                     )))
                       ) then
                          begin raise RuntimeError, 
                            trampCall( self._sprintf_METHOD(  'sprintf',
                                begin
                                  if @global_lisp_binding.has_key?('_sprintf') then
                                    trampCall(@_sprintf)
                                  else raise NameError.new( "Error: undefined variable _sprintf", "_sprintf" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:371"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                "Error: imcomplete key list: %s
"                                ,Cell.new(
                                  trampCall( self._write_MIMARKto_MIMARKstring_METHOD(  'write-to-string',
                                      begin
                                        if @global_lisp_binding.has_key?('_write_MIMARKto_MIMARKstring') then
                                          trampCall(@_write_MIMARKto_MIMARKstring)
                                        else raise NameError.new( "Error: undefined variable _write_MIMARKto_MIMARKstring", "_write_MIMARKto_MIMARKstring" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:734"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            trampCall(_kv_MIMARKlist)
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:734"] + __e.backtrace ) ; raise __e
                                        end
                                               )))
                                         ))))
                          rescue => __e 
                            __e.set_backtrace( ["./lib/init.nnd:370"] + __e.backtrace )
                            raise __e
                          end 
                      else
                          delayCall( 'car',
                              begin
                                if @global_lisp_binding.has_key?('_car') then
                                  trampCall(@_car)
                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:736"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    trampCall(_fallback)
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:732"] + __e.backtrace ) ; raise __e
                                end
                                       ))
                      end
                  end
              else
                  if ( 
                  true
                   ) then
                      begin
                          begin
                            ___lambda = lambda { |_loop| 
                                _loop                                 = 
                                  Proc.new { |_k,_v,_rest| 
                                      if ( 
                                        trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                            begin
                                              if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                trampCall(@_eq_QUMARK)
                                              else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:726"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              begin
                                                  trampCall(_k)
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:726"] + __e.backtrace ) ; raise __e
                                              end                                            ,Cell.new(
                                              begin
                                                  trampCall(_key)
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:731"] + __e.backtrace ) ; raise __e
                                              end
                                                     ))))
                                       ) then
                                          begin
                                              trampCall(_v)
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:727"] + __e.backtrace ) ; raise __e
                                          end
                                      else
                                          begin
                                            ___lambda = lambda { |___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20185| 
                                                if ( 
                                                  begin
                                                    ___lambda = lambda { |___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20189| 
                                                        if ( 
                                                          begin
                                                              trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20189)
                                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                          end
                                                         ) then
                                                            begin
                                                                trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20189)
                                                              rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                            end
                                                        else
                                                          false
                                                        end
                                                    } ; ___lambda.call(
                                                          trampCall( self._eqv_QUMARK_METHOD(  'eqv?',
                                                              begin
                                                                if @global_lisp_binding.has_key?('_eqv_QUMARK') then
                                                                  trampCall(@_eqv_QUMARK)
                                                                else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:638"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                              0                                                              ,Cell.new(
                                                                begin
                                                                    trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20185)
                                                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                end
                                                                       ))))
                                                               )
                                                  end
                                                 ) then
                                                    begin
                                                        if ( 
                                                          trampCall( self._null_QUMARK_METHOD(  'null?',
                                                              begin
                                                                if @global_lisp_binding.has_key?('_null_QUMARK') then
                                                                  trampCall(@_null_QUMARK)
                                                                else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:730"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                                begin
                                                                    trampCall(_fallback)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:732"] + __e.backtrace ) ; raise __e
                                                                end
                                                                       )))
                                                         ) then
                                                            begin raise RuntimeError, 
                                                              trampCall( self._sprintf_METHOD(  'sprintf',
                                                                  begin
                                                                    if @global_lisp_binding.has_key?('_sprintf') then
                                                                      trampCall(@_sprintf)
                                                                    else raise NameError.new( "Error: undefined variable _sprintf", "_sprintf" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:371"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                  "Error: value for key %s is not provided : %s
"                                                                  ,Cell.new(
                                                                    trampCall( self._write_MIMARKto_MIMARKstring_METHOD(  'write-to-string',
                                                                        begin
                                                                          if @global_lisp_binding.has_key?('_write_MIMARKto_MIMARKstring') then
                                                                            trampCall(@_write_MIMARKto_MIMARKstring)
                                                                          else raise NameError.new( "Error: undefined variable _write_MIMARKto_MIMARKstring", "_write_MIMARKto_MIMARKstring" ) end
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:734"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                        Cell.new(
                                                                          begin
                                                                              trampCall(_key)
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:731"] + __e.backtrace ) ; raise __e
                                                                          end
                                                                                 )))                                                                  ,Cell.new(
                                                                    trampCall( self._write_MIMARKto_MIMARKstring_METHOD(  'write-to-string',
                                                                        begin
                                                                          if @global_lisp_binding.has_key?('_write_MIMARKto_MIMARKstring') then
                                                                            trampCall(@_write_MIMARKto_MIMARKstring)
                                                                          else raise NameError.new( "Error: undefined variable _write_MIMARKto_MIMARKstring", "_write_MIMARKto_MIMARKstring" ) end
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:734"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                        Cell.new(
                                                                          begin
                                                                              trampCall(_kv_MIMARKlist)
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:734"] + __e.backtrace ) ; raise __e
                                                                          end
                                                                                 )))
                                                                           )))))
                                                            rescue => __e 
                                                              __e.set_backtrace( ["./lib/init.nnd:370"] + __e.backtrace )
                                                              raise __e
                                                            end 
                                                        else
                                                            delayCall( 'car',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_car') then
                                                                    trampCall(@_car)
                                                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:736"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                  begin
                                                                      trampCall(_fallback)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:732"] + __e.backtrace ) ; raise __e
                                                                  end
                                                                         ))
                                                        end
                                                    end
                                                else
                                                    if ( 
                                                      begin
                                                        ___lambda = lambda { |___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20190| 
                                                            if ( 
                                                              begin
                                                                  trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20190)
                                                                rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                              end
                                                             ) then
                                                                begin
                                                                    trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20190)
                                                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                end
                                                            else
                                                              false
                                                            end
                                                        } ; ___lambda.call(
                                                              trampCall( self._eqv_QUMARK_METHOD(  'eqv?',
                                                                  begin
                                                                    if @global_lisp_binding.has_key?('_eqv_QUMARK') then
                                                                      trampCall(@_eqv_QUMARK)
                                                                    else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:638"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                  1                                                                  ,Cell.new(
                                                                    begin
                                                                        trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20185)
                                                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                           ))))
                                                                   )
                                                      end
                                                     ) then
                                                        begin
                                                            begin raise RuntimeError, 
                                                              trampCall( self._sprintf_METHOD(  'sprintf',
                                                                  begin
                                                                    if @global_lisp_binding.has_key?('_sprintf') then
                                                                      trampCall(@_sprintf)
                                                                    else raise NameError.new( "Error: undefined variable _sprintf", "_sprintf" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:371"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                  "Error: incomplete key list: %s
"                                                                  ,Cell.new(
                                                                    trampCall( self._write_MIMARKto_MIMARKstring_METHOD(  'write-to-string',
                                                                        begin
                                                                          if @global_lisp_binding.has_key?('_write_MIMARKto_MIMARKstring') then
                                                                            trampCall(@_write_MIMARKto_MIMARKstring)
                                                                          else raise NameError.new( "Error: undefined variable _write_MIMARKto_MIMARKstring", "_write_MIMARKto_MIMARKstring" ) end
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:734"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                        Cell.new(
                                                                          begin
                                                                              trampCall(_kv_MIMARKlist)
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:734"] + __e.backtrace ) ; raise __e
                                                                          end
                                                                                 )))
                                                                           ))))
                                                            rescue => __e 
                                                              __e.set_backtrace( ["./lib/init.nnd:370"] + __e.backtrace )
                                                              raise __e
                                                            end 
                                                        end
                                                    else
                                                        if ( 
                                                        true
                                                         ) then
                                                            begin
                                                                delayCall( 'loop',
                                                                    begin
                                                                        trampCall(_loop)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:736"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                    Cell.new(
                                                                      trampCall( self._car_METHOD(  'car',
                                                                          begin
                                                                            if @global_lisp_binding.has_key?('_car') then
                                                                              trampCall(@_car)
                                                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:736"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                          Cell.new(
                                                                            begin
                                                                                trampCall(_rest)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:738"] + __e.backtrace ) ; raise __e
                                                                            end
                                                                                   )))                                                                    ,Cell.new(
                                                                      trampCall( self._cadr_METHOD(  'cadr',
                                                                          begin
                                                                            if @global_lisp_binding.has_key?('_cadr') then
                                                                              trampCall(@_cadr)
                                                                            else raise NameError.new( "Error: undefined variable _cadr", "_cadr" ) end
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:737"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                          Cell.new(
                                                                            begin
                                                                                trampCall(_rest)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:738"] + __e.backtrace ) ; raise __e
                                                                            end
                                                                                   )))                                                                    ,Cell.new(
                                                                      trampCall( self._cddr_METHOD(  'cddr',
                                                                          begin
                                                                            if @global_lisp_binding.has_key?('_cddr') then
                                                                              trampCall(@_cddr)
                                                                            else raise NameError.new( "Error: undefined variable _cddr", "_cddr" ) end
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:738"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                          Cell.new(
                                                                            begin
                                                                                trampCall(_rest)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:738"] + __e.backtrace ) ; raise __e
                                                                            end
                                                                                   )))
                                                                             ))))
                                                            end
                                                        else
                                                            Cell.new()
                                                        end
                                                    end
                                                end
                                            } ; ___lambda.call(
                                                  trampCall( self._length_METHOD(  'length',
                                                      begin
                                                        if @global_lisp_binding.has_key?('_length') then
                                                          trampCall(@_length)
                                                        else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:728"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        begin
                                                            trampCall(_rest)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:738"] + __e.backtrace ) ; raise __e
                                                        end
                                                               )))
                                                       )
                                          end
                                      end
                                  }
                                delayCall( 'loop',
                                    begin
                                        trampCall(_loop)
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:736"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      trampCall( self._car_METHOD(  'car',
                                          begin
                                            if @global_lisp_binding.has_key?('_car') then
                                              trampCall(@_car)
                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:736"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                trampCall(_kv_MIMARKlist)
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:734"] + __e.backtrace ) ; raise __e
                                            end
                                                   )))                                    ,Cell.new(
                                      trampCall( self._cadr_METHOD(  'cadr',
                                          begin
                                            if @global_lisp_binding.has_key?('_cadr') then
                                              trampCall(@_cadr)
                                            else raise NameError.new( "Error: undefined variable _cadr", "_cadr" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:737"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                trampCall(_kv_MIMARKlist)
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:734"] + __e.backtrace ) ; raise __e
                                            end
                                                   )))                                    ,Cell.new(
                                      trampCall( self._cddr_METHOD(  'cddr',
                                          begin
                                            if @global_lisp_binding.has_key?('_cddr') then
                                              trampCall(@_cddr)
                                            else raise NameError.new( "Error: undefined variable _cddr", "_cddr" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:738"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                trampCall(_kv_MIMARKlist)
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:734"] + __e.backtrace ) ; raise __e
                                            end
                                                   )))
                                             ))))
                            } ; ___lambda.call(
                            nil
                                       )
                          end
                      end
                  else
                      Cell.new()
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._dot_MIMARKoperator_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_dot_MIMARKoperator'] = self.method( :_dot_MIMARKoperator_METHOD )
    @_dot_MIMARKoperator = 
    trampCall(
          LispMacro.new { |*__rest__| _lst = __rest__[0] ;  
              begin
                ___lambda = lambda { |_generate_MIMARKmethod_MIMARKcall_MIMARKform| 
                    _generate_MIMARKmethod_MIMARKcall_MIMARKform                     = 
                      Proc.new { |_lst| 
                          begin
                            ___lambda = lambda { |_tmp| 
                                if ( 
                                  trampCall( self._symbol_QUMARK_METHOD(  'symbol?',
                                      begin
                                        if @global_lisp_binding.has_key?('_symbol_QUMARK') then
                                          trampCall(@_symbol_QUMARK)
                                        else raise NameError.new( "Error: undefined variable _symbol_QUMARK", "_symbol_QUMARK" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:758"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        trampCall( self._first_METHOD(  'first',
                                            begin
                                              if @global_lisp_binding.has_key?('_first') then
                                                trampCall(@_first)
                                              else raise NameError.new( "Error: undefined variable _first", "_first" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:751"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              begin
                                                  trampCall(_lst)
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:759"] + __e.backtrace ) ; raise __e
                                              end
                                                     )))
                                               )))
                                 ) then
                                    trampCall( self._cons_METHOD(  'cons',
                                        begin
                                          if @global_lisp_binding.has_key?('_cons') then
                                            trampCall(@_cons)
                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          trampCall( self._string_MIMARK_GTMARKsymbol_METHOD(  'string->symbol',
                                              begin
                                                if @global_lisp_binding.has_key?('_string_MIMARK_GTMARKsymbol') then
                                                  trampCall(@_string_MIMARK_GTMARKsymbol)
                                                else raise NameError.new( "Error: undefined variable _string_MIMARK_GTMARKsymbol", "_string_MIMARK_GTMARKsymbol" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:752"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                trampCall( self.__PLMARK_METHOD(  '+',
                                                    begin
                                                      if @global_lisp_binding.has_key?('__PLMARK') then
                                                        trampCall(@__PLMARK)
                                                      else raise NameError.new( "Error: undefined variable __PLMARK", "__PLMARK" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:752"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      trampCall( self._to_MIMARKs_METHOD(  'to-s',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_to_MIMARKs') then
                                                              trampCall(@_to_MIMARKs)
                                                            else raise NameError.new( "Error: undefined variable _to_MIMARKs", "_to_MIMARKs" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:752"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            trampCall( self._first_METHOD(  'first',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_first') then
                                                                    trampCall(@_first)
                                                                  else raise NameError.new( "Error: undefined variable _first", "_first" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:751"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                  begin
                                                                      trampCall(_lst)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:759"] + __e.backtrace ) ; raise __e
                                                                  end
                                                                         )))
                                                                   )))                                                    ,Cell.new(
                                                    "."                                                    ,Cell.new(
                                                      trampCall( self._to_MIMARKs_METHOD(  'to-s',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_to_MIMARKs') then
                                                              trampCall(@_to_MIMARKs)
                                                            else raise NameError.new( "Error: undefined variable _to_MIMARKs", "_to_MIMARKs" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:752"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            trampCall( self._second_METHOD(  'second',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_second') then
                                                                    trampCall(@_second)
                                                                  else raise NameError.new( "Error: undefined variable _second", "_second" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:758"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                  begin
                                                                      trampCall(_lst)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:759"] + __e.backtrace ) ; raise __e
                                                                  end
                                                                         )))
                                                                   )))
                                                             )))))
                                                       )))                                        ,Cell.new(
                                          trampCall( self._cddr_METHOD(  'cddr',
                                              begin
                                                if @global_lisp_binding.has_key?('_cddr') then
                                                  trampCall(@_cddr)
                                                else raise NameError.new( "Error: undefined variable _cddr", "_cddr" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:753"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                begin
                                                    trampCall(_lst)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:759"] + __e.backtrace ) ; raise __e
                                                end
                                                       )))
                                                 ))))
                                else
                                    trampCall( self._cons_METHOD(  'cons',
                                        begin
                                          if @global_lisp_binding.has_key?('_cons') then
                                            trampCall(@_cons)
                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                        :"let"                                        ,Cell.new(
                                          trampCall( self._cons_METHOD(  'cons',
                                              begin
                                                if @global_lisp_binding.has_key?('_cons') then
                                                  trampCall(@_cons)
                                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                trampCall( self._cons_METHOD(  'cons',
                                                    begin
                                                      if @global_lisp_binding.has_key?('_cons') then
                                                        trampCall(@_cons)
                                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      trampCall( self._cons_METHOD(  'cons',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_cons') then
                                                              trampCall(@_cons)
                                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            begin
                                                                trampCall(_tmp)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:752"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,Cell.new(
                                                            trampCall( self._cons_METHOD(  'cons',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_cons') then
                                                                    trampCall(@_cons)
                                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                  trampCall( self._first_METHOD(  'first',
                                                                      begin
                                                                        if @global_lisp_binding.has_key?('_first') then
                                                                          trampCall(@_first)
                                                                        else raise NameError.new( "Error: undefined variable _first", "_first" ) end
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:751"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                      Cell.new(
                                                                        begin
                                                                            trampCall(_lst)
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:759"] + __e.backtrace ) ; raise __e
                                                                        end
                                                                               )))                                                                ,Cell.new(
                                                                
                                                                         ))))
                                                                   ))))                                                    ,Cell.new(
                                                    
                                                             ))))                                              ,Cell.new(
                                                trampCall( self._cons_METHOD(  'cons',
                                                    begin
                                                      if @global_lisp_binding.has_key?('_cons') then
                                                        trampCall(@_cons)
                                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      trampCall( self._cons_METHOD(  'cons',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_cons') then
                                                              trampCall(@_cons)
                                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:635"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            trampCall( self._string_MIMARK_GTMARKsymbol_METHOD(  'string->symbol',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_string_MIMARK_GTMARKsymbol') then
                                                                    trampCall(@_string_MIMARK_GTMARKsymbol)
                                                                  else raise NameError.new( "Error: undefined variable _string_MIMARK_GTMARKsymbol", "_string_MIMARK_GTMARKsymbol" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:752"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                  trampCall( self.__PLMARK_METHOD(  '+',
                                                                      begin
                                                                        if @global_lisp_binding.has_key?('__PLMARK') then
                                                                          trampCall(@__PLMARK)
                                                                        else raise NameError.new( "Error: undefined variable __PLMARK", "__PLMARK" ) end
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:752"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                      Cell.new(
                                                                        trampCall( self._to_MIMARKs_METHOD(  'to-s',
                                                                            begin
                                                                              if @global_lisp_binding.has_key?('_to_MIMARKs') then
                                                                                trampCall(@_to_MIMARKs)
                                                                              else raise NameError.new( "Error: undefined variable _to_MIMARKs", "_to_MIMARKs" ) end
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:752"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                            Cell.new(
                                                                              begin
                                                                                  trampCall(_tmp)
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:752"] + __e.backtrace ) ; raise __e
                                                                              end
                                                                                     )))                                                                      ,Cell.new(
                                                                      "."                                                                      ,Cell.new(
                                                                        trampCall( self._to_MIMARKs_METHOD(  'to-s',
                                                                            begin
                                                                              if @global_lisp_binding.has_key?('_to_MIMARKs') then
                                                                                trampCall(@_to_MIMARKs)
                                                                              else raise NameError.new( "Error: undefined variable _to_MIMARKs", "_to_MIMARKs" ) end
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:752"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                            Cell.new(
                                                                              trampCall( self._second_METHOD(  'second',
                                                                                  begin
                                                                                    if @global_lisp_binding.has_key?('_second') then
                                                                                      trampCall(@_second)
                                                                                    else raise NameError.new( "Error: undefined variable _second", "_second" ) end
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:758"] + __e.backtrace ) ; raise __e
                                                                                  end                                                                                ,
                                                                                  Cell.new(
                                                                                    begin
                                                                                        trampCall(_lst)
                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:759"] + __e.backtrace ) ; raise __e
                                                                                    end
                                                                                           )))
                                                                                     )))
                                                                               )))))
                                                                         )))                                                          ,Cell.new(
                                                            trampCall( self._cddr_METHOD(  'cddr',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_cddr') then
                                                                    trampCall(@_cddr)
                                                                  else raise NameError.new( "Error: undefined variable _cddr", "_cddr" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:753"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                  begin
                                                                      trampCall(_lst)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:759"] + __e.backtrace ) ; raise __e
                                                                  end
                                                                         )))
                                                                   ))))                                                    ,Cell.new(
                                                    
                                                             ))))
                                                       ))))
                                                 ))))
                                end
                            } ; ___lambda.call(
                                  trampCall( self._gensym_METHOD(  'gensym',
                                      begin
                                        if @global_lisp_binding.has_key?('_gensym') then
                                          trampCall(@_gensym)
                                        else raise NameError.new( "Error: undefined variable _gensym", "_gensym" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:747"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                    Cell.new(
                                               )))
                                       )
                          end
                      }
                    if ( 
                      trampCall( self.__GTMARK_METHOD(  '>',
                          begin
                            if @global_lisp_binding.has_key?('__GTMARK') then
                              trampCall(@__GTMARK)
                            else raise NameError.new( "Error: undefined variable __GTMARK", "__GTMARK" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:755"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                          2                          ,Cell.new(
                            trampCall( self._length_METHOD(  'length',
                                begin
                                  if @global_lisp_binding.has_key?('_length') then
                                    trampCall(@_length)
                                  else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:755"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      trampCall(_lst)
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:759"] + __e.backtrace ) ; raise __e
                                  end
                                         )))
                                   ))))
                     ) then
                        begin
                            trampCall( self._raise_METHOD(  'raise',
                                begin
                                  if @global_lisp_binding.has_key?('_raise') then
                                    trampCall(@_raise)
                                  else raise NameError.new( "Error: undefined variable _raise", "_raise" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:760"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      trampCall(ArgumentError)
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:756"] + __e.backtrace ) ; raise __e
                                  end                                ,Cell.new(
                                ". dot-operator requires 2+ arguments."                                ,Cell.new(
                                  trampCall( self._sprintf_METHOD(  'sprintf',
                                      begin
                                        if @global_lisp_binding.has_key?('_sprintf') then
                                          trampCall(@_sprintf)
                                        else raise NameError.new( "Error: undefined variable _sprintf", "_sprintf" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:760"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                      "%s:%s in dot-operator"                                      ,Cell.new(
                                        trampCall( self.__ASMARKFILE_ASMARK_METHOD(  '*FILE*',
                                            begin
                                              if @global_lisp_binding.has_key?('__ASMARKFILE_ASMARK') then
                                                trampCall(@__ASMARKFILE_ASMARK)
                                              else raise NameError.new( "Error: undefined variable __ASMARKFILE_ASMARK", "__ASMARKFILE_ASMARK" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:760"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                          Cell.new(
                                                     )))                                      ,Cell.new(
                                        trampCall( self.__ASMARKLINE_ASMARK_METHOD(  '*LINE*',
                                            begin
                                              if @global_lisp_binding.has_key?('__ASMARKLINE_ASMARK') then
                                                trampCall(@__ASMARKLINE_ASMARK)
                                              else raise NameError.new( "Error: undefined variable __ASMARKLINE_ASMARK", "__ASMARKLINE_ASMARK" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:760"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                          Cell.new(
                                                     )))
                                               )))))
                                         )))))
                        end
                    else
                        if ( 
                        true
                         ) then
                            begin
                                if ( 
                                  trampCall( self._symbol_QUMARK_METHOD(  'symbol?',
                                      begin
                                        if @global_lisp_binding.has_key?('_symbol_QUMARK') then
                                          trampCall(@_symbol_QUMARK)
                                        else raise NameError.new( "Error: undefined variable _symbol_QUMARK", "_symbol_QUMARK" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:758"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        trampCall( self._second_METHOD(  'second',
                                            begin
                                              if @global_lisp_binding.has_key?('_second') then
                                                trampCall(@_second)
                                              else raise NameError.new( "Error: undefined variable _second", "_second" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:758"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              begin
                                                  trampCall(_lst)
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:759"] + __e.backtrace ) ; raise __e
                                              end
                                                     )))
                                               )))
                                 ) then
                                    trampCall( callProcedure(   'generate-method-call-form',
                                        begin
                                            trampCall(_generate_MIMARKmethod_MIMARKcall_MIMARKform)
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:759"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          begin
                                              trampCall(_lst)
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:759"] + __e.backtrace ) ; raise __e
                                          end
                                                 )))
                                else
                                    trampCall( self._raise_METHOD(  'raise',
                                        begin
                                          if @global_lisp_binding.has_key?('_raise') then
                                            trampCall(@_raise)
                                          else raise NameError.new( "Error: undefined variable _raise", "_raise" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:760"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          begin
                                              trampCall(TypeError)
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:760"] + __e.backtrace ) ; raise __e
                                          end                                        ,Cell.new(
                                        ". dot-operator requires method name as symbol."                                        ,Cell.new(
                                          trampCall( self._sprintf_METHOD(  'sprintf',
                                              begin
                                                if @global_lisp_binding.has_key?('_sprintf') then
                                                  trampCall(@_sprintf)
                                                else raise NameError.new( "Error: undefined variable _sprintf", "_sprintf" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:760"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                              "%s:%s in dot-operator"                                              ,Cell.new(
                                                trampCall( self.__ASMARKFILE_ASMARK_METHOD(  '*FILE*',
                                                    begin
                                                      if @global_lisp_binding.has_key?('__ASMARKFILE_ASMARK') then
                                                        trampCall(@__ASMARKFILE_ASMARK)
                                                      else raise NameError.new( "Error: undefined variable __ASMARKFILE_ASMARK", "__ASMARKFILE_ASMARK" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:760"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                  Cell.new(
                                                             )))                                              ,Cell.new(
                                                trampCall( self.__ASMARKLINE_ASMARK_METHOD(  '*LINE*',
                                                    begin
                                                      if @global_lisp_binding.has_key?('__ASMARKLINE_ASMARK') then
                                                        trampCall(@__ASMARKLINE_ASMARK)
                                                      else raise NameError.new( "Error: undefined variable __ASMARKLINE_ASMARK", "__ASMARKLINE_ASMARK" ) end
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:760"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                  Cell.new(
                                                             )))
                                                       )))))
                                                 )))))
                                end
                            end
                        else
                            Cell.new()
                        end
                    end
                } ; ___lambda.call(
                nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._with_MIMARKopen_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_with_MIMARKopen'] = self.method( :_with_MIMARKopen_METHOD )
    @_with_MIMARKopen = 
    trampCall(
          Proc.new { |_filename,_pred,*__rest__| _lst = __rest__[0] ;  
              begin
                ___lambda = lambda { |_opt| 
                    if ( 
                      trampCall( self.__LTMARK_METHOD(  '<',
                          begin
                            if @global_lisp_binding.has_key?('__LTMARK') then
                              trampCall(@__LTMARK)
                            else raise NameError.new( "Error: undefined variable __LTMARK", "__LTMARK" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:765"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                          1                          ,Cell.new(
                            trampCall( self._length_METHOD(  'length',
                                begin
                                  if @global_lisp_binding.has_key?('_length') then
                                    trampCall(@_length)
                                  else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:765"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      trampCall(_lst)
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:765"] + __e.backtrace ) ; raise __e
                                  end
                                         )))
                                   ))))
                     ) then
                        begin raise RuntimeError, 
                        "with-open requires 2 or 3 arguments."
                        rescue => __e 
                          __e.set_backtrace( ["./lib/init.nnd:766"] + __e.backtrace )
                          raise __e
                        end 
                    else
                        if ( 
                          begin
                              trampCall(_opt)
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:768"] + __e.backtrace ) ; raise __e
                          end
                         ) then
                            begin
                                trampCall(Kernel).open(
                                      begin
                                          trampCall(_filename)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:769"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      begin
                                          trampCall(_opt)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:768"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      &Proc.new { |_f| 
                                          trampCall( callProcedure(   'pred',
                                              begin
                                                  trampCall(_pred)
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:769"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                begin
                                                    trampCall(_f)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:769"] + __e.backtrace ) ; raise __e
                                                end
                                                       )))
                                      }
                                  )
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:769"] + __e.backtrace ) ; raise __e
                            end
                        else
                            begin
                                trampCall(Kernel).open(
                                      begin
                                          trampCall(_filename)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:769"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      &Proc.new { |_f| 
                                          trampCall( callProcedure(   'pred',
                                              begin
                                                  trampCall(_pred)
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:769"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                begin
                                                    trampCall(_f)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:769"] + __e.backtrace ) ; raise __e
                                                end
                                                       )))
                                      }
                                  )
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:769"] + __e.backtrace ) ; raise __e
                            end
                        end
                    end
                } ; ___lambda.call(
                      begin
                        ___lambda = lambda { |___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20193| 
                            if ( 
                              trampCall( self._null_QUMARK_METHOD(  'null?',
                                  begin
                                    if @global_lisp_binding.has_key?('_null_QUMARK') then
                                      trampCall(@_null_QUMARK)
                                    else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:730"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20193)
                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                    end
                                           )))
                             ) then
                              false
                            else
                                delayCall( 'car',
                                    begin
                                      if @global_lisp_binding.has_key?('_car') then
                                        trampCall(@_car)
                                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:736"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20193)
                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                      end
                                             ))
                            end
                        } ; ___lambda.call(
                              begin
                                  trampCall(_lst)
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:765"] + __e.backtrace ) ; raise __e
                              end
                                   )
                      end
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._last_MIMARKpair_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_last_MIMARKpair'] = self.method( :_last_MIMARKpair_METHOD )
    @_last_MIMARKpair = 
    trampCall(
          Proc.new { |_x| 
              if ( 
                trampCall( self._pair_QUMARK_METHOD(  'pair?',
                    begin
                      if @global_lisp_binding.has_key?('_pair_QUMARK') then
                        trampCall(@_pair_QUMARK)
                      else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:776"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      trampCall( self._cdr_METHOD(  'cdr',
                          begin
                            if @global_lisp_binding.has_key?('_cdr') then
                              trampCall(@_cdr)
                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:777"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                trampCall(_x)
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:778"] + __e.backtrace ) ; raise __e
                            end
                                   )))
                             )))
               ) then
                  delayCall( 'last-pair',
                      begin
                        if @global_lisp_binding.has_key?('_last_MIMARKpair') then
                          trampCall(@_last_MIMARKpair)
                        else raise NameError.new( "Error: undefined variable _last_MIMARKpair", "_last_MIMARKpair" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:777"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                        trampCall( self._cdr_METHOD(  'cdr',
                            begin
                              if @global_lisp_binding.has_key?('_cdr') then
                                trampCall(@_cdr)
                              else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:777"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  trampCall(_x)
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:778"] + __e.backtrace ) ; raise __e
                              end
                                     )))
                               ))
              else
                  begin
                      trampCall(_x)
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:778"] + __e.backtrace ) ; raise __e
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._cons_ASMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_cons_ASMARK'] = self.method( :_cons_ASMARK_METHOD )
    @_cons_ASMARK = 
    trampCall(
          Proc.new { |_arg,*__rest__| _args = __rest__[0] ;  
              if ( 
                trampCall( self._null_QUMARK_METHOD(  'null?',
                    begin
                      if @global_lisp_binding.has_key?('_null_QUMARK') then
                        trampCall(@_null_QUMARK)
                      else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:782"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          trampCall(_args)
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:784"] + __e.backtrace ) ; raise __e
                      end
                             )))
               ) then
                  begin
                      trampCall(_arg)
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:784"] + __e.backtrace ) ; raise __e
                  end
              else
                  delayCall( 'cons',
                      begin
                        if @global_lisp_binding.has_key?('_cons') then
                          trampCall(@_cons)
                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:784"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                        begin
                            trampCall(_arg)
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:784"] + __e.backtrace ) ; raise __e
                        end                      ,Cell.new(
                        trampCall( self._apply_METHOD(  'apply',
                            begin
                              if @global_lisp_binding.has_key?('_apply') then
                                trampCall(@_apply)
                              else raise NameError.new( "Error: undefined variable _apply", "_apply" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:784"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                if @global_lisp_binding.has_key?('_list_ASMARK') then
                                  trampCall(@_list_ASMARK)
                                else raise NameError.new( "Error: undefined variable _list_ASMARK", "_list_ASMARK" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:784"] + __e.backtrace ) ; raise __e
                              end                            ,Cell.new(
                              begin
                                  trampCall(_args)
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:784"] + __e.backtrace ) ; raise __e
                              end
                                     ))))
                               )))
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._list_ASMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_list_ASMARK'] = self.method( :_list_ASMARK_METHOD )
    @_list_ASMARK = 
    trampCall(
          begin
            if @global_lisp_binding.has_key?('_cons_ASMARK') then
              trampCall(@_cons_ASMARK)
            else raise NameError.new( "Error: undefined variable _cons_ASMARK", "_cons_ASMARK" ) end
            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:785"] + __e.backtrace ) ; raise __e
          end
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._make_MIMARKhash_MIMARKtable_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_make_MIMARKhash_MIMARKtable'] = self.method( :_make_MIMARKhash_MIMARKtable_METHOD )
    @_make_MIMARKhash_MIMARKtable = 
    trampCall(
          Proc.new { || 
              begin
                  trampCall(Hash).new(
                    )
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:792"] + __e.backtrace ) ; raise __e
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._hash_MIMARKtable_QUMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_hash_MIMARKtable_QUMARK'] = self.method( :_hash_MIMARKtable_QUMARK_METHOD )
    @_hash_MIMARKtable_QUMARK = 
    trampCall(
          Proc.new { |_h| 
              begin
                  trampCall(_h).is_a?(
                        begin
                            trampCall(Hash)
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:795"] + __e.backtrace ) ; raise __e
                        end
                    )
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:795"] + __e.backtrace ) ; raise __e
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._hash_MIMARKtable_MIMARKnum_MIMARKentries_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_hash_MIMARKtable_MIMARKnum_MIMARKentries'] = self.method( :_hash_MIMARKtable_MIMARKnum_MIMARKentries_METHOD )
    @_hash_MIMARKtable_MIMARKnum_MIMARKentries = 
    trampCall(
          Proc.new { |_h| 
              begin
                  trampCall(_h).length(
                    )
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:798"] + __e.backtrace ) ; raise __e
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._hash_MIMARKtable_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_hash_MIMARKtable'] = self.method( :_hash_MIMARKtable_METHOD )
    @_hash_MIMARKtable = 
    trampCall(
          Proc.new { |*__rest__| _kv_MIMARKlist = __rest__[0] ;  
              begin
                ___lambda = lambda { |_h| 
                    trampCall( self._for_MIMARKeach_METHOD(  'for-each',
                        begin
                          if @global_lisp_binding.has_key?('_for_MIMARKeach') then
                            trampCall(@_for_MIMARKeach)
                          else raise NameError.new( "Error: undefined variable _for_MIMARKeach", "_for_MIMARKeach" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:802"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          Proc.new { |_entry| 
                              trampCall( self._hash_MIMARKtable_MIMARKput_EXMARK_METHOD(  'hash-table-put!',
                                  begin
                                    if @global_lisp_binding.has_key?('_hash_MIMARKtable_MIMARKput_EXMARK') then
                                      trampCall(@_hash_MIMARKtable_MIMARKput_EXMARK)
                                    else raise NameError.new( "Error: undefined variable _hash_MIMARKtable_MIMARKput_EXMARK", "_hash_MIMARKtable_MIMARKput_EXMARK" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:804"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        trampCall(_h)
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:806"] + __e.backtrace ) ; raise __e
                                    end                                  ,Cell.new(
                                    trampCall( self._car_METHOD(  'car',
                                        begin
                                          if @global_lisp_binding.has_key?('_car') then
                                            trampCall(@_car)
                                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:804"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          begin
                                              trampCall(_entry)
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:804"] + __e.backtrace ) ; raise __e
                                          end
                                                 )))                                  ,Cell.new(
                                    trampCall( self._cdr_METHOD(  'cdr',
                                        begin
                                          if @global_lisp_binding.has_key?('_cdr') then
                                            trampCall(@_cdr)
                                          else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:804"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          begin
                                              trampCall(_entry)
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:804"] + __e.backtrace ) ; raise __e
                                          end
                                                 )))
                                           )))))
                          }                        ,Cell.new(
                          begin
                              trampCall(_kv_MIMARKlist)
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:805"] + __e.backtrace ) ; raise __e
                          end
                                 ))))
                    begin
                        trampCall(_h)
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:806"] + __e.backtrace ) ; raise __e
                    end
                } ; ___lambda.call(
                      trampCall( self._make_MIMARKhash_MIMARKtable_METHOD(  'make-hash-table',
                          begin
                            if @global_lisp_binding.has_key?('_make_MIMARKhash_MIMARKtable') then
                              trampCall(@_make_MIMARKhash_MIMARKtable)
                            else raise NameError.new( "Error: undefined variable _make_MIMARKhash_MIMARKtable", "_make_MIMARKhash_MIMARKtable" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:801"] + __e.backtrace ) ; raise __e
                          end                        ,
                        Cell.new(
                                   )))
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._hash_MIMARKtable_MIMARKclear_EXMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_hash_MIMARKtable_MIMARKclear_EXMARK'] = self.method( :_hash_MIMARKtable_MIMARKclear_EXMARK_METHOD )
    @_hash_MIMARKtable_MIMARKclear_EXMARK = 
    trampCall(
          Proc.new { |_h| 
              begin
                  trampCall(_h).clear(
                    )
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:809"] + __e.backtrace ) ; raise __e
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._hash_MIMARKtable_MIMARKdelete_EXMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_hash_MIMARKtable_MIMARKdelete_EXMARK'] = self.method( :_hash_MIMARKtable_MIMARKdelete_EXMARK_METHOD )
    @_hash_MIMARKtable_MIMARKdelete_EXMARK = 
    trampCall(
          Proc.new { |_h,_key| 
              begin
                  trampCall(_h).delete(
                        begin
                            trampCall(_key)
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:812"] + __e.backtrace ) ; raise __e
                        end
                    )
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:812"] + __e.backtrace ) ; raise __e
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._hash_MIMARKtable_MIMARKpush_EXMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_hash_MIMARKtable_MIMARKpush_EXMARK'] = self.method( :_hash_MIMARKtable_MIMARKpush_EXMARK_METHOD )
    @_hash_MIMARKtable_MIMARKpush_EXMARK = 
    trampCall(
          Proc.new { |_ht,_key,_value| 
              delayCall( 'hash-table-put!',
                  begin
                    if @global_lisp_binding.has_key?('_hash_MIMARKtable_MIMARKput_EXMARK') then
                      trampCall(@_hash_MIMARKtable_MIMARKput_EXMARK)
                    else raise NameError.new( "Error: undefined variable _hash_MIMARKtable_MIMARKput_EXMARK", "_hash_MIMARKtable_MIMARKput_EXMARK" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:815"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    begin
                        trampCall(_ht)
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:818"] + __e.backtrace ) ; raise __e
                    end                  ,Cell.new(
                    begin
                        trampCall(_key)
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:818"] + __e.backtrace ) ; raise __e
                    end                  ,Cell.new(
                    trampCall( self._cons_METHOD(  'cons',
                        begin
                          if @global_lisp_binding.has_key?('_cons') then
                            trampCall(@_cons)
                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:818"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              trampCall(_value)
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:818"] + __e.backtrace ) ; raise __e
                          end                        ,Cell.new(
                          trampCall( self._hash_MIMARKtable_MIMARKget_METHOD(  'hash-table-get',
                              begin
                                if @global_lisp_binding.has_key?('_hash_MIMARKtable_MIMARKget') then
                                  trampCall(@_hash_MIMARKtable_MIMARKget)
                                else raise NameError.new( "Error: undefined variable _hash_MIMARKtable_MIMARKget", "_hash_MIMARKtable_MIMARKget" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:818"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    trampCall(_ht)
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:818"] + __e.backtrace ) ; raise __e
                                end                              ,Cell.new(
                                begin
                                    trampCall(_key)
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:818"] + __e.backtrace ) ; raise __e
                                end                              ,Cell.new(
                              Cell.new()
                                       )))))
                                 ))))
                           ))))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._hash_MIMARKtable_MIMARKkeys_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_hash_MIMARKtable_MIMARKkeys'] = self.method( :_hash_MIMARKtable_MIMARKkeys_METHOD )
    @_hash_MIMARKtable_MIMARKkeys = 
    trampCall(
          Proc.new { |_h| 
              delayCall( 'to-list',
                  begin
                    if @global_lisp_binding.has_key?('_to_MIMARKlist') then
                      trampCall(@_to_MIMARKlist)
                    else raise NameError.new( "Error: undefined variable _to_MIMARKlist", "_to_MIMARKlist" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:821"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    begin
                        trampCall(_h).keys(
                          )
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:821"] + __e.backtrace ) ; raise __e
                    end
                           ))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._hash_MIMARKtable_MIMARKvalues_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_hash_MIMARKtable_MIMARKvalues'] = self.method( :_hash_MIMARKtable_MIMARKvalues_METHOD )
    @_hash_MIMARKtable_MIMARKvalues = 
    trampCall(
          Proc.new { |_h| 
              delayCall( 'to-list',
                  begin
                    if @global_lisp_binding.has_key?('_to_MIMARKlist') then
                      trampCall(@_to_MIMARKlist)
                    else raise NameError.new( "Error: undefined variable _to_MIMARKlist", "_to_MIMARKlist" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:824"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    begin
                        trampCall(_h).values(
                          )
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:824"] + __e.backtrace ) ; raise __e
                    end
                           ))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._hash_MIMARKtable_MIMARKmap_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_hash_MIMARKtable_MIMARKmap'] = self.method( :_hash_MIMARKtable_MIMARKmap_METHOD )
    @_hash_MIMARKtable_MIMARKmap = 
    trampCall(
          Proc.new { |_h,_pred| 
              begin
                ___lambda = lambda { |_keys| 
                    delayCall( 'map',
                        begin
                          if @global_lisp_binding.has_key?('_map') then
                            trampCall(@_map)
                          else raise NameError.new( "Error: undefined variable _map", "_map" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:828"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          Proc.new { |_key| 
                              trampCall( callProcedure(   'pred',
                                  begin
                                      trampCall(_pred)
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:830"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        trampCall(_key)
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:830"] + __e.backtrace ) ; raise __e
                                    end                                  ,Cell.new(
                                    trampCall( self._hash_MIMARKtable_MIMARKget_METHOD(  'hash-table-get',
                                        begin
                                          if @global_lisp_binding.has_key?('_hash_MIMARKtable_MIMARKget') then
                                            trampCall(@_hash_MIMARKtable_MIMARKget)
                                          else raise NameError.new( "Error: undefined variable _hash_MIMARKtable_MIMARKget", "_hash_MIMARKtable_MIMARKget" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:830"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          begin
                                              trampCall(_h)
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:830"] + __e.backtrace ) ; raise __e
                                          end                                        ,Cell.new(
                                          begin
                                              trampCall(_key)
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:830"] + __e.backtrace ) ; raise __e
                                          end
                                                 ))))
                                           ))))
                          }                        ,Cell.new(
                          begin
                              trampCall(_keys)
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:831"] + __e.backtrace ) ; raise __e
                          end
                                 )))
                } ; ___lambda.call(
                      trampCall( self._hash_MIMARKtable_MIMARKkeys_METHOD(  'hash-table-keys',
                          begin
                            if @global_lisp_binding.has_key?('_hash_MIMARKtable_MIMARKkeys') then
                              trampCall(@_hash_MIMARKtable_MIMARKkeys)
                            else raise NameError.new( "Error: undefined variable _hash_MIMARKtable_MIMARKkeys", "_hash_MIMARKtable_MIMARKkeys" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:827"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                trampCall(_h)
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:830"] + __e.backtrace ) ; raise __e
                            end
                                   )))
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._hash_MIMARKtable_MIMARKfor_MIMARKeach_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_hash_MIMARKtable_MIMARKfor_MIMARKeach'] = self.method( :_hash_MIMARKtable_MIMARKfor_MIMARKeach_METHOD )
    @_hash_MIMARKtable_MIMARKfor_MIMARKeach = 
    trampCall(
          begin
            if @global_lisp_binding.has_key?('_hash_MIMARKtable_MIMARKmap') then
              trampCall(@_hash_MIMARKtable_MIMARKmap)
            else raise NameError.new( "Error: undefined variable _hash_MIMARKtable_MIMARKmap", "_hash_MIMARKtable_MIMARKmap" ) end
            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:832"] + __e.backtrace ) ; raise __e
          end
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._hash_MIMARKtable_MIMARK_GTMARKalist_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_hash_MIMARKtable_MIMARK_GTMARKalist'] = self.method( :_hash_MIMARKtable_MIMARK_GTMARKalist_METHOD )
    @_hash_MIMARKtable_MIMARK_GTMARKalist = 
    trampCall(
          Proc.new { |_h| 
              if ( 
                trampCall( self._not_METHOD(  'not',
                    begin
                      if @global_lisp_binding.has_key?('_not') then
                        trampCall(@_not)
                      else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:835"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          trampCall(_h).is_a?(
                                begin
                                    trampCall(Hash)
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:835"] + __e.backtrace ) ; raise __e
                                end
                            )
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:835"] + __e.backtrace ) ; raise __e
                      end
                             )))
               ) then
                  begin raise RuntimeError, 
                  "Error: hash-table->alist expects Hash instance."
                  rescue => __e 
                    __e.set_backtrace( ["./lib/init.nnd:836"] + __e.backtrace )
                    raise __e
                  end 
              else
                  begin
                    ___lambda = lambda { |_keys| 
                        delayCall( 'map',
                            begin
                              if @global_lisp_binding.has_key?('_map') then
                                trampCall(@_map)
                              else raise NameError.new( "Error: undefined variable _map", "_map" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:838"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              Proc.new { |_key| 
                                  trampCall( self._cons_METHOD(  'cons',
                                      begin
                                        if @global_lisp_binding.has_key?('_cons') then
                                          trampCall(@_cons)
                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:840"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            trampCall(_key)
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:840"] + __e.backtrace ) ; raise __e
                                        end                                      ,Cell.new(
                                        trampCall( self._hash_MIMARKtable_MIMARKget_METHOD(  'hash-table-get',
                                            begin
                                              if @global_lisp_binding.has_key?('_hash_MIMARKtable_MIMARKget') then
                                                trampCall(@_hash_MIMARKtable_MIMARKget)
                                              else raise NameError.new( "Error: undefined variable _hash_MIMARKtable_MIMARKget", "_hash_MIMARKtable_MIMARKget" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:840"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              begin
                                                  trampCall(_h)
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:840"] + __e.backtrace ) ; raise __e
                                              end                                            ,Cell.new(
                                              begin
                                                  trampCall(_key)
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:840"] + __e.backtrace ) ; raise __e
                                              end
                                                     ))))
                                               ))))
                              }                            ,Cell.new(
                              begin
                                  trampCall(_keys)
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:841"] + __e.backtrace ) ; raise __e
                              end
                                     )))
                    } ; ___lambda.call(
                          trampCall( self._hash_MIMARKtable_MIMARKkeys_METHOD(  'hash-table-keys',
                              begin
                                if @global_lisp_binding.has_key?('_hash_MIMARKtable_MIMARKkeys') then
                                  trampCall(@_hash_MIMARKtable_MIMARKkeys)
                                else raise NameError.new( "Error: undefined variable _hash_MIMARKtable_MIMARKkeys", "_hash_MIMARKtable_MIMARKkeys" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:837"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    trampCall(_h)
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:840"] + __e.backtrace ) ; raise __e
                                end
                                       )))
                               )
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._alist_MIMARK_GTMARKhash_MIMARKtable_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_alist_MIMARK_GTMARKhash_MIMARKtable'] = self.method( :_alist_MIMARK_GTMARKhash_MIMARKtable_METHOD )
    @_alist_MIMARK_GTMARKhash_MIMARKtable = 
    trampCall(
          Proc.new { |_alist| 
              if ( 
                trampCall( self._not_METHOD(  'not',
                    begin
                      if @global_lisp_binding.has_key?('_not') then
                        trampCall(@_not)
                      else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:844"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      trampCall( self._list_QUMARK_METHOD(  'list?',
                          begin
                            if @global_lisp_binding.has_key?('_list_QUMARK') then
                              trampCall(@_list_QUMARK)
                            else raise NameError.new( "Error: undefined variable _list_QUMARK", "_list_QUMARK" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:844"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                trampCall(_alist)
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:846"] + __e.backtrace ) ; raise __e
                            end
                                   )))
                             )))
               ) then
                  begin raise RuntimeError, 
                  "Error: alist->hash-table expects alist."
                  rescue => __e 
                    __e.set_backtrace( ["./lib/init.nnd:845"] + __e.backtrace )
                    raise __e
                  end 
              else
                  delayCall( 'apply',
                      begin
                        if @global_lisp_binding.has_key?('_apply') then
                          trampCall(@_apply)
                        else raise NameError.new( "Error: undefined variable _apply", "_apply" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:846"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                        begin
                          if @global_lisp_binding.has_key?('_hash_MIMARKtable') then
                            trampCall(@_hash_MIMARKtable)
                          else raise NameError.new( "Error: undefined variable _hash_MIMARKtable", "_hash_MIMARKtable" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:846"] + __e.backtrace ) ; raise __e
                        end                      ,Cell.new(
                        begin
                            trampCall(_alist)
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:846"] + __e.backtrace ) ; raise __e
                        end
                               )))
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._export_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_export'] = self.method( :_export_METHOD )
    @_export = 
    trampCall(
          LispMacro.new { |_name| 
              trampCall( self._cons_METHOD(  'cons',
                  begin
                    if @global_lisp_binding.has_key?('_cons') then
                      trampCall(@_cons)
                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:840"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                  :"define"                  ,Cell.new(
                    trampCall( self._cons_METHOD(  'cons',
                        begin
                          if @global_lisp_binding.has_key?('_cons') then
                            trampCall(@_cons)
                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:840"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              trampCall(_name)
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:855"] + __e.backtrace ) ; raise __e
                          end                        ,Cell.new(
                        Cell.new(nil)
                                 ))))
                           ))))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._load_MIMARKlibrary_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_load_MIMARKlibrary'] = self.method( :_load_MIMARKlibrary_METHOD )
    @_load_MIMARKlibrary = 
    trampCall(
          Proc.new { |_name| 
              begin
                ___lambda = lambda { |_home| 
                    begin
                      ___lambda = lambda { |_path| 
                          if ( 
                            begin
                                trampCall(File).exist?(
                                      trampCall( self.__PLMARK_METHOD(  '+',
                                          begin
                                            if @global_lisp_binding.has_key?('__PLMARK') then
                                              trampCall(@__PLMARK)
                                            else raise NameError.new( "Error: undefined variable __PLMARK", "__PLMARK" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:864"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                trampCall(_path)
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:866"] + __e.backtrace ) ; raise __e
                                            end                                          ,Cell.new(
                                          ".nndc"
                                                   ))))
                                  )
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:863"] + __e.backtrace ) ; raise __e
                            end
                           ) then
                              begin
                                  delayCall( 'load-compiled-code',
                                      begin
                                        if @global_lisp_binding.has_key?('_load_MIMARKcompiled_MIMARKcode') then
                                          trampCall(@_load_MIMARKcompiled_MIMARKcode)
                                        else raise NameError.new( "Error: undefined variable _load_MIMARKcompiled_MIMARKcode", "_load_MIMARKcompiled_MIMARKcode" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:862"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        trampCall( self.__PLMARK_METHOD(  '+',
                                            begin
                                              if @global_lisp_binding.has_key?('__PLMARK') then
                                                trampCall(@__PLMARK)
                                              else raise NameError.new( "Error: undefined variable __PLMARK", "__PLMARK" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:864"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              begin
                                                  trampCall(_path)
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:866"] + __e.backtrace ) ; raise __e
                                              end                                            ,Cell.new(
                                            ".nndc"
                                                     ))))
                                               ))
                              end
                          else
                              if ( 
                                begin
                                    trampCall(File).exist?(
                                          trampCall( self.__PLMARK_METHOD(  '+',
                                              begin
                                                if @global_lisp_binding.has_key?('__PLMARK') then
                                                  trampCall(@__PLMARK)
                                                else raise NameError.new( "Error: undefined variable __PLMARK", "__PLMARK" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:864"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                begin
                                                    trampCall(_path)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:866"] + __e.backtrace ) ; raise __e
                                                end                                              ,Cell.new(
                                              ".nnd"
                                                       ))))
                                      )
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:863"] + __e.backtrace ) ; raise __e
                                end
                               ) then
                                  begin
                                      delayCall( 'load',
                                          begin
                                            if @global_lisp_binding.has_key?('_load') then
                                              trampCall(@_load)
                                            else raise NameError.new( "Error: undefined variable _load", "_load" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:864"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            trampCall( self.__PLMARK_METHOD(  '+',
                                                begin
                                                  if @global_lisp_binding.has_key?('__PLMARK') then
                                                    trampCall(@__PLMARK)
                                                  else raise NameError.new( "Error: undefined variable __PLMARK", "__PLMARK" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:864"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  begin
                                                      trampCall(_path)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:866"] + __e.backtrace ) ; raise __e
                                                  end                                                ,Cell.new(
                                                ".nnd"
                                                         ))))
                                                   ))
                                  end
                              else
                                  if ( 
                                  true
                                   ) then
                                      begin
                                          begin raise RuntimeError, 
                                            trampCall( self._sprintf_METHOD(  'sprintf',
                                                begin
                                                  if @global_lisp_binding.has_key?('_sprintf') then
                                                    trampCall(@_sprintf)
                                                  else raise NameError.new( "Error: undefined variable _sprintf", "_sprintf" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:760"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                "Error: can't load library file [%s]
"                                                ,Cell.new(
                                                  begin
                                                      trampCall(_path)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:866"] + __e.backtrace ) ; raise __e
                                                  end
                                                         ))))
                                          rescue => __e 
                                            __e.set_backtrace( ["./lib/init.nnd:845"] + __e.backtrace )
                                            raise __e
                                          end 
                                      end
                                  else
                                      Cell.new()
                                  end
                              end
                          end
                      } ; ___lambda.call(
                            trampCall( self.__PLMARK_METHOD(  '+',
                                begin
                                  if @global_lisp_binding.has_key?('__PLMARK') then
                                    trampCall(@__PLMARK)
                                  else raise NameError.new( "Error: undefined variable __PLMARK", "__PLMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:864"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      trampCall(_home)
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:859"] + __e.backtrace ) ; raise __e
                                  end                                ,Cell.new(
                                "/"                                ,Cell.new(
                                  begin
                                      trampCall(_name)
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:859"] + __e.backtrace ) ; raise __e
                                  end
                                         )))))
                                 )
                    end
                } ; ___lambda.call(
                      trampCall( self._get_MIMARKnendo_MIMARKhome_METHOD(  'get-nendo-home',
                          begin
                            if @global_lisp_binding.has_key?('_get_MIMARKnendo_MIMARKhome') then
                              trampCall(@_get_MIMARKnendo_MIMARKhome)
                            else raise NameError.new( "Error: undefined variable _get_MIMARKnendo_MIMARKhome", "_get_MIMARKnendo_MIMARKhome" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:858"] + __e.backtrace ) ; raise __e
                          end                        ,
                        Cell.new(
                                   )))
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._use_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_use'] = self.method( :_use_METHOD )
    @_use = 
    trampCall(
          LispMacro.new { |_sym| 
              if ( 
                trampCall( self._symbol_QUMARK_METHOD(  'symbol?',
                    begin
                      if @global_lisp_binding.has_key?('_symbol_QUMARK') then
                        trampCall(@_symbol_QUMARK)
                      else raise NameError.new( "Error: undefined variable _symbol_QUMARK", "_symbol_QUMARK" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:871"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          trampCall(_sym)
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:873"] + __e.backtrace ) ; raise __e
                      end
                             )))
               ) then
                  begin
                    ___lambda = lambda { |_str| 
                        begin
                          ___lambda = lambda { |_pathname| 
                              trampCall( self._cons_METHOD(  'cons',
                                  begin
                                    if @global_lisp_binding.has_key?('_cons') then
                                      trampCall(@_cons)
                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:840"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                  :"load-library"                                  ,Cell.new(
                                    trampCall( self._cons_METHOD(  'cons',
                                        begin
                                          if @global_lisp_binding.has_key?('_cons') then
                                            trampCall(@_cons)
                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:840"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          begin
                                              trampCall(_pathname)
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:875"] + __e.backtrace ) ; raise __e
                                          end                                        ,Cell.new(
                                        
                                                 ))))
                                           ))))
                          } ; ___lambda.call(
                                begin
                                    trampCall(_str).gsub(
                                        "."                                        ,
                                        "/"
                                      )
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:874"] + __e.backtrace ) ; raise __e
                                end
                                     )
                        end
                    } ; ___lambda.call(
                          trampCall( self._symbol_MIMARK_GTMARKstring_METHOD(  'symbol->string',
                              begin
                                if @global_lisp_binding.has_key?('_symbol_MIMARK_GTMARKstring') then
                                  trampCall(@_symbol_MIMARK_GTMARKstring)
                                else raise NameError.new( "Error: undefined variable _symbol_MIMARK_GTMARKstring", "_symbol_MIMARK_GTMARKstring" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:873"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    trampCall(_sym)
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:873"] + __e.backtrace ) ; raise __e
                                end
                                       )))
                               )
                  end
              else
                  begin raise RuntimeError, 
                    trampCall( self._sprintf_METHOD(  'sprintf',
                        begin
                          if @global_lisp_binding.has_key?('_sprintf') then
                            trampCall(@_sprintf)
                          else raise NameError.new( "Error: undefined variable _sprintf", "_sprintf" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:760"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                        "Error: use macro requires a symbol argument."
                                 )))
                  rescue => __e 
                    __e.set_backtrace( ["./lib/init.nnd:845"] + __e.backtrace )
                    raise __e
                  end 
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._vector_QUMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_vector_QUMARK'] = self.method( :_vector_QUMARK_METHOD )
    @_vector_QUMARK = 
    trampCall(
          Proc.new { |_v| 
              begin
                  trampCall(_v).is_a?(
                        begin
                            trampCall(Array)
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:883"] + __e.backtrace ) ; raise __e
                        end
                    )
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:883"] + __e.backtrace ) ; raise __e
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._make_MIMARKvector_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_make_MIMARKvector'] = self.method( :_make_MIMARKvector_METHOD )
    @_make_MIMARKvector = 
    trampCall(
          Proc.new { |_k,*__rest__| _rest = __rest__[0] ;  
              if ( 
                trampCall( self._null_QUMARK_METHOD(  'null?',
                    begin
                      if @global_lisp_binding.has_key?('_null_QUMARK') then
                        trampCall(@_null_QUMARK)
                      else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:886"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          trampCall(_rest)
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:888"] + __e.backtrace ) ; raise __e
                      end
                             )))
               ) then
                  begin
                      trampCall(Array).new(
                            begin
                                trampCall(_k)
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:888"] + __e.backtrace ) ; raise __e
                            end
                        )
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:888"] + __e.backtrace ) ; raise __e
                  end
              else
                  begin
                      trampCall(Array).new(
                            begin
                                trampCall(_k)
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:888"] + __e.backtrace ) ; raise __e
                            end                          ,
                            trampCall( self._car_METHOD(  'car',
                                begin
                                  if @global_lisp_binding.has_key?('_car') then
                                    trampCall(@_car)
                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:888"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      trampCall(_rest)
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:888"] + __e.backtrace ) ; raise __e
                                  end
                                         )))
                        )
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:888"] + __e.backtrace ) ; raise __e
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._vector_MIMARKlength_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_vector_MIMARKlength'] = self.method( :_vector_MIMARKlength_METHOD )
    @_vector_MIMARKlength = 
    trampCall(
          Proc.new { |_v| 
              begin
                  trampCall(_v).size(
                    )
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:891"] + __e.backtrace ) ; raise __e
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._vector_MIMARKcopy_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_vector_MIMARKcopy'] = self.method( :_vector_MIMARKcopy_METHOD )
    @_vector_MIMARKcopy = 
    trampCall(
          Proc.new { |_v| 
              begin
                  trampCall(_v).clone(
                    )
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:894"] + __e.backtrace ) ; raise __e
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._vector_MIMARKref_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_vector_MIMARKref'] = self.method( :_vector_MIMARKref_METHOD )
    @_vector_MIMARKref = 
    trampCall(
          Proc.new { |_v,_index,*__rest__| _fallback = __rest__[0] ;  
              if ( 
                if ( 
                  trampCall( self._not_METHOD(  'not',
                      begin
                        if @global_lisp_binding.has_key?('_not') then
                          trampCall(@_not)
                        else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:844"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                        trampCall( self._eq_QUMARK_METHOD(  'eq?',
                            begin
                              if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                trampCall(@_eq_QUMARK)
                              else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:726"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                            false                            ,Cell.new(
                              trampCall( self.__LTMARK_EQMARK_METHOD(  '<=',
                                  begin
                                    if @global_lisp_binding.has_key?('__LTMARK_EQMARK') then
                                      trampCall(@__LTMARK_EQMARK)
                                    else raise NameError.new( "Error: undefined variable __LTMARK_EQMARK", "__LTMARK_EQMARK" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:897"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                  0                                  ,Cell.new(
                                    begin
                                        trampCall(_index)
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:900"] + __e.backtrace ) ; raise __e
                                    end
                                           ))))
                                     ))))
                               )))
                 ) then
                    trampCall( self.__LTMARK_METHOD(  '<',
                        begin
                          if @global_lisp_binding.has_key?('__LTMARK') then
                            trampCall(@__LTMARK)
                          else raise NameError.new( "Error: undefined variable __LTMARK", "__LTMARK" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:897"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              trampCall(_index)
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:900"] + __e.backtrace ) ; raise __e
                          end                        ,Cell.new(
                          begin
                              trampCall(_v).size
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:897"] + __e.backtrace ) ; raise __e
                          end
                                 ))))
                else
                  false
                end
               ) then
                  begin
                      trampCall(_v).fetch(
                            begin
                                trampCall(_index)
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:900"] + __e.backtrace ) ; raise __e
                            end
                        )
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:898"] + __e.backtrace ) ; raise __e
                  end
              else
                  if ( 
                    trampCall( self._null_QUMARK_METHOD(  'null?',
                        begin
                          if @global_lisp_binding.has_key?('_null_QUMARK') then
                            trampCall(@_null_QUMARK)
                          else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:899"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              trampCall(_fallback)
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:901"] + __e.backtrace ) ; raise __e
                          end
                                 )))
                   ) then
                      begin raise RuntimeError, 
                        trampCall( self._sprintf_METHOD(  'sprintf',
                            begin
                              if @global_lisp_binding.has_key?('_sprintf') then
                                trampCall(@_sprintf)
                              else raise NameError.new( "Error: undefined variable _sprintf", "_sprintf" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:760"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                            "Error: vector-ref  index value is overflow: %s
"                            ,Cell.new(
                              begin
                                  trampCall(_index)
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:900"] + __e.backtrace ) ; raise __e
                              end
                                     ))))
                      rescue => __e 
                        __e.set_backtrace( ["./lib/init.nnd:845"] + __e.backtrace )
                        raise __e
                      end 
                  else
                      delayCall( 'car',
                          begin
                            if @global_lisp_binding.has_key?('_car') then
                              trampCall(@_car)
                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:901"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                trampCall(_fallback)
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:901"] + __e.backtrace ) ; raise __e
                            end
                                   ))
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._vector_MIMARKequal_QUMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_vector_MIMARKequal_QUMARK'] = self.method( :_vector_MIMARKequal_QUMARK_METHOD )
    @_vector_MIMARKequal_QUMARK = 
    trampCall(
          Proc.new { |_x,_y| 
              if ( 
                trampCall( self._not_METHOD(  'not',
                    begin
                      if @global_lisp_binding.has_key?('_not') then
                        trampCall(@_not)
                      else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:844"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      trampCall( self._eq_QUMARK_METHOD(  'eq?',
                          begin
                            if @global_lisp_binding.has_key?('_eq_QUMARK') then
                              trampCall(@_eq_QUMARK)
                            else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:726"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                          false                          ,Cell.new(
                            trampCall( self._vector_QUMARK_METHOD(  'vector?',
                                begin
                                  if @global_lisp_binding.has_key?('_vector_QUMARK') then
                                    trampCall(@_vector_QUMARK)
                                  else raise NameError.new( "Error: undefined variable _vector_QUMARK", "_vector_QUMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:907"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      trampCall(_x)
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:912"] + __e.backtrace ) ; raise __e
                                  end
                                         )))
                                   ))))
                             )))
               ) then
                  if ( 
                    trampCall( self._not_METHOD(  'not',
                        begin
                          if @global_lisp_binding.has_key?('_not') then
                            trampCall(@_not)
                          else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:844"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          trampCall( self._eq_QUMARK_METHOD(  'eq?',
                              begin
                                if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                  trampCall(@_eq_QUMARK)
                                else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:726"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                              false                              ,Cell.new(
                                trampCall( self._vector_QUMARK_METHOD(  'vector?',
                                    begin
                                      if @global_lisp_binding.has_key?('_vector_QUMARK') then
                                        trampCall(@_vector_QUMARK)
                                      else raise NameError.new( "Error: undefined variable _vector_QUMARK", "_vector_QUMARK" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:907"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          trampCall(_y)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:912"] + __e.backtrace ) ; raise __e
                                      end
                                             )))
                                       ))))
                                 )))
                   ) then
                      if ( 
                        trampCall( self._not_METHOD(  'not',
                            begin
                              if @global_lisp_binding.has_key?('_not') then
                                trampCall(@_not)
                              else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:844"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                  begin
                                    if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                      trampCall(@_eq_QUMARK)
                                    else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:726"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                  false                                  ,Cell.new(
                                    trampCall( self.__EQMARK_METHOD(  '=',
                                        begin
                                          if @global_lisp_binding.has_key?('__EQMARK') then
                                            trampCall(@__EQMARK)
                                          else raise NameError.new( "Error: undefined variable __EQMARK", "__EQMARK" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:910"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          trampCall( self._vector_MIMARKlength_METHOD(  'vector-length',
                                              begin
                                                if @global_lisp_binding.has_key?('_vector_MIMARKlength') then
                                                  trampCall(@_vector_MIMARKlength)
                                                else raise NameError.new( "Error: undefined variable _vector_MIMARKlength", "_vector_MIMARKlength" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:908"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                begin
                                                    trampCall(_x)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:912"] + __e.backtrace ) ; raise __e
                                                end
                                                       )))                                        ,Cell.new(
                                          trampCall( self._vector_MIMARKlength_METHOD(  'vector-length',
                                              begin
                                                if @global_lisp_binding.has_key?('_vector_MIMARKlength') then
                                                  trampCall(@_vector_MIMARKlength)
                                                else raise NameError.new( "Error: undefined variable _vector_MIMARKlength", "_vector_MIMARKlength" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:908"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                begin
                                                    trampCall(_y)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:912"] + __e.backtrace ) ; raise __e
                                                end
                                                       )))
                                                 ))))
                                           ))))
                                     )))
                       ) then
                          begin
                            ___lambda = lambda { |_n| 
                                begin
                                  ___lambda = lambda { |_loop| 
                                      _loop                                       = 
                                        Proc.new { |_i| 
                                            if ( 
                                              trampCall( self.__EQMARK_METHOD(  '=',
                                                  begin
                                                    if @global_lisp_binding.has_key?('__EQMARK') then
                                                      trampCall(@__EQMARK)
                                                    else raise NameError.new( "Error: undefined variable __EQMARK", "__EQMARK" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:910"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    begin
                                                        trampCall(_i)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:913"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,Cell.new(
                                                    begin
                                                        trampCall(_n)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:910"] + __e.backtrace ) ; raise __e
                                                    end
                                                           ))))
                                             ) then
                                              true
                                            else
                                                if ( 
                                                  trampCall( self._not_METHOD(  'not',
                                                      begin
                                                        if @global_lisp_binding.has_key?('_not') then
                                                          trampCall(@_not)
                                                        else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:844"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                                            begin
                                                              if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                                trampCall(@_eq_QUMARK)
                                                              else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:726"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                            false                                                            ,Cell.new(
                                                              trampCall( self._equal_QUMARK_METHOD(  'equal?',
                                                                  begin
                                                                    if @global_lisp_binding.has_key?('_equal_QUMARK') then
                                                                      trampCall(@_equal_QUMARK)
                                                                    else raise NameError.new( "Error: undefined variable _equal_QUMARK", "_equal_QUMARK" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:912"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                    trampCall( self._vector_MIMARKref_METHOD(  'vector-ref',
                                                                        begin
                                                                          if @global_lisp_binding.has_key?('_vector_MIMARKref') then
                                                                            trampCall(@_vector_MIMARKref)
                                                                          else raise NameError.new( "Error: undefined variable _vector_MIMARKref", "_vector_MIMARKref" ) end
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:912"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                        Cell.new(
                                                                          begin
                                                                              trampCall(_x)
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:912"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,Cell.new(
                                                                          begin
                                                                              trampCall(_i)
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:913"] + __e.backtrace ) ; raise __e
                                                                          end
                                                                                 ))))                                                                  ,Cell.new(
                                                                    trampCall( self._vector_MIMARKref_METHOD(  'vector-ref',
                                                                        begin
                                                                          if @global_lisp_binding.has_key?('_vector_MIMARKref') then
                                                                            trampCall(@_vector_MIMARKref)
                                                                          else raise NameError.new( "Error: undefined variable _vector_MIMARKref", "_vector_MIMARKref" ) end
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:912"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                        Cell.new(
                                                                          begin
                                                                              trampCall(_y)
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:912"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,Cell.new(
                                                                          begin
                                                                              trampCall(_i)
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:913"] + __e.backtrace ) ; raise __e
                                                                          end
                                                                                 ))))
                                                                           ))))
                                                                     ))))
                                                               )))
                                                 ) then
                                                    delayCall( 'loop',
                                                        begin
                                                            trampCall(_loop)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:913"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                          trampCall( self._succ_METHOD(  'succ',
                                                              begin
                                                                if @global_lisp_binding.has_key?('_succ') then
                                                                  trampCall(@_succ)
                                                                else raise NameError.new( "Error: undefined variable _succ", "_succ" ) end
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:913"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                                begin
                                                                    trampCall(_i)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:913"] + __e.backtrace ) ; raise __e
                                                                end
                                                                       )))
                                                                 ))
                                                else
                                                  false
                                                end
                                            end
                                        }
                                      delayCall( 'loop',
                                          begin
                                              trampCall(_loop)
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:913"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                          0
                                                   ))
                                  } ; ___lambda.call(
                                  nil
                                             )
                                end
                            } ; ___lambda.call(
                                  trampCall( self._vector_MIMARKlength_METHOD(  'vector-length',
                                      begin
                                        if @global_lisp_binding.has_key?('_vector_MIMARKlength') then
                                          trampCall(@_vector_MIMARKlength)
                                        else raise NameError.new( "Error: undefined variable _vector_MIMARKlength", "_vector_MIMARKlength" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:908"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            trampCall(_x)
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:912"] + __e.backtrace ) ; raise __e
                                        end
                                               )))
                                       )
                          end
                      else
                        false
                      end
                  else
                    false
                  end
              else
                false
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._list_MIMARK_GTMARKvector_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_list_MIMARK_GTMARKvector'] = self.method( :_list_MIMARK_GTMARKvector_METHOD )
    @_list_MIMARK_GTMARKvector = 
    trampCall(
          Proc.new { |_x| 
              delayCall( 'apply',
                  begin
                    if @global_lisp_binding.has_key?('_apply') then
                      trampCall(@_apply)
                    else raise NameError.new( "Error: undefined variable _apply", "_apply" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:916"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    begin
                      if @global_lisp_binding.has_key?('_vector') then
                        trampCall(@_vector)
                      else raise NameError.new( "Error: undefined variable _vector", "_vector" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:916"] + __e.backtrace ) ; raise __e
                    end                  ,Cell.new(
                    begin
                        trampCall(_x)
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:916"] + __e.backtrace ) ; raise __e
                    end
                           )))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._vector_MIMARKfill_EXMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_vector_MIMARKfill_EXMARK'] = self.method( :_vector_MIMARKfill_EXMARK_METHOD )
    @_vector_MIMARKfill_EXMARK = 
    trampCall(
          Proc.new { |_v,_e| 
              begin
                ___lambda = lambda { |_n| 
                    begin
                      ___lambda = lambda { |_loop| 
                          _loop                           = 
                            Proc.new { |_i| 
                                if ( 
                                  trampCall( self.__EQMARK_METHOD(  '=',
                                      begin
                                        if @global_lisp_binding.has_key?('__EQMARK') then
                                          trampCall(@__EQMARK)
                                        else raise NameError.new( "Error: undefined variable __EQMARK", "__EQMARK" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:921"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            trampCall(_i)
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:923"] + __e.backtrace ) ; raise __e
                                        end                                      ,Cell.new(
                                        begin
                                            trampCall(_n)
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:921"] + __e.backtrace ) ; raise __e
                                        end
                                               ))))
                                 ) then
                                    begin
                                        trampCall(_v)
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:923"] + __e.backtrace ) ; raise __e
                                    end
                                else
                                    begin
                                        trampCall( self._vector_MIMARKset_EXMARK_METHOD(  'vector-set!',
                                            begin
                                              if @global_lisp_binding.has_key?('_vector_MIMARKset_EXMARK') then
                                                trampCall(@_vector_MIMARKset_EXMARK)
                                              else raise NameError.new( "Error: undefined variable _vector_MIMARKset_EXMARK", "_vector_MIMARKset_EXMARK" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:923"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              begin
                                                  trampCall(_v)
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:923"] + __e.backtrace ) ; raise __e
                                              end                                            ,Cell.new(
                                              begin
                                                  trampCall(_i)
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:923"] + __e.backtrace ) ; raise __e
                                              end                                            ,Cell.new(
                                              begin
                                                  trampCall(_e)
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:923"] + __e.backtrace ) ; raise __e
                                              end
                                                     )))))
                                        delayCall( 'loop',
                                            begin
                                                trampCall(_loop)
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:923"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              trampCall( self._succ_METHOD(  'succ',
                                                  begin
                                                    if @global_lisp_binding.has_key?('_succ') then
                                                      trampCall(@_succ)
                                                    else raise NameError.new( "Error: undefined variable _succ", "_succ" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:923"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    begin
                                                        trampCall(_i)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:923"] + __e.backtrace ) ; raise __e
                                                    end
                                                           )))
                                                     ))
                                    end
                                end
                            }
                          delayCall( 'loop',
                              begin
                                  trampCall(_loop)
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:923"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                              0
                                       ))
                      } ; ___lambda.call(
                      nil
                                 )
                    end
                } ; ___lambda.call(
                      trampCall( self._vector_MIMARKlength_METHOD(  'vector-length',
                          begin
                            if @global_lisp_binding.has_key?('_vector_MIMARKlength') then
                              trampCall(@_vector_MIMARKlength)
                            else raise NameError.new( "Error: undefined variable _vector_MIMARKlength", "_vector_MIMARKlength" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:919"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                trampCall(_v)
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:923"] + __e.backtrace ) ; raise __e
                            end
                                   )))
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._vector_MIMARK_GTMARKlist_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_vector_MIMARK_GTMARKlist'] = self.method( :_vector_MIMARK_GTMARKlist_METHOD )
    @_vector_MIMARK_GTMARKlist = 
    trampCall(
          Proc.new { |_v| 
              begin
                ___lambda = lambda { |_loop| 
                    _loop                     = 
                      Proc.new { |_n,_l| 
                          if ( 
                            trampCall( self.__EQMARK_METHOD(  '=',
                                begin
                                  if @global_lisp_binding.has_key?('__EQMARK') then
                                    trampCall(@__EQMARK)
                                  else raise NameError.new( "Error: undefined variable __EQMARK", "__EQMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:927"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      trampCall(_n)
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                  end                                ,Cell.new(
                                -1
                                         ))))
                           ) then
                              begin
                                  trampCall(_l)
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                              end
                          else
                              delayCall( 'loop',
                                  begin
                                      trampCall(_loop)
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    trampCall( self._pred_METHOD(  'pred',
                                        begin
                                          if @global_lisp_binding.has_key?('_pred') then
                                            trampCall(@_pred)
                                          else raise NameError.new( "Error: undefined variable _pred", "_pred" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          begin
                                              trampCall(_n)
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                          end
                                                 )))                                  ,Cell.new(
                                    trampCall( self._cons_METHOD(  'cons',
                                        begin
                                          if @global_lisp_binding.has_key?('_cons') then
                                            trampCall(@_cons)
                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          trampCall( self._vector_MIMARKref_METHOD(  'vector-ref',
                                              begin
                                                if @global_lisp_binding.has_key?('_vector_MIMARKref') then
                                                  trampCall(@_vector_MIMARKref)
                                                else raise NameError.new( "Error: undefined variable _vector_MIMARKref", "_vector_MIMARKref" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                begin
                                                    trampCall(_v)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                                end                                              ,Cell.new(
                                                begin
                                                    trampCall(_n)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                                end
                                                       ))))                                        ,Cell.new(
                                          begin
                                              trampCall(_l)
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                          end
                                                 ))))
                                           )))
                          end
                      }
                    delayCall( 'loop',
                        begin
                            trampCall(_loop)
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          trampCall( self._pred_METHOD(  'pred',
                              begin
                                if @global_lisp_binding.has_key?('_pred') then
                                  trampCall(@_pred)
                                else raise NameError.new( "Error: undefined variable _pred", "_pred" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                trampCall( self._vector_MIMARKlength_METHOD(  'vector-length',
                                    begin
                                      if @global_lisp_binding.has_key?('_vector_MIMARKlength') then
                                        trampCall(@_vector_MIMARKlength)
                                      else raise NameError.new( "Error: undefined variable _vector_MIMARKlength", "_vector_MIMARKlength" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:926"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          trampCall(_v)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                      end
                                             )))
                                       )))                        ,Cell.new(
                        Cell.new()
                                 )))
                } ; ___lambda.call(
                nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._debug_MIMARKprint_MIMARKlength_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_debug_MIMARKprint_MIMARKlength'] = self.method( :_debug_MIMARKprint_MIMARKlength_METHOD )
    @_debug_MIMARKprint_MIMARKlength = 
    trampCall(
        63
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._debug_MIMARKprint_MIMARKoutput_MIMARKfunc_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_debug_MIMARKprint_MIMARKoutput_MIMARKfunc'] = self.method( :_debug_MIMARKprint_MIMARKoutput_MIMARKfunc_METHOD )
    @_debug_MIMARKprint_MIMARKoutput_MIMARKfunc = 
    trampCall(
          Proc.new { |_str| 
              begin
                  trampCall(STDERR).print(
                        begin
                            trampCall(_str)
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:938"] + __e.backtrace ) ; raise __e
                        end
                    )
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:938"] + __e.backtrace ) ; raise __e
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._debug_MIMARKlimit_MIMARKlength_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_debug_MIMARKlimit_MIMARKlength'] = self.method( :_debug_MIMARKlimit_MIMARKlength_METHOD )
    @_debug_MIMARKlimit_MIMARKlength = 
    trampCall(
          Proc.new { |_x| 
              delayCall( '+',
                  begin
                    if @global_lisp_binding.has_key?('__PLMARK') then
                      trampCall(@__PLMARK)
                    else raise NameError.new( "Error: undefined variable __PLMARK", "__PLMARK" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:943"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    if ( 
                      trampCall( self.__LTMARK_METHOD(  '<',
                          begin
                            if @global_lisp_binding.has_key?('__LTMARK') then
                              trampCall(@__LTMARK)
                            else raise NameError.new( "Error: undefined variable __LTMARK", "__LTMARK" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:941"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                              if @global_lisp_binding.has_key?('_debug_MIMARKprint_MIMARKlength') then
                                trampCall(@_debug_MIMARKprint_MIMARKlength)
                              else raise NameError.new( "Error: undefined variable _debug_MIMARKprint_MIMARKlength", "_debug_MIMARKprint_MIMARKlength" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:941"] + __e.backtrace ) ; raise __e
                            end                          ,Cell.new(
                            begin
                                trampCall(_x).length
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:941"] + __e.backtrace ) ; raise __e
                            end
                                   ))))
                     ) then
                        begin
                          ___lambda = lambda { |_n| 
                              trampCall( self._sprintf_METHOD(  'sprintf',
                                  begin
                                    if @global_lisp_binding.has_key?('_sprintf') then
                                      trampCall(@_sprintf)
                                    else raise NameError.new( "Error: undefined variable _sprintf", "_sprintf" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:943"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    trampCall( self.__PLMARK_METHOD(  '+',
                                        begin
                                          if @global_lisp_binding.has_key?('__PLMARK') then
                                            trampCall(@__PLMARK)
                                          else raise NameError.new( "Error: undefined variable __PLMARK", "__PLMARK" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:943"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                        "%"                                        ,Cell.new(
                                          begin
                                              trampCall(_n)
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:943"] + __e.backtrace ) ; raise __e
                                          end                                        ,Cell.new(
                                        "."                                        ,Cell.new(
                                          begin
                                              trampCall(_n)
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:943"] + __e.backtrace ) ; raise __e
                                          end                                        ,Cell.new(
                                        "s ..."
                                                 )))))))                                  ,Cell.new(
                                    begin
                                        trampCall(_x)
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:944"] + __e.backtrace ) ; raise __e
                                    end
                                           ))))
                          } ; ___lambda.call(
                                begin
                                  if @global_lisp_binding.has_key?('_debug_MIMARKprint_MIMARKlength') then
                                    trampCall(@_debug_MIMARKprint_MIMARKlength).to_s
                                  else raise NameError.new( "Error: undefined variable _debug_MIMARKprint_MIMARKlength", "_debug_MIMARKprint_MIMARKlength" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:942"] + __e.backtrace ) ; raise __e
                                end
                                     )
                        end
                    else
                        begin
                            trampCall(_x)
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:944"] + __e.backtrace ) ; raise __e
                        end
                    end                  ,Cell.new(
                  "
"
                           )))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._debug_MIMARKprint_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_debug_MIMARKprint'] = self.method( :_debug_MIMARKprint_METHOD )
    @_debug_MIMARKprint = 
    trampCall(
          LispMacro.new { |__form,_sourcefile,_lineno,_sourcesexp| 
              begin
                ___lambda = lambda { |_val| 
                    trampCall( self._cons_METHOD(  'cons',
                        begin
                          if @global_lisp_binding.has_key?('_cons') then
                            trampCall(@_cons)
                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                        :"let"                        ,Cell.new(
                          trampCall( self._cons_METHOD(  'cons',
                              begin
                                if @global_lisp_binding.has_key?('_cons') then
                                  trampCall(@_cons)
                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                trampCall( self._cons_METHOD(  'cons',
                                    begin
                                      if @global_lisp_binding.has_key?('_cons') then
                                        trampCall(@_cons)
                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      trampCall( self._cons_METHOD(  'cons',
                                          begin
                                            if @global_lisp_binding.has_key?('_cons') then
                                              trampCall(@_cons)
                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                trampCall(_val)
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:954"] + __e.backtrace ) ; raise __e
                                            end                                          ,Cell.new(
                                          Cell.new(nil)
                                                   ))))                                    ,Cell.new(
                                    
                                             ))))                              ,Cell.new(
                                trampCall( self._cons_METHOD(  'cons',
                                    begin
                                      if @global_lisp_binding.has_key?('_cons') then
                                        trampCall(@_cons)
                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      trampCall( self._cons_METHOD(  'cons',
                                          begin
                                            if @global_lisp_binding.has_key?('_cons') then
                                              trampCall(@_cons)
                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                          :"debug-print-output-func"                                          ,Cell.new(
                                            trampCall( self._cons_METHOD(  'cons',
                                                begin
                                                  if @global_lisp_binding.has_key?('_cons') then
                                                    trampCall(@_cons)
                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  trampCall( self._cons_METHOD(  'cons',
                                                      begin
                                                        if @global_lisp_binding.has_key?('_cons') then
                                                          trampCall(@_cons)
                                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                      :"debug-limit-length"                                                      ,Cell.new(
                                                        trampCall( self._cons_METHOD(  'cons',
                                                            begin
                                                              if @global_lisp_binding.has_key?('_cons') then
                                                                trampCall(@_cons)
                                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              trampCall( self._cons_METHOD(  'cons',
                                                                  begin
                                                                    if @global_lisp_binding.has_key?('_cons') then
                                                                      trampCall(@_cons)
                                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                  :"sprintf"                                                                  ,Cell.new(
                                                                    trampCall( self._cons_METHOD(  'cons',
                                                                        begin
                                                                          if @global_lisp_binding.has_key?('_cons') then
                                                                            trampCall(@_cons)
                                                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                        Cell.new(
                                                                        "#?=\"%s\":%s:%s"                                                                        ,Cell.new(
                                                                          trampCall( self._cons_METHOD(  'cons',
                                                                              begin
                                                                                if @global_lisp_binding.has_key?('_cons') then
                                                                                  trampCall(@_cons)
                                                                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                                                              end                                                                            ,
                                                                              Cell.new(
                                                                                begin
                                                                                    trampCall(_sourcefile)
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:951"] + __e.backtrace ) ; raise __e
                                                                                end                                                                              ,Cell.new(
                                                                                trampCall( self._cons_METHOD(  'cons',
                                                                                    begin
                                                                                      if @global_lisp_binding.has_key?('_cons') then
                                                                                        trampCall(@_cons)
                                                                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                                                                    end                                                                                  ,
                                                                                    Cell.new(
                                                                                      begin
                                                                                          trampCall(_lineno)
                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:951"] + __e.backtrace ) ; raise __e
                                                                                      end                                                                                    ,Cell.new(
                                                                                      trampCall( self._cons_METHOD(  'cons',
                                                                                          begin
                                                                                            if @global_lisp_binding.has_key?('_cons') then
                                                                                              trampCall(@_cons)
                                                                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                                                                          end                                                                                        ,
                                                                                          Cell.new(
                                                                                            trampCall( self._cons_METHOD(  'cons',
                                                                                                begin
                                                                                                  if @global_lisp_binding.has_key?('_cons') then
                                                                                                    trampCall(@_cons)
                                                                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                                                                                end                                                                                              ,
                                                                                                Cell.new(
                                                                                                :"write-to-string"                                                                                                ,Cell.new(
                                                                                                  trampCall( self._cons_METHOD(  'cons',
                                                                                                      begin
                                                                                                        if @global_lisp_binding.has_key?('_cons') then
                                                                                                          trampCall(@_cons)
                                                                                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                                                                                      end                                                                                                    ,
                                                                                                      Cell.new(
                                                                                                        begin
                                                                                                            trampCall(_sourcesexp)
                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:951"] + __e.backtrace ) ; raise __e
                                                                                                        end                                                                                                      ,Cell.new(
                                                                                                      
                                                                                                               ))))
                                                                                                         ))))                                                                                          ,Cell.new(
                                                                                          
                                                                                                   ))))
                                                                                             ))))
                                                                                       ))))
                                                                                 ))))
                                                                           ))))                                                            ,Cell.new(
                                                            
                                                                     ))))
                                                               ))))                                                ,Cell.new(
                                                
                                                         ))))
                                                   ))))                                    ,Cell.new(
                                      trampCall( self._cons_METHOD(  'cons',
                                          begin
                                            if @global_lisp_binding.has_key?('_cons') then
                                              trampCall(@_cons)
                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            trampCall( self._cons_METHOD(  'cons',
                                                begin
                                                  if @global_lisp_binding.has_key?('_cons') then
                                                    trampCall(@_cons)
                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                :"set!"                                                ,Cell.new(
                                                  trampCall( self._cons_METHOD(  'cons',
                                                      begin
                                                        if @global_lisp_binding.has_key?('_cons') then
                                                          trampCall(@_cons)
                                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        begin
                                                            trampCall(_val)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:954"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,Cell.new(
                                                        trampCall( self._cons_METHOD(  'cons',
                                                            begin
                                                              if @global_lisp_binding.has_key?('_cons') then
                                                                trampCall(@_cons)
                                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              begin
                                                                  trampCall(__form)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:952"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,Cell.new(
                                                            
                                                                     ))))
                                                               ))))
                                                         ))))                                          ,Cell.new(
                                            trampCall( self._cons_METHOD(  'cons',
                                                begin
                                                  if @global_lisp_binding.has_key?('_cons') then
                                                    trampCall(@_cons)
                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  trampCall( self._cons_METHOD(  'cons',
                                                      begin
                                                        if @global_lisp_binding.has_key?('_cons') then
                                                          trampCall(@_cons)
                                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                      :"debug-print-output-func"                                                      ,Cell.new(
                                                        trampCall( self._cons_METHOD(  'cons',
                                                            begin
                                                              if @global_lisp_binding.has_key?('_cons') then
                                                                trampCall(@_cons)
                                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              trampCall( self._cons_METHOD(  'cons',
                                                                  begin
                                                                    if @global_lisp_binding.has_key?('_cons') then
                                                                      trampCall(@_cons)
                                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                  :"debug-limit-length"                                                                  ,Cell.new(
                                                                    trampCall( self._cons_METHOD(  'cons',
                                                                        begin
                                                                          if @global_lisp_binding.has_key?('_cons') then
                                                                            trampCall(@_cons)
                                                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                        Cell.new(
                                                                          trampCall( self._cons_METHOD(  'cons',
                                                                              begin
                                                                                if @global_lisp_binding.has_key?('_cons') then
                                                                                  trampCall(@_cons)
                                                                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                                                              end                                                                            ,
                                                                              Cell.new(
                                                                              :"+"                                                                              ,Cell.new(
                                                                                trampCall( self._cons_METHOD(  'cons',
                                                                                    begin
                                                                                      if @global_lisp_binding.has_key?('_cons') then
                                                                                        trampCall(@_cons)
                                                                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                                                                    end                                                                                  ,
                                                                                    Cell.new(
                                                                                    "#?-    "                                                                                    ,Cell.new(
                                                                                      trampCall( self._cons_METHOD(  'cons',
                                                                                          begin
                                                                                            if @global_lisp_binding.has_key?('_cons') then
                                                                                              trampCall(@_cons)
                                                                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                                                                          end                                                                                        ,
                                                                                          Cell.new(
                                                                                            trampCall( self._cons_METHOD(  'cons',
                                                                                                begin
                                                                                                  if @global_lisp_binding.has_key?('_cons') then
                                                                                                    trampCall(@_cons)
                                                                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                                                                                end                                                                                              ,
                                                                                                Cell.new(
                                                                                                :"write-to-string"                                                                                                ,Cell.new(
                                                                                                  trampCall( self._cons_METHOD(  'cons',
                                                                                                      begin
                                                                                                        if @global_lisp_binding.has_key?('_cons') then
                                                                                                          trampCall(@_cons)
                                                                                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                                                                                      end                                                                                                    ,
                                                                                                      Cell.new(
                                                                                                        begin
                                                                                                            trampCall(_val)
                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:954"] + __e.backtrace ) ; raise __e
                                                                                                        end                                                                                                      ,Cell.new(
                                                                                                      
                                                                                                               ))))
                                                                                                         ))))                                                                                          ,Cell.new(
                                                                                          
                                                                                                   ))))
                                                                                             ))))
                                                                                       ))))                                                                        ,Cell.new(
                                                                        
                                                                                 ))))
                                                                           ))))                                                            ,Cell.new(
                                                            
                                                                     ))))
                                                               ))))                                                ,Cell.new(
                                                  trampCall( self._cons_METHOD(  'cons',
                                                      begin
                                                        if @global_lisp_binding.has_key?('_cons') then
                                                          trampCall(@_cons)
                                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        begin
                                                            trampCall(_val)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:954"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,Cell.new(
                                                      
                                                               ))))
                                                         ))))
                                                   ))))
                                             ))))
                                       ))))
                                 ))))
                } ; ___lambda.call(
                      trampCall( self._gensym_METHOD(  'gensym',
                          begin
                            if @global_lisp_binding.has_key?('_gensym') then
                              trampCall(@_gensym)
                            else raise NameError.new( "Error: undefined variable _gensym", "_gensym" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:949"] + __e.backtrace ) ; raise __e
                          end                        ,
                        Cell.new(
                                   )))
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._pretty_MIMARKprint_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_pretty_MIMARKprint'] = self.method( :_pretty_MIMARKprint_METHOD )
    @_pretty_MIMARKprint = 
    trampCall(
          Proc.new { |_s,*__rest__| _f = __rest__[0] ;  
              begin
                ___lambda = lambda { |_do_MIMARKindent,_pp_MIMARKparenl,_pp_MIMARKparenr,_pp_MIMARKatom,_pp_MIMARKlist| 
                    _do_MIMARKindent                     = 
                      Proc.new { |_f,_level| 
                          delayCall( 'for-each',
                              begin
                                if @global_lisp_binding.has_key?('_for_MIMARKeach') then
                                  trampCall(@_for_MIMARKeach)
                                else raise NameError.new( "Error: undefined variable _for_MIMARKeach", "_for_MIMARKeach" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:964"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                Proc.new { |_x| 
                                    begin
                                        trampCall(_f).print(
                                            " "
                                          )
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:989"] + __e.backtrace ) ; raise __e
                                    end
                                }                              ,Cell.new(
                                trampCall( self._range_METHOD(  'range',
                                    begin
                                      if @global_lisp_binding.has_key?('_range') then
                                        trampCall(@_range)
                                      else raise NameError.new( "Error: undefined variable _range", "_range" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:964"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          trampCall(_level)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:982"] + __e.backtrace ) ; raise __e
                                      end
                                             )))
                                       )))
                      }
                    _pp_MIMARKparenl                     = 
                      Proc.new { |_f| 
                          begin
                              trampCall(_f).print(
                                  "("
                                )
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:989"] + __e.backtrace ) ; raise __e
                          end
                      }
                    _pp_MIMARKparenr                     = 
                      Proc.new { |_f| 
                          begin
                              trampCall(_f).print(
                                  ")"
                                )
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:989"] + __e.backtrace ) ; raise __e
                          end
                      }
                    _pp_MIMARKatom                     = 
                      Proc.new { |_f,_e,_prefix| 
                          if ( 
                            begin
                                trampCall(_prefix)
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:983"] + __e.backtrace ) ; raise __e
                            end
                           ) then
                              begin
                                  begin
                                      trampCall(_f).print(
                                          " "
                                        )
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:989"] + __e.backtrace ) ; raise __e
                                  end
                              end
                          end
                          begin
                              trampCall(_f).print(
                                    trampCall( self._write_MIMARKto_MIMARKstring_METHOD(  'write-to-string',
                                        begin
                                          if @global_lisp_binding.has_key?('_write_MIMARKto_MIMARKstring') then
                                            trampCall(@_write_MIMARKto_MIMARKstring)
                                          else raise NameError.new( "Error: undefined variable _write_MIMARKto_MIMARKstring", "_write_MIMARKto_MIMARKstring" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:988"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          begin
                                              trampCall(_e)
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:983"] + __e.backtrace ) ; raise __e
                                          end
                                                 )))
                                )
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:989"] + __e.backtrace ) ; raise __e
                          end
                      }
                    _pp_MIMARKlist                     = 
                      Proc.new { |_f,_s,_level,_prefix| 
                          if ( 
                            trampCall( self._not_METHOD(  'not',
                                begin
                                  if @global_lisp_binding.has_key?('_not') then
                                    trampCall(@_not)
                                  else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:844"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                      begin
                                        if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                          trampCall(@_eq_QUMARK)
                                        else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:726"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                      false                                      ,Cell.new(
                                        begin
                                            trampCall(_prefix)
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:983"] + __e.backtrace ) ; raise __e
                                        end
                                               ))))
                                         )))
                           ) then
                              trampCall( callProcedure(   'do-indent',
                                  begin
                                      trampCall(_do_MIMARKindent)
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:973"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        trampCall(_f)
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:987"] + __e.backtrace ) ; raise __e
                                    end                                  ,Cell.new(
                                    begin
                                        trampCall(_level)
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:982"] + __e.backtrace ) ; raise __e
                                    end
                                           ))))
                          else
                            false
                          end
                          trampCall( callProcedure(   'pp-parenl',
                              begin
                                  trampCall(_pp_MIMARKparenl)
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:974"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    trampCall(_f)
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:987"] + __e.backtrace ) ; raise __e
                                end
                                       )))
                          begin
                            ___lambda = lambda { |_loop| 
                                _loop                                 = 
                                  Proc.new { |_s,_prefix| 
                                      if ( 
                                        trampCall( self._null_QUMARK_METHOD(  'null?',
                                            begin
                                              if @global_lisp_binding.has_key?('_null_QUMARK') then
                                                trampCall(@_null_QUMARK)
                                              else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:977"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              begin
                                                  trampCall(_s)
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:988"] + __e.backtrace ) ; raise __e
                                              end
                                                     )))
                                       ) then
                                          delayCall( 'pp-parenr',
                                              begin
                                                  trampCall(_pp_MIMARKparenr)
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:978"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                begin
                                                    trampCall(_f)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:987"] + __e.backtrace ) ; raise __e
                                                end
                                                       ))
                                      else
                                          begin
                                            ___lambda = lambda { |_e| 
                                                if ( 
                                                  trampCall( self._list_QUMARK_METHOD(  'list?',
                                                      begin
                                                        if @global_lisp_binding.has_key?('_list_QUMARK') then
                                                          trampCall(@_list_QUMARK)
                                                        else raise NameError.new( "Error: undefined variable _list_QUMARK", "_list_QUMARK" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:986"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        begin
                                                            trampCall(_e)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:983"] + __e.backtrace ) ; raise __e
                                                        end
                                                               )))
                                                 ) then
                                                    begin
                                                        if ( 
                                                          trampCall( self._not_METHOD(  'not',
                                                              begin
                                                                if @global_lisp_binding.has_key?('_not') then
                                                                  trampCall(@_not)
                                                                else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:844"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                                trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                                                    begin
                                                                      if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                                        trampCall(@_eq_QUMARK)
                                                                      else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:726"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                    Cell.new(
                                                                    false                                                                    ,Cell.new(
                                                                      begin
                                                                          trampCall(_prefix)
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:983"] + __e.backtrace ) ; raise __e
                                                                      end
                                                                             ))))
                                                                       )))
                                                         ) then
                                                            begin
                                                                trampCall(_f).print(
                                                                    "
"
                                                                  )
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:989"] + __e.backtrace ) ; raise __e
                                                            end
                                                        else
                                                          false
                                                        end
                                                        trampCall( callProcedure(   'pp-list',
                                                            begin
                                                                trampCall(_pp_MIMARKlist)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:987"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              begin
                                                                  trampCall(_f)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:987"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,Cell.new(
                                                              begin
                                                                  trampCall(_e)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:983"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,Cell.new(
                                                              trampCall( self.__PLMARK_METHOD(  '+',
                                                                  begin
                                                                    if @global_lisp_binding.has_key?('__PLMARK') then
                                                                      trampCall(@__PLMARK)
                                                                    else raise NameError.new( "Error: undefined variable __PLMARK", "__PLMARK" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:982"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                    begin
                                                                        trampCall(_level)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:982"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,Cell.new(
                                                                  1
                                                                           ))))                                                            ,Cell.new(
                                                              begin
                                                                  trampCall(_prefix)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:983"] + __e.backtrace ) ; raise __e
                                                              end
                                                                     ))))))
                                                    end
                                                else
                                                    trampCall( callProcedure(   'pp-atom',
                                                        begin
                                                            trampCall(_pp_MIMARKatom)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:983"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                          begin
                                                              trampCall(_f)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:987"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,Cell.new(
                                                          begin
                                                              trampCall(_e)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:983"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,Cell.new(
                                                          begin
                                                              trampCall(_prefix)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:983"] + __e.backtrace ) ; raise __e
                                                          end
                                                                 )))))
                                                end
                                                delayCall( 'loop',
                                                    begin
                                                        trampCall(_loop)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:984"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      trampCall( self._cdr_METHOD(  'cdr',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_cdr') then
                                                              trampCall(@_cdr)
                                                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:984"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            begin
                                                                trampCall(_s)
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:988"] + __e.backtrace ) ; raise __e
                                                            end
                                                                   )))                                                    ,Cell.new(
                                                    true
                                                             )))
                                            } ; ___lambda.call(
                                                  trampCall( self._car_METHOD(  'car',
                                                      begin
                                                        if @global_lisp_binding.has_key?('_car') then
                                                          trampCall(@_car)
                                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:979"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        begin
                                                            trampCall(_s)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:988"] + __e.backtrace ) ; raise __e
                                                        end
                                                               )))
                                                       )
                                          end
                                      end
                                  }
                                delayCall( 'loop',
                                    begin
                                        trampCall(_loop)
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:984"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          trampCall(_s)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:988"] + __e.backtrace ) ; raise __e
                                      end                                    ,Cell.new(
                                    false
                                             )))
                            } ; ___lambda.call(
                            nil
                                       )
                          end
                      }
                    begin
                      ___lambda = lambda { |_f| 
                          if ( 
                            trampCall( self._list_QUMARK_METHOD(  'list?',
                                begin
                                  if @global_lisp_binding.has_key?('_list_QUMARK') then
                                    trampCall(@_list_QUMARK)
                                  else raise NameError.new( "Error: undefined variable _list_QUMARK", "_list_QUMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:986"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      trampCall(_s)
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:988"] + __e.backtrace ) ; raise __e
                                  end
                                         )))
                           ) then
                              trampCall( callProcedure(   'pp-list',
                                  begin
                                      trampCall(_pp_MIMARKlist)
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:987"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        trampCall(_f)
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:987"] + __e.backtrace ) ; raise __e
                                    end                                  ,Cell.new(
                                    begin
                                        trampCall(_s)
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:988"] + __e.backtrace ) ; raise __e
                                    end                                  ,Cell.new(
                                  0                                  ,Cell.new(
                                  false
                                           ))))))
                          else
                              begin
                                  trampCall(_f).print(
                                        trampCall( self._write_MIMARKto_MIMARKstring_METHOD(  'write-to-string',
                                            begin
                                              if @global_lisp_binding.has_key?('_write_MIMARKto_MIMARKstring') then
                                                trampCall(@_write_MIMARKto_MIMARKstring)
                                              else raise NameError.new( "Error: undefined variable _write_MIMARKto_MIMARKstring", "_write_MIMARKto_MIMARKstring" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:988"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              begin
                                                  trampCall(_s)
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:988"] + __e.backtrace ) ; raise __e
                                              end
                                                     )))
                                    )
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:989"] + __e.backtrace ) ; raise __e
                              end
                          end
                          begin
                              trampCall(_f).print(
                                  "
"
                                )
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:989"] + __e.backtrace ) ; raise __e
                          end
                      } ; ___lambda.call(
                            begin
                              ___lambda = lambda { |___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20197| 
                                  if ( 
                                    trampCall( self._null_QUMARK_METHOD(  'null?',
                                        begin
                                          if @global_lisp_binding.has_key?('_null_QUMARK') then
                                            trampCall(@_null_QUMARK)
                                          else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:977"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          begin
                                              trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20197)
                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                          end
                                                 )))
                                   ) then
                                      begin
                                          trampCall(STDOUT)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:985"] + __e.backtrace ) ; raise __e
                                      end
                                  else
                                      delayCall( 'car',
                                          begin
                                            if @global_lisp_binding.has_key?('_car') then
                                              trampCall(@_car)
                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:979"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20197)
                                              rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                            end
                                                   ))
                                  end
                              } ; ___lambda.call(
                                    begin
                                        trampCall(_f)
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:987"] + __e.backtrace ) ; raise __e
                                    end
                                         )
                            end
                                 )
                    end
                } ; ___lambda.call(
                nil,nil,nil,nil,nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._pretty_MIMARKprint_MIMARKto_MIMARKstring_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_pretty_MIMARKprint_MIMARKto_MIMARKstring'] = self.method( :_pretty_MIMARKprint_MIMARKto_MIMARKstring_METHOD )
    @_pretty_MIMARKprint_MIMARKto_MIMARKstring = 
    trampCall(
          Proc.new { |_s| 
              begin
                ___lambda = lambda { |_io| 
                    trampCall( self._pretty_MIMARKprint_METHOD(  'pretty-print',
                        begin
                          if @global_lisp_binding.has_key?('_pretty_MIMARKprint') then
                            trampCall(@_pretty_MIMARKprint)
                          else raise NameError.new( "Error: undefined variable _pretty_MIMARKprint", "_pretty_MIMARKprint" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:994"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              trampCall(_s)
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:994"] + __e.backtrace ) ; raise __e
                          end                        ,Cell.new(
                          begin
                              trampCall(_io)
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:994"] + __e.backtrace ) ; raise __e
                          end
                                 ))))
                    begin
                        trampCall(_io).rewind(
                          )
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:995"] + __e.backtrace ) ; raise __e
                    end
                    begin
                        trampCall(_io).read(
                          )
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:996"] + __e.backtrace ) ; raise __e
                    end
                } ; ___lambda.call(
                      begin
                          trampCall(StringIO).new(
                            )
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:993"] + __e.backtrace ) ; raise __e
                      end
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._sort_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_sort'] = self.method( :_sort_METHOD )
    @_sort = 
    trampCall(
          Proc.new { |_lst,*__rest__| _cmpfn = __rest__[0] ;  
              if ( 
                trampCall( self._null_QUMARK_METHOD(  'null?',
                    begin
                      if @global_lisp_binding.has_key?('_null_QUMARK') then
                        trampCall(@_null_QUMARK)
                      else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1002"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          trampCall(_lst)
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1002"] + __e.backtrace ) ; raise __e
                      end
                             )))
               ) then
                Cell.new()
              else
                  begin
                    ___lambda = lambda { |_cmpfn| 
                        delayCall( 'to-list',
                            begin
                              if @global_lisp_binding.has_key?('_to_MIMARKlist') then
                                trampCall(@_to_MIMARKlist)
                              else raise NameError.new( "Error: undefined variable _to_MIMARKlist", "_to_MIMARKlist" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1005"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              if ( 
                                begin
                                    trampCall(_cmpfn)
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1007"] + __e.backtrace ) ; raise __e
                                end
                               ) then
                                  begin
                                      trampCall(_lst).to_arr.sort(
                                            &Proc.new { |_a,_b| 
                                                trampCall( callProcedure(   'cmpfn',
                                                    begin
                                                        trampCall(_cmpfn)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1007"] + __e.backtrace ) ; raise __e
                                                    end                                                  ,
                                                    Cell.new(
                                                      begin
                                                          trampCall(_a)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1007"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,Cell.new(
                                                      begin
                                                          trampCall(_b)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1007"] + __e.backtrace ) ; raise __e
                                                      end
                                                             ))))
                                            }
                                        )
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1008"] + __e.backtrace ) ; raise __e
                                  end
                              else
                                  begin
                                      trampCall(_lst).to_arr.sort(
                                        )
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1008"] + __e.backtrace ) ; raise __e
                                  end
                              end
                                     ))
                    } ; ___lambda.call(
                          begin
                            ___lambda = lambda { |___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20198| 
                                if ( 
                                  trampCall( self._null_QUMARK_METHOD(  'null?',
                                      begin
                                        if @global_lisp_binding.has_key?('_null_QUMARK') then
                                          trampCall(@_null_QUMARK)
                                        else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1002"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20198)
                                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                        end
                                               )))
                                 ) then
                                  false
                                else
                                    delayCall( 'car',
                                        begin
                                          if @global_lisp_binding.has_key?('_car') then
                                            trampCall(@_car)
                                          else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:979"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          begin
                                              trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20198)
                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                          end
                                                 ))
                                end
                            } ; ___lambda.call(
                                  begin
                                      trampCall(_cmpfn)
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1007"] + __e.backtrace ) ; raise __e
                                  end
                                       )
                          end
                               )
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._sort_MIMARKby_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_sort_MIMARKby'] = self.method( :_sort_MIMARKby_METHOD )
    @_sort_MIMARKby = 
    trampCall(
          Proc.new { |_lst,_keyfn| 
              if ( 
                trampCall( self._null_QUMARK_METHOD(  'null?',
                    begin
                      if @global_lisp_binding.has_key?('_null_QUMARK') then
                        trampCall(@_null_QUMARK)
                      else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1012"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          trampCall(_lst)
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1012"] + __e.backtrace ) ; raise __e
                      end
                             )))
               ) then
                Cell.new()
              else
                  delayCall( 'to-list',
                      begin
                        if @global_lisp_binding.has_key?('_to_MIMARKlist') then
                          trampCall(@_to_MIMARKlist)
                        else raise NameError.new( "Error: undefined variable _to_MIMARKlist", "_to_MIMARKlist" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1014"] + __e.backtrace ) ; raise __e
                      end                    ,
                      Cell.new(
                        begin
                            trampCall(_lst).to_arr.sort_by(
                                  &Proc.new { |_item| 
                                      trampCall( callProcedure(   'keyfn',
                                          begin
                                              trampCall(_keyfn)
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1015"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                trampCall(_item)
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1015"] + __e.backtrace ) ; raise __e
                                            end
                                                   )))
                                  }
                              )
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1015"] + __e.backtrace ) ; raise __e
                        end
                               ))
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._string_MIMARKlength_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_string_MIMARKlength'] = self.method( :_string_MIMARKlength_METHOD )
    @_string_MIMARKlength = 
    trampCall(
          Proc.new { |_str| 
              begin
                  trampCall(_str).size(
                    )
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1021"] + __e.backtrace ) ; raise __e
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._string_MIMARK_GTMARKregexp_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_string_MIMARK_GTMARKregexp'] = self.method( :_string_MIMARK_GTMARKregexp_METHOD )
    @_string_MIMARK_GTMARKregexp = 
    trampCall(
          Proc.new { |_str,*__rest__| _casefold = __rest__[0] ;  
              if ( 
                trampCall( self._not_METHOD(  'not',
                    begin
                      if @global_lisp_binding.has_key?('_not') then
                        trampCall(@_not)
                      else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1028"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          trampCall(_str).is_a?(
                                begin
                                    trampCall(String)
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1028"] + __e.backtrace ) ; raise __e
                                end
                            )
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1028"] + __e.backtrace ) ; raise __e
                      end
                             )))
               ) then
                  begin raise RuntimeError, 
                  "Error: string->regexp requires a String argument."
                  rescue => __e 
                    __e.set_backtrace( ["./lib/init.nnd:1029"] + __e.backtrace )
                    raise __e
                  end 
              else
                  if ( 
                    begin
                      ___lambda = lambda { |___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20199| 
                          if ( 
                            trampCall( self._null_QUMARK_METHOD(  'null?',
                                begin
                                  if @global_lisp_binding.has_key?('_null_QUMARK') then
                                    trampCall(@_null_QUMARK)
                                  else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1012"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20199)
                                    rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                  end
                                         )))
                           ) then
                            false
                          else
                              trampCall( self._car_METHOD(  'car',
                                  begin
                                    if @global_lisp_binding.has_key?('_car') then
                                      trampCall(@_car)
                                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:979"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20199)
                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                    end
                                           )))
                          end
                      } ; ___lambda.call(
                            begin
                                trampCall(_casefold)
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1030"] + __e.backtrace ) ; raise __e
                            end
                                 )
                    end
                   ) then
                      begin
                          trampCall(Regexp).new(
                                begin
                                    trampCall(_str)
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1032"] + __e.backtrace ) ; raise __e
                                end                              ,
                                begin
                                    trampCall(Regexp::IGNORECASE)
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1031"] + __e.backtrace ) ; raise __e
                                end
                            )
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1032"] + __e.backtrace ) ; raise __e
                      end
                  else
                      begin
                          trampCall(Regexp).new(
                                begin
                                    trampCall(_str)
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1032"] + __e.backtrace ) ; raise __e
                                end
                            )
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1032"] + __e.backtrace ) ; raise __e
                      end
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._regexp_QUMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_regexp_QUMARK'] = self.method( :_regexp_QUMARK_METHOD )
    @_regexp_QUMARK = 
    trampCall(
          Proc.new { |_obj| 
              begin
                  trampCall(_obj).is_a?(
                        begin
                            trampCall(Regexp)
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1035"] + __e.backtrace ) ; raise __e
                        end
                    )
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1035"] + __e.backtrace ) ; raise __e
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._regexp_MIMARK_GTMARKstring_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_regexp_MIMARK_GTMARKstring'] = self.method( :_regexp_MIMARK_GTMARKstring_METHOD )
    @_regexp_MIMARK_GTMARKstring = 
    trampCall(
          Proc.new { |_regexp| 
              begin
                  trampCall(_regexp).source(
                    )
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1038"] + __e.backtrace ) ; raise __e
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._rxmatch_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_rxmatch'] = self.method( :_rxmatch_METHOD )
    @_rxmatch = 
    trampCall(
          Proc.new { |_regexp,_str| 
              begin
                ___lambda = lambda { |_m| 
                    if ( 
                      begin
                          trampCall(_m)
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1043"] + __e.backtrace ) ; raise __e
                      end
                     ) then
                        begin
                            trampCall(_m)
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1043"] + __e.backtrace ) ; raise __e
                        end
                    else
                      false
                    end
                } ; ___lambda.call(
                      begin
                          trampCall(_regexp).match(
                                begin
                                    trampCall(_str)
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1042"] + __e.backtrace ) ; raise __e
                                end
                            )
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1042"] + __e.backtrace ) ; raise __e
                      end
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._rxmatch_MIMARKstart_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_rxmatch_MIMARKstart'] = self.method( :_rxmatch_MIMARKstart_METHOD )
    @_rxmatch_MIMARKstart = 
    trampCall(
          Proc.new { |_match,*__rest__| _index = __rest__[0] ;  
              begin
                ___lambda = lambda { |_index| 
                    begin
                        trampCall(_match).begin(
                              begin
                                  trampCall(_index)
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1047"] + __e.backtrace ) ; raise __e
                              end
                          )
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1047"] + __e.backtrace ) ; raise __e
                    end
                } ; ___lambda.call(
                      begin
                        ___lambda = lambda { |___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20200| 
                            if ( 
                              trampCall( self._null_QUMARK_METHOD(  'null?',
                                  begin
                                    if @global_lisp_binding.has_key?('_null_QUMARK') then
                                      trampCall(@_null_QUMARK)
                                    else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1012"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20200)
                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                    end
                                           )))
                             ) then
                              0
                            else
                                delayCall( 'car',
                                    begin
                                      if @global_lisp_binding.has_key?('_car') then
                                        trampCall(@_car)
                                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:979"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20200)
                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                      end
                                             ))
                            end
                        } ; ___lambda.call(
                              begin
                                  trampCall(_index)
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1047"] + __e.backtrace ) ; raise __e
                              end
                                   )
                      end
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._rxmatch_MIMARKend_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_rxmatch_MIMARKend'] = self.method( :_rxmatch_MIMARKend_METHOD )
    @_rxmatch_MIMARKend = 
    trampCall(
          Proc.new { |_match,*__rest__| _index = __rest__[0] ;  
              begin
                ___lambda = lambda { |_index| 
                    begin
                        trampCall(_match).end(
                              begin
                                  trampCall(_index)
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1051"] + __e.backtrace ) ; raise __e
                              end
                          )
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1051"] + __e.backtrace ) ; raise __e
                    end
                } ; ___lambda.call(
                      begin
                        ___lambda = lambda { |___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20201| 
                            if ( 
                              trampCall( self._null_QUMARK_METHOD(  'null?',
                                  begin
                                    if @global_lisp_binding.has_key?('_null_QUMARK') then
                                      trampCall(@_null_QUMARK)
                                    else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1012"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20201)
                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                    end
                                           )))
                             ) then
                              0
                            else
                                delayCall( 'car',
                                    begin
                                      if @global_lisp_binding.has_key?('_car') then
                                        trampCall(@_car)
                                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:979"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20201)
                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                      end
                                             ))
                            end
                        } ; ___lambda.call(
                              begin
                                  trampCall(_index)
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1051"] + __e.backtrace ) ; raise __e
                              end
                                   )
                      end
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._rxmatch_MIMARKsubstring_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_rxmatch_MIMARKsubstring'] = self.method( :_rxmatch_MIMARKsubstring_METHOD )
    @_rxmatch_MIMARKsubstring = 
    trampCall(
          Proc.new { |_match,*__rest__| _index = __rest__[0] ;  
              begin
                ___lambda = lambda { |_index| 
                    delayCall( 'nth',
                        begin
                          if @global_lisp_binding.has_key?('_nth') then
                            trampCall(@_nth)
                          else raise NameError.new( "Error: undefined variable _nth", "_nth" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1055"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              trampCall(_index)
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1055"] + __e.backtrace ) ; raise __e
                          end                        ,Cell.new(
                          begin
                              trampCall(_match).to_a.to_list(
                                )
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1055"] + __e.backtrace ) ; raise __e
                          end
                                 )))
                } ; ___lambda.call(
                      begin
                        ___lambda = lambda { |___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20202| 
                            if ( 
                              trampCall( self._null_QUMARK_METHOD(  'null?',
                                  begin
                                    if @global_lisp_binding.has_key?('_null_QUMARK') then
                                      trampCall(@_null_QUMARK)
                                    else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1012"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20202)
                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                    end
                                           )))
                             ) then
                              0
                            else
                                delayCall( 'car',
                                    begin
                                      if @global_lisp_binding.has_key?('_car') then
                                        trampCall(@_car)
                                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:979"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20202)
                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                      end
                                             ))
                            end
                        } ; ___lambda.call(
                              begin
                                  trampCall(_index)
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1055"] + __e.backtrace ) ; raise __e
                              end
                                   )
                      end
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._rxmatch_MIMARKnum_MIMARKmatches_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_rxmatch_MIMARKnum_MIMARKmatches'] = self.method( :_rxmatch_MIMARKnum_MIMARKmatches_METHOD )
    @_rxmatch_MIMARKnum_MIMARKmatches = 
    trampCall(
          Proc.new { |_match| 
              begin
                  trampCall(_match).size(
                    )
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1058"] + __e.backtrace ) ; raise __e
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._rxmatch_MIMARK_GTMARKstring_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_rxmatch_MIMARK_GTMARKstring'] = self.method( :_rxmatch_MIMARK_GTMARKstring_METHOD )
    @_rxmatch_MIMARK_GTMARKstring = 
    trampCall(
          Proc.new { |_regexp,_str,*__rest__| _index = __rest__[0] ;  
              begin
                ___lambda = lambda { |_index| 
                    begin
                      ___lambda = lambda { |_m| 
                          if ( 
                            begin
                                trampCall(_m)
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1064"] + __e.backtrace ) ; raise __e
                            end
                           ) then
                              delayCall( 'rxmatch-substring',
                                  begin
                                    if @global_lisp_binding.has_key?('_rxmatch_MIMARKsubstring') then
                                      trampCall(@_rxmatch_MIMARKsubstring)
                                    else raise NameError.new( "Error: undefined variable _rxmatch_MIMARKsubstring", "_rxmatch_MIMARKsubstring" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1064"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        trampCall(_m)
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1064"] + __e.backtrace ) ; raise __e
                                    end                                  ,Cell.new(
                                    begin
                                        trampCall(_index)
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1064"] + __e.backtrace ) ; raise __e
                                    end
                                           )))
                          else
                            false
                          end
                      } ; ___lambda.call(
                            trampCall( self._rxmatch_METHOD(  'rxmatch',
                                begin
                                  if @global_lisp_binding.has_key?('_rxmatch') then
                                    trampCall(@_rxmatch)
                                  else raise NameError.new( "Error: undefined variable _rxmatch", "_rxmatch" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1062"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      trampCall(_regexp)
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1062"] + __e.backtrace ) ; raise __e
                                  end                                ,Cell.new(
                                  begin
                                      trampCall(_str)
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1062"] + __e.backtrace ) ; raise __e
                                  end
                                         ))))
                                 )
                    end
                } ; ___lambda.call(
                      begin
                        ___lambda = lambda { |___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20203| 
                            if ( 
                              trampCall( self._null_QUMARK_METHOD(  'null?',
                                  begin
                                    if @global_lisp_binding.has_key?('_null_QUMARK') then
                                      trampCall(@_null_QUMARK)
                                    else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1012"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20203)
                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                    end
                                           )))
                             ) then
                              0
                            else
                                delayCall( 'car',
                                    begin
                                      if @global_lisp_binding.has_key?('_car') then
                                        trampCall(@_car)
                                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:979"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20203)
                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                      end
                                             ))
                            end
                        } ; ___lambda.call(
                              begin
                                  trampCall(_index)
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1064"] + __e.backtrace ) ; raise __e
                              end
                                   )
                      end
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._global_MIMARKdefined_QUMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_global_MIMARKdefined_QUMARK'] = self.method( :_global_MIMARKdefined_QUMARK_METHOD )
    @_global_MIMARKdefined_QUMARK = 
    trampCall(
          Proc.new { |_sym| 
              delayCall( 'find',
                  begin
                    if @global_lisp_binding.has_key?('_find') then
                      trampCall(@_find)
                    else raise NameError.new( "Error: undefined variable _find", "_find" ) end
                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1072"] + __e.backtrace ) ; raise __e
                  end                ,
                  Cell.new(
                    Proc.new { |_x| 
                        trampCall( self._eq_QUMARK_METHOD(  'eq?',
                            begin
                              if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                trampCall(@_eq_QUMARK)
                              else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1074"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  trampCall(_sym)
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1074"] + __e.backtrace ) ; raise __e
                              end                            ,Cell.new(
                              begin
                                  trampCall(_x)
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1074"] + __e.backtrace ) ; raise __e
                              end
                                     ))))
                    }                  ,Cell.new(
                    trampCall( self._global_MIMARKvariables_METHOD(  'global-variables',
                        begin
                          if @global_lisp_binding.has_key?('_global_MIMARKvariables') then
                            trampCall(@_global_MIMARKvariables)
                          else raise NameError.new( "Error: undefined variable _global_MIMARKvariables", "_global_MIMARKvariables" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1075"] + __e.backtrace ) ; raise __e
                        end                      ,
                      Cell.new(
                                 )))
                           )))
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._disasm_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_disasm'] = self.method( :_disasm_METHOD )
    @_disasm = 
    trampCall(
          Proc.new { |_varname,*__rest__| _opt = __rest__[0] ;  
              begin
                ___lambda = lambda { |_kind,_alist| 
                    if ( 
                      trampCall( self._eqv_QUMARK_METHOD(  'eqv?',
                          begin
                            if @global_lisp_binding.has_key?('_eqv_QUMARK') then
                              trampCall(@_eqv_QUMARK)
                            else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1091"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                trampCall(_kind)
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1091"] + __e.backtrace ) ; raise __e
                            end                          ,Cell.new(
                          :"compiled"
                                   ))))
                     ) then
                        begin
                            delayCall( 'assv-ref',
                                begin
                                  if @global_lisp_binding.has_key?('_assv_MIMARKref') then
                                    trampCall(@_assv_MIMARKref)
                                  else raise NameError.new( "Error: undefined variable _assv_MIMARKref", "_assv_MIMARKref" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1101"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                "compiled_str"                                ,Cell.new(
                                  begin
                                      trampCall(_alist)
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1101"] + __e.backtrace ) ; raise __e
                                  end
                                         )))
                        end
                    else
                        if ( 
                          trampCall( self._eqv_QUMARK_METHOD(  'eqv?',
                              begin
                                if @global_lisp_binding.has_key?('_eqv_QUMARK') then
                                  trampCall(@_eqv_QUMARK)
                                else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1091"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    trampCall(_kind)
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1091"] + __e.backtrace ) ; raise __e
                                end                              ,Cell.new(
                              :"source"
                                       ))))
                         ) then
                            begin
                                delayCall( 'assv-ref',
                                    begin
                                      if @global_lisp_binding.has_key?('_assv_MIMARKref') then
                                        trampCall(@_assv_MIMARKref)
                                      else raise NameError.new( "Error: undefined variable _assv_MIMARKref", "_assv_MIMARKref" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1101"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                    "source"                                    ,Cell.new(
                                      begin
                                          trampCall(_alist)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1101"] + __e.backtrace ) ; raise __e
                                      end
                                             )))
                            end
                        else
                            if ( 
                              trampCall( self._eqv_QUMARK_METHOD(  'eqv?',
                                  begin
                                    if @global_lisp_binding.has_key?('_eqv_QUMARK') then
                                      trampCall(@_eqv_QUMARK)
                                    else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1091"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        trampCall(_kind)
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1091"] + __e.backtrace ) ; raise __e
                                    end                                  ,Cell.new(
                                  :"expanded"
                                           ))))
                             ) then
                                begin
                                    delayCall( 'assv-ref',
                                        begin
                                          if @global_lisp_binding.has_key?('_assv_MIMARKref') then
                                            trampCall(@_assv_MIMARKref)
                                          else raise NameError.new( "Error: undefined variable _assv_MIMARKref", "_assv_MIMARKref" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1101"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                        "expanded"                                        ,Cell.new(
                                          begin
                                              trampCall(_alist)
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1101"] + __e.backtrace ) ; raise __e
                                          end
                                                 )))
                                end
                            else
                                if ( 
                                  trampCall( self._eqv_QUMARK_METHOD(  'eqv?',
                                      begin
                                        if @global_lisp_binding.has_key?('_eqv_QUMARK') then
                                          trampCall(@_eqv_QUMARK)
                                        else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1091"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            trampCall(_kind)
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1091"] + __e.backtrace ) ; raise __e
                                        end                                      ,Cell.new(
                                      :"info"
                                               ))))
                                 ) then
                                    begin
                                        delayCall( 'string-join',
                                            begin
                                              if @global_lisp_binding.has_key?('_string_MIMARKjoin') then
                                                trampCall(@_string_MIMARKjoin)
                                              else raise NameError.new( "Error: undefined variable _string_MIMARKjoin", "_string_MIMARKjoin" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1092"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              trampCall( self._list_METHOD(  'list',
                                                  begin
                                                    if @global_lisp_binding.has_key?('_list') then
                                                      trampCall(@_list)
                                                    else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1093"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    trampCall( self._sprintf_METHOD(  'sprintf',
                                                        begin
                                                          if @global_lisp_binding.has_key?('_sprintf') then
                                                            trampCall(@_sprintf)
                                                          else raise NameError.new( "Error: undefined variable _sprintf", "_sprintf" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1099"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                        " file:   %s 
"                                                        ,Cell.new(
                                                          trampCall( self._assv_MIMARKref_METHOD(  'assv-ref',
                                                              begin
                                                                if @global_lisp_binding.has_key?('_assv_MIMARKref') then
                                                                  trampCall(@_assv_MIMARKref)
                                                                else raise NameError.new( "Error: undefined variable _assv_MIMARKref", "_assv_MIMARKref" ) end
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1101"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                              "sourcefile"                                                              ,Cell.new(
                                                                begin
                                                                    trampCall(_alist)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1101"] + __e.backtrace ) ; raise __e
                                                                end
                                                                       ))))
                                                                 ))))                                                  ,Cell.new(
                                                    trampCall( self._sprintf_METHOD(  'sprintf',
                                                        begin
                                                          if @global_lisp_binding.has_key?('_sprintf') then
                                                            trampCall(@_sprintf)
                                                          else raise NameError.new( "Error: undefined variable _sprintf", "_sprintf" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1099"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                        " lineno: %s 
"                                                        ,Cell.new(
                                                          trampCall( self._assv_MIMARKref_METHOD(  'assv-ref',
                                                              begin
                                                                if @global_lisp_binding.has_key?('_assv_MIMARKref') then
                                                                  trampCall(@_assv_MIMARKref)
                                                                else raise NameError.new( "Error: undefined variable _assv_MIMARKref", "_assv_MIMARKref" ) end
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1101"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                              "lineno"                                                              ,Cell.new(
                                                                begin
                                                                    trampCall(_alist)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1101"] + __e.backtrace ) ; raise __e
                                                                end
                                                                       ))))
                                                                 ))))                                                  ,Cell.new(
                                                    trampCall( self._sprintf_METHOD(  'sprintf',
                                                        begin
                                                          if @global_lisp_binding.has_key?('_sprintf') then
                                                            trampCall(@_sprintf)
                                                          else raise NameError.new( "Error: undefined variable _sprintf", "_sprintf" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1099"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                        " source: 
"
                                                                 )))                                                  ,Cell.new(
                                                    trampCall( self._pretty_MIMARKprint_MIMARKto_MIMARKstring_METHOD(  'pretty-print-to-string',
                                                        begin
                                                          if @global_lisp_binding.has_key?('_pretty_MIMARKprint_MIMARKto_MIMARKstring') then
                                                            trampCall(@_pretty_MIMARKprint_MIMARKto_MIMARKstring)
                                                          else raise NameError.new( "Error: undefined variable _pretty_MIMARKprint_MIMARKto_MIMARKstring", "_pretty_MIMARKprint_MIMARKto_MIMARKstring" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1100"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                          trampCall( self._assv_MIMARKref_METHOD(  'assv-ref',
                                                              begin
                                                                if @global_lisp_binding.has_key?('_assv_MIMARKref') then
                                                                  trampCall(@_assv_MIMARKref)
                                                                else raise NameError.new( "Error: undefined variable _assv_MIMARKref", "_assv_MIMARKref" ) end
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1101"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                              "source"                                                              ,Cell.new(
                                                                begin
                                                                    trampCall(_alist)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1101"] + __e.backtrace ) ; raise __e
                                                                end
                                                                       ))))
                                                                 )))                                                  ,Cell.new(
                                                    trampCall( self._sprintf_METHOD(  'sprintf',
                                                        begin
                                                          if @global_lisp_binding.has_key?('_sprintf') then
                                                            trampCall(@_sprintf)
                                                          else raise NameError.new( "Error: undefined variable _sprintf", "_sprintf" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1099"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                        " expanded: 
"
                                                                 )))                                                  ,Cell.new(
                                                    trampCall( self._pretty_MIMARKprint_MIMARKto_MIMARKstring_METHOD(  'pretty-print-to-string',
                                                        begin
                                                          if @global_lisp_binding.has_key?('_pretty_MIMARKprint_MIMARKto_MIMARKstring') then
                                                            trampCall(@_pretty_MIMARKprint_MIMARKto_MIMARKstring)
                                                          else raise NameError.new( "Error: undefined variable _pretty_MIMARKprint_MIMARKto_MIMARKstring", "_pretty_MIMARKprint_MIMARKto_MIMARKstring" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1100"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                          trampCall( self._assv_MIMARKref_METHOD(  'assv-ref',
                                                              begin
                                                                if @global_lisp_binding.has_key?('_assv_MIMARKref') then
                                                                  trampCall(@_assv_MIMARKref)
                                                                else raise NameError.new( "Error: undefined variable _assv_MIMARKref", "_assv_MIMARKref" ) end
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1101"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                              "expanded"                                                              ,Cell.new(
                                                                begin
                                                                    trampCall(_alist)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1101"] + __e.backtrace ) ; raise __e
                                                                end
                                                                       ))))
                                                                 )))
                                                           ))))))))
                                                     ))
                                    end
                                else
                                    Cell.new()
                                end
                            end
                        end
                    end
                } ; ___lambda.call(
                      begin
                        ___lambda = lambda { |___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20204| 
                            if ( 
                              trampCall( self._null_QUMARK_METHOD(  'null?',
                                  begin
                                    if @global_lisp_binding.has_key?('_null_QUMARK') then
                                      trampCall(@_null_QUMARK)
                                    else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1012"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20204)
                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                    end
                                           )))
                             ) then
                              :"compiled"
                            else
                                delayCall( 'car',
                                    begin
                                      if @global_lisp_binding.has_key?('_car') then
                                        trampCall(@_car)
                                      else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:979"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20204)
                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                      end
                                             ))
                            end
                        } ; ___lambda.call(
                              begin
                                  trampCall(_opt)
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1082"] + __e.backtrace ) ; raise __e
                              end
                                   )
                      end                    ,
                      trampCall( self._get_MIMARKsource_MIMARKinfo_METHOD(  'get-source-info',
                          begin
                            if @global_lisp_binding.has_key?('_get_MIMARKsource_MIMARKinfo') then
                              trampCall(@_get_MIMARKsource_MIMARKinfo)
                            else raise NameError.new( "Error: undefined variable _get_MIMARKsource_MIMARKinfo", "_get_MIMARKsource_MIMARKinfo" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1083"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                trampCall(_varname).to_s(
                                  )
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1083"] + __e.backtrace ) ; raise __e
                            end
                                   )))
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._compiled_MIMARKcode_MIMARKstring_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_compiled_MIMARKcode_MIMARKstring'] = self.method( :_compiled_MIMARKcode_MIMARKstring_METHOD )
    @_compiled_MIMARKcode_MIMARKstring = 
    trampCall(
          Proc.new { |_compiled_MIMARKcode,_filename| 
              begin
                ___lambda = lambda { |_compiled_MIMARKbody_MIMARKstring| 
                    _compiled_MIMARKbody_MIMARKstring                     = 
                      Proc.new { |_string_MIMARKlist,_filename| 
                          delayCall( '+',
                              begin
                                if @global_lisp_binding.has_key?('__PLMARK') then
                                  trampCall(@__PLMARK)
                                else raise NameError.new( "Error: undefined variable __PLMARK", "__PLMARK" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1106"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                trampCall( self._string_MIMARKjoin_METHOD(  'string-join',
                                    begin
                                      if @global_lisp_binding.has_key?('_string_MIMARKjoin') then
                                        trampCall(@_string_MIMARKjoin)
                                      else raise NameError.new( "Error: undefined variable _string_MIMARKjoin", "_string_MIMARKjoin" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1110"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          trampCall(_string_MIMARKlist)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1108"] + __e.backtrace ) ; raise __e
                                      end                                    ,Cell.new(
                                    "
#--------------------
"
                                             ))))                              ,Cell.new(
                                trampCall( self._string_MIMARKjoin_METHOD(  'string-join',
                                    begin
                                      if @global_lisp_binding.has_key?('_string_MIMARKjoin') then
                                        trampCall(@_string_MIMARKjoin)
                                      else raise NameError.new( "Error: undefined variable _string_MIMARKjoin", "_string_MIMARKjoin" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1110"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                    Cell.new("

",Cell.new("# -------------------------------------------------------",Cell.new("# [EOF]",Cell.new("# -------------------------------------------------------"))))                                    ,Cell.new(
                                    "
"
                                             ))))
                                       )))
                      }
                    begin
                      ___lambda = lambda { |_str_MIMARKlist,_script_MIMARKflag| 
                          delayCall( 'values',
                              begin
                                if @global_lisp_binding.has_key?('_values') then
                                  trampCall(@_values)
                                else raise NameError.new( "Error: undefined variable _values", "_values" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1120"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    trampCall(_script_MIMARKflag)
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1121"] + __e.backtrace ) ; raise __e
                                end                              ,Cell.new(
                                trampCall( callProcedure(   'compiled-body-string',
                                    begin
                                        trampCall(_compiled_MIMARKbody_MIMARKstring)
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1122"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                          trampCall(_str_MIMARKlist)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1122"] + __e.backtrace ) ; raise __e
                                      end                                    ,Cell.new(
                                      begin
                                          trampCall(_filename)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1122"] + __e.backtrace ) ; raise __e
                                      end
                                             ))))
                                       )))
                      } ; ___lambda.call(
                            trampCall( self._assv_MIMARKref_METHOD(  'assv-ref',
                                begin
                                  if @global_lisp_binding.has_key?('_assv_MIMARKref') then
                                    trampCall(@_assv_MIMARKref)
                                  else raise NameError.new( "Error: undefined variable _assv_MIMARKref", "_assv_MIMARKref" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1117"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      trampCall(_filename)
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1122"] + __e.backtrace ) ; raise __e
                                  end                                ,Cell.new(
                                  begin
                                      trampCall(_compiled_MIMARKcode)
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1117"] + __e.backtrace ) ; raise __e
                                  end
                                         ))))                          ,
                            if ( 
                              trampCall( self._not_METHOD(  'not',
                                  begin
                                    if @global_lisp_binding.has_key?('_not') then
                                      trampCall(@_not)
                                    else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1028"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                        begin
                                          if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                            trampCall(@_eq_QUMARK)
                                          else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1074"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                        false                                        ,Cell.new(
                                          trampCall( self._global_MIMARKdefined_QUMARK_METHOD(  'global-defined?',
                                              begin
                                                if @global_lisp_binding.has_key?('_global_MIMARKdefined_QUMARK') then
                                                  trampCall(@_global_MIMARKdefined_QUMARK)
                                                else raise NameError.new( "Error: undefined variable _global_MIMARKdefined_QUMARK", "_global_MIMARKdefined_QUMARK" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1118"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                              :"main"
                                                       )))
                                                 ))))
                                           )))
                             ) then
                                delayCall( 'procedure?',
                                    begin
                                      if @global_lisp_binding.has_key?('_procedure_QUMARK') then
                                        trampCall(@_procedure_QUMARK)
                                      else raise NameError.new( "Error: undefined variable _procedure_QUMARK", "_procedure_QUMARK" ) end
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1119"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    Cell.new(
                                      begin
                                        if @global_lisp_binding.has_key?('_main') then
                                          trampCall(@_main)
                                        else raise NameError.new( "Error: undefined variable _main", "_main" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1119"] + __e.backtrace ) ; raise __e
                                      end
                                             ))
                            else
                              false
                            end
                                 )
                    end
                } ; ___lambda.call(
                nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._print_MIMARKcompiled_MIMARKcode_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_print_MIMARKcompiled_MIMARKcode'] = self.method( :_print_MIMARKcompiled_MIMARKcode_METHOD )
    @_print_MIMARKcompiled_MIMARKcode = 
    trampCall(
          Proc.new { |_src,*__rest__| _rest = __rest__[0] ;  
              begin
                ___lambda = lambda { |_print_MIMARKto_MIMARKfile| 
                    _print_MIMARKto_MIMARKfile                     = 
                      Proc.new { |_f| 
                          delayCall( 'call-with-values',
                              begin
                                if @global_lisp_binding.has_key?('_call_MIMARKwith_MIMARKvalues') then
                                  trampCall(@_call_MIMARKwith_MIMARKvalues)
                                else raise NameError.new( "Error: undefined variable _call_MIMARKwith_MIMARKvalues", "_call_MIMARKwith_MIMARKvalues" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:708"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                Proc.new { || 
                                    trampCall( self._compiled_MIMARKcode_MIMARKstring_METHOD(  'compiled-code-string',
                                        begin
                                          if @global_lisp_binding.has_key?('_compiled_MIMARKcode_MIMARKstring') then
                                            trampCall(@_compiled_MIMARKcode_MIMARKstring)
                                          else raise NameError.new( "Error: undefined variable _compiled_MIMARKcode_MIMARKstring", "_compiled_MIMARKcode_MIMARKstring" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1128"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          trampCall( self._get_MIMARKcompiled_MIMARKcode_METHOD(  'get-compiled-code',
                                              begin
                                                if @global_lisp_binding.has_key?('_get_MIMARKcompiled_MIMARKcode') then
                                                  trampCall(@_get_MIMARKcompiled_MIMARKcode)
                                                else raise NameError.new( "Error: undefined variable _get_MIMARKcompiled_MIMARKcode", "_get_MIMARKcompiled_MIMARKcode" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1128"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                            Cell.new(
                                                       )))                                        ,Cell.new(
                                          begin
                                              trampCall(_src)
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1164"] + __e.backtrace ) ; raise __e
                                          end
                                                 ))))
                                }                              ,Cell.new(
                                Proc.new { |_script_MIMARKflag,_str| 
                                    if ( 
                                      begin
                                          trampCall(_script_MIMARKflag)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1129"] + __e.backtrace ) ; raise __e
                                      end
                                     ) then
                                        begin
                                            begin
                                                trampCall(_f).puts(
                                                      trampCall( self._string_MIMARKjoin_METHOD(  'string-join',
                                                          begin
                                                            if @global_lisp_binding.has_key?('_string_MIMARKjoin') then
                                                              trampCall(@_string_MIMARKjoin)
                                                            else raise NameError.new( "Error: undefined variable _string_MIMARKjoin", "_string_MIMARKjoin" ) end
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1150"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            trampCall( self._cons_METHOD(  'cons',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_cons') then
                                                                    trampCall(@_cons)
                                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                "#!/usr/local/bin/ruby"                                                                ,Cell.new(
                                                                  trampCall( self._cons_METHOD(  'cons',
                                                                      begin
                                                                        if @global_lisp_binding.has_key?('_cons') then
                                                                          trampCall(@_cons)
                                                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                      Cell.new(
                                                                      "# -*- encoding: utf-8 -*-"                                                                      ,Cell.new(
                                                                        trampCall( self._cons_METHOD(  'cons',
                                                                            begin
                                                                              if @global_lisp_binding.has_key?('_cons') then
                                                                                trampCall(@_cons)
                                                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                            Cell.new(
                                                                            "#"                                                                            ,Cell.new(
                                                                              trampCall( self._cons_METHOD(  'cons',
                                                                                  begin
                                                                                    if @global_lisp_binding.has_key?('_cons') then
                                                                                      trampCall(@_cons)
                                                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                                                                  end                                                                                ,
                                                                                  Cell.new(
                                                                                  "#    This file is nendo's compiled script file. "                                                                                  ,Cell.new(
                                                                                    trampCall( self._cons_METHOD(  'cons',
                                                                                        begin
                                                                                          if @global_lisp_binding.has_key?('_cons') then
                                                                                            trampCall(@_cons)
                                                                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                                                                        end                                                                                      ,
                                                                                        Cell.new(
                                                                                        "#    generated  \"nendo -c src\" command. "                                                                                        ,Cell.new(
                                                                                          trampCall( self._cons_METHOD(  'cons',
                                                                                              begin
                                                                                                if @global_lisp_binding.has_key?('_cons') then
                                                                                                  trampCall(@_cons)
                                                                                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                                                                              end                                                                                            ,
                                                                                              Cell.new(
                                                                                              "#"                                                                                              ,Cell.new(
                                                                                                trampCall( self._cons_METHOD(  'cons',
                                                                                                    begin
                                                                                                      if @global_lisp_binding.has_key?('_cons') then
                                                                                                        trampCall(@_cons)
                                                                                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                                                                                    end                                                                                                  ,
                                                                                                    Cell.new(
                                                                                                    ""                                                                                                    ,Cell.new(
                                                                                                      trampCall( self._cons_METHOD(  'cons',
                                                                                                          begin
                                                                                                            if @global_lisp_binding.has_key?('_cons') then
                                                                                                              trampCall(@_cons)
                                                                                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                                                                                          end                                                                                                        ,
                                                                                                          Cell.new(
                                                                                                          "require 'rubygems'"                                                                                                          ,Cell.new(
                                                                                                            trampCall( self._cons_METHOD(  'cons',
                                                                                                                begin
                                                                                                                  if @global_lisp_binding.has_key?('_cons') then
                                                                                                                    trampCall(@_cons)
                                                                                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                                                                                                end                                                                                                              ,
                                                                                                                Cell.new(
                                                                                                                "require 'nendo'"                                                                                                                ,Cell.new(
                                                                                                                  trampCall( self._cons_METHOD(  'cons',
                                                                                                                      begin
                                                                                                                        if @global_lisp_binding.has_key?('_cons') then
                                                                                                                          trampCall(@_cons)
                                                                                                                        else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                                                                                                      end                                                                                                                    ,
                                                                                                                      Cell.new(
                                                                                                                      ""                                                                                                                      ,Cell.new(
                                                                                                                        trampCall( self._cons_METHOD(  'cons',
                                                                                                                            begin
                                                                                                                              if @global_lisp_binding.has_key?('_cons') then
                                                                                                                                trampCall(@_cons)
                                                                                                                              else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                                                                                                            end                                                                                                                          ,
                                                                                                                            Cell.new(
                                                                                                                            "core = Nendo::Core.new()"                                                                                                                            ,Cell.new(
                                                                                                                              trampCall( self._cons_METHOD(  'cons',
                                                                                                                                  begin
                                                                                                                                    if @global_lisp_binding.has_key?('_cons') then
                                                                                                                                      trampCall(@_cons)
                                                                                                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                                                                                                                  end                                                                                                                                ,
                                                                                                                                  Cell.new(
                                                                                                                                  "core.loadInitFile()"                                                                                                                                  ,Cell.new(
                                                                                                                                    trampCall( self._cons_METHOD(  'cons',
                                                                                                                                        begin
                                                                                                                                          if @global_lisp_binding.has_key?('_cons') then
                                                                                                                                            trampCall(@_cons)
                                                                                                                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                                                                                                                        end                                                                                                                                      ,
                                                                                                                                        Cell.new(
                                                                                                                                        "core.setArgv( ARGV )"                                                                                                                                        ,Cell.new(
                                                                                                                                          trampCall( self._cons_METHOD(  'cons',
                                                                                                                                              begin
                                                                                                                                                if @global_lisp_binding.has_key?('_cons') then
                                                                                                                                                  trampCall(@_cons)
                                                                                                                                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                                                                                                                              end                                                                                                                                            ,
                                                                                                                                              Cell.new(
                                                                                                                                              "core.load_compiled_code_from_string( "                                                                                                                                              ,Cell.new(
                                                                                                                                                trampCall( self._cons_METHOD(  'cons',
                                                                                                                                                    begin
                                                                                                                                                      if @global_lisp_binding.has_key?('_cons') then
                                                                                                                                                        trampCall(@_cons)
                                                                                                                                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:929"] + __e.backtrace ) ; raise __e
                                                                                                                                                    end                                                                                                                                                  ,
                                                                                                                                                    Cell.new(
                                                                                                                                                      trampCall( self._write_MIMARKto_MIMARKstring_METHOD(  'write-to-string',
                                                                                                                                                          begin
                                                                                                                                                            if @global_lisp_binding.has_key?('_write_MIMARKto_MIMARKstring') then
                                                                                                                                                              trampCall(@_write_MIMARKto_MIMARKstring)
                                                                                                                                                            else raise NameError.new( "Error: undefined variable _write_MIMARKto_MIMARKstring", "_write_MIMARKto_MIMARKstring" ) end
                                                                                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1145"] + __e.backtrace ) ; raise __e
                                                                                                                                                          end                                                                                                                                                        ,
                                                                                                                                                          Cell.new(
                                                                                                                                                            begin
                                                                                                                                                                trampCall(_str)
                                                                                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1158"] + __e.backtrace ) ; raise __e
                                                                                                                                                            end
                                                                                                                                                                   )))                                                                                                                                                    ,Cell.new(
                                                                                                                                                    Cell.new(" ) ",Cell.new("core.evalStr( \"(if (and (global-defined? 'main) (procedure? main)) (main *argv*) #f) \" )",Cell.new("")))
                                                                                                                                                             ))))
                                                                                                                                                       ))))
                                                                                                                                                 ))))
                                                                                                                                           ))))
                                                                                                                                     ))))
                                                                                                                               ))))
                                                                                                                         ))))
                                                                                                                   ))))
                                                                                                             ))))
                                                                                                       ))))
                                                                                                 ))))
                                                                                           ))))
                                                                                     ))))
                                                                               ))))
                                                                         ))))                                                          ,Cell.new(
                                                          "
"
                                                                   ))))
                                                  )
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1150"] + __e.backtrace ) ; raise __e
                                            end
                                        end
                                    else
                                        if ( 
                                        true
                                         ) then
                                            begin
                                                begin
                                                    trampCall(_f).puts(
                                                          trampCall( self.__PLMARK_METHOD(  '+',
                                                              begin
                                                                if @global_lisp_binding.has_key?('__PLMARK') then
                                                                  trampCall(@__PLMARK)
                                                                else raise NameError.new( "Error: undefined variable __PLMARK", "__PLMARK" ) end
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1150"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                                trampCall( self._string_MIMARKjoin_METHOD(  'string-join',
                                                                    begin
                                                                      if @global_lisp_binding.has_key?('_string_MIMARKjoin') then
                                                                        trampCall(@_string_MIMARKjoin)
                                                                      else raise NameError.new( "Error: undefined variable _string_MIMARKjoin", "_string_MIMARKjoin" ) end
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1150"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                    Cell.new(
                                                                    Cell.new("#",Cell.new("#    This file is nendo's compiled library file. ",Cell.new("#    generated  \"nendo -c src\" command. ",Cell.new("# "))))                                                                    ,Cell.new(
                                                                    "
"
                                                                             ))))                                                              ,Cell.new(
                                                              "
"                                                              ,Cell.new(
                                                                begin
                                                                    trampCall(_str)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1158"] + __e.backtrace ) ; raise __e
                                                                end
                                                                       )))))
                                                      )
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1150"] + __e.backtrace ) ; raise __e
                                                end
                                            end
                                        else
                                            Cell.new()
                                        end
                                    end
                                }
                                       )))
                      }
                    if ( 
                      trampCall( self._not_METHOD(  'not',
                          begin
                            if @global_lisp_binding.has_key?('_not') then
                              trampCall(@_not)
                            else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1160"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                trampCall(File).exist?(
                                      begin
                                          trampCall(_src)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1164"] + __e.backtrace ) ; raise __e
                                      end
                                  )
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1160"] + __e.backtrace ) ; raise __e
                            end
                                   )))
                     ) then
                        begin
                            begin raise RuntimeError, 
                              trampCall( self._sprintf_METHOD(  'sprintf',
                                  begin
                                    if @global_lisp_binding.has_key?('_sprintf') then
                                      trampCall(@_sprintf)
                                    else raise NameError.new( "Error: undefined variable _sprintf", "_sprintf" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1099"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                  "Error: file [%s] not found."                                  ,Cell.new(
                                    begin
                                        trampCall(_src)
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1164"] + __e.backtrace ) ; raise __e
                                    end
                                           ))))
                            rescue => __e 
                              __e.set_backtrace( ["./lib/init.nnd:1029"] + __e.backtrace )
                              raise __e
                            end 
                            trampCall( self._exit_METHOD(  'exit',
                                begin
                                  if @global_lisp_binding.has_key?('_exit') then
                                    trampCall(@_exit)
                                  else raise NameError.new( "Error: undefined variable _exit", "_exit" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1162"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                1
                                         )))
                        end
                    end
                    trampCall( self._clean_MIMARKcompiled_MIMARKcode_METHOD(  'clean-compiled-code',
                        begin
                          if @global_lisp_binding.has_key?('_clean_MIMARKcompiled_MIMARKcode') then
                            trampCall(@_clean_MIMARKcompiled_MIMARKcode)
                          else raise NameError.new( "Error: undefined variable _clean_MIMARKcompiled_MIMARKcode", "_clean_MIMARKcompiled_MIMARKcode" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1163"] + __e.backtrace ) ; raise __e
                        end                      ,
                      Cell.new(
                                 )))
                    trampCall( self._load_METHOD(  'load',
                        begin
                          if @global_lisp_binding.has_key?('_load') then
                            trampCall(@_load)
                          else raise NameError.new( "Error: undefined variable _load", "_load" ) end
                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1164"] + __e.backtrace ) ; raise __e
                        end                      ,
                        Cell.new(
                          begin
                              trampCall(_src)
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1164"] + __e.backtrace ) ; raise __e
                          end
                                 )))
                    if ( 
                      trampCall( self._null_QUMARK_METHOD(  'null?',
                          begin
                            if @global_lisp_binding.has_key?('_null_QUMARK') then
                              trampCall(@_null_QUMARK)
                            else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1165"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            begin
                                trampCall(_rest)
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1167"] + __e.backtrace ) ; raise __e
                            end
                                   )))
                     ) then
                        delayCall( 'print-to-file',
                            begin
                                trampCall(_print_MIMARKto_MIMARKfile)
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1169"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              begin
                                  trampCall(STDOUT)
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1166"] + __e.backtrace ) ; raise __e
                              end
                                     ))
                    else
                        delayCall( 'with-open',
                            begin
                              if @global_lisp_binding.has_key?('_with_MIMARKopen') then
                                trampCall(@_with_MIMARKopen)
                              else raise NameError.new( "Error: undefined variable _with_MIMARKopen", "_with_MIMARKopen" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1167"] + __e.backtrace ) ; raise __e
                            end                          ,
                            Cell.new(
                              trampCall( self._car_METHOD(  'car',
                                  begin
                                    if @global_lisp_binding.has_key?('_car') then
                                      trampCall(@_car)
                                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1167"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        trampCall(_rest)
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1167"] + __e.backtrace ) ; raise __e
                                    end
                                           )))                            ,Cell.new(
                              Proc.new { |_f| 
                                  trampCall( callProcedure(   'print-to-file',
                                      begin
                                          trampCall(_print_MIMARKto_MIMARKfile)
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1169"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        begin
                                            trampCall(_f)
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1169"] + __e.backtrace ) ; raise __e
                                        end
                                               )))
                              }                            ,Cell.new(
                            "w"
                                     ))))
                    end
                } ; ___lambda.call(
                nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self.__PAMARKcompile_MIMARKphase_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['__PAMARKcompile_MIMARKphase'] = self.method( :__PAMARKcompile_MIMARKphase_METHOD )
    @__PAMARKcompile_MIMARKphase = 
    trampCall(
          Proc.new { |_sexp| 
              if ( 
                trampCall( self._list_QUMARK_METHOD(  'list?',
                    begin
                      if @global_lisp_binding.has_key?('_list_QUMARK') then
                        trampCall(@_list_QUMARK)
                      else raise NameError.new( "Error: undefined variable _list_QUMARK", "_list_QUMARK" ) end
                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1184"] + __e.backtrace ) ; raise __e
                    end                  ,
                    Cell.new(
                      begin
                          trampCall(_sexp)
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1191"] + __e.backtrace ) ; raise __e
                      end
                             )))
               ) then
                  begin
                      trampCall( self._for_MIMARKeach_METHOD(  'for-each',
                          begin
                            if @global_lisp_binding.has_key?('_for_MIMARKeach') then
                              trampCall(@_for_MIMARKeach)
                            else raise NameError.new( "Error: undefined variable _for_MIMARKeach", "_for_MIMARKeach" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1185"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            Proc.new { |_func| 
                                begin
                                  
                                  _sexp = 
                                  trampCall(
                                        trampCall( callProcedure(   'func',
                                            begin
                                                trampCall(_func)
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1187"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              begin
                                                  trampCall(_sexp)
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1191"] + __e.backtrace ) ; raise __e
                                              end
                                                     )))
                                  )
                                end
                            }                          ,Cell.new(
                            begin
                              if @global_lisp_binding.has_key?('__PAMARKcompile_MIMARKphase_MIMARKfunctions') then
                                trampCall(@__PAMARKcompile_MIMARKphase_MIMARKfunctions)
                              else raise NameError.new( "Error: undefined variable __PAMARKcompile_MIMARKphase_MIMARKfunctions", "__PAMARKcompile_MIMARKphase_MIMARKfunctions" ) end
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1188"] + __e.backtrace ) ; raise __e
                            end
                                   ))))
                      begin
                          trampCall(_sexp)
                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1191"] + __e.backtrace ) ; raise __e
                      end
                  end
              else
                  if ( 
                  true
                   ) then
                      begin
                          begin
                              trampCall(_sexp)
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1191"] + __e.backtrace ) ; raise __e
                          end
                      end
                  else
                      Cell.new()
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._setup_MIMARKtailcall_MIMARKmark_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_setup_MIMARKtailcall_MIMARKmark'] = self.method( :_setup_MIMARKtailcall_MIMARKmark_METHOD )
    @_setup_MIMARKtailcall_MIMARKmark = 
    trampCall(
          Proc.new { |_sexp| 
              begin
                ___lambda = lambda { |_reserved_QUMARK,_setup_MIMARKlet_MIMARKargs,_setup_MIMARKproc,_setup_MIMARKproc_MIMARKbody| 
                    _reserved_QUMARK                     = 
                      Proc.new { |_sym| 
                          delayCall( 'memq',
                              begin
                                if @global_lisp_binding.has_key?('_memq') then
                                  trampCall(@_memq)
                                else raise NameError.new( "Error: undefined variable _memq", "_memq" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1199"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    trampCall(_sym)
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1199"] + __e.backtrace ) ; raise __e
                                end                              ,Cell.new(
                              Cell.new(:"quote",Cell.new(:"macro",Cell.new(:"begin",Cell.new(:"lambda",Cell.new(:"if",Cell.new(:"let",Cell.new(:"letrec",Cell.new(:"define"))))))))
                                       )))
                      }
                    _setup_MIMARKlet_MIMARKargs                     = 
                      Proc.new { |_args| 
                          delayCall( 'map',
                              begin
                                if @global_lisp_binding.has_key?('_map') then
                                  trampCall(@_map)
                                else raise NameError.new( "Error: undefined variable _map", "_map" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1202"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                Proc.new { |_arg| 
                                    begin
                                      ___lambda = lambda { |_name,_body| 
                                          trampCall( self._list_METHOD(  'list',
                                              begin
                                                if @global_lisp_binding.has_key?('_list') then
                                                  trampCall(@_list)
                                                else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1206"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                begin
                                                    trampCall(_name)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1206"] + __e.backtrace ) ; raise __e
                                                end                                              ,Cell.new(
                                                if ( 
                                                  trampCall( self._list_QUMARK_METHOD(  'list?',
                                                      begin
                                                        if @global_lisp_binding.has_key?('_list_QUMARK') then
                                                          trampCall(@_list_QUMARK)
                                                        else raise NameError.new( "Error: undefined variable _list_QUMARK", "_list_QUMARK" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1287"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        begin
                                                            trampCall(_body)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1211"] + __e.backtrace ) ; raise __e
                                                        end
                                                               )))
                                                 ) then
                                                    if ( 
                                                      trampCall( callProcedure(   'reserved?',
                                                          begin
                                                              trampCall(_reserved_QUMARK)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1289"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          Cell.new(
                                                            trampCall( self._car_METHOD(  'car',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_car') then
                                                                    trampCall(@_car)
                                                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1293"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                  begin
                                                                      trampCall(_body)
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1211"] + __e.backtrace ) ; raise __e
                                                                  end
                                                                         )))
                                                                   )))
                                                     ) then
                                                        trampCall( self._setup_MIMARKtailcall_MIMARKmark_METHOD(  'setup-tailcall-mark',
                                                            begin
                                                              if @global_lisp_binding.has_key?('_setup_MIMARKtailcall_MIMARKmark') then
                                                                trampCall(@_setup_MIMARKtailcall_MIMARKmark)
                                                              else raise NameError.new( "Error: undefined variable _setup_MIMARKtailcall_MIMARKmark", "_setup_MIMARKtailcall_MIMARKmark" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1290"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              begin
                                                                  trampCall(_body)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1211"] + __e.backtrace ) ; raise __e
                                                              end
                                                                     )))
                                                    else
                                                        begin
                                                            trampCall(_body)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1211"] + __e.backtrace ) ; raise __e
                                                        end
                                                    end
                                                else
                                                    begin
                                                        trampCall(_body)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1211"] + __e.backtrace ) ; raise __e
                                                    end
                                                end
                                                       ))))
                                      } ; ___lambda.call(
                                            trampCall( self._first_METHOD(  'first',
                                                begin
                                                  if @global_lisp_binding.has_key?('_first') then
                                                    trampCall(@_first)
                                                  else raise NameError.new( "Error: undefined variable _first", "_first" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1204"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  begin
                                                      trampCall(_arg)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1205"] + __e.backtrace ) ; raise __e
                                                  end
                                                         )))                                          ,
                                            trampCall( self._second_METHOD(  'second',
                                                begin
                                                  if @global_lisp_binding.has_key?('_second') then
                                                    trampCall(@_second)
                                                  else raise NameError.new( "Error: undefined variable _second", "_second" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1286"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  begin
                                                      trampCall(_arg)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1205"] + __e.backtrace ) ; raise __e
                                                  end
                                                         )))
                                                 )
                                    end
                                }                              ,Cell.new(
                                begin
                                    trampCall(_args)
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1212"] + __e.backtrace ) ; raise __e
                                end
                                       )))
                      }
                    _setup_MIMARKproc                     = 
                      Proc.new { |_sexp| 
                          if ( 
                            trampCall( self._null_QUMARK_METHOD(  'null?',
                                begin
                                  if @global_lisp_binding.has_key?('_null_QUMARK') then
                                    trampCall(@_null_QUMARK)
                                  else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1288"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      trampCall(_sexp)
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1297"] + __e.backtrace ) ; raise __e
                                  end
                                         )))
                           ) then
                              begin
                                  begin
                                      trampCall(_sexp)
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1297"] + __e.backtrace ) ; raise __e
                                  end
                              end
                          else
                              if ( 
                                if ( 
                                  trampCall( self._not_METHOD(  'not',
                                      begin
                                        if @global_lisp_binding.has_key?('_not') then
                                          trampCall(@_not)
                                        else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1288"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      Cell.new(
                                        trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                            begin
                                              if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                trampCall(@_eq_QUMARK)
                                              else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1074"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                            false                                            ,Cell.new(
                                              trampCall( self._list_QUMARK_METHOD(  'list?',
                                                  begin
                                                    if @global_lisp_binding.has_key?('_list_QUMARK') then
                                                      trampCall(@_list_QUMARK)
                                                    else raise NameError.new( "Error: undefined variable _list_QUMARK", "_list_QUMARK" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1287"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    begin
                                                        trampCall(_sexp)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1297"] + __e.backtrace ) ; raise __e
                                                    end
                                                           )))
                                                     ))))
                                               )))
                                 ) then
                                    trampCall( self.__LTMARK_METHOD(  '<',
                                        begin
                                          if @global_lisp_binding.has_key?('__LTMARK') then
                                            trampCall(@__LTMARK)
                                          else raise NameError.new( "Error: undefined variable __LTMARK", "__LTMARK" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1219"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                        0                                        ,Cell.new(
                                          trampCall( self._length_METHOD(  'length',
                                              begin
                                                if @global_lisp_binding.has_key?('_length') then
                                                  trampCall(@_length)
                                                else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1265"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                begin
                                                    trampCall(_sexp)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1297"] + __e.backtrace ) ; raise __e
                                                end
                                                       )))
                                                 ))))
                                else
                                  false
                                end
                               ) then
                                  begin
                                      if ( 
                                        trampCall( callProcedure(   'reserved?',
                                            begin
                                                trampCall(_reserved_QUMARK)
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1289"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            Cell.new(
                                              trampCall( self._car_METHOD(  'car',
                                                  begin
                                                    if @global_lisp_binding.has_key?('_car') then
                                                      trampCall(@_car)
                                                    else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1293"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    begin
                                                        trampCall(_sexp)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1297"] + __e.backtrace ) ; raise __e
                                                    end
                                                           )))
                                                     )))
                                       ) then
                                          delayCall( 'setup-tailcall-mark',
                                              begin
                                                if @global_lisp_binding.has_key?('_setup_MIMARKtailcall_MIMARKmark') then
                                                  trampCall(@_setup_MIMARKtailcall_MIMARKmark)
                                                else raise NameError.new( "Error: undefined variable _setup_MIMARKtailcall_MIMARKmark", "_setup_MIMARKtailcall_MIMARKmark" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1290"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                begin
                                                    trampCall(_sexp)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1297"] + __e.backtrace ) ; raise __e
                                                end
                                                       ))
                                      else
                                          if ( 
                                            trampCall( self._pair_QUMARK_METHOD(  'pair?',
                                                begin
                                                  if @global_lisp_binding.has_key?('_pair_QUMARK') then
                                                    trampCall(@_pair_QUMARK)
                                                  else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1247"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  trampCall( self._car_METHOD(  'car',
                                                      begin
                                                        if @global_lisp_binding.has_key?('_car') then
                                                          trampCall(@_car)
                                                        else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1293"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        begin
                                                            trampCall(_sexp)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1297"] + __e.backtrace ) ; raise __e
                                                        end
                                                               )))
                                                         )))
                                           ) then
                                              begin
                                                  trampCall(_sexp)
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1297"] + __e.backtrace ) ; raise __e
                                              end
                                          else
                                              delayCall( 'cons',
                                                  begin
                                                    if @global_lisp_binding.has_key?('_cons') then
                                                      trampCall(@_cons)
                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1238"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                  :"%tailcall"                                                  ,Cell.new(
                                                    trampCall( self._cons_METHOD(  'cons',
                                                        begin
                                                          if @global_lisp_binding.has_key?('_cons') then
                                                            trampCall(@_cons)
                                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1238"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                          begin
                                                              trampCall(_sexp)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1297"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,Cell.new(
                                                        
                                                                 ))))
                                                           )))
                                          end
                                      end
                                  end
                              else
                                  if ( 
                                  true
                                   ) then
                                      begin
                                          begin
                                              trampCall(_sexp)
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1297"] + __e.backtrace ) ; raise __e
                                          end
                                      end
                                  else
                                      Cell.new()
                                  end
                              end
                          end
                      }
                    _setup_MIMARKproc_MIMARKbody                     = 
                      Proc.new { |_sexp| 
                          if ( 
                            begin
                              ___lambda = lambda { |___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20220| 
                                  if ( 
                                    begin
                                        trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20220)
                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                    end
                                   ) then
                                      begin
                                          trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20220)
                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                      end
                                  else
                                      begin
                                        ___lambda = lambda { |___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20221| 
                                            if ( 
                                              begin
                                                  trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20221)
                                                rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                              end
                                             ) then
                                                begin
                                                    trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20221)
                                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                end
                                            else
                                              false
                                            end
                                        } ; ___lambda.call(
                                              trampCall( self._null_QUMARK_METHOD(  'null?',
                                                  begin
                                                    if @global_lisp_binding.has_key?('_null_QUMARK') then
                                                      trampCall(@_null_QUMARK)
                                                    else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1288"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                                  Cell.new(
                                                    begin
                                                        trampCall(_sexp)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1297"] + __e.backtrace ) ; raise __e
                                                    end
                                                           )))
                                                   )
                                      end
                                  end
                              } ; ___lambda.call(
                                    trampCall( self._not_METHOD(  'not',
                                        begin
                                          if @global_lisp_binding.has_key?('_not') then
                                            trampCall(@_not)
                                          else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1288"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                        Cell.new(
                                          trampCall( self._list_QUMARK_METHOD(  'list?',
                                              begin
                                                if @global_lisp_binding.has_key?('_list_QUMARK') then
                                                  trampCall(@_list_QUMARK)
                                                else raise NameError.new( "Error: undefined variable _list_QUMARK", "_list_QUMARK" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1287"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              Cell.new(
                                                begin
                                                    trampCall(_sexp)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1297"] + __e.backtrace ) ; raise __e
                                                end
                                                       )))
                                                 )))
                                         )
                            end
                           ) then
                              begin
                                  trampCall(_sexp)
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1297"] + __e.backtrace ) ; raise __e
                              end
                          else
                              begin
                                ___lambda = lambda { |_r| 
                                    begin
                                      ___lambda = lambda { |_last| 
                                          begin
                                            ___lambda = lambda { |_other| 
                                                if ( 
                                                  trampCall( self._not_METHOD(  'not',
                                                      begin
                                                        if @global_lisp_binding.has_key?('_not') then
                                                          trampCall(@_not)
                                                        else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1288"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        trampCall( self._pair_QUMARK_METHOD(  'pair?',
                                                            begin
                                                              if @global_lisp_binding.has_key?('_pair_QUMARK') then
                                                                trampCall(@_pair_QUMARK)
                                                              else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1247"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                              begin
                                                                  trampCall(_last)
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1243"] + __e.backtrace ) ; raise __e
                                                              end
                                                                     )))
                                                               )))
                                                 ) then
                                                    begin
                                                        trampCall(_sexp)
                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1297"] + __e.backtrace ) ; raise __e
                                                    end
                                                else
                                                    delayCall( 'reverse',
                                                        begin
                                                          if @global_lisp_binding.has_key?('_reverse') then
                                                            trampCall(@_reverse)
                                                          else raise NameError.new( "Error: undefined variable _reverse", "_reverse" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1237"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                          trampCall( self._cons_METHOD(  'cons',
                                                              begin
                                                                if @global_lisp_binding.has_key?('_cons') then
                                                                  trampCall(@_cons)
                                                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1238"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                                if ( 
                                                                  trampCall( callProcedure(   'reserved?',
                                                                      begin
                                                                          trampCall(_reserved_QUMARK)
                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1289"] + __e.backtrace ) ; raise __e
                                                                      end                                                                    ,
                                                                      Cell.new(
                                                                        trampCall( self._car_METHOD(  'car',
                                                                            begin
                                                                              if @global_lisp_binding.has_key?('_car') then
                                                                                trampCall(@_car)
                                                                              else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1293"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                            Cell.new(
                                                                              begin
                                                                                  trampCall(_last)
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1243"] + __e.backtrace ) ; raise __e
                                                                              end
                                                                                     )))
                                                                               )))
                                                                 ) then
                                                                    trampCall( self._setup_MIMARKtailcall_MIMARKmark_METHOD(  'setup-tailcall-mark',
                                                                        begin
                                                                          if @global_lisp_binding.has_key?('_setup_MIMARKtailcall_MIMARKmark') then
                                                                            trampCall(@_setup_MIMARKtailcall_MIMARKmark)
                                                                          else raise NameError.new( "Error: undefined variable _setup_MIMARKtailcall_MIMARKmark", "_setup_MIMARKtailcall_MIMARKmark" ) end
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1290"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                        Cell.new(
                                                                          begin
                                                                              trampCall(_last)
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1243"] + __e.backtrace ) ; raise __e
                                                                          end
                                                                                 )))
                                                                else
                                                                    trampCall( self._cons_METHOD(  'cons',
                                                                        begin
                                                                          if @global_lisp_binding.has_key?('_cons') then
                                                                            trampCall(@_cons)
                                                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1238"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                        Cell.new(
                                                                        :"%tailcall"                                                                        ,Cell.new(
                                                                          trampCall( self._cons_METHOD(  'cons',
                                                                              begin
                                                                                if @global_lisp_binding.has_key?('_cons') then
                                                                                  trampCall(@_cons)
                                                                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1238"] + __e.backtrace ) ; raise __e
                                                                              end                                                                            ,
                                                                              Cell.new(
                                                                                begin
                                                                                    trampCall(_last)
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1243"] + __e.backtrace ) ; raise __e
                                                                                end                                                                              ,Cell.new(
                                                                              
                                                                                       ))))
                                                                                 ))))
                                                                end                                                              ,Cell.new(
                                                                begin
                                                                    trampCall(_other)
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1244"] + __e.backtrace ) ; raise __e
                                                                end
                                                                       ))))
                                                                 ))
                                                end
                                            } ; ___lambda.call(
                                                  trampCall( self._cdr_METHOD(  'cdr',
                                                      begin
                                                        if @global_lisp_binding.has_key?('_cdr') then
                                                          trampCall(@_cdr)
                                                        else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1259"] + __e.backtrace ) ; raise __e
                                                      end                                                    ,
                                                      Cell.new(
                                                        begin
                                                            trampCall(_r)
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1234"] + __e.backtrace ) ; raise __e
                                                        end
                                                               )))
                                                       )
                                          end
                                      } ; ___lambda.call(
                                            trampCall( self._car_METHOD(  'car',
                                                begin
                                                  if @global_lisp_binding.has_key?('_car') then
                                                    trampCall(@_car)
                                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1293"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  begin
                                                      trampCall(_r)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1234"] + __e.backtrace ) ; raise __e
                                                  end
                                                         )))
                                                 )
                                    end
                                } ; ___lambda.call(
                                      trampCall( self._reverse_METHOD(  'reverse',
                                          begin
                                            if @global_lisp_binding.has_key?('_reverse') then
                                              trampCall(@_reverse)
                                            else raise NameError.new( "Error: undefined variable _reverse", "_reverse" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1237"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          Cell.new(
                                            begin
                                                trampCall(_sexp)
                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1297"] + __e.backtrace ) ; raise __e
                                            end
                                                   )))
                                           )
                              end
                          end
                      }
                    if ( 
                      trampCall( self._not_METHOD(  'not',
                          begin
                            if @global_lisp_binding.has_key?('_not') then
                              trampCall(@_not)
                            else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1288"] + __e.backtrace ) ; raise __e
                          end                        ,
                          Cell.new(
                            trampCall( self._pair_QUMARK_METHOD(  'pair?',
                                begin
                                  if @global_lisp_binding.has_key?('_pair_QUMARK') then
                                    trampCall(@_pair_QUMARK)
                                  else raise NameError.new( "Error: undefined variable _pair_QUMARK", "_pair_QUMARK" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1247"] + __e.backtrace ) ; raise __e
                                end                              ,
                                Cell.new(
                                  begin
                                      trampCall(_sexp)
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1297"] + __e.backtrace ) ; raise __e
                                  end
                                         )))
                                   )))
                     ) then
                        begin
                            begin
                                trampCall(_sexp)
                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1297"] + __e.backtrace ) ; raise __e
                            end
                        end
                    else
                        if ( 
                          trampCall( self._null_QUMARK_METHOD(  'null?',
                              begin
                                if @global_lisp_binding.has_key?('_null_QUMARK') then
                                  trampCall(@_null_QUMARK)
                                else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1288"] + __e.backtrace ) ; raise __e
                              end                            ,
                              Cell.new(
                                begin
                                    trampCall(_sexp)
                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1297"] + __e.backtrace ) ; raise __e
                                end
                                       )))
                         ) then
                            begin
                              Cell.new()
                            end
                        else
                            if ( 
                              trampCall( self._list_QUMARK_METHOD(  'list?',
                                  begin
                                    if @global_lisp_binding.has_key?('_list_QUMARK') then
                                      trampCall(@_list_QUMARK)
                                    else raise NameError.new( "Error: undefined variable _list_QUMARK", "_list_QUMARK" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1287"] + __e.backtrace ) ; raise __e
                                  end                                ,
                                  Cell.new(
                                    begin
                                        trampCall(_sexp)
                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1297"] + __e.backtrace ) ; raise __e
                                    end
                                           )))
                             ) then
                                begin
                                    begin
                                      ___lambda = lambda { |___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20222| 
                                          if ( 
                                            begin
                                              ___lambda = lambda { |___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20232| 
                                                  if ( 
                                                    begin
                                                        trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20232)
                                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                    end
                                                   ) then
                                                      begin
                                                          trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20232)
                                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                      end
                                                  else
                                                    false
                                                  end
                                              } ; ___lambda.call(
                                                    trampCall( self._eqv_QUMARK_METHOD(  'eqv?',
                                                        begin
                                                          if @global_lisp_binding.has_key?('_eqv_QUMARK') then
                                                            trampCall(@_eqv_QUMARK)
                                                          else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1091"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                        Cell.new(
                                                        :"quote"                                                        ,Cell.new(
                                                          begin
                                                              trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20222)
                                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                          end
                                                                 ))))
                                                         )
                                            end
                                           ) then
                                              begin
                                                  begin
                                                      trampCall(_sexp)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1297"] + __e.backtrace ) ; raise __e
                                                  end
                                              end
                                          else
                                              if ( 
                                                begin
                                                  ___lambda = lambda { |___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20233| 
                                                      if ( 
                                                        begin
                                                            trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20233)
                                                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                        end
                                                       ) then
                                                          begin
                                                              trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20233)
                                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                          end
                                                      else
                                                        false
                                                      end
                                                  } ; ___lambda.call(
                                                        trampCall( self._eqv_QUMARK_METHOD(  'eqv?',
                                                            begin
                                                              if @global_lisp_binding.has_key?('_eqv_QUMARK') then
                                                                trampCall(@_eqv_QUMARK)
                                                              else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1091"] + __e.backtrace ) ; raise __e
                                                            end                                                          ,
                                                            Cell.new(
                                                            :"macro"                                                            ,Cell.new(
                                                              begin
                                                                  trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20222)
                                                                rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                              end
                                                                     ))))
                                                             )
                                                end
                                               ) then
                                                  begin
                                                      begin
                                                          trampCall(_sexp)
                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1297"] + __e.backtrace ) ; raise __e
                                                      end
                                                  end
                                              else
                                                  if ( 
                                                    begin
                                                      ___lambda = lambda { |___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20234| 
                                                          if ( 
                                                            begin
                                                                trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20234)
                                                              rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                            end
                                                           ) then
                                                              begin
                                                                  trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20234)
                                                                rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                              end
                                                          else
                                                            false
                                                          end
                                                      } ; ___lambda.call(
                                                            trampCall( self._eqv_QUMARK_METHOD(  'eqv?',
                                                                begin
                                                                  if @global_lisp_binding.has_key?('_eqv_QUMARK') then
                                                                    trampCall(@_eqv_QUMARK)
                                                                  else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1091"] + __e.backtrace ) ; raise __e
                                                                end                                                              ,
                                                                Cell.new(
                                                                :"begin"                                                                ,Cell.new(
                                                                  begin
                                                                      trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20222)
                                                                    rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                  end
                                                                         ))))
                                                                 )
                                                    end
                                                   ) then
                                                      begin
                                                          delayCall( 'cons',
                                                              begin
                                                                if @global_lisp_binding.has_key?('_cons') then
                                                                  trampCall(@_cons)
                                                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1238"] + __e.backtrace ) ; raise __e
                                                              end                                                            ,
                                                              Cell.new(
                                                              :"begin"                                                              ,Cell.new(
                                                                trampCall( callProcedure(   'setup-proc-body',
                                                                    begin
                                                                        trampCall(_setup_MIMARKproc_MIMARKbody)
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1282"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                    Cell.new(
                                                                      trampCall( self._cdr_METHOD(  'cdr',
                                                                          begin
                                                                            if @global_lisp_binding.has_key?('_cdr') then
                                                                              trampCall(@_cdr)
                                                                            else raise NameError.new( "Error: undefined variable _cdr", "_cdr" ) end
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1259"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                          Cell.new(
                                                                            begin
                                                                                trampCall(_sexp)
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1297"] + __e.backtrace ) ; raise __e
                                                                            end
                                                                                   )))
                                                                             )))
                                                                       )))
                                                      end
                                                  else
                                                      if ( 
                                                        begin
                                                          ___lambda = lambda { |___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20235| 
                                                              if ( 
                                                                begin
                                                                    trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20235)
                                                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                end
                                                               ) then
                                                                  begin
                                                                      trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20235)
                                                                    rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                  end
                                                              else
                                                                false
                                                              end
                                                          } ; ___lambda.call(
                                                                trampCall( self._eqv_QUMARK_METHOD(  'eqv?',
                                                                    begin
                                                                      if @global_lisp_binding.has_key?('_eqv_QUMARK') then
                                                                        trampCall(@_eqv_QUMARK)
                                                                      else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1091"] + __e.backtrace ) ; raise __e
                                                                    end                                                                  ,
                                                                    Cell.new(
                                                                    :"lambda"                                                                    ,Cell.new(
                                                                      begin
                                                                          trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20222)
                                                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                      end
                                                                             ))))
                                                                     )
                                                        end
                                                       ) then
                                                          begin
                                                              delayCall( 'cons',
                                                                  begin
                                                                    if @global_lisp_binding.has_key?('_cons') then
                                                                      trampCall(@_cons)
                                                                    else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1238"] + __e.backtrace ) ; raise __e
                                                                  end                                                                ,
                                                                  Cell.new(
                                                                  :"lambda"                                                                  ,Cell.new(
                                                                    trampCall( self._cons_METHOD(  'cons',
                                                                        begin
                                                                          if @global_lisp_binding.has_key?('_cons') then
                                                                            trampCall(@_cons)
                                                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1238"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                        Cell.new(
                                                                          trampCall( self._second_METHOD(  'second',
                                                                              begin
                                                                                if @global_lisp_binding.has_key?('_second') then
                                                                                  trampCall(@_second)
                                                                                else raise NameError.new( "Error: undefined variable _second", "_second" ) end
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1286"] + __e.backtrace ) ; raise __e
                                                                              end                                                                            ,
                                                                              Cell.new(
                                                                                begin
                                                                                    trampCall(_sexp)
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1297"] + __e.backtrace ) ; raise __e
                                                                                end
                                                                                       )))                                                                        ,Cell.new(
                                                                          trampCall( callProcedure(   'setup-proc-body',
                                                                              begin
                                                                                  trampCall(_setup_MIMARKproc_MIMARKbody)
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1282"] + __e.backtrace ) ; raise __e
                                                                              end                                                                            ,
                                                                              Cell.new(
                                                                                trampCall( self._cddr_METHOD(  'cddr',
                                                                                    begin
                                                                                      if @global_lisp_binding.has_key?('_cddr') then
                                                                                        trampCall(@_cddr)
                                                                                      else raise NameError.new( "Error: undefined variable _cddr", "_cddr" ) end
                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1282"] + __e.backtrace ) ; raise __e
                                                                                    end                                                                                  ,
                                                                                    Cell.new(
                                                                                      begin
                                                                                          trampCall(_sexp)
                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1297"] + __e.backtrace ) ; raise __e
                                                                                      end
                                                                                             )))
                                                                                       )))
                                                                                 ))))
                                                                           )))
                                                          end
                                                      else
                                                          if ( 
                                                            begin
                                                              ___lambda = lambda { |___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20236| 
                                                                  if ( 
                                                                    begin
                                                                        trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20236)
                                                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                    end
                                                                   ) then
                                                                      begin
                                                                          trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20236)
                                                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                      end
                                                                  else
                                                                    false
                                                                  end
                                                              } ; ___lambda.call(
                                                                    trampCall( self._eqv_QUMARK_METHOD(  'eqv?',
                                                                        begin
                                                                          if @global_lisp_binding.has_key?('_eqv_QUMARK') then
                                                                            trampCall(@_eqv_QUMARK)
                                                                          else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1091"] + __e.backtrace ) ; raise __e
                                                                        end                                                                      ,
                                                                        Cell.new(
                                                                        :"if"                                                                        ,Cell.new(
                                                                          begin
                                                                              trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20222)
                                                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                          end
                                                                                 ))))
                                                                         )
                                                            end
                                                           ) then
                                                              begin
                                                                  begin
                                                                    ___lambda = lambda { |___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20237| 
                                                                        if ( 
                                                                          begin
                                                                            ___lambda = lambda { |___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20243| 
                                                                                if ( 
                                                                                  begin
                                                                                      trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20243)
                                                                                    rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                  end
                                                                                 ) then
                                                                                    begin
                                                                                        trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20243)
                                                                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                    end
                                                                                else
                                                                                  false
                                                                                end
                                                                            } ; ___lambda.call(
                                                                                  trampCall( self._eqv_QUMARK_METHOD(  'eqv?',
                                                                                      begin
                                                                                        if @global_lisp_binding.has_key?('_eqv_QUMARK') then
                                                                                          trampCall(@_eqv_QUMARK)
                                                                                        else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1091"] + __e.backtrace ) ; raise __e
                                                                                      end                                                                                    ,
                                                                                      Cell.new(
                                                                                      3                                                                                      ,Cell.new(
                                                                                        begin
                                                                                            trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20237)
                                                                                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                        end
                                                                                               ))))
                                                                                       )
                                                                          end
                                                                         ) then
                                                                            begin
                                                                                delayCall( 'cons',
                                                                                    begin
                                                                                      if @global_lisp_binding.has_key?('_cons') then
                                                                                        trampCall(@_cons)
                                                                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1238"] + __e.backtrace ) ; raise __e
                                                                                    end                                                                                  ,
                                                                                    Cell.new(
                                                                                    :"if"                                                                                    ,Cell.new(
                                                                                      trampCall( self._cons_METHOD(  'cons',
                                                                                          begin
                                                                                            if @global_lisp_binding.has_key?('_cons') then
                                                                                              trampCall(@_cons)
                                                                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1238"] + __e.backtrace ) ; raise __e
                                                                                          end                                                                                        ,
                                                                                          Cell.new(
                                                                                            trampCall( self._second_METHOD(  'second',
                                                                                                begin
                                                                                                  if @global_lisp_binding.has_key?('_second') then
                                                                                                    trampCall(@_second)
                                                                                                  else raise NameError.new( "Error: undefined variable _second", "_second" ) end
                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1286"] + __e.backtrace ) ; raise __e
                                                                                                end                                                                                              ,
                                                                                                Cell.new(
                                                                                                  begin
                                                                                                      trampCall(_sexp)
                                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1297"] + __e.backtrace ) ; raise __e
                                                                                                  end
                                                                                                         )))                                                                                          ,Cell.new(
                                                                                            trampCall( self._cons_METHOD(  'cons',
                                                                                                begin
                                                                                                  if @global_lisp_binding.has_key?('_cons') then
                                                                                                    trampCall(@_cons)
                                                                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1238"] + __e.backtrace ) ; raise __e
                                                                                                end                                                                                              ,
                                                                                                Cell.new(
                                                                                                  trampCall( callProcedure(   'setup-proc',
                                                                                                      begin
                                                                                                          trampCall(_setup_MIMARKproc)
                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1274"] + __e.backtrace ) ; raise __e
                                                                                                      end                                                                                                    ,
                                                                                                      Cell.new(
                                                                                                        trampCall( self._third_METHOD(  'third',
                                                                                                            begin
                                                                                                              if @global_lisp_binding.has_key?('_third') then
                                                                                                                trampCall(@_third)
                                                                                                              else raise NameError.new( "Error: undefined variable _third", "_third" ) end
                                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1284"] + __e.backtrace ) ; raise __e
                                                                                                            end                                                                                                          ,
                                                                                                            Cell.new(
                                                                                                              begin
                                                                                                                  trampCall(_sexp)
                                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1297"] + __e.backtrace ) ; raise __e
                                                                                                              end
                                                                                                                     )))
                                                                                                               )))                                                                                                ,Cell.new(
                                                                                                
                                                                                                         ))))
                                                                                                   ))))
                                                                                             )))
                                                                            end
                                                                        else
                                                                            if ( 
                                                                              begin
                                                                                ___lambda = lambda { |___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20244| 
                                                                                    if ( 
                                                                                      begin
                                                                                          trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20244)
                                                                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                      end
                                                                                     ) then
                                                                                        begin
                                                                                            trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20244)
                                                                                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                        end
                                                                                    else
                                                                                      false
                                                                                    end
                                                                                } ; ___lambda.call(
                                                                                      trampCall( self._eqv_QUMARK_METHOD(  'eqv?',
                                                                                          begin
                                                                                            if @global_lisp_binding.has_key?('_eqv_QUMARK') then
                                                                                              trampCall(@_eqv_QUMARK)
                                                                                            else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1091"] + __e.backtrace ) ; raise __e
                                                                                          end                                                                                        ,
                                                                                          Cell.new(
                                                                                          4                                                                                          ,Cell.new(
                                                                                            begin
                                                                                                trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20237)
                                                                                              rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                            end
                                                                                                   ))))
                                                                                           )
                                                                              end
                                                                             ) then
                                                                                begin
                                                                                    delayCall( 'cons',
                                                                                        begin
                                                                                          if @global_lisp_binding.has_key?('_cons') then
                                                                                            trampCall(@_cons)
                                                                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1238"] + __e.backtrace ) ; raise __e
                                                                                        end                                                                                      ,
                                                                                        Cell.new(
                                                                                        :"if"                                                                                        ,Cell.new(
                                                                                          trampCall( self._cons_METHOD(  'cons',
                                                                                              begin
                                                                                                if @global_lisp_binding.has_key?('_cons') then
                                                                                                  trampCall(@_cons)
                                                                                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1238"] + __e.backtrace ) ; raise __e
                                                                                              end                                                                                            ,
                                                                                              Cell.new(
                                                                                                trampCall( self._second_METHOD(  'second',
                                                                                                    begin
                                                                                                      if @global_lisp_binding.has_key?('_second') then
                                                                                                        trampCall(@_second)
                                                                                                      else raise NameError.new( "Error: undefined variable _second", "_second" ) end
                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1286"] + __e.backtrace ) ; raise __e
                                                                                                    end                                                                                                  ,
                                                                                                    Cell.new(
                                                                                                      begin
                                                                                                          trampCall(_sexp)
                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1297"] + __e.backtrace ) ; raise __e
                                                                                                      end
                                                                                                             )))                                                                                              ,Cell.new(
                                                                                                trampCall( self._cons_METHOD(  'cons',
                                                                                                    begin
                                                                                                      if @global_lisp_binding.has_key?('_cons') then
                                                                                                        trampCall(@_cons)
                                                                                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1238"] + __e.backtrace ) ; raise __e
                                                                                                    end                                                                                                  ,
                                                                                                    Cell.new(
                                                                                                      trampCall( callProcedure(   'setup-proc',
                                                                                                          begin
                                                                                                              trampCall(_setup_MIMARKproc)
                                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1274"] + __e.backtrace ) ; raise __e
                                                                                                          end                                                                                                        ,
                                                                                                          Cell.new(
                                                                                                            trampCall( self._third_METHOD(  'third',
                                                                                                                begin
                                                                                                                  if @global_lisp_binding.has_key?('_third') then
                                                                                                                    trampCall(@_third)
                                                                                                                  else raise NameError.new( "Error: undefined variable _third", "_third" ) end
                                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1284"] + __e.backtrace ) ; raise __e
                                                                                                                end                                                                                                              ,
                                                                                                                Cell.new(
                                                                                                                  begin
                                                                                                                      trampCall(_sexp)
                                                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1297"] + __e.backtrace ) ; raise __e
                                                                                                                  end
                                                                                                                         )))
                                                                                                                   )))                                                                                                    ,Cell.new(
                                                                                                      trampCall( self._cons_METHOD(  'cons',
                                                                                                          begin
                                                                                                            if @global_lisp_binding.has_key?('_cons') then
                                                                                                              trampCall(@_cons)
                                                                                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1238"] + __e.backtrace ) ; raise __e
                                                                                                          end                                                                                                        ,
                                                                                                          Cell.new(
                                                                                                            trampCall( callProcedure(   'setup-proc',
                                                                                                                begin
                                                                                                                    trampCall(_setup_MIMARKproc)
                                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1274"] + __e.backtrace ) ; raise __e
                                                                                                                end                                                                                                              ,
                                                                                                                Cell.new(
                                                                                                                  trampCall( self._fourth_METHOD(  'fourth',
                                                                                                                      begin
                                                                                                                        if @global_lisp_binding.has_key?('_fourth') then
                                                                                                                          trampCall(@_fourth)
                                                                                                                        else raise NameError.new( "Error: undefined variable _fourth", "_fourth" ) end
                                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1274"] + __e.backtrace ) ; raise __e
                                                                                                                      end                                                                                                                    ,
                                                                                                                      Cell.new(
                                                                                                                        begin
                                                                                                                            trampCall(_sexp)
                                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1297"] + __e.backtrace ) ; raise __e
                                                                                                                        end
                                                                                                                               )))
                                                                                                                         )))                                                                                                          ,Cell.new(
                                                                                                          
                                                                                                                   ))))
                                                                                                             ))))
                                                                                                       ))))
                                                                                                 )))
                                                                                end
                                                                            else
                                                                                Cell.new()
                                                                            end
                                                                        end
                                                                    } ; ___lambda.call(
                                                                          trampCall( self._length_METHOD(  'length',
                                                                              begin
                                                                                if @global_lisp_binding.has_key?('_length') then
                                                                                  trampCall(@_length)
                                                                                else raise NameError.new( "Error: undefined variable _length", "_length" ) end
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1265"] + __e.backtrace ) ; raise __e
                                                                              end                                                                            ,
                                                                              Cell.new(
                                                                                begin
                                                                                    trampCall(_sexp)
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1297"] + __e.backtrace ) ; raise __e
                                                                                end
                                                                                       )))
                                                                               )
                                                                  end
                                                              end
                                                          else
                                                              if ( 
                                                                begin
                                                                  ___lambda = lambda { |___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20238| 
                                                                      if ( 
                                                                        begin
                                                                            trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20238)
                                                                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                        end
                                                                       ) then
                                                                          begin
                                                                              trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20238)
                                                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                          end
                                                                      else
                                                                        false
                                                                      end
                                                                  } ; ___lambda.call(
                                                                        trampCall( self._eqv_QUMARK_METHOD(  'eqv?',
                                                                            begin
                                                                              if @global_lisp_binding.has_key?('_eqv_QUMARK') then
                                                                                trampCall(@_eqv_QUMARK)
                                                                              else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1091"] + __e.backtrace ) ; raise __e
                                                                            end                                                                          ,
                                                                            Cell.new(
                                                                            :"let"                                                                            ,Cell.new(
                                                                              begin
                                                                                  trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20222)
                                                                                rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                              end
                                                                                     ))))
                                                                             )
                                                                end
                                                               ) then
                                                                  begin
                                                                      delayCall( 'cons',
                                                                          begin
                                                                            if @global_lisp_binding.has_key?('_cons') then
                                                                              trampCall(@_cons)
                                                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1238"] + __e.backtrace ) ; raise __e
                                                                          end                                                                        ,
                                                                          Cell.new(
                                                                          :"let"                                                                          ,Cell.new(
                                                                            trampCall( self._cons_METHOD(  'cons',
                                                                                begin
                                                                                  if @global_lisp_binding.has_key?('_cons') then
                                                                                    trampCall(@_cons)
                                                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1238"] + __e.backtrace ) ; raise __e
                                                                                end                                                                              ,
                                                                                Cell.new(
                                                                                  trampCall( callProcedure(   'setup-let-args',
                                                                                      begin
                                                                                          trampCall(_setup_MIMARKlet_MIMARKargs)
                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1281"] + __e.backtrace ) ; raise __e
                                                                                      end                                                                                    ,
                                                                                      Cell.new(
                                                                                        trampCall( self._second_METHOD(  'second',
                                                                                            begin
                                                                                              if @global_lisp_binding.has_key?('_second') then
                                                                                                trampCall(@_second)
                                                                                              else raise NameError.new( "Error: undefined variable _second", "_second" ) end
                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1286"] + __e.backtrace ) ; raise __e
                                                                                            end                                                                                          ,
                                                                                            Cell.new(
                                                                                              begin
                                                                                                  trampCall(_sexp)
                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1297"] + __e.backtrace ) ; raise __e
                                                                                              end
                                                                                                     )))
                                                                                               )))                                                                                ,Cell.new(
                                                                                  trampCall( callProcedure(   'setup-proc-body',
                                                                                      begin
                                                                                          trampCall(_setup_MIMARKproc_MIMARKbody)
                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1282"] + __e.backtrace ) ; raise __e
                                                                                      end                                                                                    ,
                                                                                      Cell.new(
                                                                                        trampCall( self._cddr_METHOD(  'cddr',
                                                                                            begin
                                                                                              if @global_lisp_binding.has_key?('_cddr') then
                                                                                                trampCall(@_cddr)
                                                                                              else raise NameError.new( "Error: undefined variable _cddr", "_cddr" ) end
                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1282"] + __e.backtrace ) ; raise __e
                                                                                            end                                                                                          ,
                                                                                            Cell.new(
                                                                                              begin
                                                                                                  trampCall(_sexp)
                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1297"] + __e.backtrace ) ; raise __e
                                                                                              end
                                                                                                     )))
                                                                                               )))
                                                                                         ))))
                                                                                   )))
                                                                  end
                                                              else
                                                                  if ( 
                                                                    begin
                                                                      ___lambda = lambda { |___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20239| 
                                                                          if ( 
                                                                            begin
                                                                                trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20239)
                                                                              rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                            end
                                                                           ) then
                                                                              begin
                                                                                  trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20239)
                                                                                rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                              end
                                                                          else
                                                                            false
                                                                          end
                                                                      } ; ___lambda.call(
                                                                            trampCall( self._eqv_QUMARK_METHOD(  'eqv?',
                                                                                begin
                                                                                  if @global_lisp_binding.has_key?('_eqv_QUMARK') then
                                                                                    trampCall(@_eqv_QUMARK)
                                                                                  else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1091"] + __e.backtrace ) ; raise __e
                                                                                end                                                                              ,
                                                                                Cell.new(
                                                                                :"letrec"                                                                                ,Cell.new(
                                                                                  begin
                                                                                      trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20222)
                                                                                    rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                  end
                                                                                         ))))
                                                                                 )
                                                                    end
                                                                   ) then
                                                                      begin
                                                                          delayCall( 'cons',
                                                                              begin
                                                                                if @global_lisp_binding.has_key?('_cons') then
                                                                                  trampCall(@_cons)
                                                                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1238"] + __e.backtrace ) ; raise __e
                                                                              end                                                                            ,
                                                                              Cell.new(
                                                                              :"letrec"                                                                              ,Cell.new(
                                                                                trampCall( self._cons_METHOD(  'cons',
                                                                                    begin
                                                                                      if @global_lisp_binding.has_key?('_cons') then
                                                                                        trampCall(@_cons)
                                                                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1238"] + __e.backtrace ) ; raise __e
                                                                                    end                                                                                  ,
                                                                                    Cell.new(
                                                                                      trampCall( callProcedure(   'setup-let-args',
                                                                                          begin
                                                                                              trampCall(_setup_MIMARKlet_MIMARKargs)
                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1281"] + __e.backtrace ) ; raise __e
                                                                                          end                                                                                        ,
                                                                                          Cell.new(
                                                                                            trampCall( self._second_METHOD(  'second',
                                                                                                begin
                                                                                                  if @global_lisp_binding.has_key?('_second') then
                                                                                                    trampCall(@_second)
                                                                                                  else raise NameError.new( "Error: undefined variable _second", "_second" ) end
                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1286"] + __e.backtrace ) ; raise __e
                                                                                                end                                                                                              ,
                                                                                                Cell.new(
                                                                                                  begin
                                                                                                      trampCall(_sexp)
                                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1297"] + __e.backtrace ) ; raise __e
                                                                                                  end
                                                                                                         )))
                                                                                                   )))                                                                                    ,Cell.new(
                                                                                      trampCall( callProcedure(   'setup-proc-body',
                                                                                          begin
                                                                                              trampCall(_setup_MIMARKproc_MIMARKbody)
                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1282"] + __e.backtrace ) ; raise __e
                                                                                          end                                                                                        ,
                                                                                          Cell.new(
                                                                                            trampCall( self._cddr_METHOD(  'cddr',
                                                                                                begin
                                                                                                  if @global_lisp_binding.has_key?('_cddr') then
                                                                                                    trampCall(@_cddr)
                                                                                                  else raise NameError.new( "Error: undefined variable _cddr", "_cddr" ) end
                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1282"] + __e.backtrace ) ; raise __e
                                                                                                end                                                                                              ,
                                                                                                Cell.new(
                                                                                                  begin
                                                                                                      trampCall(_sexp)
                                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1297"] + __e.backtrace ) ; raise __e
                                                                                                  end
                                                                                                         )))
                                                                                                   )))
                                                                                             ))))
                                                                                       )))
                                                                      end
                                                                  else
                                                                      if ( 
                                                                        begin
                                                                          ___lambda = lambda { |___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20240| 
                                                                              if ( 
                                                                                begin
                                                                                    trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20240)
                                                                                  rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                end
                                                                               ) then
                                                                                  begin
                                                                                      trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20240)
                                                                                    rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                  end
                                                                              else
                                                                                false
                                                                              end
                                                                          } ; ___lambda.call(
                                                                                trampCall( self._eqv_QUMARK_METHOD(  'eqv?',
                                                                                    begin
                                                                                      if @global_lisp_binding.has_key?('_eqv_QUMARK') then
                                                                                        trampCall(@_eqv_QUMARK)
                                                                                      else raise NameError.new( "Error: undefined variable _eqv_QUMARK", "_eqv_QUMARK" ) end
                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1091"] + __e.backtrace ) ; raise __e
                                                                                    end                                                                                  ,
                                                                                    Cell.new(
                                                                                    :"define"                                                                                    ,Cell.new(
                                                                                      begin
                                                                                          trampCall(___gensym__a6500e12401f98f446352dd5341558873f6aaa73_20222)
                                                                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                                                      end
                                                                                             ))))
                                                                                     )
                                                                        end
                                                                       ) then
                                                                          begin
                                                                              begin
                                                                                ___lambda = lambda { |_val| 
                                                                                    delayCall( 'cons',
                                                                                        begin
                                                                                          if @global_lisp_binding.has_key?('_cons') then
                                                                                            trampCall(@_cons)
                                                                                          else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1238"] + __e.backtrace ) ; raise __e
                                                                                        end                                                                                      ,
                                                                                        Cell.new(
                                                                                        :"define"                                                                                        ,Cell.new(
                                                                                          trampCall( self._cons_METHOD(  'cons',
                                                                                              begin
                                                                                                if @global_lisp_binding.has_key?('_cons') then
                                                                                                  trampCall(@_cons)
                                                                                                else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1238"] + __e.backtrace ) ; raise __e
                                                                                              end                                                                                            ,
                                                                                              Cell.new(
                                                                                                trampCall( self._second_METHOD(  'second',
                                                                                                    begin
                                                                                                      if @global_lisp_binding.has_key?('_second') then
                                                                                                        trampCall(@_second)
                                                                                                      else raise NameError.new( "Error: undefined variable _second", "_second" ) end
                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1286"] + __e.backtrace ) ; raise __e
                                                                                                    end                                                                                                  ,
                                                                                                    Cell.new(
                                                                                                      begin
                                                                                                          trampCall(_sexp)
                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1297"] + __e.backtrace ) ; raise __e
                                                                                                      end
                                                                                                             )))                                                                                              ,Cell.new(
                                                                                                trampCall( self._cons_METHOD(  'cons',
                                                                                                    begin
                                                                                                      if @global_lisp_binding.has_key?('_cons') then
                                                                                                        trampCall(@_cons)
                                                                                                      else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1238"] + __e.backtrace ) ; raise __e
                                                                                                    end                                                                                                  ,
                                                                                                    Cell.new(
                                                                                                      if ( 
                                                                                                        if ( 
                                                                                                          trampCall( self._not_METHOD(  'not',
                                                                                                              begin
                                                                                                                if @global_lisp_binding.has_key?('_not') then
                                                                                                                  trampCall(@_not)
                                                                                                                else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1288"] + __e.backtrace ) ; raise __e
                                                                                                              end                                                                                                            ,
                                                                                                              Cell.new(
                                                                                                                trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                                                                                                    begin
                                                                                                                      if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                                                                                        trampCall(@_eq_QUMARK)
                                                                                                                      else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1074"] + __e.backtrace ) ; raise __e
                                                                                                                    end                                                                                                                  ,
                                                                                                                    Cell.new(
                                                                                                                    false                                                                                                                    ,Cell.new(
                                                                                                                      trampCall( self._list_QUMARK_METHOD(  'list?',
                                                                                                                          begin
                                                                                                                            if @global_lisp_binding.has_key?('_list_QUMARK') then
                                                                                                                              trampCall(@_list_QUMARK)
                                                                                                                            else raise NameError.new( "Error: undefined variable _list_QUMARK", "_list_QUMARK" ) end
                                                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1287"] + __e.backtrace ) ; raise __e
                                                                                                                          end                                                                                                                        ,
                                                                                                                          Cell.new(
                                                                                                                            begin
                                                                                                                                trampCall(_val)
                                                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1291"] + __e.backtrace ) ; raise __e
                                                                                                                            end
                                                                                                                                   )))
                                                                                                                             ))))
                                                                                                                       )))
                                                                                                         ) then
                                                                                                            if ( 
                                                                                                              trampCall( self._not_METHOD(  'not',
                                                                                                                  begin
                                                                                                                    if @global_lisp_binding.has_key?('_not') then
                                                                                                                      trampCall(@_not)
                                                                                                                    else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1288"] + __e.backtrace ) ; raise __e
                                                                                                                  end                                                                                                                ,
                                                                                                                  Cell.new(
                                                                                                                    trampCall( self._eq_QUMARK_METHOD(  'eq?',
                                                                                                                        begin
                                                                                                                          if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                                                                                                            trampCall(@_eq_QUMARK)
                                                                                                                          else raise NameError.new( "Error: undefined variable _eq_QUMARK", "_eq_QUMARK" ) end
                                                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1074"] + __e.backtrace ) ; raise __e
                                                                                                                        end                                                                                                                      ,
                                                                                                                        Cell.new(
                                                                                                                        false                                                                                                                        ,Cell.new(
                                                                                                                          trampCall( self._not_METHOD(  'not',
                                                                                                                              begin
                                                                                                                                if @global_lisp_binding.has_key?('_not') then
                                                                                                                                  trampCall(@_not)
                                                                                                                                else raise NameError.new( "Error: undefined variable _not", "_not" ) end
                                                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1288"] + __e.backtrace ) ; raise __e
                                                                                                                              end                                                                                                                            ,
                                                                                                                              Cell.new(
                                                                                                                                trampCall( self._null_QUMARK_METHOD(  'null?',
                                                                                                                                    begin
                                                                                                                                      if @global_lisp_binding.has_key?('_null_QUMARK') then
                                                                                                                                        trampCall(@_null_QUMARK)
                                                                                                                                      else raise NameError.new( "Error: undefined variable _null_QUMARK", "_null_QUMARK" ) end
                                                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1288"] + __e.backtrace ) ; raise __e
                                                                                                                                    end                                                                                                                                  ,
                                                                                                                                    Cell.new(
                                                                                                                                      begin
                                                                                                                                          trampCall(_val)
                                                                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1291"] + __e.backtrace ) ; raise __e
                                                                                                                                      end
                                                                                                                                             )))
                                                                                                                                       )))
                                                                                                                                 ))))
                                                                                                                           )))
                                                                                                             ) then
                                                                                                                trampCall( callProcedure(   'reserved?',
                                                                                                                    begin
                                                                                                                        trampCall(_reserved_QUMARK)
                                                                                                                      rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1289"] + __e.backtrace ) ; raise __e
                                                                                                                    end                                                                                                                  ,
                                                                                                                    Cell.new(
                                                                                                                      trampCall( self._car_METHOD(  'car',
                                                                                                                          begin
                                                                                                                            if @global_lisp_binding.has_key?('_car') then
                                                                                                                              trampCall(@_car)
                                                                                                                            else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1293"] + __e.backtrace ) ; raise __e
                                                                                                                          end                                                                                                                        ,
                                                                                                                          Cell.new(
                                                                                                                            begin
                                                                                                                                trampCall(_val)
                                                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1291"] + __e.backtrace ) ; raise __e
                                                                                                                            end
                                                                                                                                   )))
                                                                                                                             )))
                                                                                                            else
                                                                                                              false
                                                                                                            end
                                                                                                        else
                                                                                                          false
                                                                                                        end
                                                                                                       ) then
                                                                                                          trampCall( self._setup_MIMARKtailcall_MIMARKmark_METHOD(  'setup-tailcall-mark',
                                                                                                              begin
                                                                                                                if @global_lisp_binding.has_key?('_setup_MIMARKtailcall_MIMARKmark') then
                                                                                                                  trampCall(@_setup_MIMARKtailcall_MIMARKmark)
                                                                                                                else raise NameError.new( "Error: undefined variable _setup_MIMARKtailcall_MIMARKmark", "_setup_MIMARKtailcall_MIMARKmark" ) end
                                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1290"] + __e.backtrace ) ; raise __e
                                                                                                              end                                                                                                            ,
                                                                                                              Cell.new(
                                                                                                                begin
                                                                                                                    trampCall(_val)
                                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1291"] + __e.backtrace ) ; raise __e
                                                                                                                end
                                                                                                                       )))
                                                                                                      else
                                                                                                          begin
                                                                                                              trampCall(_val)
                                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1291"] + __e.backtrace ) ; raise __e
                                                                                                          end
                                                                                                      end                                                                                                    ,Cell.new(
                                                                                                    
                                                                                                             ))))
                                                                                                       ))))
                                                                                                 )))
                                                                                } ; ___lambda.call(
                                                                                      trampCall( self._third_METHOD(  'third',
                                                                                          begin
                                                                                            if @global_lisp_binding.has_key?('_third') then
                                                                                              trampCall(@_third)
                                                                                            else raise NameError.new( "Error: undefined variable _third", "_third" ) end
                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1284"] + __e.backtrace ) ; raise __e
                                                                                          end                                                                                        ,
                                                                                          Cell.new(
                                                                                            begin
                                                                                                trampCall(_sexp)
                                                                                              rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1297"] + __e.backtrace ) ; raise __e
                                                                                            end
                                                                                                   )))
                                                                                           )
                                                                              end
                                                                          end
                                                                      else
                                                                          if ( 
                                                                          true
                                                                           ) then
                                                                              begin
                                                                                  if ( 
                                                                                    trampCall( self._symbol_QUMARK_METHOD(  'symbol?',
                                                                                        begin
                                                                                          if @global_lisp_binding.has_key?('_symbol_QUMARK') then
                                                                                            trampCall(@_symbol_QUMARK)
                                                                                          else raise NameError.new( "Error: undefined variable _symbol_QUMARK", "_symbol_QUMARK" ) end
                                                                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1293"] + __e.backtrace ) ; raise __e
                                                                                        end                                                                                      ,
                                                                                        Cell.new(
                                                                                          trampCall( self._car_METHOD(  'car',
                                                                                              begin
                                                                                                if @global_lisp_binding.has_key?('_car') then
                                                                                                  trampCall(@_car)
                                                                                                else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                                                                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1293"] + __e.backtrace ) ; raise __e
                                                                                              end                                                                                            ,
                                                                                              Cell.new(
                                                                                                begin
                                                                                                    trampCall(_sexp)
                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1297"] + __e.backtrace ) ; raise __e
                                                                                                end
                                                                                                       )))
                                                                                                 )))
                                                                                   ) then
                                                                                      delayCall( 'cons',
                                                                                          begin
                                                                                            if @global_lisp_binding.has_key?('_cons') then
                                                                                              trampCall(@_cons)
                                                                                            else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                            rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1238"] + __e.backtrace ) ; raise __e
                                                                                          end                                                                                        ,
                                                                                          Cell.new(
                                                                                          :"%tailcall"                                                                                          ,Cell.new(
                                                                                            trampCall( self._cons_METHOD(  'cons',
                                                                                                begin
                                                                                                  if @global_lisp_binding.has_key?('_cons') then
                                                                                                    trampCall(@_cons)
                                                                                                  else raise NameError.new( "Error: undefined variable _cons", "_cons" ) end
                                                                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1238"] + __e.backtrace ) ; raise __e
                                                                                                end                                                                                              ,
                                                                                                Cell.new(
                                                                                                  begin
                                                                                                      trampCall(_sexp)
                                                                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1297"] + __e.backtrace ) ; raise __e
                                                                                                  end                                                                                                ,Cell.new(
                                                                                                
                                                                                                         ))))
                                                                                                   )))
                                                                                  else
                                                                                      begin
                                                                                          trampCall(_sexp)
                                                                                        rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1297"] + __e.backtrace ) ; raise __e
                                                                                      end
                                                                                  end
                                                                              end
                                                                          else
                                                                              Cell.new()
                                                                          end
                                                                      end
                                                                  end
                                                              end
                                                          end
                                                      end
                                                  end
                                              end
                                          end
                                      } ; ___lambda.call(
                                            trampCall( self._car_METHOD(  'car',
                                                begin
                                                  if @global_lisp_binding.has_key?('_car') then
                                                    trampCall(@_car)
                                                  else raise NameError.new( "Error: undefined variable _car", "_car" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1293"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                Cell.new(
                                                  begin
                                                      trampCall(_sexp)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1297"] + __e.backtrace ) ; raise __e
                                                  end
                                                         )))
                                                 )
                                    end
                                end
                            else
                                if ( 
                                true
                                 ) then
                                    begin
                                        begin
                                            trampCall(_sexp)
                                          rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1297"] + __e.backtrace ) ; raise __e
                                        end
                                    end
                                else
                                    Cell.new()
                                end
                            end
                        end
                    end
                } ; ___lambda.call(
                nil,nil,nil,nil
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self.__PAMARKcompile_MIMARKphase_MIMARKfunctions_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['__PAMARKcompile_MIMARKphase_MIMARKfunctions'] = self.method( :__PAMARKcompile_MIMARKphase_MIMARKfunctions_METHOD )
    @__PAMARKcompile_MIMARKphase_MIMARKfunctions = 
    trampCall(
          trampCall( self._list_METHOD(  'list',
              begin
                if @global_lisp_binding.has_key?('_list') then
                  trampCall(@_list)
                else raise NameError.new( "Error: undefined variable _list", "_list" ) end
                rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1302"] + __e.backtrace ) ; raise __e
              end            ,
              Cell.new(
                begin
                  if @global_lisp_binding.has_key?('_setup_MIMARKtailcall_MIMARKmark') then
                    trampCall(@_setup_MIMARKtailcall_MIMARKmark)
                  else raise NameError.new( "Error: undefined variable _setup_MIMARKtailcall_MIMARKmark", "_setup_MIMARKtailcall_MIMARKmark" ) end
                  rescue => __e ; __e.set_backtrace( ["./lib/init.nnd:1303"] + __e.backtrace ) ; raise __e
                end
                       )))
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self.__ASMARKnendo_MIMARKversion_ASMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['__ASMARKnendo_MIMARKversion_ASMARK'] = self.method( :__ASMARKnendo_MIMARKversion_ASMARK_METHOD )
    @__ASMARKnendo_MIMARKversion_ASMARK = 
    trampCall(
        "0.3.3"
    )
  end
 )


# -------------------------------------------------------
# [EOF]
# -------------------------------------------------------
