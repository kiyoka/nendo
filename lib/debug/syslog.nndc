#
#    This file is nendo's compiled library file. 
#    generated  "nendo -c src" command. 
# 

trampCall( 
  delayCall( '_require',  'require',
      begin
        if @global_lisp_binding.has_key?('_require') then
          trampCall(@_require)
        else raise NameError.new( "Error: undefined variable _require", "_require" ) end
        rescue => __e ; __e.set_backtrace( ["./lib/debug/syslog.nnd:37"] + __e.backtrace ) ; raise __e
      end    ,
  [
      "syslog"
  ]
               )
 )
#--------------------

trampCall( 
  begin
      def self._debug_MIMARKprint_MIMARKoutput_MIMARKfunc_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_debug_MIMARKprint_MIMARKoutput_MIMARKfunc', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_debug_MIMARKprint_MIMARKoutput_MIMARKfunc'] = self.method( :_debug_MIMARKprint_MIMARKoutput_MIMARKfunc_METHOD )
    @_debug_MIMARKprint_MIMARKoutput_MIMARKfunc = 
    trampCall(
          Proc.new { |_str| 
              begin
                  trampCall(Syslog).open(
                    )
                rescue => __e ; __e.set_backtrace( ["./lib/debug/syslog.nnd:40"] + __e.backtrace ) ; raise __e
              end
              begin
                  trampCall(Syslog).log(
                        begin
                            trampCall(Syslog::LOG_WARNING)
                          rescue => __e ; __e.set_backtrace( ["./lib/debug/syslog.nnd:41"] + __e.backtrace ) ; raise __e
                        end                      ,
                      "%s"                      ,
                        __PLMARK_ARGS2(
                          "Nendo: "                          ,
                            begin
                                trampCall(_str)
                              rescue => __e ; __e.set_backtrace( ["./lib/debug/syslog.nnd:41"] + __e.backtrace ) ; raise __e
                            end
                        )
                    )
                rescue => __e ; __e.set_backtrace( ["./lib/debug/syslog.nnd:41"] + __e.backtrace ) ; raise __e
              end
              begin
                  trampCall(Syslog).close(
                    )
                rescue => __e ; __e.set_backtrace( ["./lib/debug/syslog.nnd:42"] + __e.backtrace ) ; raise __e
              end
          }
    )
  end
 )


# -------------------------------------------------------
# [EOF]
# -------------------------------------------------------
