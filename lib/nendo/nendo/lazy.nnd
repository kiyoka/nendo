;;-*- mode: nendo; syntax: scheme -*-;;
;;;
;;; nendo.lazy - test framework
;;;  
;;;   Copyright (c) 2012-2012  Kiyoka Nishiyama  <kiyoka@sumibi.org>
;;;   
;;;   Redistribution and use in source and binary forms, with or without
;;;   modification, are permitted provided that the following conditions
;;;   are met:
;;;   
;;;   1. Redistributions of source code must retain the above copyright
;;;      notice, this list of conditions and the following disclaimer.
;;;  
;;;   2. Redistributions in binary form must reproduce the above copyright
;;;      notice, this list of conditions and the following disclaimer in the
;;;      documentation and/or other materials provided with the distribution.
;;;  
;;;   3. Neither the name of the authors nor the names of its contributors
;;;      may be used to endorse or promote products derived from this
;;;      software without specific prior written permission.
;;;  
;;;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;;;   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;;;   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;;;   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;;;   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;;;   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
;;;   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;;;   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;;;   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;;;   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;;;   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;;  
;; 
(define-syntax lazy
  (syntax-rules ()
    ((lazy)
     (error "lazy requires (lazy s-expression)"))
    ((lazy s-exp)
     (let-syntax
         ((map
           (syntax-rules (%lazy-map)
             ((map)
              (error "map requires (map func lst ...)"))
             ((map func)
              (error "map requires (map func lst ...)"))
             ((map func       lst1)
              (%lazy-map func lst1))
             ((map func       lst1 lst2)
              (%lazy-map func lst1 lst2))
             ((map func       lst1 lst2 lst3)
              (%lazy-map func lst1 lst2 lst3))))
             
          (for-each
           (syntax-rules (%lazy-for-each)
             ((for-each)
              (error "for-each requires (for-each func lst ...)"))
             ((for-each func)
              (error "for-each requires (for-each func lst ...)"))
             ((for-each func       lst1)
              (%lazy-for-each func lst1))
             ((for-each func       lst1 lst2)
              (%lazy-for-each func lst1 lst2))
             ((for-each func       lst1 lst2 lst3)
              (%lazy-for-each func lst1 lst2 lst3))
             ))
          (filter
           (syntax-rules (%lazy-filter)
             ((filter)
              (error "filter requires (filter func lst ...)"))
             ((filter func)
              (error "filter requires (filter func lst ...)"))
             ((filter func       lst1)
              (%lazy-filter func lst1))
             ((filter func       lst1 lst2)
              (%lazy-filter func lst1 lst2))
             ((filter func       lst1 lst2 lst3)
              (%lazy-filter func lst1 lst2 lst3))
             )))
       s-exp))
    ((lazy s-exp other)
     (error "lazy requires (lazy s-expression)"))))

