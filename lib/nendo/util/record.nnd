;;; -*- mode: nendo; syntax: scheme -*-
;;;
;;; record.nnd - util.record for Nendo
;;;  
;;;   Copyright (c) 2014-2014  Kiyoka Nishiyama  <kiyoka@sumibi.org>
;;;   
;;;   Redistribution and use in source and binary forms, with or without
;;;   modification, are permitted provided that the following conditions
;;;   are met:
;;;   
;;;   1. Redistributions of source code must retain the above copyright
;;;      notice, this list of conditions and the following disclaimer.
;;;  
;;;   2. Redistributions in binary form must reproduce the above copyright
;;;      notice, this list of conditions and the following disclaimer in the
;;;      documentation and/or other materials provided with the distribution.
;;;  
;;;   3. Neither the name of the authors nor the names of its contributors
;;;      may be used to endorse or promote products derived from this
;;;      software without specific prior written permission.
;;;  
;;;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;;;   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;;;   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;;;   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;;;   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;;;   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
;;;   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;;;   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;;;   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;;;   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;;;   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;;

(define (record? type)
  (type.is_a? Record))

(define (record-constructor rtd . rest-tags)
  (let ([arg-count (length (car rest-tags))]
        [tags (car rest-tags)])
    (lambda args
      (if (= (length args)
             arg-count)
          (let1 new (make-record-type rtd.typename tags)
            (for-each
             (lambda (tag arg)
               (new.set! tag arg))
             tags
             args)
            new)
          (raise ArgumentError (sprintf "wrong number of arguments to constructor [%s] [%s]" rtd args))))))

(define (record-predicate type)
  (lambda (thing)
    (and (record? type)
         (record? thing)
         (eq? type.typename thing.typename))))

(define (record-accessor type tag)
  (lambda (thing)
    (if ((record-predicate type) thing)
        (thing.get tag)
        (raise ArgumentError (sprintf "accessor applied to bad value [%s] [%s] [%s]" type tag thing)))))

(define (record-modifier type tag)
  (lambda (thing value)
    (if ((record-predicate type) thing)
        (thing.set! tag value)
        (raise ArgumentError (sprintf "modifier applied to bad value [%s] [%s] [%s]" type tag thing)))))

