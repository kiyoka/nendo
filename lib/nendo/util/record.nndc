#
#    This file is nendo's compiled library file. 
#    generated  "nendo -c src" command. 
# 

trampCall( 
  begin #execFunc
      def self._record_QUMARK_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_record_QUMARK', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_record_QUMARK'] = self.method( :_record_QUMARK_METHOD )
    @_record_QUMARK = 
    trampCall(
          Proc.new { |_type| 
              begin
                  trampCall(_type).is_a?(
                        begin
                            trampCall(Record)
                          rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:36"] + __e.backtrace ) ; raise __e
                        end
                    )
                rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:36"] + __e.backtrace ) ; raise __e
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin #execFunc
      def self._record_MIMARKconstructor_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_record_MIMARKconstructor', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_record_MIMARKconstructor'] = self.method( :_record_MIMARKconstructor_METHOD )
    @_record_MIMARKconstructor = 
    trampCall(
          Proc.new { |_rtd,*__rest__| _rest_MIMARKtags = __rest__[0] ;  
              begin #makeLet
                ___lambda = lambda { |_arg_MIMARKcount,_tags| 
                    Proc.new { |*__rest__| _args = __rest__[0] ;  
                        if ( 
                          begin
                            embedBacktraceInfo( "./lib/nendo/util/record.nnd", 42 );
                              __EQMARK(
                                  begin
                                    embedBacktraceInfo( "./lib/nendo/util/record.nnd", 42 );
                                      _length(
                                          begin
                                              trampCall(_args)
                                            rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:42"] + __e.backtrace ) ; raise __e
                                          end
                                      )
                                  end                                ,
                                  begin
                                      trampCall(_arg_MIMARKcount)
                                    rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:43"] + __e.backtrace ) ; raise __e
                                  end
                              )
                          end
                         ) then
                            begin #makeLet
                              ___lambda = lambda { |_new| 
                                  begin
                                    embedBacktraceInfo( "./lib/nendo/util/record.nnd", 45 );
                                      trampCall( self._for_MIMARKeach_METHOD(  'for-each',
                                          begin
                                            if @global_lisp_binding.has_key?('_for_MIMARKeach') then
                                              trampCall(@_for_MIMARKeach)
                                            else raise NameError.new( "Error: undefined variable for-each", "for-each" ) end
                                            rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:45"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                      [
                                            Proc.new { |_tag,_arg| 
                                                begin
                                                    trampCall(_new).set!(
                                                          begin
                                                              trampCall(_tag)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:47"] + __e.backtrace ) ; raise __e
                                                          end                                                        ,
                                                          begin
                                                              trampCall(_arg)
                                                            rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:47"] + __e.backtrace ) ; raise __e
                                                          end
                                                      )
                                                  rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:47"] + __e.backtrace ) ; raise __e
                                                end
                                            }                                          ,
                                            begin
                                                trampCall(_tags)
                                              rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:48"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                            begin
                                                trampCall(_args)
                                              rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:49"] + __e.backtrace ) ; raise __e
                                            end
                                      ]
                                                   ))
                                  end
                                  begin
                                      trampCall(_new)
                                    rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:50"] + __e.backtrace ) ; raise __e
                                  end
                              } ; ___lambda.call(
                                    begin
                                      embedBacktraceInfo( "./lib/nendo/util/record.nnd", 44 );
                                        trampCall( self._make_MIMARKrecord_MIMARKtype_METHOD(  'make-record-type',
                                            begin
                                              if @global_lisp_binding.has_key?('_make_MIMARKrecord_MIMARKtype') then
                                                trampCall(@_make_MIMARKrecord_MIMARKtype)
                                              else raise NameError.new( "Error: undefined variable make-record-type", "make-record-type" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:44"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                        [
                                              begin
                                                  trampCall(_rtd).typename
                                                rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:44"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                              begin
                                                  trampCall(_tags)
                                                rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:44"] + __e.backtrace ) ; raise __e
                                              end
                                        ]
                                                     ))
                                    end
                                         )
                            end
                        else
                            begin
                              embedBacktraceInfo( "", 1 );
                                delayCall( '__PAMARKraise',  '%raise',
                                    begin
                                      if @global_lisp_binding.has_key?('__PAMARKraise') then
                                        trampCall(@__PAMARKraise)
                                      else raise NameError.new( "Error: undefined variable %raise", "%raise" ) end
                                      rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                [
                                      begin
                                          trampCall(ArgumentError)
                                        rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:51"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                      begin
                                        embedBacktraceInfo( "./lib/nendo/util/record.nnd", 51 );
                                          trampCall( self._sprintf_METHOD(  'sprintf',
                                              begin
                                                if @global_lisp_binding.has_key?('_sprintf') then
                                                  trampCall(@_sprintf)
                                                else raise NameError.new( "Error: undefined variable sprintf", "sprintf" ) end
                                                rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:51"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                          [
                                              "wrong number of arguments to constructor [%s] [%s]"                                              ,
                                                begin
                                                    trampCall(_rtd)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:51"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                                begin
                                                    trampCall(_args)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:51"] + __e.backtrace ) ; raise __e
                                                end
                                          ]
                                                       ))
                                      end                                    ,
                                      begin
                                        embedBacktraceInfo( "", 1 );
                                          trampCall( self._sprintf_METHOD(  'sprintf',
                                              begin
                                                if @global_lisp_binding.has_key?('_sprintf') then
                                                  trampCall(@_sprintf)
                                                else raise NameError.new( "Error: undefined variable sprintf", "sprintf" ) end
                                                rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                              end                                            ,
                                          [
                                              "%s:%s raised %s"                                              ,
                                                begin
                                                  embedBacktraceInfo( "", 1 );
                                                    trampCall( self.__ASMARKFILE_ASMARK_METHOD(  '*FILE*',
                                                        begin
                                                          if @global_lisp_binding.has_key?('__ASMARKFILE_ASMARK') then
                                                            trampCall(@__ASMARKFILE_ASMARK)
                                                          else raise NameError.new( "Error: undefined variable *FILE*", "*FILE*" ) end
                                                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                    [
                                                    ]
                                                                 ))
                                                end                                              ,
                                                begin
                                                  embedBacktraceInfo( "", 1 );
                                                    trampCall( self.__ASMARKLINE_ASMARK_METHOD(  '*LINE*',
                                                        begin
                                                          if @global_lisp_binding.has_key?('__ASMARKLINE_ASMARK') then
                                                            trampCall(@__ASMARKLINE_ASMARK)
                                                          else raise NameError.new( "Error: undefined variable *LINE*", "*LINE*" ) end
                                                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                        end                                                      ,
                                                    [
                                                    ]
                                                                 ))
                                                end                                              ,
                                                begin
                                                    trampCall(ArgumentError)
                                                  rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:51"] + __e.backtrace ) ; raise __e
                                                end
                                          ]
                                                       ))
                                      end
                                ]
                                             )
                            end
                        end
                    }
                } ; ___lambda.call(
                      begin
                        embedBacktraceInfo( "./lib/nendo/util/record.nnd", 39 );
                          _length(
                              begin
                                embedBacktraceInfo( "./lib/nendo/util/record.nnd", 39 );
                                  _car(
                                      begin
                                          trampCall(_rest_MIMARKtags)
                                        rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:39"] + __e.backtrace ) ; raise __e
                                      end
                                  )
                              end
                          )
                      end                    ,
                      begin
                        embedBacktraceInfo( "./lib/nendo/util/record.nnd", 40 );
                          _car(
                              begin
                                  trampCall(_rest_MIMARKtags)
                                rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:40"] + __e.backtrace ) ; raise __e
                              end
                          )
                      end
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin #execFunc
      def self._record_MIMARKpredicate_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_record_MIMARKpredicate', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_record_MIMARKpredicate'] = self.method( :_record_MIMARKpredicate_METHOD )
    @_record_MIMARKpredicate = 
    trampCall(
          Proc.new { |_type| 
              Proc.new { |_thing| 
                  if ( 
                    begin
                      embedBacktraceInfo( "", 1 );
                        _not(
                            begin
                              embedBacktraceInfo( "", 1 );
                                _eq_QUMARK(
                                  false                                  ,
                                    begin
                                      embedBacktraceInfo( "./lib/nendo/util/record.nnd", 55 );
                                        trampCall( self._record_QUMARK_METHOD(  'record?',
                                            begin
                                              if @global_lisp_binding.has_key?('_record_QUMARK') then
                                                trampCall(@_record_QUMARK)
                                              else raise NameError.new( "Error: undefined variable record?", "record?" ) end
                                              rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:55"] + __e.backtrace ) ; raise __e
                                            end                                          ,
                                        [
                                              begin
                                                  trampCall(_type)
                                                rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:55"] + __e.backtrace ) ; raise __e
                                              end
                                        ]
                                                     ))
                                    end
                                )
                            end
                        )
                    end
                   ) then
                      if ( 
                        begin
                          embedBacktraceInfo( "", 1 );
                            _not(
                                begin
                                  embedBacktraceInfo( "", 1 );
                                    _eq_QUMARK(
                                      false                                      ,
                                        begin
                                          embedBacktraceInfo( "./lib/nendo/util/record.nnd", 56 );
                                            trampCall( self._record_QUMARK_METHOD(  'record?',
                                                begin
                                                  if @global_lisp_binding.has_key?('_record_QUMARK') then
                                                    trampCall(@_record_QUMARK)
                                                  else raise NameError.new( "Error: undefined variable record?", "record?" ) end
                                                  rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:56"] + __e.backtrace ) ; raise __e
                                                end                                              ,
                                            [
                                                  begin
                                                      trampCall(_thing)
                                                    rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:56"] + __e.backtrace ) ; raise __e
                                                  end
                                            ]
                                                         ))
                                        end
                                    )
                                end
                            )
                        end
                       ) then
                          begin
                            embedBacktraceInfo( "./lib/nendo/util/record.nnd", 57 );
                              delayCall( '_eq_QUMARK',  'eq?',
                                  begin
                                    if @global_lisp_binding.has_key?('_eq_QUMARK') then
                                      trampCall(@_eq_QUMARK)
                                    else raise NameError.new( "Error: undefined variable eq?", "eq?" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:57"] + __e.backtrace ) ; raise __e
                                  end                                ,
                              [
                                    begin
                                        trampCall(_type).typename
                                      rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:57"] + __e.backtrace ) ; raise __e
                                    end                                  ,
                                    begin
                                        trampCall(_thing).typename
                                      rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:57"] + __e.backtrace ) ; raise __e
                                    end
                              ]
                                           )
                          end
                      else
                        false
                      end
                  else
                    false
                  end
              }
          }
    )
  end
 )
#--------------------

trampCall( 
  begin #execFunc
      def self._record_MIMARKaccessor_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_record_MIMARKaccessor', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_record_MIMARKaccessor'] = self.method( :_record_MIMARKaccessor_METHOD )
    @_record_MIMARKaccessor = 
    trampCall(
          Proc.new { |_type,_tag| 
              Proc.new { |_thing| 
                  if ( 
                    trampCall( callProcedure( nil, 'anonymouse', 
                        begin
                          embedBacktraceInfo( "./lib/nendo/util/record.nnd", 61 );
                            trampCall( self._record_MIMARKpredicate_METHOD(  'record-predicate',
                                begin
                                  if @global_lisp_binding.has_key?('_record_MIMARKpredicate') then
                                    trampCall(@_record_MIMARKpredicate)
                                  else raise NameError.new( "Error: undefined variable record-predicate", "record-predicate" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:61"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                  begin
                                      trampCall(_type)
                                    rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:61"] + __e.backtrace ) ; raise __e
                                  end
                            ]
                                         ))
                        end                      ,
                    [
                          begin
                              trampCall(_thing)
                            rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:61"] + __e.backtrace ) ; raise __e
                          end
                    ]
                              ))
                   ) then
                      begin
                          trampCall(_thing).get(
                                begin
                                    trampCall(_tag)
                                  rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:62"] + __e.backtrace ) ; raise __e
                                end
                            )
                        rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:62"] + __e.backtrace ) ; raise __e
                      end
                  else
                      begin
                        embedBacktraceInfo( "", 1 );
                          delayCall( '__PAMARKraise',  '%raise',
                              begin
                                if @global_lisp_binding.has_key?('__PAMARKraise') then
                                  trampCall(@__PAMARKraise)
                                else raise NameError.new( "Error: undefined variable %raise", "%raise" ) end
                                rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                              end                            ,
                          [
                                begin
                                    trampCall(ArgumentError)
                                  rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:63"] + __e.backtrace ) ; raise __e
                                end                              ,
                                begin
                                  embedBacktraceInfo( "./lib/nendo/util/record.nnd", 63 );
                                    trampCall( self._sprintf_METHOD(  'sprintf',
                                        begin
                                          if @global_lisp_binding.has_key?('_sprintf') then
                                            trampCall(@_sprintf)
                                          else raise NameError.new( "Error: undefined variable sprintf", "sprintf" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:63"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                    [
                                        "accessor applied to bad value [%s] [%s] [%s]"                                        ,
                                          begin
                                              trampCall(_type)
                                            rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:63"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          begin
                                              trampCall(_tag)
                                            rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:63"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          begin
                                              trampCall(_thing)
                                            rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:63"] + __e.backtrace ) ; raise __e
                                          end
                                    ]
                                                 ))
                                end                              ,
                                begin
                                  embedBacktraceInfo( "", 1 );
                                    trampCall( self._sprintf_METHOD(  'sprintf',
                                        begin
                                          if @global_lisp_binding.has_key?('_sprintf') then
                                            trampCall(@_sprintf)
                                          else raise NameError.new( "Error: undefined variable sprintf", "sprintf" ) end
                                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                    [
                                        "%s:%s raised %s"                                        ,
                                          begin
                                            embedBacktraceInfo( "", 1 );
                                              trampCall( self.__ASMARKFILE_ASMARK_METHOD(  '*FILE*',
                                                  begin
                                                    if @global_lisp_binding.has_key?('__ASMARKFILE_ASMARK') then
                                                      trampCall(@__ASMARKFILE_ASMARK)
                                                    else raise NameError.new( "Error: undefined variable *FILE*", "*FILE*" ) end
                                                    rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                              [
                                              ]
                                                           ))
                                          end                                        ,
                                          begin
                                            embedBacktraceInfo( "", 1 );
                                              trampCall( self.__ASMARKLINE_ASMARK_METHOD(  '*LINE*',
                                                  begin
                                                    if @global_lisp_binding.has_key?('__ASMARKLINE_ASMARK') then
                                                      trampCall(@__ASMARKLINE_ASMARK)
                                                    else raise NameError.new( "Error: undefined variable *LINE*", "*LINE*" ) end
                                                    rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                              [
                                              ]
                                                           ))
                                          end                                        ,
                                          begin
                                              trampCall(ArgumentError)
                                            rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:63"] + __e.backtrace ) ; raise __e
                                          end
                                    ]
                                                 ))
                                end
                          ]
                                       )
                      end
                  end
              }
          }
    )
  end
 )
#--------------------

trampCall( 
  begin #execFunc
      def self._record_MIMARKmodifier_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_record_MIMARKmodifier', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_record_MIMARKmodifier'] = self.method( :_record_MIMARKmodifier_METHOD )
    @_record_MIMARKmodifier = 
    trampCall(
          Proc.new { |_type,_tag| 
              Proc.new { |_thing,_value| 
                  if ( 
                    trampCall( callProcedure( nil, 'anonymouse', 
                        begin
                          embedBacktraceInfo( "./lib/nendo/util/record.nnd", 67 );
                            trampCall( self._record_MIMARKpredicate_METHOD(  'record-predicate',
                                begin
                                  if @global_lisp_binding.has_key?('_record_MIMARKpredicate') then
                                    trampCall(@_record_MIMARKpredicate)
                                  else raise NameError.new( "Error: undefined variable record-predicate", "record-predicate" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:67"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                  begin
                                      trampCall(_type)
                                    rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:67"] + __e.backtrace ) ; raise __e
                                  end
                            ]
                                         ))
                        end                      ,
                    [
                          begin
                              trampCall(_thing)
                            rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:67"] + __e.backtrace ) ; raise __e
                          end
                    ]
                              ))
                   ) then
                      begin
                          trampCall(_thing).set!(
                                begin
                                    trampCall(_tag)
                                  rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:68"] + __e.backtrace ) ; raise __e
                                end                              ,
                                begin
                                    trampCall(_value)
                                  rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:68"] + __e.backtrace ) ; raise __e
                                end
                            )
                        rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:68"] + __e.backtrace ) ; raise __e
                      end
                  else
                      begin
                        embedBacktraceInfo( "", 1 );
                          delayCall( '__PAMARKraise',  '%raise',
                              begin
                                if @global_lisp_binding.has_key?('__PAMARKraise') then
                                  trampCall(@__PAMARKraise)
                                else raise NameError.new( "Error: undefined variable %raise", "%raise" ) end
                                rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                              end                            ,
                          [
                                begin
                                    trampCall(ArgumentError)
                                  rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:69"] + __e.backtrace ) ; raise __e
                                end                              ,
                                begin
                                  embedBacktraceInfo( "./lib/nendo/util/record.nnd", 69 );
                                    trampCall( self._sprintf_METHOD(  'sprintf',
                                        begin
                                          if @global_lisp_binding.has_key?('_sprintf') then
                                            trampCall(@_sprintf)
                                          else raise NameError.new( "Error: undefined variable sprintf", "sprintf" ) end
                                          rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:69"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                    [
                                        "modifier applied to bad value [%s] [%s] [%s]"                                        ,
                                          begin
                                              trampCall(_type)
                                            rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:69"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          begin
                                              trampCall(_tag)
                                            rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:69"] + __e.backtrace ) ; raise __e
                                          end                                        ,
                                          begin
                                              trampCall(_thing)
                                            rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:69"] + __e.backtrace ) ; raise __e
                                          end
                                    ]
                                                 ))
                                end                              ,
                                begin
                                  embedBacktraceInfo( "", 1 );
                                    trampCall( self._sprintf_METHOD(  'sprintf',
                                        begin
                                          if @global_lisp_binding.has_key?('_sprintf') then
                                            trampCall(@_sprintf)
                                          else raise NameError.new( "Error: undefined variable sprintf", "sprintf" ) end
                                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                    [
                                        "%s:%s raised %s"                                        ,
                                          begin
                                            embedBacktraceInfo( "", 1 );
                                              trampCall( self.__ASMARKFILE_ASMARK_METHOD(  '*FILE*',
                                                  begin
                                                    if @global_lisp_binding.has_key?('__ASMARKFILE_ASMARK') then
                                                      trampCall(@__ASMARKFILE_ASMARK)
                                                    else raise NameError.new( "Error: undefined variable *FILE*", "*FILE*" ) end
                                                    rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                              [
                                              ]
                                                           ))
                                          end                                        ,
                                          begin
                                            embedBacktraceInfo( "", 1 );
                                              trampCall( self.__ASMARKLINE_ASMARK_METHOD(  '*LINE*',
                                                  begin
                                                    if @global_lisp_binding.has_key?('__ASMARKLINE_ASMARK') then
                                                      trampCall(@__ASMARKLINE_ASMARK)
                                                    else raise NameError.new( "Error: undefined variable *LINE*", "*LINE*" ) end
                                                    rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                                  end                                                ,
                                              [
                                              ]
                                                           ))
                                          end                                        ,
                                          begin
                                              trampCall(ArgumentError)
                                            rescue => __e ; __e.set_backtrace( ["./lib/nendo/util/record.nnd:69"] + __e.backtrace ) ; raise __e
                                          end
                                    ]
                                                 ))
                                end
                          ]
                                       )
                      end
                  end
              }
          }
    )
  end
 )


# -------------------------------------------------------
# [EOF]
# -------------------------------------------------------
