#
#    This file is nendo's compiled library file. 
#    generated  "nendo -c src" command. 
# 

trampCall( 
  begin
      delayCall( '_require',  'require',
          trampCall(@_require)        ,
      [
          "json"
      ]
                   )
  end
 )
#--------------------

trampCall( 
  begin
      delayCall( '_load',  'load',
          trampCall(@_load)        ,
      [
          "util/list"
      ]
                   )
  end
 )
#--------------------

trampCall( 
  begin
      def self.__PAMARKjson_COMARKhash_MIMARKtable_MIMARK_GTMARKalist_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '__PAMARKjson_COMARKhash_MIMARKtable_MIMARK_GTMARKalist', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['__PAMARKjson_COMARKhash_MIMARKtable_MIMARK_GTMARKalist'] = self.method( :__PAMARKjson_COMARKhash_MIMARKtable_MIMARK_GTMARKalist_METHOD )
    @__PAMARKjson_COMARKhash_MIMARKtable_MIMARK_GTMARKalist = 
    trampCall(
          Proc.new { |_obj| 
              if ( 
                begin
                    _null_QUMARK(
                        trampCall(_obj)
                    )
                end
               ) then
                    trampCall(_obj)
              else
                  if ( 
                    begin
                        trampCall( self._vector_QUMARK_METHOD(  'vector?',
                            trampCall(@_vector_QUMARK)                          ,
                        [
                              trampCall(_obj)
                        ]
                                     ))
                    end
                   ) then
                        begin
                            delayCall( '_list_MIMARK_GTMARKvector',  'list->vector',
                                trampCall(@_list_MIMARK_GTMARKvector)                              ,
                            [
                                  begin
                                      trampCall( self._map_METHOD(  'map',
                                          trampCall(@_map)                                        ,
                                      [
                                            Proc.new { |_x| 
                                                begin
                                                    trampCall( self.__PAMARKjson_COMARKhash_MIMARKtable_MIMARK_GTMARKalist_METHOD(  '%json:hash-table->alist',
                                                        trampCall(@__PAMARKjson_COMARKhash_MIMARKtable_MIMARK_GTMARKalist)                                                      ,
                                                    [
                                                          trampCall(_x)
                                                    ]
                                                                 ))
                                                end
                                            }                                          ,
                                            begin
                                                trampCall( self._vector_MIMARK_GTMARKlist_METHOD(  'vector->list',
                                                    trampCall(@_vector_MIMARK_GTMARKlist)                                                  ,
                                                [
                                                      trampCall(_obj)
                                                ]
                                                             ))
                                            end
                                      ]
                                                   ))
                                  end
                            ]
                                         )
                        end
                  else
                      if ( 
                        begin
                            trampCall( self._hash_MIMARKtable_QUMARK_METHOD(  'hash-table?',
                                trampCall(@_hash_MIMARKtable_QUMARK)                              ,
                            [
                                  trampCall(_obj)
                            ]
                                         ))
                        end
                       ) then
                            begin
                                delayCall( '_map',  'map',
                                    trampCall(@_map)                                  ,
                                [
                                      Proc.new { |_entry| 
                                          begin
                                              _cons(
                                                  begin
                                                      _car(
                                                          trampCall(_entry)
                                                      )
                                                  end                                                ,
                                                  begin
                                                      trampCall( self.__PAMARKjson_COMARKhash_MIMARKtable_MIMARK_GTMARKalist_METHOD(  '%json:hash-table->alist',
                                                          trampCall(@__PAMARKjson_COMARKhash_MIMARKtable_MIMARK_GTMARKalist)                                                        ,
                                                      [
                                                            begin
                                                                _cdr(
                                                                    trampCall(_entry)
                                                                )
                                                            end
                                                      ]
                                                                   ))
                                                  end
                                              )
                                          end
                                      }                                    ,
                                      begin
                                          trampCall( self._hash_MIMARKtable_MIMARK_GTMARKalist_METHOD(  'hash-table->alist',
                                              trampCall(@_hash_MIMARKtable_MIMARK_GTMARKalist)                                            ,
                                          [
                                                trampCall(_obj)
                                          ]
                                                       ))
                                      end
                                ]
                                             )
                            end
                      else
                          if ( 
                          true
                           ) then
                                trampCall(_obj)
                          else
                              Cell.new()
                          end
                      end
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self.__PAMARKjson_COMARKalist_MIMARK_GTMARKhash_MIMARKtable_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '__PAMARKjson_COMARKalist_MIMARK_GTMARKhash_MIMARKtable', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['__PAMARKjson_COMARKalist_MIMARK_GTMARKhash_MIMARKtable'] = self.method( :__PAMARKjson_COMARKalist_MIMARK_GTMARKhash_MIMARKtable_METHOD )
    @__PAMARKjson_COMARKalist_MIMARK_GTMARKhash_MIMARKtable = 
    trampCall(
          Proc.new { |_obj| 
              if ( 
                begin
                    _null_QUMARK(
                        trampCall(_obj)
                    )
                end
               ) then
                    begin
                        delayCall( '_make_MIMARKhash_MIMARKtable',  'make-hash-table',
                            trampCall(@_make_MIMARKhash_MIMARKtable)                          ,
                        [
                        ]
                                     )
                    end
              else
                  if ( 
                    begin
                        trampCall( self._vector_QUMARK_METHOD(  'vector?',
                            trampCall(@_vector_QUMARK)                          ,
                        [
                              trampCall(_obj)
                        ]
                                     ))
                    end
                   ) then
                        begin
                            delayCall( '_list_MIMARK_GTMARKvector',  'list->vector',
                                trampCall(@_list_MIMARK_GTMARKvector)                              ,
                            [
                                  begin
                                      trampCall( self._map_METHOD(  'map',
                                          trampCall(@_map)                                        ,
                                      [
                                            Proc.new { |_x| 
                                                begin
                                                    trampCall( self.__PAMARKjson_COMARKalist_MIMARK_GTMARKhash_MIMARKtable_METHOD(  '%json:alist->hash-table',
                                                        trampCall(@__PAMARKjson_COMARKalist_MIMARK_GTMARKhash_MIMARKtable)                                                      ,
                                                    [
                                                          trampCall(_x)
                                                    ]
                                                                 ))
                                                end
                                            }                                          ,
                                            begin
                                                trampCall( self._vector_MIMARK_GTMARKlist_METHOD(  'vector->list',
                                                    trampCall(@_vector_MIMARK_GTMARKlist)                                                  ,
                                                [
                                                      trampCall(_obj)
                                                ]
                                                             ))
                                            end
                                      ]
                                                   ))
                                  end
                            ]
                                         )
                        end
                  else
                      if ( 
                        begin
                            _pair_QUMARK(
                                trampCall(_obj)
                            )
                        end
                       ) then
                            begin
                                delayCall( '_alist_MIMARK_GTMARKhash_MIMARKtable',  'alist->hash-table',
                                    trampCall(@_alist_MIMARK_GTMARKhash_MIMARKtable)                                  ,
                                [
                                      begin
                                          trampCall( self._map_METHOD(  'map',
                                              trampCall(@_map)                                            ,
                                          [
                                                Proc.new { |_entry| 
                                                    begin
                                                        _cons(
                                                            begin
                                                                _car(
                                                                    trampCall(_entry)
                                                                )
                                                            end                                                          ,
                                                            begin
                                                                trampCall( self.__PAMARKjson_COMARKalist_MIMARK_GTMARKhash_MIMARKtable_METHOD(  '%json:alist->hash-table',
                                                                    trampCall(@__PAMARKjson_COMARKalist_MIMARK_GTMARKhash_MIMARKtable)                                                                  ,
                                                                [
                                                                      begin
                                                                          _cdr(
                                                                              trampCall(_entry)
                                                                          )
                                                                      end
                                                                ]
                                                                             ))
                                                            end
                                                        )
                                                    end
                                                }                                              ,
                                                trampCall(_obj)
                                          ]
                                                       ))
                                      end
                                ]
                                             )
                            end
                      else
                          if ( 
                          true
                           ) then
                                trampCall(_obj)
                          else
                              Cell.new()
                          end
                      end
                  end
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._parse_MIMARKjson_MIMARKstring_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_parse_MIMARKjson_MIMARKstring', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_parse_MIMARKjson_MIMARKstring'] = self.method( :_parse_MIMARKjson_MIMARKstring_METHOD )
    @_parse_MIMARKjson_MIMARKstring = 
    trampCall(
          Proc.new { |_str| 
              begin
                  delayCall( '__PAMARKjson_COMARKhash_MIMARKtable_MIMARK_GTMARKalist',  '%json:hash-table->alist',
                      trampCall(@__PAMARKjson_COMARKhash_MIMARKtable_MIMARK_GTMARKalist)                    ,
                  [
                        trampCall(JSON).parse(
                              trampCall(_str)
                          )
                  ]
                               )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._parse_MIMARKjson_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_parse_MIMARKjson', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_parse_MIMARKjson'] = self.method( :_parse_MIMARKjson_METHOD )
    @_parse_MIMARKjson = 
    trampCall(
          Proc.new { |*__rest__| _io = __rest__[0] ;  
              begin
                ___lambda = lambda { |__| 
                    begin
                      ___lambda = lambda { |_str| 
                          begin
                              delayCall( '_parse_MIMARKjson_MIMARKstring',  'parse-json-string',
                                  trampCall(@_parse_MIMARKjson_MIMARKstring)                                ,
                              [
                                    trampCall(_str)
                              ]
                                           )
                          end
                      } ; ___lambda.call(
                            trampCall(__).read(
                              )
                                 )
                    end
                } ; ___lambda.call(
                      begin
                        ___lambda = lambda { |___gensym__6d159efe5170a605fc9e84dcf91a427e3f7e5718_90188| 
                            if ( 
                              begin
                                  _null_QUMARK(
                                      trampCall(___gensym__6d159efe5170a605fc9e84dcf91a427e3f7e5718_90188)
                                  )
                              end
                             ) then
                                trampCall(STDIN)
                            else
                                begin
                                    delayCall( '_car',  'car',
                                        trampCall(@_car)                                      ,
                                    [
                                          trampCall(___gensym__6d159efe5170a605fc9e84dcf91a427e3f7e5718_90188)
                                    ]
                                                 )
                                end
                            end
                        } ; ___lambda.call(
                              trampCall(_io)
                                   )
                      end
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._construct_MIMARKjson_MIMARKstring_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_construct_MIMARKjson_MIMARKstring', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_construct_MIMARKjson_MIMARKstring'] = self.method( :_construct_MIMARKjson_MIMARKstring_METHOD )
    @_construct_MIMARKjson_MIMARKstring = 
    trampCall(
          Proc.new { |_obj| 
              trampCall(JSON).dump(
                    begin
                        trampCall( self.__PAMARKjson_COMARKalist_MIMARK_GTMARKhash_MIMARKtable_METHOD(  '%json:alist->hash-table',
                            trampCall(@__PAMARKjson_COMARKalist_MIMARK_GTMARKhash_MIMARKtable)                          ,
                        [
                              trampCall(_obj)
                        ]
                                     ))
                    end
                )
          }
    )
  end
 )
#--------------------

trampCall( 
  begin
      def self._construct_MIMARKjson_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_construct_MIMARKjson', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_construct_MIMARKjson'] = self.method( :_construct_MIMARKjson_METHOD )
    @_construct_MIMARKjson = 
    trampCall(
          Proc.new { |_obj,*__rest__| _io = __rest__[0] ;  
              begin
                ___lambda = lambda { |__| 
                    trampCall(__).print(
                          begin
                              trampCall( self._construct_MIMARKjson_MIMARKstring_METHOD(  'construct-json-string',
                                  trampCall(@_construct_MIMARKjson_MIMARKstring)                                ,
                              [
                                    trampCall(_obj)
                              ]
                                           ))
                          end
                      )
                } ; ___lambda.call(
                      begin
                        ___lambda = lambda { |___gensym__6d159efe5170a605fc9e84dcf91a427e3f7e5718_90189| 
                            if ( 
                              begin
                                  _null_QUMARK(
                                      trampCall(___gensym__6d159efe5170a605fc9e84dcf91a427e3f7e5718_90189)
                                  )
                              end
                             ) then
                                trampCall(STDOUT)
                            else
                                begin
                                    delayCall( '_car',  'car',
                                        trampCall(@_car)                                      ,
                                    [
                                          trampCall(___gensym__6d159efe5170a605fc9e84dcf91a427e3f7e5718_90189)
                                    ]
                                                 )
                                end
                            end
                        } ; ___lambda.call(
                              trampCall(_io)
                                   )
                      end
                           )
              end
          }
    )
  end
 )


# -------------------------------------------------------
# [EOF]
# -------------------------------------------------------
