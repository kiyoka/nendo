#
#    This file is nendo's compiled library file. 
#    generated  "nendo -c src" command. 
# 

trampCall( 
  begin
    embedBacktraceInfo( "./lib/nendo/rfc/yaml.nnd", 37 );
      delayCall( '_require',  'require',
          begin
            if @global_lisp_binding.has_key?('_require') then
              trampCall(@_require)
            else raise NameError.new( "Error: undefined variable require", "require" ) end
            rescue => __e ; __e.set_backtrace( ["./lib/nendo/rfc/yaml.nnd:37"] + __e.backtrace ) ; raise __e
          end        ,
      [
          "yaml"
      ]
                   )
  end
 )
#--------------------

trampCall( 
  begin
    embedBacktraceInfo( "", 1 );
      delayCall( '_load',  'load',
          begin
            if @global_lisp_binding.has_key?('_load') then
              trampCall(@_load)
            else raise NameError.new( "Error: undefined variable load", "load" ) end
            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
          end        ,
      [
          "rfc/json"
      ]
                   )
  end
 )
#--------------------

trampCall( 
  begin #execFunc
      def self._parse_MIMARKyaml_MIMARKstring_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_parse_MIMARKyaml_MIMARKstring', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_parse_MIMARKyaml_MIMARKstring'] = self.method( :_parse_MIMARKyaml_MIMARKstring_METHOD )
    @_parse_MIMARKyaml_MIMARKstring = 
    trampCall(
          Proc.new { |_str| 
              begin
                embedBacktraceInfo( "./lib/nendo/rfc/yaml.nnd", 44 );
                  delayCall( '__PAMARKjson_COMARKhash_MIMARKtable_MIMARK_GTMARKalist',  '%json:hash-table->alist',
                      begin
                        if @global_lisp_binding.has_key?('__PAMARKjson_COMARKhash_MIMARKtable_MIMARK_GTMARKalist') then
                          trampCall(@__PAMARKjson_COMARKhash_MIMARKtable_MIMARK_GTMARKalist)
                        else raise NameError.new( "Error: undefined variable %json:hash-table->alist", "%json:hash-table->alist" ) end
                        rescue => __e ; __e.set_backtrace( ["./lib/nendo/rfc/yaml.nnd:44"] + __e.backtrace ) ; raise __e
                      end                    ,
                  [
                        begin
                            trampCall(YAML).load(
                                  begin
                                      trampCall(_str)
                                    rescue => __e ; __e.set_backtrace( ["./lib/nendo/rfc/yaml.nnd:45"] + __e.backtrace ) ; raise __e
                                  end
                              )
                          rescue => __e ; __e.set_backtrace( ["./lib/nendo/rfc/yaml.nnd:45"] + __e.backtrace ) ; raise __e
                        end
                  ]
                               )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin #execFunc
      def self._parse_MIMARKyaml_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_parse_MIMARKyaml', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_parse_MIMARKyaml'] = self.method( :_parse_MIMARKyaml_METHOD )
    @_parse_MIMARKyaml = 
    trampCall(
          Proc.new { |*__rest__| _io = __rest__[0] ;  
              begin #makeLet
                ___lambda = lambda { |__| 
                    begin #makeLet
                      ___lambda = lambda { |_str| 
                          begin
                            embedBacktraceInfo( "./lib/nendo/rfc/yaml.nnd", 51 );
                              delayCall( '_parse_MIMARKyaml_MIMARKstring',  'parse-yaml-string',
                                  begin
                                    if @global_lisp_binding.has_key?('_parse_MIMARKyaml_MIMARKstring') then
                                      trampCall(@_parse_MIMARKyaml_MIMARKstring)
                                    else raise NameError.new( "Error: undefined variable parse-yaml-string", "parse-yaml-string" ) end
                                    rescue => __e ; __e.set_backtrace( ["./lib/nendo/rfc/yaml.nnd:51"] + __e.backtrace ) ; raise __e
                                  end                                ,
                              [
                                    begin
                                        trampCall(_str)
                                      rescue => __e ; __e.set_backtrace( ["./lib/nendo/rfc/yaml.nnd:51"] + __e.backtrace ) ; raise __e
                                    end
                              ]
                                           )
                          end
                      } ; ___lambda.call(
                            begin
                                trampCall(__).read(
                                  )
                              rescue => __e ; __e.set_backtrace( ["./lib/nendo/rfc/yaml.nnd:50"] + __e.backtrace ) ; raise __e
                            end
                                 )
                    end
                } ; ___lambda.call(
                      begin #makeLet
                        ___lambda = lambda { |___gensym__fe1de47a64bc2c3a16f7b3aea3a8f625d4ab36ee_110172| 
                            if ( 
                              begin
                                embedBacktraceInfo( "", 1 );
                                  _null_QUMARK(
                                      begin
                                          trampCall(___gensym__fe1de47a64bc2c3a16f7b3aea3a8f625d4ab36ee_110172)
                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                      end
                                  )
                              end
                             ) then
                                begin
                                    trampCall(STDIN)
                                  rescue => __e ; __e.set_backtrace( ["./lib/nendo/rfc/yaml.nnd:49"] + __e.backtrace ) ; raise __e
                                end
                            else
                                begin
                                  embedBacktraceInfo( "", 1 );
                                    delayCall( '_car',  'car',
                                        begin
                                          if @global_lisp_binding.has_key?('_car') then
                                            trampCall(@_car)
                                          else raise NameError.new( "Error: undefined variable car", "car" ) end
                                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                    [
                                          begin
                                              trampCall(___gensym__fe1de47a64bc2c3a16f7b3aea3a8f625d4ab36ee_110172)
                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                          end
                                    ]
                                                 )
                                end
                            end
                        } ; ___lambda.call(
                              begin
                                  trampCall(_io)
                                rescue => __e ; __e.set_backtrace( ["./lib/nendo/rfc/yaml.nnd:49"] + __e.backtrace ) ; raise __e
                              end
                                   )
                      end
                           )
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin #execFunc
      def self._construct_MIMARKyaml_MIMARKstring_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_construct_MIMARKyaml_MIMARKstring', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_construct_MIMARKyaml_MIMARKstring'] = self.method( :_construct_MIMARKyaml_MIMARKstring_METHOD )
    @_construct_MIMARKyaml_MIMARKstring = 
    trampCall(
          Proc.new { |_obj| 
              begin
                  trampCall(YAML).dump(
                        begin
                          embedBacktraceInfo( "./lib/nendo/rfc/yaml.nnd", 57 );
                            trampCall( self.__PAMARKjson_COMARKalist_MIMARK_GTMARKhash_MIMARKtable_METHOD(  '%json:alist->hash-table',
                                begin
                                  if @global_lisp_binding.has_key?('__PAMARKjson_COMARKalist_MIMARK_GTMARKhash_MIMARKtable') then
                                    trampCall(@__PAMARKjson_COMARKalist_MIMARK_GTMARKhash_MIMARKtable)
                                  else raise NameError.new( "Error: undefined variable %json:alist->hash-table", "%json:alist->hash-table" ) end
                                  rescue => __e ; __e.set_backtrace( ["./lib/nendo/rfc/yaml.nnd:57"] + __e.backtrace ) ; raise __e
                                end                              ,
                            [
                                  begin
                                      trampCall(_obj)
                                    rescue => __e ; __e.set_backtrace( ["./lib/nendo/rfc/yaml.nnd:57"] + __e.backtrace ) ; raise __e
                                  end
                            ]
                                         ))
                        end
                    )
                rescue => __e ; __e.set_backtrace( ["./lib/nendo/rfc/yaml.nnd:57"] + __e.backtrace ) ; raise __e
              end
          }
    )
  end
 )
#--------------------

trampCall( 
  begin #execFunc
      def self._construct_MIMARKyaml_METHOD( origname, pred, args )   lispMethodEntry( origname, true ) ;   ret = callProcedure( '_construct_MIMARKyaml', origname, pred, args ) ;  lispMethodExit( origname,  true ) ;   return ret end 
      @global_lisp_binding['_construct_MIMARKyaml'] = self.method( :_construct_MIMARKyaml_METHOD )
    @_construct_MIMARKyaml = 
    trampCall(
          Proc.new { |_obj,*__rest__| _io = __rest__[0] ;  
              begin #makeLet
                ___lambda = lambda { |__| 
                    begin
                        trampCall(__).print(
                              begin
                                embedBacktraceInfo( "./lib/nendo/rfc/yaml.nnd", 62 );
                                  trampCall( self._construct_MIMARKyaml_MIMARKstring_METHOD(  'construct-yaml-string',
                                      begin
                                        if @global_lisp_binding.has_key?('_construct_MIMARKyaml_MIMARKstring') then
                                          trampCall(@_construct_MIMARKyaml_MIMARKstring)
                                        else raise NameError.new( "Error: undefined variable construct-yaml-string", "construct-yaml-string" ) end
                                        rescue => __e ; __e.set_backtrace( ["./lib/nendo/rfc/yaml.nnd:62"] + __e.backtrace ) ; raise __e
                                      end                                    ,
                                  [
                                        begin
                                            trampCall(_obj)
                                          rescue => __e ; __e.set_backtrace( ["./lib/nendo/rfc/yaml.nnd:62"] + __e.backtrace ) ; raise __e
                                        end
                                  ]
                                               ))
                              end
                          )
                      rescue => __e ; __e.set_backtrace( ["./lib/nendo/rfc/yaml.nnd:61"] + __e.backtrace ) ; raise __e
                    end
                } ; ___lambda.call(
                      begin #makeLet
                        ___lambda = lambda { |___gensym__fe1de47a64bc2c3a16f7b3aea3a8f625d4ab36ee_110173| 
                            if ( 
                              begin
                                embedBacktraceInfo( "", 1 );
                                  _null_QUMARK(
                                      begin
                                          trampCall(___gensym__fe1de47a64bc2c3a16f7b3aea3a8f625d4ab36ee_110173)
                                        rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                      end
                                  )
                              end
                             ) then
                                begin
                                    trampCall(STDOUT)
                                  rescue => __e ; __e.set_backtrace( ["./lib/nendo/rfc/yaml.nnd:60"] + __e.backtrace ) ; raise __e
                                end
                            else
                                begin
                                  embedBacktraceInfo( "", 1 );
                                    delayCall( '_car',  'car',
                                        begin
                                          if @global_lisp_binding.has_key?('_car') then
                                            trampCall(@_car)
                                          else raise NameError.new( "Error: undefined variable car", "car" ) end
                                          rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                        end                                      ,
                                    [
                                          begin
                                              trampCall(___gensym__fe1de47a64bc2c3a16f7b3aea3a8f625d4ab36ee_110173)
                                            rescue => __e ; __e.set_backtrace( [":1"] + __e.backtrace ) ; raise __e
                                          end
                                    ]
                                                 )
                                end
                            end
                        } ; ___lambda.call(
                              begin
                                  trampCall(_io)
                                rescue => __e ; __e.set_backtrace( ["./lib/nendo/rfc/yaml.nnd:60"] + __e.backtrace ) ; raise __e
                              end
                                   )
                      end
                           )
              end
          }
    )
  end
 )


# -------------------------------------------------------
# [EOF]
# -------------------------------------------------------
