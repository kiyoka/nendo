;;-*- mode: nendo; syntax: scheme -*-;;
;;;
;;; json.nnd - JSON parser and constructor
;;;  
;;;   Copyright (c) 2011  Kiyoka Nishiyama  <kiyoka@sumibi.org>
;;;   
;;;   Redistribution and use in source and binary forms, with or without
;;;   modification, are permitted provided that the following conditions
;;;   are met:
;;;   
;;;   1. Redistributions of source code must retain the above copyright
;;;      notice, this list of conditions and the following disclaimer.
;;;  
;;;   2. Redistributions in binary form must reproduce the above copyright
;;;      notice, this list of conditions and the following disclaimer in the
;;;      documentation and/or other materials provided with the distribution.
;;;  
;;;   3. Neither the name of the authors nor the names of its contributors
;;;      may be used to endorse or promote products derived from this
;;;      software without specific prior written permission.
;;;  
;;;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;;;   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;;;   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;;;   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;;;   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;;;   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
;;;   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;;;   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;;;   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;;;   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;;;   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;;  
;;;  $Id: 
;;;

(require "json")
(require "pp")


;; ------------------------------
(define (%json:hash-table->alist obj)
  (cond
   ((null? obj)
    obj)
   ((vector? obj)
    (list->vector
     (map
      (lambda (x)
        (%json:hash-table->alist x))
      (vector->list obj))))
   ((hash-table? obj)
    (map
     (lambda (entry)
       (cons (car entry)
             (%json:hash-table->alist (cdr entry))))
     (hash-table->alist obj)))
   (else
    obj)))

(define (%json:alist->hash-table obj)
  (cond
   ((null? obj)
    (make-hash-table))
   ((vector? obj)
    (list->vector
     (map
      (lambda (x)
        (%json:alist->hash-table x))
      (vector->list obj))))
   ((pair? obj)
    (alist->hash-table
     (map
      (lambda (entry)
        (cons (car entry)
              (%json:alist->hash-table (cdr entry))))
      obj)))
   (else
    obj)))


;; ------------------------------
;; parser
;; ------------------------------
(define (parse-json-string str)
  (%json:hash-table->alist 
   (JSON.parse str)))

(define (parse-json . io)
  (let* ((_   (get-optional io STDIN))
         (str (_.read)))
    (parse-json-string str)))


;; ------------------------------
;; writer
(define (construct-json-string obj)
  (JSON.dump
   (%json:alist->hash-table obj)))

(define (construct-json obj . io)
  (let1 _ (get-optional io STDOUT)
    (_.print
     (construct-json-string obj))))


;;[EOS]
