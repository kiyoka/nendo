;;-*- mode: nendo-mode; syntax: scheme -*-;;

;; problem
(to-s 'a.size)

(define str "string")
(set! str.size 2)
(+ 1 (. str size))

(define f (Kernel.open "t.txt"))

(for-each
 (lambda (x)
   (print (x.chomp)))
 (f.readlines.to_list))

(f.close)

(require "Date")
(let1 d (Date.new 0)
      (d.strftime "%x"))
((. Date new) 2)



(enable-debug)


(define cond
  (macro lst
    (define (case-block elem . elseblock)
      (let ((condition (if (eq? 'else (car elem))
                           true
                           (car elem)))
            (body      (cdr elem))
            (tmpsym    (gensym)))
        ;;(display "CONDITION") (print condition)
        ;;(display "BODY")      (print body)
        ;;(display "TMPSYM")    (print tmpsym)
        (list 'let (list (list tmpsym condition))
              (append
               (cons 'if
                     (if (eq? 'feedto (car body))
                         (list
                          tmpsym
                          (list (cadr body) tmpsym))
                         (list
                          condition
                          (cons 'begin body))))
               (if (< 0 (length elseblock))
                   elseblock
                   '())))))
    
    (define (cond-iter lst)
      (if (eq? 0 (length lst))
          '()
          (if (eq? 1 (length lst))
              (case-block (car lst) '())
              (case-block (car lst)
                          (cond-iter (cdr lst))))))
    
    (cond-iter lst)))



(macroexpand-1 '
 (cond
  ((eq? 1 1)
   "<1 = 1>")
  (1 => (lambda (x)
          (+ "<" (to_s x) ">")))
  (else
   "<else>")))

(cond
 (false => (lambda (x)
           (+ "<" (to_s x) ">")))
 (false ;; (eq? 1 1)
  (print (+ 1 2))
  (print (+ 3 10)))
 (else
  "<else>"))





