;;-*- mode: nendo; syntax: scheme -*-
;;;
;;; json-test.nnd - test of json.nnd
;;;  
;;;   Copyright (c) 2011  Kiyoka Nishiyama  <kiyoka@sumibi.org>
;;;   
;;;   Redistribution and use in source and binary forms, with or without
;;;   modification, are permitted provided that the following conditions
;;;   are met:
;;;   
;;;   1. Redistributions of source code must retain the above copyright
;;;      notice, this list of conditions and the following disclaimer.
;;;  
;;;   2. Redistributions in binary form must reproduce the above copyright
;;;      notice, this list of conditions and the following disclaimer in the
;;;      documentation and/or other materials provided with the distribution.
;;;  
;;;   3. Neither the name of the authors nor the names of its contributors
;;;      may be used to endorse or promote products derived from this
;;;      software without specific prior written permission.
;;;  
;;;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;;;   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;;;   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;;;   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;;;   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;;;   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
;;;   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;;;   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;;;   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;;;   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;;;   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;;  
;;;  $Id: 
;;;
(use nendo.test)
(use rfc.json)

(test-start "json")

;;===================================================================

;;-------------------------------------------------------------------
(test-section "json parser")

(test* "string (1)"
       '#( "str" )
       (parse-json-string "[\"str\"]"))

(test* "string (2)"
       '#( "Ã" )
       (parse-json-string "[\"Ã\"]"))

(test* "string (3)"
       '#( "Ã" "€" )
       (parse-json-string "[ \"\\u00c3\", \"\\u20ac\" ]"))

(test* "string (4)"
       '#(nil)
       (parse-json-string "[null]"))

(test* "string (4)"
       '#(nil)
       (parse-json-string "[null]"))

(test* "string (5)"
       '#(#t)
       (parse-json-string "[true]"))

(test* "string (6)"
       '#(#f)
       (parse-json-string "[false]"))


(test* "simple object (1)"
       '()
       (hash-table->alist
        (parse-json-string "{}")))
(test* "simple object (2)"
       '()
       (hash-table->alist
        (parse-json-string " {   }   ")))
(test* "simple object (3)"
       '(("a" . 23))
       (hash-table->alist
        (parse-json-string "{ \"a\": 23  } ")))
(test* "simple object (4)"
       '(("a" . 23) ("b" . 45))
       (hash-table->alist
        (parse-json-string "{ \"a\": 23 , \"b\": 45  } ")))

(test* "arrays (1)"
       '#(1 2 3)
       (parse-json-string "[1,2,3]"))
(test* "arrays (2)"
       '#(#() #(#() #()))
       (parse-json-string "[[],[[],[]]]"))
(test* "arrays (3)"
       '#(#(4)
          #(#(5) #(6)))
       (parse-json-string "[[4],[[5],[6]]]"))


;;===================================================================
(test-end)
