;;-*- mode: nendo; syntax: scheme -*-;;
;;
;; record-test.nnd - test suite for util.record
;;  
;;;   Copyright (c) 2014-2014  Kiyoka Nishiyama  <kiyoka@sumibi.org>
;;   
;;   Redistribution and use in source and binary forms, with or without
;;   modification, are permitted provided that the following conditions
;;   are met:
;;   
;;   1. Redistributions of source code must retain the above copyright
;;      notice, this list of conditions and the following disclaimer.
;;  
;;   2. Redistributions in binary form must reproduce the above copyright
;;      notice, this list of conditions and the following disclaimer in the
;;      documentation and/or other materials provided with the distribution.
;;  
;;   3. Neither the name of the authors nor the names of its contributors
;;      may be used to endorse or promote products derived from this
;;      software without specific prior written permission.
;;  
;;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;;   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;;   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;;   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;;   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;;   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
;;   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;;   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;;   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;;   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;;   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

(use nendo.test)
(test-start "record")

;;===================================================================
;;-------------------------------------------------------------------
(test-section "record")
(use util.record)
(test-module 'record)

(test* "make-record-type" "Nendo::Record"
       (. (. (make-record-type "my-record" '(a b c)) class) to_s))

(test* "make-record-type" "my-record"
       (let1 new-record (make-record-type "my-record" '(a b c))
         new-record.typename))

(test* "make-record-type" '(a b c)
       (let1 new-record (make-record-type "my-record" '(a b c))
         (to-list (new-record.slots.keys))))

(test* "make-record-type" "my-record"
       (let1 new-record (make-record-type 'my-record '(a b c))
         new-record.typename))

(define rtd1 (make-record-type "my-record1" '(a b c)))
(define rtd2 (make-record-type "my-record2" '(a b c)))
(define make-my-record (record-constructor rtd1 '(a b c)))

(test* "record-constructor" "Nendo::Record"
       (. (. (make-my-record 1 2 3) class) to_s))

(test* "record-predicate" #t
       ((record-predicate rtd1) rtd1))

(test* "record-predicate" #t
       ((record-predicate rtd1) (make-my-record 1 2 3)))

(test* "record-predicate" #f
       ((record-predicate rtd2) (make-my-record 1 2 3)))

(test* "record-predicate" #f
       ((record-predicate 100) rtd1))

(test* "record-predicate" #f
       ((record-predicate 100) rtd2))

(test* "record-predicate" #f
       ((record-predicate (list 1)) rtd1))

(test* "record-predicate" #f
       ((record-predicate (list 1)) rtd2))


(define obj (make-my-record 10 20 30))

(test* "record-accessor" 10
       ((record-accessor rtd1 'a) obj))

(test* "record-accessor" 20
       ((record-accessor rtd1 'b) obj))

(test* "record-accessor" 30
       ((record-accessor rtd1 'c) obj))

(test* "record-accessor" (test-error ArgumentError)
       ((record-accessor rtd2 'a) obj))

(test* "record-accessor" -1
       (begin
         ((record-modifier rtd1 'a) obj -1)
         ((record-accessor rtd1 'a) obj)))

(test* "record-accessor" '(aa bb cc)
       (begin
         ((record-modifier rtd1 'a) obj '(aa bb cc))
         ((record-accessor rtd1 'a) obj)))

(test* "record-accessor" (test-error ArgumentError)
       ((record-modifier rtd2 'a) obj -1))



;;===================================================================
(test-end)
